(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{153:function(t,r,e){"use strict";e.r(r);var s=e(0),a=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("div",{staticClass:"content"},[e("h3",{attrs:{id:"proto-是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#proto-是什么","aria-hidden":"true"}},[t._v("#")]),t._v(" __proto__ 是什么")]),t._v(" "),e("p",[t._v("__proto__是一个引用类型特有的属性，他的值指向原型。")]),t._v(" "),e("p",[t._v("原型是什么？我的理解是，原型其实就是祖先。一个变量如果有这个属性，说明它继承于某个原型。")]),t._v(" "),e("h3",{attrs:{id:"prototype-是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#prototype-是什么","aria-hidden":"true"}},[t._v("#")]),t._v(" prototype 是什么")]),t._v(" "),e("p",[t._v("prototype是一个函数（普通函数，构造函数或class）的唯一标识。他默认包含__proto__和constructor")]),t._v(" "),e("p",[t._v("可以用如下方式给这个函数添加其它可继承的属性和方法：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("SuperArray.prototype = {\n    getValue: function() {\n        console.log('this.value', this.value)\n    },\n    diff: function(comparisonArray) {\n        const hash = new Set(comparisonArray);\n        return this.filter(elem => !hash.has(elem));\n    }\n}\n")])])]),e("p",[t._v("constructor指向函数本身，即：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("SuperArray.prototype.constructor === SuperArray\n")])])]),e("p",[t._v("需要注意的是，prototype下的属性，引用类型是所有实例共用的，简单类型是不共用的。")]),t._v(" "),e("h3",{attrs:{id:"new-操作符做了什么？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#new-操作符做了什么？","aria-hidden":"true"}},[t._v("#")]),t._v(" new 操作符做了什么？")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class SuperArray extends Array {\n    constructor() {\n        super()\n        this.config = {\n            name: 'Jack',\n            age: '12'\n        }\n    }\n    getValue() {\n        console.log('this.config', this.config)\n    }\n    diff(comparisonArray) {\n        const hash = new Set(comparisonArray);\n        return this.filter(elem => !hash.has(elem));\n    }\n}\nconst sArray1 = new SuperArray()\nconsole.log('sArray1', sArray1)\n\n// 输入结果：\nsArray1 -> SuperArray:\nconfig: {name: \"Jack\", age: \"12\"}\nlength: 0\n__proto__: Array\n")])])]),e("p",[t._v("其实new 只做了4件事：")]),t._v(" "),e("ol",[e("li",[t._v("let obj = {}")]),t._v(" "),e("li",[t._v("obj.__proto__ = SuperArray.prototype")]),t._v(" "),e("li",[t._v("SuperArray.call(obj)")]),t._v(" "),e("li",[t._v("返回obj")])]),t._v(" "),e("h3",{attrs:{id:"extends-做了什么？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#extends-做了什么？","aria-hidden":"true"}},[t._v("#")]),t._v(" extends 做了什么？")]),t._v(" "),e("p",[t._v("我们回看上面的类SuperArray继承于Array，输出SuperArray.prototype看下：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("console.log('SuperArray.prototype', SuperArray.prototype)\n\n// 输出结果：\nSuperArray.prototype -> Array:\nconstructor: class SuperArray\n    arguments: (...)\n    caller: (...)\n    length: 0\n    name: \"SuperArray\"\n    prototype: Array {constructor: ƒ, getValue: ƒ, diff: ƒ}\n    Symbol(Symbol.species): (...)\n    __proto__: ƒ Array()\n    [[FunctionLocation]]: index.html:47\n    [[Scopes]]: Scopes[2]\ndiff: diff(comparisonArray) { const hash = new Set(comparisonArray); return this.filter(elem => {…}\ngetValue: ƒ getValue()\n__proto__: Array(0)\n")])])]),e("p",[t._v("extends做了以下事情：")]),t._v(" "),e("ol",[e("li",[t._v("初始化constructor")]),t._v(" "),e("li",[t._v("设置prototype为父类的prototype（原型继承，不能直接赋值，否则无法实现继承关系）")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function extend(subClass, superClass) {\n  var F = function() {};\n  F.prototype = superClass.prototype;\n  subClass.prototype = new F();\n\n  subClass.superclass = superClass.prototype;\n  if(superClass.prototype.constructor == Object.prototype.constructor) {\n    superClass.prototype.constructor = superClass;\n  }\n}\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[t._v("设置prototype的属性constructor为SuperArray。__proto__为Function.prototype（构造函数的原型是Function）。设置自定义属性和方法。")])]),t._v(" "),e("h5",{attrs:{id:"proto-array-0-代表着什么？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#proto-array-0-代表着什么？","aria-hidden":"true"}},[t._v("#")]),t._v(" "),e("strong",[t._v("proto")]),t._v(": Array(0)代表着什么？")]),t._v(" "),e("h3",{attrs:{id:"extends的实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#extends的实现","aria-hidden":"true"}},[t._v("#")]),t._v(" extends的实现")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function extend(subClass, superClass) {\n  var F = function() {};\n  F.prototype = superClass.prototype;\n  subClass.prototype = new F();\n  subClass.prototype.constructor = subClass\n  subClass.prototype.sayName = function(){\n    alert(this.name);\n  };\n  subClass.superclass = superClass.prototype;\n  if(superClass.prototype.constructor == Object.prototype.constructor) {\n    superClass.prototype.constructor = superClass;\n  }\n}\n")])])]),e("h3",{attrs:{id:"instanceof到底做了什么事？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#instanceof到底做了什么事？","aria-hidden":"true"}},[t._v("#")]),t._v(" instanceof到底做了什么事？")]),t._v(" "),e("p",[t._v("instanceof实际上是拿变量的__proto__.__proto__....和被对比的构造函数的prototype做===（全等）比较")]),t._v(" "),e("p",[t._v("参考：\nhttps://segmentfault.com/q/1010000012185778")]),t._v(" "),e("p",[t._v("https://juejin.im/post/58f94c9bb123db411953691b#heading-5")]),t._v(" "),e("p",[t._v("https://juejin.im/entry/58f62135a22b9d006c0cee45")]),t._v(" "),e("p",[t._v("https://juejin.im/post/5b729c24f265da280f3ad010")])])}],!1,null,null,null);r.default=a.exports}}]);