{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/images/avator.jpg","path":"images/avator.jpg","modified":0,"renderable":0},{"_id":"source/images/logo.favicon.big.png","path":"images/logo.favicon.big.png","modified":0,"renderable":0},{"_id":"source/images/logo.favicon.png","path":"images/logo.favicon.png","modified":0,"renderable":0},{"_id":"source/images/logo.png","path":"images/logo.png","modified":0,"renderable":0},{"_id":"node_modules/hexo-theme-icarus/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/favicon.svg","path":"img/favicon.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/logo.svg","path":"img/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/og_image.png","path":"img/og_image.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-bottom-black.svg","path":"img/razor-bottom-black.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-top-black.svg","path":"img/razor-top-black.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/animation.js","path":"js/animation.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/back_to_top.js","path":"js/back_to_top.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/column.js","path":"js/column.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/css/cyberpunk.styl","path":"css/cyberpunk.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/css/default.styl","path":"css/default.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"source/images/2019021401.png","path":"images/2019021401.png","modified":1,"renderable":0},{"_id":"source/images/2019021402.png","path":"images/2019021402.png","modified":1,"renderable":0},{"_id":"source/images/2019051301.svg","path":"images/2019051301.svg","modified":1,"renderable":0},{"_id":"source/images/2019060101.jpeg","path":"images/2019060101.jpeg","modified":1,"renderable":0},{"_id":"source/images/2019060102.png","path":"images/2019060102.png","modified":1,"renderable":0},{"_id":"source/images/2019060103.png","path":"images/2019060103.png","modified":1,"renderable":0},{"_id":"source/images/2019060301.png","path":"images/2019060301.png","modified":1,"renderable":0},{"_id":"source/images/2019060501.png","path":"images/2019060501.png","modified":1,"renderable":0},{"_id":"source/images/2019060503.png","path":"images/2019060503.png","modified":1,"renderable":0},{"_id":"source/images/2019061301.png","path":"images/2019061301.png","modified":1,"renderable":0},{"_id":"source/images/2019060502.png","path":"images/2019060502.png","modified":1,"renderable":0},{"_id":"source/images/2019061303.png","path":"images/2019061303.png","modified":1,"renderable":0},{"_id":"source/images/2019061302.png","path":"images/2019061302.png","modified":1,"renderable":0},{"_id":"source/images/2019061304.png","path":"images/2019061304.png","modified":1,"renderable":0},{"_id":"source/images/2019071701.jpeg","path":"images/2019071701.jpeg","modified":1,"renderable":0},{"_id":"source/images/2019072201.jpeg","path":"images/2019072201.jpeg","modified":1,"renderable":0},{"_id":"source/images/2019072202.jpeg","path":"images/2019072202.jpeg","modified":1,"renderable":0},{"_id":"source/images/2019090101.jpg","path":"images/2019090101.jpg","modified":1,"renderable":0},{"_id":"source/images/2019090102.png","path":"images/2019090102.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/categories/index.md","hash":"b321b0994b3f96d6e2132dcdfb404837e6c9aafd","modified":1622357746380},{"_id":"source/.DS_Store","hash":"1e2f63aa66843b0e1948d628e9c8e3be2c36ec9b","modified":1622468238359},{"_id":"source/images/avator.jpg","hash":"8e0f9e026833643b9fa048580ec6008f692ec148","modified":1622421648603},{"_id":"source/images/logo.favicon.png","hash":"bdfa37cdbecd6a29fb07322aedd02a9c0aedadcb","modified":1622468285636},{"_id":"source/images/logo.favicon.big.png","hash":"e15bdedba379bd1746757c6bf611b4a68fd5b445","modified":1622468218804},{"_id":"source/_posts/blogs/code-clean.md","hash":"90defd8cbda5e57752db221abdfec059a1e3e98d","modified":1622420940371},{"_id":"source/_posts/blogs/flex-layout.md","hash":"ee92fbb80cf536632671ee65e4c3d877a732492e","modified":1622420954072},{"_id":"source/images/logo.png","hash":"6c1283a23bc7bdb99e57c0a0c3a57a1f776a6bb0","modified":1622467954448},{"_id":"source/_posts/blogs/https-through-fiddler.md","hash":"1480436bd63bc97dc0f439b7bdeac33ae4493a6d","modified":1622470538835},{"_id":"source/_posts/blogs/https.md","hash":"1bfab40d934258fa6c386ff34c1f110a001e4011","modified":1622470538835},{"_id":"source/_posts/blogs/linux-command.md","hash":"dc97a2ec6c1794607a151cfeb68fe533b50f4103","modified":1622470538835},{"_id":"source/_posts/blogs/in-operator.md","hash":"20cb9b6eba2c998b95a0774c0225a83a61237095","modified":1622421006373},{"_id":"source/_posts/blogs/print.md","hash":"4cf6aaf556038d14006121743e4632d744de0600","modified":1622421060002},{"_id":"source/_posts/blogs/meta.md","hash":"e35c4177cb6791fe1f311d82c090b8ee6f11b619","modified":1622421050580},{"_id":"source/_posts/blogs/property-attribute.md","hash":"c9be60e40ba6e999e49e3a33cd8091ba92654df7","modified":1622421081300},{"_id":"source/_posts/blogs/proxy-reflect.md","hash":"6c1a3e29660b7061adb81e8045ac3ba29ed49fb2","modified":1622470538835},{"_id":"source/_posts/blogs/proxy.md","hash":"36ef99010c9cf029a3216a3c8c7acbcea660c10b","modified":1622470538835},{"_id":"source/_posts/blogs/regexpression.md","hash":"83042a04ce6e6c3a3e7666a25d82f35744c56172","modified":1622421126756},{"_id":"source/_posts/blogs/save-base64.md","hash":"f8a92d0e8f0d5fecda1151740a606b57e4d12a2b","modified":1622420847882},{"_id":"source/_posts/nuxt/navigator.md","hash":"3125417b36e39a8bbc3ed9c8fd6834b767a06ef8","modified":1622421151912},{"_id":"source/_posts/think/fanganfenxi.md","hash":"047c3a49c77ba7be023e4be5a5e5dbd4bc274d62","modified":1622421162483},{"_id":"source/_posts/think/manage-time.md","hash":"d91d58f5a410e3a34fc04a0a83191ce94d362ade","modified":1622421177788},{"_id":"source/_posts/tools/fiddler-debug-online.md","hash":"5b78901f867cbe955b657a195aa072d94f1207d7","modified":1622470538835},{"_id":"source/_posts/tools/git.md","hash":"1d46fd9a09378860e0365ea8e699c32786e01d6d","modified":1622421214776},{"_id":"source/_posts/tools/pipeline-groovy.md","hash":"df1d63794989f5e86dbdeb26d7eb1ef70c71cdb4","modified":1622421244547},{"_id":"source/_posts/uni-app/h5-tree-shaking.md","hash":"77abe2cf0c0f0e622210545d5da3428848780130","modified":1622421249779},{"_id":"source/_posts/tools/charles-rewrite-header.md","hash":"66be2bf4d1cf243e098e5e70f7f3140b50e9f95b","modified":1622470540440},{"_id":"source/_posts/vue/node-reuse.md","hash":"3fcd6060f17c70c62b5491d3ca35777c8cb302ac","modified":1622421289726},{"_id":"source/_posts/vue/define-property.md","hash":"d3f0911c2d49968df2594b90201410f280d9e109","modified":1622470538832},{"_id":"source/_posts/vue/mount-flow.md","hash":"ccbd6e83a91c31944c55f24394e1ffe7cb1bf2f6","modified":1622470538835},{"_id":"source/_posts/vue/vue-error.md","hash":"a2f55399a871f951e494cdbdb70d8f518d869144","modified":1622421299786},{"_id":"source/_posts/vue/vue-runtime-compile.md","hash":"ce0010e02d1cca37fc3e249ba5e2183c7c4e1fde","modified":1622421308099},{"_id":"source/_posts/webpack/cdn-switch.md","hash":"1ee404122e037476093dc86fef0b9bf5f59a1f14","modified":1622421324159},{"_id":"node_modules/hexo-theme-icarus/layout/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/package.json","hash":"6842501b858e51ddb7f5c5a4fe9bf2942e2d0977","modified":1622358192576},{"_id":"node_modules/hexo-theme-icarus/include/config.js","hash":"1ff0f174e9670074ad2bee890d5b6da486800c9a","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/dependency.js","hash":"d30dbcefd58619f6705d6369b644bc7ba44d2421","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/CONTRIBUTING.md","hash":"70254c6778c1e41bb2ff222bbf3a70b2239b9bc1","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/LICENSE","hash":"86037e5335a49321fa73b7815cab542057fac944","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/register.js","hash":"a974b56a1fbb254f1ae048cc2221363faaccec25","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/README.md","hash":"247ec8047ee3105d31099dd8e6ca498b6bff1336","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/de.yml","hash":"01d9c27c3c9224d8c58b1cf7099ef008b9411a45","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/fr.yml","hash":"14765cc6216b4af5a05341315c9f6ee54d636a78","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/es.yml","hash":"48fe3d7d304239b5e5e93f63600093700d6f0fed","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/en.yml","hash":"1bdb74288808c4d306b46630860e586a1fcd88a7","modified":1622469674193},{"_id":"node_modules/hexo-theme-icarus/languages/id.yml","hash":"c04fca89e536d539a8bf95980bff7dff79125ba3","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/ko.yml","hash":"f2211a8ca1d73f05a1c931aa11accb4e34c483c4","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/pl.yml","hash":"612639b0e0a15185c12eecfe3e8913b629ecdfdf","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/ja.yml","hash":"7568f246a21813527ccea8a1da72a9526aa2d233","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/pt-BR.yml","hash":"531b22c71fab8aae60ddc7599aaa5f46140cf2c1","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/ru.yml","hash":"bf784c6f31e8fb7ed78509468bddecd447c3b73b","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/tr.yml","hash":"96d94f7a5d56b2682ae2792f0808139d4b950704","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/tk.yml","hash":"e5b9b369bbcf90c199a65a877eb75fba05cd7f90","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/vn.yml","hash":"64307bfa16d851334e2f37a29a84d644624c2060","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/zh-TW.yml","hash":"92f8cf599ad06bb14f79f4806ac4c695f60044d7","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/zh-CN.yml","hash":"82ff607b1671b88d259d10b6ce8ca1bb05b2cff4","modified":1622469846681},{"_id":"node_modules/hexo-theme-icarus/layout/archive.jsx","hash":"05677e93d4a43f417dbbf0d63ca37a99e6349e3b","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/categories.jsx","hash":"b8ad43e28a4990d222bfbb95b032f88555492347","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/category.jsx","hash":"fd15e4eac32de9ac8687aeb3dbe179ab61375700","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/index.jsx","hash":"0a84a2348394fa9fc5080dd396bd28d357594f47","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/layout.jsx","hash":"a5829907b219e95266f7ed5ee6203e60e2273f93","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/post.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/page.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/scripts/index.js","hash":"0c666db6fcb4ffc4d300f4e108c00ee42b1cbbe6","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/migration/head.js","hash":"269ba172013cbd2f10b9bc51af0496628081329b","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/migration/v3_v4.js","hash":"9faf2184d7fe87debfbe007f3fc9079dcbcafcfe","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/tag.jsx","hash":"d2f18cac32ca2725d34ccff3f2051c623be6c892","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/config.json","hash":"ac633f9d349bca4f089d59d2c3738b57376f1b31","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/tags.jsx","hash":"2c42cb64778235dd220c563a27a92108ddc50cc4","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/migration/v2_v3.js","hash":"3ccb2d2ce11018bebd7172da66faecc3983bff00","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/util/console.js","hash":"59cf9d277d3ac85a496689bd811b1c316001641d","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/article.styl","hash":"580b1e9bd356ed6781c32ccc49c6fa3486b94620","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/base.styl","hash":"2bca6ad099949d52236c87db8db1002ffb99774c","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/button.styl","hash":"0fb35b4786be1b387c751fa2849bc71523fcedd4","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/card.styl","hash":"f78674422eb408cd17c17bbdc3ee1ebe4a453e05","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/codeblock.styl","hash":"30bee4cf6792e9665eb648cc20b352d9eaff1207","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/donate.styl","hash":"8d0af00628c13134b5f30a558608e7bebf18c2ec","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/footer.styl","hash":"a4ad715dee38b249538ac6cce94efc9b355a904b","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/helper.styl","hash":"9f3393e6122cc9f351091bfab960674e962da343","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/navbar.styl","hash":"ecc73c8ad504c0fa4bb910eb51500c14e0a8d662","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/plugin.styl","hash":"679b61b5fc5b3281735a21c37aeb64229d9c51ea","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/pagination.styl","hash":"b81bcd7ff915b4e9299533addc01bc4575ec35e3","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/responsive.styl","hash":"207083fe287612cddee6608b541861b14ac8de81","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/search.styl","hash":"416737e1da4e7e907bd03609b0fee9e2aacfe56c","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/timeline.styl","hash":"ea61798a09bffdda07efb93c2ff800b63bddc4c4","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/widget.styl","hash":"c746902251136544eb3fe523235b3183f4189460","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/comment.jsx","hash":"427089c33002707b76e2f38709459a6824fd0f9b","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/donates.jsx","hash":"889fb0a7ccc502f0a43b4a18eb330e351e50493c","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/article.jsx","hash":"16513ab1745533d0f4cdbdee323339ebab6d02c1","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/footer.jsx","hash":"baa8e40e036a3ec0114d96893b708435104b4ba9","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/head.jsx","hash":"37f2f2efcb102c706e2460dc9cdeaa302366d318","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/plugins.jsx","hash":"f6826c1a5f5f59f4a0aa00c63bdb0ad4ff4eab69","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/scripts.jsx","hash":"0fe1fddab431fb9f63906d8c480d5cd6b33abc32","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/navbar.jsx","hash":"fcd9fd4624dee49207ef09ea2a1c63f524f3710c","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/search.jsx","hash":"6f244a37293031670a2964fe424ecd062e591d7b","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/share.jsx","hash":"c9fb0319ad5e5a10ad3636b26a6c2afed14c590f","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/widgets.jsx","hash":"689cf4a6b79337b11d1d56afa9dda09223a809a1","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/plugin/animejs.jsx","hash":"e2aa27c3501a58ef1e91e511557b77395c2c02aa","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/plugin/back_to_top.jsx","hash":"7fc0c5aaabd7d0eaff04cb68ec139442dc3414e8","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/widget/profile.jsx","hash":"0d3a7fd922c12cc45d2c8d26a8f4d3a9a6ed0ae0","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/js/animation.js","hash":"12cedd5caaf9109eed97e50eeab8f883f6e49be3","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/js/main.js","hash":"13e4b1c4fa287f3db61aae329ad093a81992f23d","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/article.json","hash":"8d78149f44629d0848921c6fb9c008b03cef3116","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/comment.json","hash":"bd30bd9ffc84e88e704384acdfcaab09019a744f","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/donates.json","hash":"ae86e6f177bedf4afbe638502c12635027539305","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/css/cyberpunk.styl","hash":"ae17d3528df0c3f089df14a06b7bd82f1bc5fed9","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/footer.json","hash":"09d706cbb94d6da9a0d15c719ce7139325cae1c7","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/head.json","hash":"98889f059c635e6bdbd51effd04cf1cf44968a66","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/navbar.json","hash":"6691e587284c4cf450e0288680d5ff0f3565f090","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/providers.json","hash":"97ec953d497fb53594227ae98acaef8a8baa91da","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/plugins.json","hash":"6036a805749816416850d944f7d64aaae62e5e75","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/search.json","hash":"985fbcbf47054af714ead1a124869d54f2a8b607","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/share.json","hash":"cf4f9ff4fb27c3541b35f57db355c228fa6873e4","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/sidebar.json","hash":"eb241beaec4c73e3085dfb3139ce72e827e20549","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/widgets.json","hash":"d000b4d1d09bdd64756265aa4cd2ea980ab7ddc7","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/plugin/animejs.json","hash":"e62ab6e20bd8862efa1ed32e7c0db0f8acbcfdec","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/plugin/back_to_top.json","hash":"dc0febab7e7b67075d0ad3f80f5ec8b798b68dea","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/css/default.styl","hash":"b01da3028e5a1267a40aaae5c86a11187a2259e3","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/css/style.styl","hash":"5b9815586e993a6ccbe8cdcfc0c65ea38fc315ac","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/widget/profile.json","hash":"690ee1b0791cab47ea03cf42b5b4932ed2aa5675","modified":499162500000},{"_id":"public/js/algolia.js","hash":"a8df0c0abeeb4ee1d2d720161f3aea7339380704","modified":1622469904194},{"_id":"public/js/google_cse.js","hash":"1a9881669dfdeb2b3214074eee0d3e01e52db2c4","modified":1622469904194},{"_id":"public/js/insight.js","hash":"86bbdb7305d9bf19ad62d2ca2cf169fc8d9f9d31","modified":1622469904194},{"_id":"public/js/toc.js","hash":"da6fb757a1b083b8ed138bf29aad3a7bf8ec4f11","modified":1622469904194},{"_id":"public/content.json","hash":"c6f309c781aa8d0fab92132fa3b28e366f3e2867","modified":1622469904194},{"_id":"public/manifest.json","hash":"0b41515bdec5d5b29f13f5d431a58c105806f5c5","modified":1622469904194},{"_id":"public/categories/index.html","hash":"7e6376d4e0dc0024f2fb2f52604219053e8c1af4","modified":1622469904194},{"_id":"public/2021/05/27/webpack/cdn-switch/index.html","hash":"3e7cc4d2b7ef9efd7d08f4d81ed0b74639e6ba7c","modified":1622469904194},{"_id":"public/2021/05/10/think/fanganfenxi/index.html","hash":"9a4499c2397b0dc1b7c13aa72d8df9e928e72b6f","modified":1622469904194},{"_id":"public/2021/05/10/uni-app/h5-tree-shaking/index.html","hash":"0e78317d055cc963082096515a4327a1f773946b","modified":1622469904194},{"_id":"public/2021/04/30/tools/pipeline-groovy/index.html","hash":"720e3907178a4c80b9de1379aa6794f08b492d0d","modified":1622469904194},{"_id":"public/2020/10/02/blogs/https/index.html","hash":"8488af13145806c7a4b13b4158207152dfb5de6e","modified":1622469904194},{"_id":"public/2020/10/01/blogs/https-through-fiddler/index.html","hash":"bc1e7d4c81746916ace62df45511efe66d2d29dc","modified":1622469904194},{"_id":"public/2020/08/25/vue/node-reuse/index.html","hash":"99d404327fb330f5a96dd829791b59a522e80881","modified":1622469904194},{"_id":"public/2020/08/01/vue/vue-runtime-compile/index.html","hash":"cefaa49789fc11dd1b845c568373b368b6679f1a","modified":1622469904194},{"_id":"public/2020/07/09/vue/vue-error/index.html","hash":"c7e3543d05ddadf9b95be23f3452feb5b81566ac","modified":1622469904194},{"_id":"public/2020/05/08/blogs/save-base64/index.html","hash":"73655817b71d2c50cedb793466b73c19fa5a7472","modified":1622469904194},{"_id":"public/2020/04/02/vue/mount-flow/index.html","hash":"a92e339f310bebc2defac800da4c81e1040e58e1","modified":1622469904194},{"_id":"public/2020/03/20/blogs/in-operator/index.html","hash":"b6867bb89a2435c00cbfb3d937f040c923ecd483","modified":1622469904194},{"_id":"public/2020/03/17/blogs/proxy/index.html","hash":"380d5b6403cdec58efce6808c6e5aab8e4361110","modified":1622469904194},{"_id":"public/2020/03/15/blogs/proxy-reflect/index.html","hash":"e93cb400ec4d1f9dc96c4d45797e3d09be6a49f4","modified":1622469904194},{"_id":"public/2020/02/02/tools/fiddler-debug-online/index.html","hash":"c8a9708bf63c1cf5da1c8c4d22462557e6108646","modified":1622469904194},{"_id":"public/2020/02/01/tools/charles-rewrite-header/index.html","hash":"84818ea547768db60118c544235097a557058741","modified":1622469904194},{"_id":"public/2020/01/20/nuxt/navigator/index.html","hash":"790a5bb3a0dbdc3c04b7857214b9fa5b2f2a37c5","modified":1622469904194},{"_id":"public/2019/12/06/blogs/linux-command/index.html","hash":"54ba37cd8527f4e2af1ab02f4aa6be4f04ce0360","modified":1622469904194},{"_id":"public/2019/12/01/tools/git/index.html","hash":"7bc186da1d718d7edd29f671d46540e1f65067ac","modified":1622469904194},{"_id":"public/2019/11/03/vue/define-property/index.html","hash":"33f2bcdb6a60287e935e2c63434a3691eb4569e2","modified":1622469904194},{"_id":"public/2019/08/20/blogs/print/index.html","hash":"5671df7ad4a9b43a79d04714c9af55a7b40c3712","modified":1622469904194},{"_id":"public/2019/05/29/blogs/meta/index.html","hash":"0b069f0cf63481dd9b6031a2d20f89eba5b94dca","modified":1622469904194},{"_id":"public/2019/05/10/blogs/flex-layout/index.html","hash":"6fa7b5684c2e62c2554ef2bb547217c5df6e8cbf","modified":1622469904194},{"_id":"public/2019/04/16/blogs/regexpression/index.html","hash":"15b9e6e23b8f361d05ec749fb75dbd9092270b5e","modified":1622469904194},{"_id":"public/2019/04/09/think/manage-time/index.html","hash":"984c8b538feefc34dd33bee106b29066dd5dbc00","modified":1622469904194},{"_id":"public/2019/02/04/blogs/code-clean/index.html","hash":"db1c61d230209f4464fd782f29aaa0dfc1fc294f","modified":1622469904194},{"_id":"public/2018/07/03/blogs/property-attribute/index.html","hash":"25979de34806022c66953e9ef83c5f95900e5071","modified":1622469904194},{"_id":"public/archives/index.html","hash":"2081cbbbb1bd151263202e518d11f83402395b73","modified":1622469904194},{"_id":"public/archives/page/2/index.html","hash":"41c3dcbef4a1bef8622762da276ea5326ce3fadc","modified":1622469904194},{"_id":"public/archives/page/3/index.html","hash":"a799f460a29847d309378ff813dc5e6fc1573f1d","modified":1622469904194},{"_id":"public/archives/2018/index.html","hash":"61198b82a65dd19a919956cf183678df9689faaa","modified":1622469904194},{"_id":"public/archives/2018/07/index.html","hash":"55f0577a847cafcd216b001f44a5fae57fb99bfd","modified":1622469904194},{"_id":"public/archives/2019/index.html","hash":"e3d7179606e748a9b38e2c9eef39867cf5a4b940","modified":1622469904194},{"_id":"public/archives/2019/02/index.html","hash":"e36c016bdda7d598d8d33107eb931256e19edb85","modified":1622469904194},{"_id":"public/archives/2019/04/index.html","hash":"2b4b2685c47b7ee4ee2c350d8075f7da04391281","modified":1622469904194},{"_id":"public/archives/2019/05/index.html","hash":"610467304cab25f95549b64c9c9e5b624c580362","modified":1622469904194},{"_id":"public/archives/2019/08/index.html","hash":"4b5224bbdbec5dad61ad437c7abe59b2ee584188","modified":1622469904194},{"_id":"public/archives/2019/11/index.html","hash":"5887ab457a7b36c603ede405b5264a76be3b81d2","modified":1622469904194},{"_id":"public/archives/2019/12/index.html","hash":"418feab3333e63c1c1f97beaabd4d4ce1c1a26b0","modified":1622469904194},{"_id":"public/archives/2020/index.html","hash":"24efb774b55bda86aa2a24d041b836314c469a6e","modified":1622469904194},{"_id":"public/archives/2020/page/2/index.html","hash":"7f1c36382c6a620098ee3547e0ae7dbac47d30dd","modified":1622469904194},{"_id":"public/archives/2020/01/index.html","hash":"c1c4502de8aaf82827b2ef2c77cc48f20a5263cc","modified":1622469904194},{"_id":"public/archives/2020/02/index.html","hash":"22b3027b2d9a982eb6d3fd792d8746560b5beb06","modified":1622469904194},{"_id":"public/archives/2020/03/index.html","hash":"a88a6b4857bc2dd0dfcb509b445d52d9f23f01d1","modified":1622469904194},{"_id":"public/archives/2020/04/index.html","hash":"5ff7a2ec4d710bda1e404a856616fc6bf5e9da62","modified":1622469904194},{"_id":"public/archives/2020/05/index.html","hash":"8ad6d3e6dbff0651e948516af8d18a8e6975d755","modified":1622469904194},{"_id":"public/archives/2020/07/index.html","hash":"746d477e031678b1d2c1106afd062ba55cbfd11d","modified":1622469904194},{"_id":"public/archives/2020/08/index.html","hash":"e5a0188f4ab64dbc806b4823b549d2e65e815eae","modified":1622469904194},{"_id":"public/archives/2020/10/index.html","hash":"c966e51cd68de926bc02733b180ec66b434b9271","modified":1622469904194},{"_id":"public/archives/2021/index.html","hash":"b6bffb054cc227b1747fb9c2d25cc415d25a4302","modified":1622469904194},{"_id":"public/archives/2021/04/index.html","hash":"768c022f5510070d1dbfe2a91911659ef5d20f31","modified":1622469904194},{"_id":"public/archives/2021/05/index.html","hash":"7bb304a1b8a26a30745b1ebc3a17019cc0074fbb","modified":1622469904194},{"_id":"public/categories/通用/index.html","hash":"16b05b362025c379c84dd3eb431273124b799f3e","modified":1622469971216},{"_id":"public/categories/css/index.html","hash":"d2d53e0362a2964243d07ca8f3058d55246f8257","modified":1622469971216},{"_id":"public/categories/工具/index.html","hash":"c3d60f2668fef5e5ae76cfd4f1bcd83938d2a25f","modified":1622469971216},{"_id":"public/categories/网络/index.html","hash":"874a6fdc782e239a0bd5a149a18951aae975f333","modified":1622469971216},{"_id":"public/categories/linux/index.html","hash":"1e1ee8270bd9f01ca2b6d2cd12896d8c4ae8ab13","modified":1622469971216},{"_id":"public/categories/H5/index.html","hash":"cbfa16129bed97dbd7dc562f3de00b5ba3ec577b","modified":1622469971216},{"_id":"public/categories/js/index.html","hash":"0c746155a82b8781019f86e85498415db0c2f16c","modified":1622469971216},{"_id":"public/categories/html/index.html","hash":"b05141ee5f2df6d0d25a9ee2f9e24b4a2125cb48","modified":1622469971216},{"_id":"public/categories/nuxt/index.html","hash":"2b1b11866ce010468b82d5d3d34e3323a4267790","modified":1622469971216},{"_id":"public/categories/思考/index.html","hash":"38cb1bfb598d166f93462c036c83700c20a2e999","modified":1622469971216},{"_id":"public/categories/uni-app/index.html","hash":"1b67ed0a3aca6a8abcc8e18d6782bea032c204a1","modified":1622469971216},{"_id":"public/categories/vue/index.html","hash":"d44b2097da1a13a41b569b618799ffce070dd561","modified":1622469971216},{"_id":"public/categories/webpack/index.html","hash":"4ad57310f2c73201a9e5f73a6813a8ff53fd20ad","modified":1622469971216},{"_id":"public/index.html","hash":"9fa9766a2574c35cc2ef92548b477390fcf3b3cb","modified":1622469971216},{"_id":"public/page/2/index.html","hash":"feca8c6f4333c1ea88e7c01fe384310614220a15","modified":1622469971216},{"_id":"public/page/3/index.html","hash":"4ef5f5c6a60835aa8b08e8a544073c4342ea9f57","modified":1622469971216},{"_id":"public/tags/index.html","hash":"3fa9485be1cab94d8f2ee4aca73597cd33ba4653","modified":1622469904194},{"_id":"public/images/logo.favicon.png","hash":"bdfa37cdbecd6a29fb07322aedd02a9c0aedadcb","modified":1622469904194},{"_id":"public/images/avator.jpg","hash":"8e0f9e026833643b9fa048580ec6008f692ec148","modified":1622469904194},{"_id":"public/images/logo.favicon.big.png","hash":"e15bdedba379bd1746757c6bf611b4a68fd5b445","modified":1622469904194},{"_id":"public/images/logo.png","hash":"6c1283a23bc7bdb99e57c0a0c3a57a1f776a6bb0","modified":1622469904194},{"_id":"public/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1622469904194},{"_id":"public/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1622469904194},{"_id":"public/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1622469904194},{"_id":"public/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1622469904194},{"_id":"public/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1622469904194},{"_id":"public/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1622469904194},{"_id":"public/js/animation.js","hash":"12cedd5caaf9109eed97e50eeab8f883f6e49be3","modified":1622469904194},{"_id":"public/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1622469904194},{"_id":"public/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1622469904194},{"_id":"public/js/main.js","hash":"13e4b1c4fa287f3db61aae329ad093a81992f23d","modified":1622469904194},{"_id":"public/css/default.css","hash":"d1be246b56d96525ef38324dd769a4d70b932124","modified":1622469904194},{"_id":"public/css/cyberpunk.css","hash":"33cb6e6c54af1717a2447f527d0ccf1a06502cb1","modified":1622469904194},{"_id":"public/css/style.css","hash":"d1be246b56d96525ef38324dd769a4d70b932124","modified":1622469904194},{"_id":"source/images/2019051301.svg","hash":"1b7c84ae93ff0179d88cb714ac95992a856c4164","modified":1622470617298},{"_id":"source/images/2019021402.png","hash":"02093e5fdf9d650688ea9daad9f781e781771a38","modified":1622470617254},{"_id":"source/images/2019060501.png","hash":"cdeebe77a3b3f1a52f9662d8cb4e5a757fd17bd1","modified":1622470617476},{"_id":"source/images/2019060502.png","hash":"f7350efafb3b4b2fc73c42eb0567a1afd0322efc","modified":1622470617520},{"_id":"source/images/2019060503.png","hash":"fdcc2af5b03d9afeac00a41a6a3271cf38eab097","modified":1622470617553},{"_id":"source/images/2019061303.png","hash":"0c7681ed464f7b9e479ab58004fbc0b5d878bb30","modified":1622470617654},{"_id":"source/images/2019061304.png","hash":"9af557806916e71fb4b232a909067218ca2a56e3","modified":1622470617696},{"_id":"source/images/2019072201.jpeg","hash":"2e2fcc7a3561d97ff664ed10e0d3f3ed29d9ee1d","modified":1622470617759},{"_id":"source/images/2019072202.jpeg","hash":"86bb28cc80dac8d3e5e099b7871366d07e135ddb","modified":1622470617785},{"_id":"source/images/2019071701.jpeg","hash":"5db3461acfde212aec32a8a17c9160539069fe47","modified":1622470617729},{"_id":"source/images/2019021401.png","hash":"2d49d70b32443293192bd4987d5d5b2b9e06b043","modified":1622470617119},{"_id":"source/images/2019060103.png","hash":"e006aaa9b84ca083eb0883bf1da2094868e3a800","modified":1622470617395},{"_id":"source/images/2019060301.png","hash":"13c2ba79869461361cfb2a70e6efbaee2a32f481","modified":1622470617437},{"_id":"source/images/2019061301.png","hash":"5709f5d12881cb9ee269361b36f4968c7d070cf3","modified":1622470617587},{"_id":"source/images/2019061302.png","hash":"c8e390dad0e76b1fc5eff332a77456d0e8eee094","modified":1622470617625},{"_id":"source/images/2019090102.png","hash":"bbfe3d9b0ed59bc6f69c7cbd21bf01a11f465ba4","modified":1622470617883},{"_id":"source/images/2019060101.jpeg","hash":"8558932f2c9130299004f8ce3885a6ce2dd39dc7","modified":1622470617339},{"_id":"source/images/2019060102.png","hash":"ac4f710f8e2e4d4316edace2bf9032260c2a3e6b","modified":1622470617353},{"_id":"source/images/2019090101.jpg","hash":"782afcf2bf962bbfd93e36ff29f123274bdab3e3","modified":1622470617851}],"Category":[{"name":"通用","_id":"ckpcoovh2000su9q83bs05o9w"},{"name":"css","_id":"ckpcoovhc000tu9q8fq3mg7qt"},{"name":"工具","_id":"ckpcoovhc000uu9q8dp0g6t5z"},{"name":"网络","_id":"ckpcoovhd000vu9q88w5v52f0"},{"name":"linux","_id":"ckpcoovhg000xu9q814dvez6i"},{"name":"H5","_id":"ckpcoovhh000yu9q85vhzc2dp"},{"name":"js","_id":"ckpcoovhh000zu9q860715qbp"},{"name":"html","_id":"ckpcoovhi0010u9q8282a2f1j"},{"name":"nuxt","_id":"ckpcoovhl0015u9q82jt400ou"},{"name":"思考","_id":"ckpcoovhl0016u9q86bg62pys"},{"name":"uni-app","_id":"ckpcoovho001cu9q8hygd6yw8"},{"name":"vue","_id":"ckpcoovhp001du9q8h7hecray"},{"name":"webpack","_id":"ckpcoovhr001iu9q83smkceey"}],"Data":[],"Page":[{"title":"分类","type":"categories","date":"2021-05-30T06:55:14.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ntype: \"categories\"\ndate: 2021-05-30 14:55:14\n---\n","updated":"2021-05-30T06:55:46.380Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckpcooutc0000u9q8febc9nd2","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"代码简洁之道","date":"2019-02-03T16:00:00.000Z","_content":"# 代码简洁之道\n\n这篇文章是从掘金上看到的，整理的很不错，故收藏，有比较大的参考价值\n[传送门](https://juejin.im/post/5c24b7a851882509a76875e8)\n","source":"_posts/blogs/code-clean.md","raw":"---\ntitle: 代码简洁之道\ncategories: 通用\ndate: 2019-2-4\n---\n# 代码简洁之道\n\n这篇文章是从掘金上看到的，整理的很不错，故收藏，有比较大的参考价值\n[传送门](https://juejin.im/post/5c24b7a851882509a76875e8)\n","slug":"blogs/code-clean","published":1,"updated":"2021-05-31T00:29:00.371Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpcooutf0001u9q85j719pd3","content":"<h1 id=\"代码简洁之道\"><a href=\"#代码简洁之道\" class=\"headerlink\" title=\"代码简洁之道\"></a>代码简洁之道</h1><p>这篇文章是从掘金上看到的，整理的很不错，故收藏，有比较大的参考价值<br><a href=\"https://juejin.im/post/5c24b7a851882509a76875e8\">传送门</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码简洁之道\"><a href=\"#代码简洁之道\" class=\"headerlink\" title=\"代码简洁之道\"></a>代码简洁之道</h1><p>这篇文章是从掘金上看到的，整理的很不错，故收藏，有比较大的参考价值<br><a href=\"https://juejin.im/post/5c24b7a851882509a76875e8\">传送门</a></p>\n"},{"title":"flex上中下布局","date":"2019-05-09T16:00:00.000Z","_content":"\n此文档只是说明如何实现，采用最新的弹性盒子布局规范，对旧写法不做考虑。\n\n## 盒子组成\n\n```\n<body class=\"flex-ver\">\n    <div class=\"header red\">header</div>\n    <div class=\"container flex-auto orange\">\n        <div>content</div>\n        <div>content</div>\n        <div>content</div>\n        <div>content</div>\n    </div>\n    <div class=\"footer blue\">footer</div>\n</body>\n```\n## 步骤\n\n### 步骤一：body元素设置为flex容器，纵向主轴\n\n\n```\n.flex-ver {\n    display: flex;\n    flex-direction: column;\n}\n```\n\n### 步骤二：header和footer固定高度\n\n```\n.header {\n    height: 150px;\n}\n.footer {\n    height: 100px;\n}\n```\n\n\n### 步骤三：主体区域container设置为占用剩余高度\n\n\n```\n.flex-auto {\n  flex-grow: 1;\n  flex-basis: 0%;\n}\n```\n## 完整代码\n\n```\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n    <link rel=\"stylesheet\" href=\"./flex.css\">\n</head>\n<body class=\"flex-ver\">\n    <div class=\"header red\">header</div>\n    <div class=\"container flex-auto orange\">\n        <div>content</div>\n        <div>content</div>\n        <div>content</div>\n        <div>content</div>\n    </div>\n    <div class=\"footer blue\">footer</div>\n</body>\n<style>\n    .header {\n        height: 150px;\n    }\n    .footer {\n        height: 100px;\n    }\n    .flex-item {\n        height: auto;\n    }\n    .flex {\n        display: flex;\n        flex-direction: row;\n    }\n    .flex-ver {\n        display: flex;\n        flex-direction: column;\n    }\n    .red {\n        background: red;\n    }\n    .blue {\n        background: blue;\n    }\n    .black {\n        background: black;\n    }\n    .orange {\n        background: orange;\n    }\n</style>\n</html>\n\n```\n\n## 整体效果\n\n1. 主体内容高度自适应\n2. 底部footer位于文档最底部，即使主体区域高度不足以占满视口，footer依旧贴在底部。\n\n## 兼容性\n\n火狐浏览器未能实现该效果，主体内容的高度根据内容自适应的，body的整体高度有可能低于视口高度。\n\n## 解决火狐浏览器兼容性问题\n\n注意，html不要设置为overflow: hidden，要设置为overflow:visible。\n\n```\nhtml, body , div {\n    padding: 0;\n    margin: 0;\n}\nhtml {\n    height: 100%;\n}\nbody {\n    min-height: 100%\n}\n```\n\n\n","source":"_posts/blogs/flex-layout.md","raw":"---\ntitle: flex上中下布局\ncategories: css\ndate: 2019-5-10\n---\n\n此文档只是说明如何实现，采用最新的弹性盒子布局规范，对旧写法不做考虑。\n\n## 盒子组成\n\n```\n<body class=\"flex-ver\">\n    <div class=\"header red\">header</div>\n    <div class=\"container flex-auto orange\">\n        <div>content</div>\n        <div>content</div>\n        <div>content</div>\n        <div>content</div>\n    </div>\n    <div class=\"footer blue\">footer</div>\n</body>\n```\n## 步骤\n\n### 步骤一：body元素设置为flex容器，纵向主轴\n\n\n```\n.flex-ver {\n    display: flex;\n    flex-direction: column;\n}\n```\n\n### 步骤二：header和footer固定高度\n\n```\n.header {\n    height: 150px;\n}\n.footer {\n    height: 100px;\n}\n```\n\n\n### 步骤三：主体区域container设置为占用剩余高度\n\n\n```\n.flex-auto {\n  flex-grow: 1;\n  flex-basis: 0%;\n}\n```\n## 完整代码\n\n```\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n    <link rel=\"stylesheet\" href=\"./flex.css\">\n</head>\n<body class=\"flex-ver\">\n    <div class=\"header red\">header</div>\n    <div class=\"container flex-auto orange\">\n        <div>content</div>\n        <div>content</div>\n        <div>content</div>\n        <div>content</div>\n    </div>\n    <div class=\"footer blue\">footer</div>\n</body>\n<style>\n    .header {\n        height: 150px;\n    }\n    .footer {\n        height: 100px;\n    }\n    .flex-item {\n        height: auto;\n    }\n    .flex {\n        display: flex;\n        flex-direction: row;\n    }\n    .flex-ver {\n        display: flex;\n        flex-direction: column;\n    }\n    .red {\n        background: red;\n    }\n    .blue {\n        background: blue;\n    }\n    .black {\n        background: black;\n    }\n    .orange {\n        background: orange;\n    }\n</style>\n</html>\n\n```\n\n## 整体效果\n\n1. 主体内容高度自适应\n2. 底部footer位于文档最底部，即使主体区域高度不足以占满视口，footer依旧贴在底部。\n\n## 兼容性\n\n火狐浏览器未能实现该效果，主体内容的高度根据内容自适应的，body的整体高度有可能低于视口高度。\n\n## 解决火狐浏览器兼容性问题\n\n注意，html不要设置为overflow: hidden，要设置为overflow:visible。\n\n```\nhtml, body , div {\n    padding: 0;\n    margin: 0;\n}\nhtml {\n    height: 100%;\n}\nbody {\n    min-height: 100%\n}\n```\n\n\n","slug":"blogs/flex-layout","published":1,"updated":"2021-05-31T00:29:14.072Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpcoouti0002u9q85fl97d33","content":"<p>此文档只是说明如何实现，采用最新的弹性盒子布局规范，对旧写法不做考虑。</p>\n<h2 id=\"盒子组成\"><a href=\"#盒子组成\" class=\"headerlink\" title=\"盒子组成\"></a>盒子组成</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body class=&quot;flex-ver&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;header red&quot;&gt;header&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;container flex-auto orange&quot;&gt;</span><br><span class=\"line\">        &lt;div&gt;content&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;content&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;content&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;content&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;footer blue&quot;&gt;footer&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"步骤一：body元素设置为flex容器，纵向主轴\"><a href=\"#步骤一：body元素设置为flex容器，纵向主轴\" class=\"headerlink\" title=\"步骤一：body元素设置为flex容器，纵向主轴\"></a>步骤一：body元素设置为flex容器，纵向主轴</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.flex-ver &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    flex-direction: column;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤二：header和footer固定高度\"><a href=\"#步骤二：header和footer固定高度\" class=\"headerlink\" title=\"步骤二：header和footer固定高度\"></a>步骤二：header和footer固定高度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.header &#123;</span><br><span class=\"line\">    height: 150px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.footer &#123;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"步骤三：主体区域container设置为占用剩余高度\"><a href=\"#步骤三：主体区域container设置为占用剩余高度\" class=\"headerlink\" title=\"步骤三：主体区域container设置为占用剩余高度\"></a>步骤三：主体区域container设置为占用剩余高度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.flex-auto &#123;</span><br><span class=\"line\">  flex-grow: 1;</span><br><span class=\"line\">  flex-basis: 0%;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;./flex.css&quot;&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body class=&quot;flex-ver&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;header red&quot;&gt;header&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;container flex-auto orange&quot;&gt;</span><br><span class=\"line\">        &lt;div&gt;content&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;content&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;content&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;content&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;footer blue&quot;&gt;footer&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    .header &#123;</span><br><span class=\"line\">        height: 150px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .footer &#123;</span><br><span class=\"line\">        height: 100px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .flex-item &#123;</span><br><span class=\"line\">        height: auto;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .flex &#123;</span><br><span class=\"line\">        display: flex;</span><br><span class=\"line\">        flex-direction: row;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .flex-ver &#123;</span><br><span class=\"line\">        display: flex;</span><br><span class=\"line\">        flex-direction: column;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .red &#123;</span><br><span class=\"line\">        background: red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .blue &#123;</span><br><span class=\"line\">        background: blue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .black &#123;</span><br><span class=\"line\">        background: black;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .orange &#123;</span><br><span class=\"line\">        background: orange;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"整体效果\"><a href=\"#整体效果\" class=\"headerlink\" title=\"整体效果\"></a>整体效果</h2><ol>\n<li>主体内容高度自适应</li>\n<li>底部footer位于文档最底部，即使主体区域高度不足以占满视口，footer依旧贴在底部。</li>\n</ol>\n<h2 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h2><p>火狐浏览器未能实现该效果，主体内容的高度根据内容自适应的，body的整体高度有可能低于视口高度。</p>\n<h2 id=\"解决火狐浏览器兼容性问题\"><a href=\"#解决火狐浏览器兼容性问题\" class=\"headerlink\" title=\"解决火狐浏览器兼容性问题\"></a>解决火狐浏览器兼容性问题</h2><p>注意，html不要设置为overflow: hidden，要设置为overflow:visible。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html, body , div &#123;</span><br><span class=\"line\">    padding: 0;</span><br><span class=\"line\">    margin: 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">html &#123;</span><br><span class=\"line\">    height: 100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">body &#123;</span><br><span class=\"line\">    min-height: 100%</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<p>此文档只是说明如何实现，采用最新的弹性盒子布局规范，对旧写法不做考虑。</p>\n<h2 id=\"盒子组成\"><a href=\"#盒子组成\" class=\"headerlink\" title=\"盒子组成\"></a>盒子组成</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body class=&quot;flex-ver&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;header red&quot;&gt;header&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;container flex-auto orange&quot;&gt;</span><br><span class=\"line\">        &lt;div&gt;content&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;content&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;content&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;content&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;footer blue&quot;&gt;footer&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"步骤一：body元素设置为flex容器，纵向主轴\"><a href=\"#步骤一：body元素设置为flex容器，纵向主轴\" class=\"headerlink\" title=\"步骤一：body元素设置为flex容器，纵向主轴\"></a>步骤一：body元素设置为flex容器，纵向主轴</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.flex-ver &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    flex-direction: column;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤二：header和footer固定高度\"><a href=\"#步骤二：header和footer固定高度\" class=\"headerlink\" title=\"步骤二：header和footer固定高度\"></a>步骤二：header和footer固定高度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.header &#123;</span><br><span class=\"line\">    height: 150px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.footer &#123;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"步骤三：主体区域container设置为占用剩余高度\"><a href=\"#步骤三：主体区域container设置为占用剩余高度\" class=\"headerlink\" title=\"步骤三：主体区域container设置为占用剩余高度\"></a>步骤三：主体区域container设置为占用剩余高度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.flex-auto &#123;</span><br><span class=\"line\">  flex-grow: 1;</span><br><span class=\"line\">  flex-basis: 0%;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;./flex.css&quot;&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body class=&quot;flex-ver&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;header red&quot;&gt;header&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;container flex-auto orange&quot;&gt;</span><br><span class=\"line\">        &lt;div&gt;content&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;content&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;content&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;content&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;footer blue&quot;&gt;footer&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    .header &#123;</span><br><span class=\"line\">        height: 150px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .footer &#123;</span><br><span class=\"line\">        height: 100px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .flex-item &#123;</span><br><span class=\"line\">        height: auto;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .flex &#123;</span><br><span class=\"line\">        display: flex;</span><br><span class=\"line\">        flex-direction: row;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .flex-ver &#123;</span><br><span class=\"line\">        display: flex;</span><br><span class=\"line\">        flex-direction: column;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .red &#123;</span><br><span class=\"line\">        background: red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .blue &#123;</span><br><span class=\"line\">        background: blue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .black &#123;</span><br><span class=\"line\">        background: black;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .orange &#123;</span><br><span class=\"line\">        background: orange;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"整体效果\"><a href=\"#整体效果\" class=\"headerlink\" title=\"整体效果\"></a>整体效果</h2><ol>\n<li>主体内容高度自适应</li>\n<li>底部footer位于文档最底部，即使主体区域高度不足以占满视口，footer依旧贴在底部。</li>\n</ol>\n<h2 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h2><p>火狐浏览器未能实现该效果，主体内容的高度根据内容自适应的，body的整体高度有可能低于视口高度。</p>\n<h2 id=\"解决火狐浏览器兼容性问题\"><a href=\"#解决火狐浏览器兼容性问题\" class=\"headerlink\" title=\"解决火狐浏览器兼容性问题\"></a>解决火狐浏览器兼容性问题</h2><p>注意，html不要设置为overflow: hidden，要设置为overflow:visible。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html, body , div &#123;</span><br><span class=\"line\">    padding: 0;</span><br><span class=\"line\">    margin: 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">html &#123;</span><br><span class=\"line\">    height: 100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">body &#123;</span><br><span class=\"line\">    min-height: 100%</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"fiddler捕获https包的原理","date":"2020-09-30T16:00:00.000Z","_content":"\n\nfiddler代理http协议大家都清楚原理，实际上就是正向代理。正向代理是什么呢？简单来说，就是，一方面，fiddler对浏览器客户端伪造成服务器，另一方面对真实的服务器伪造成客户端。\n\n那么，https作为一种双向验证机制的协议，是如何让fiddler实现抓包的呢？\n\nhttps其实就是比http多了个加密和解密的过程。\n\nhttps的作用，其实依赖于证书的信任机制。受信任的证书机构向服务端颁发CA证书，浏览器以及系统默认保存了该机构的根证书。\n\nfiddler其实是自己造了一个证书，如果想抓客户端的流量，就需要客户端手动信任该证书。这也是https抓包的关键。\n\n具体步骤如下图：\n![密钥交换与数据传输过程](/images/2019090102.png)\n\n\n","source":"_posts/blogs/https-through-fiddler.md","raw":"---\ntitle: fiddler捕获https包的原理\ncategories: 工具\ndate: 2020-10-1\n---\n\n\nfiddler代理http协议大家都清楚原理，实际上就是正向代理。正向代理是什么呢？简单来说，就是，一方面，fiddler对浏览器客户端伪造成服务器，另一方面对真实的服务器伪造成客户端。\n\n那么，https作为一种双向验证机制的协议，是如何让fiddler实现抓包的呢？\n\nhttps其实就是比http多了个加密和解密的过程。\n\nhttps的作用，其实依赖于证书的信任机制。受信任的证书机构向服务端颁发CA证书，浏览器以及系统默认保存了该机构的根证书。\n\nfiddler其实是自己造了一个证书，如果想抓客户端的流量，就需要客户端手动信任该证书。这也是https抓包的关键。\n\n具体步骤如下图：\n![密钥交换与数据传输过程](/images/2019090102.png)\n\n\n","slug":"blogs/https-through-fiddler","published":1,"updated":"2021-05-31T14:15:38.835Z","_id":"ckpcoouti0003u9q8gb1pbkhw","comments":1,"layout":"post","photos":[],"link":"","content":"<p>fiddler代理http协议大家都清楚原理，实际上就是正向代理。正向代理是什么呢？简单来说，就是，一方面，fiddler对浏览器客户端伪造成服务器，另一方面对真实的服务器伪造成客户端。</p>\n<p>那么，https作为一种双向验证机制的协议，是如何让fiddler实现抓包的呢？</p>\n<p>https其实就是比http多了个加密和解密的过程。</p>\n<p>https的作用，其实依赖于证书的信任机制。受信任的证书机构向服务端颁发CA证书，浏览器以及系统默认保存了该机构的根证书。</p>\n<p>fiddler其实是自己造了一个证书，如果想抓客户端的流量，就需要客户端手动信任该证书。这也是https抓包的关键。</p>\n<p>具体步骤如下图：<br><img src=\"/images/2019090102.png\" alt=\"密钥交换与数据传输过程\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>fiddler代理http协议大家都清楚原理，实际上就是正向代理。正向代理是什么呢？简单来说，就是，一方面，fiddler对浏览器客户端伪造成服务器，另一方面对真实的服务器伪造成客户端。</p>\n<p>那么，https作为一种双向验证机制的协议，是如何让fiddler实现抓包的呢？</p>\n<p>https其实就是比http多了个加密和解密的过程。</p>\n<p>https的作用，其实依赖于证书的信任机制。受信任的证书机构向服务端颁发CA证书，浏览器以及系统默认保存了该机构的根证书。</p>\n<p>fiddler其实是自己造了一个证书，如果想抓客户端的流量，就需要客户端手动信任该证书。这也是https抓包的关键。</p>\n<p>具体步骤如下图：<br><img src=\"/images/2019090102.png\" alt=\"密钥交换与数据传输过程\"></p>\n"},{"title":"https密钥交换与数据传输","date":"2020-10-01T16:00:00.000Z","_content":"\n> https协议需要同事保证数据的私密性，也要保证完整性。也就是书，既要防止被解密，也要防止被篡改。\n\n## 保证私密性\n私密性通过对称密钥加密来实现。所以，关键是要双方共享对称密钥（即下文的k），同时防止第三方拿到这个密钥。\n\n双方共享对称密钥的过程即下图的“交换密钥”。\n\n![密钥交换与数据传输图解](/images/2019090101.jpg)\n\n## 保证完整性\n虽然第三方没有办法解密截获的内容，但是它却可以对截获的内容进行篡改再发出去。https是如何做到识别篡改的呢？\n\nhttps的加密算法含有消息认证机制。\n数字摘要是采用单项Hash函数将需要加密的明文“摘要”成一串固定长度（128位）的密文，这一串密文又称为数字指纹(fingerprint)，它有固定的长度，而且不同的明文摘要成密文，其结果总是不同的，而同样的明文其摘要必定一致。“数字摘要“是https能确保数据完整性和防篡改的根本原因。\n\n所以只要对内容稍有改动，算出来的指纹就和原来的指纹不一样了，这样就可以知道内容已经被篡改过，不可信了。\n\n所以，综上，双方是约定来一套机制验证数据的完整性，但是不能恢复被篡改的数据。","source":"_posts/blogs/https.md","raw":"---\ntitle: https密钥交换与数据传输\ncategories: 网络\ndate: 2020-10-2\n---\n\n> https协议需要同事保证数据的私密性，也要保证完整性。也就是书，既要防止被解密，也要防止被篡改。\n\n## 保证私密性\n私密性通过对称密钥加密来实现。所以，关键是要双方共享对称密钥（即下文的k），同时防止第三方拿到这个密钥。\n\n双方共享对称密钥的过程即下图的“交换密钥”。\n\n![密钥交换与数据传输图解](/images/2019090101.jpg)\n\n## 保证完整性\n虽然第三方没有办法解密截获的内容，但是它却可以对截获的内容进行篡改再发出去。https是如何做到识别篡改的呢？\n\nhttps的加密算法含有消息认证机制。\n数字摘要是采用单项Hash函数将需要加密的明文“摘要”成一串固定长度（128位）的密文，这一串密文又称为数字指纹(fingerprint)，它有固定的长度，而且不同的明文摘要成密文，其结果总是不同的，而同样的明文其摘要必定一致。“数字摘要“是https能确保数据完整性和防篡改的根本原因。\n\n所以只要对内容稍有改动，算出来的指纹就和原来的指纹不一样了，这样就可以知道内容已经被篡改过，不可信了。\n\n所以，综上，双方是约定来一套机制验证数据的完整性，但是不能恢复被篡改的数据。","slug":"blogs/https","published":1,"updated":"2021-05-31T14:15:38.835Z","_id":"ckpcooutj0004u9q8euhw8jjp","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>https协议需要同事保证数据的私密性，也要保证完整性。也就是书，既要防止被解密，也要防止被篡改。</p>\n</blockquote>\n<h2 id=\"保证私密性\"><a href=\"#保证私密性\" class=\"headerlink\" title=\"保证私密性\"></a>保证私密性</h2><p>私密性通过对称密钥加密来实现。所以，关键是要双方共享对称密钥（即下文的k），同时防止第三方拿到这个密钥。</p>\n<p>双方共享对称密钥的过程即下图的“交换密钥”。</p>\n<p><img src=\"/images/2019090101.jpg\" alt=\"密钥交换与数据传输图解\"></p>\n<h2 id=\"保证完整性\"><a href=\"#保证完整性\" class=\"headerlink\" title=\"保证完整性\"></a>保证完整性</h2><p>虽然第三方没有办法解密截获的内容，但是它却可以对截获的内容进行篡改再发出去。https是如何做到识别篡改的呢？</p>\n<p>https的加密算法含有消息认证机制。<br>数字摘要是采用单项Hash函数将需要加密的明文“摘要”成一串固定长度（128位）的密文，这一串密文又称为数字指纹(fingerprint)，它有固定的长度，而且不同的明文摘要成密文，其结果总是不同的，而同样的明文其摘要必定一致。“数字摘要“是https能确保数据完整性和防篡改的根本原因。</p>\n<p>所以只要对内容稍有改动，算出来的指纹就和原来的指纹不一样了，这样就可以知道内容已经被篡改过，不可信了。</p>\n<p>所以，综上，双方是约定来一套机制验证数据的完整性，但是不能恢复被篡改的数据。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>https协议需要同事保证数据的私密性，也要保证完整性。也就是书，既要防止被解密，也要防止被篡改。</p>\n</blockquote>\n<h2 id=\"保证私密性\"><a href=\"#保证私密性\" class=\"headerlink\" title=\"保证私密性\"></a>保证私密性</h2><p>私密性通过对称密钥加密来实现。所以，关键是要双方共享对称密钥（即下文的k），同时防止第三方拿到这个密钥。</p>\n<p>双方共享对称密钥的过程即下图的“交换密钥”。</p>\n<p><img src=\"/images/2019090101.jpg\" alt=\"密钥交换与数据传输图解\"></p>\n<h2 id=\"保证完整性\"><a href=\"#保证完整性\" class=\"headerlink\" title=\"保证完整性\"></a>保证完整性</h2><p>虽然第三方没有办法解密截获的内容，但是它却可以对截获的内容进行篡改再发出去。https是如何做到识别篡改的呢？</p>\n<p>https的加密算法含有消息认证机制。<br>数字摘要是采用单项Hash函数将需要加密的明文“摘要”成一串固定长度（128位）的密文，这一串密文又称为数字指纹(fingerprint)，它有固定的长度，而且不同的明文摘要成密文，其结果总是不同的，而同样的明文其摘要必定一致。“数字摘要“是https能确保数据完整性和防篡改的根本原因。</p>\n<p>所以只要对内容稍有改动，算出来的指纹就和原来的指纹不一样了，这样就可以知道内容已经被篡改过，不可信了。</p>\n<p>所以，综上，双方是约定来一套机制验证数据的完整性，但是不能恢复被篡改的数据。</p>\n"},{"title":"in 操作符","date":"2020-03-19T16:00:00.000Z","_content":"\n用来判断对象中是否拥有某个属性。\n\n## 使用场景\n\n### for 循环\n```js\nlet obj = {a: 1, b:2, c:3}\n\nfor(let key in obj) {\n  console.log(obj[key])\n}\n```\n\n### 判断是否有某个属性\n```js\nlet obj = {a: 1, b:2, c:3}\nif('a' in obj) {\n  console.log('obj has property \"a\"')\n}\n```\n\n## 和 hasOwnProperty的区别\n```\nin操作符可以判断所有可以通过点操作符访问到的属性，即可以访问对象本身以及原型链上的属性。hasOwnProperty只能判断实例拥有 的属性，不能判断原型链上的属性。\n```\n\n由于原型链上的属性是只读的，所以delete操作符只能删除属于对象本身的属性。","source":"_posts/blogs/in-operator.md","raw":"---\ntitle: in 操作符\ncategories: 工具\ndate: 2020-3-20\n---\n\n用来判断对象中是否拥有某个属性。\n\n## 使用场景\n\n### for 循环\n```js\nlet obj = {a: 1, b:2, c:3}\n\nfor(let key in obj) {\n  console.log(obj[key])\n}\n```\n\n### 判断是否有某个属性\n```js\nlet obj = {a: 1, b:2, c:3}\nif('a' in obj) {\n  console.log('obj has property \"a\"')\n}\n```\n\n## 和 hasOwnProperty的区别\n```\nin操作符可以判断所有可以通过点操作符访问到的属性，即可以访问对象本身以及原型链上的属性。hasOwnProperty只能判断实例拥有 的属性，不能判断原型链上的属性。\n```\n\n由于原型链上的属性是只读的，所以delete操作符只能删除属于对象本身的属性。","slug":"blogs/in-operator","published":1,"updated":"2021-05-31T00:30:06.373Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpcooutj0005u9q8bmbndasw","content":"<p>用来判断对象中是否拥有某个属性。</p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><h3 id=\"for-循环\"><a href=\"#for-循环\" class=\"headerlink\" title=\"for 循环\"></a>for 循环</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>:<span class=\"number\">2</span>, <span class=\"attr\">c</span>:<span class=\"number\">3</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(obj[key])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"判断是否有某个属性\"><a href=\"#判断是否有某个属性\" class=\"headerlink\" title=\"判断是否有某个属性\"></a>判断是否有某个属性</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>:<span class=\"number\">2</span>, <span class=\"attr\">c</span>:<span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"string\">&#x27;a&#x27;</span> <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;obj has property &quot;a&quot;&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"和-hasOwnProperty的区别\"><a href=\"#和-hasOwnProperty的区别\" class=\"headerlink\" title=\"和 hasOwnProperty的区别\"></a>和 hasOwnProperty的区别</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">in操作符可以判断所有可以通过点操作符访问到的属性，即可以访问对象本身以及原型链上的属性。hasOwnProperty只能判断实例拥有 的属性，不能判断原型链上的属性。</span><br></pre></td></tr></table></figure>\n\n<p>由于原型链上的属性是只读的，所以delete操作符只能删除属于对象本身的属性。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>用来判断对象中是否拥有某个属性。</p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><h3 id=\"for-循环\"><a href=\"#for-循环\" class=\"headerlink\" title=\"for 循环\"></a>for 循环</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>:<span class=\"number\">2</span>, <span class=\"attr\">c</span>:<span class=\"number\">3</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(obj[key])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"判断是否有某个属性\"><a href=\"#判断是否有某个属性\" class=\"headerlink\" title=\"判断是否有某个属性\"></a>判断是否有某个属性</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>:<span class=\"number\">2</span>, <span class=\"attr\">c</span>:<span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"string\">&#x27;a&#x27;</span> <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;obj has property &quot;a&quot;&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"和-hasOwnProperty的区别\"><a href=\"#和-hasOwnProperty的区别\" class=\"headerlink\" title=\"和 hasOwnProperty的区别\"></a>和 hasOwnProperty的区别</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">in操作符可以判断所有可以通过点操作符访问到的属性，即可以访问对象本身以及原型链上的属性。hasOwnProperty只能判断实例拥有 的属性，不能判断原型链上的属性。</span><br></pre></td></tr></table></figure>\n\n<p>由于原型链上的属性是只读的，所以delete操作符只能删除属于对象本身的属性。</p>\n"},{"title":"linux常见命令","date":"2019-12-05T16:00:00.000Z","_content":" \n\n## 查看端口占用情况\n\n> sudo netstat -apn | grep 80\n\n![](/images/2019060301.png)\n\n最后一列可以看到进程号\n\n## 查看ngin端口启用状态：\n> ps -ef | grep nginx\n\n## 查看端口进程\n\n上一步的进程号可以查出是哪个应用占用了端口\n\n> ps -ef | grep 3345\n\n## 杀掉进程\n\n> sudo kill -9 3345\n\n-9只是一个信号，表示强制终止，不管正在终止的进程在做什么\n\n## 查看或编辑nginx配置\n```\n vi /usr/local/nginx/conf/nginx.conf\n vi nginx.conf\n```\n\n## 重启服务器：\n> /usr/local/nginx/sbin/nginx -s reload\n\n## 连接远程服务器:\nssh root@192.168.1.1\n\n## 上传文件夹到远程目录：\nscp -r /usr/xxx root@192.168.1.1:/opt/project\n这个命令执行的结果是，xxx目录会存在于服务器project目录下\n\n## 删除文件夹：\n> rm -rf dist\n## 移动所有文件到上一个目录：\n> mv * ../\n## 查看当前目录：\n> pwd\n\n## 查看用户：\n> cat /etc/passwd\n\n## 查看用户组：\n> cat /etc/group\n\n## 查看用户属于哪个组：\n> id root","source":"_posts/blogs/linux-command.md","raw":"---\ntitle: linux常见命令\ncategories: linux\ndate: 2019-12-6\n--- \n\n## 查看端口占用情况\n\n> sudo netstat -apn | grep 80\n\n![](/images/2019060301.png)\n\n最后一列可以看到进程号\n\n## 查看ngin端口启用状态：\n> ps -ef | grep nginx\n\n## 查看端口进程\n\n上一步的进程号可以查出是哪个应用占用了端口\n\n> ps -ef | grep 3345\n\n## 杀掉进程\n\n> sudo kill -9 3345\n\n-9只是一个信号，表示强制终止，不管正在终止的进程在做什么\n\n## 查看或编辑nginx配置\n```\n vi /usr/local/nginx/conf/nginx.conf\n vi nginx.conf\n```\n\n## 重启服务器：\n> /usr/local/nginx/sbin/nginx -s reload\n\n## 连接远程服务器:\nssh root@192.168.1.1\n\n## 上传文件夹到远程目录：\nscp -r /usr/xxx root@192.168.1.1:/opt/project\n这个命令执行的结果是，xxx目录会存在于服务器project目录下\n\n## 删除文件夹：\n> rm -rf dist\n## 移动所有文件到上一个目录：\n> mv * ../\n## 查看当前目录：\n> pwd\n\n## 查看用户：\n> cat /etc/passwd\n\n## 查看用户组：\n> cat /etc/group\n\n## 查看用户属于哪个组：\n> id root","slug":"blogs/linux-command","published":1,"updated":"2021-05-31T14:15:38.835Z","_id":"ckpcooutk0006u9q84asb2lfa","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"查看端口占用情况\"><a href=\"#查看端口占用情况\" class=\"headerlink\" title=\"查看端口占用情况\"></a>查看端口占用情况</h2><blockquote>\n<p>sudo netstat -apn | grep 80</p>\n</blockquote>\n<p><img src=\"/images/2019060301.png\"></p>\n<p>最后一列可以看到进程号</p>\n<h2 id=\"查看ngin端口启用状态：\"><a href=\"#查看ngin端口启用状态：\" class=\"headerlink\" title=\"查看ngin端口启用状态：\"></a>查看ngin端口启用状态：</h2><blockquote>\n<p>ps -ef | grep nginx</p>\n</blockquote>\n<h2 id=\"查看端口进程\"><a href=\"#查看端口进程\" class=\"headerlink\" title=\"查看端口进程\"></a>查看端口进程</h2><p>上一步的进程号可以查出是哪个应用占用了端口</p>\n<blockquote>\n<p>ps -ef | grep 3345</p>\n</blockquote>\n<h2 id=\"杀掉进程\"><a href=\"#杀掉进程\" class=\"headerlink\" title=\"杀掉进程\"></a>杀掉进程</h2><blockquote>\n<p>sudo kill -9 3345</p>\n</blockquote>\n<p>-9只是一个信号，表示强制终止，不管正在终止的进程在做什么</p>\n<h2 id=\"查看或编辑nginx配置\"><a href=\"#查看或编辑nginx配置\" class=\"headerlink\" title=\"查看或编辑nginx配置\"></a>查看或编辑nginx配置</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /usr/local/nginx/conf/nginx.conf</span><br><span class=\"line\">vi nginx.conf</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重启服务器：\"><a href=\"#重启服务器：\" class=\"headerlink\" title=\"重启服务器：\"></a>重启服务器：</h2><blockquote>\n<p>/usr/local/nginx/sbin/nginx -s reload</p>\n</blockquote>\n<h2 id=\"连接远程服务器\"><a href=\"#连接远程服务器\" class=\"headerlink\" title=\"连接远程服务器:\"></a>连接远程服务器:</h2><p>ssh <a href=\"mailto:&#114;&#x6f;&#x6f;&#116;&#64;&#49;&#x39;&#50;&#46;&#49;&#x36;&#56;&#x2e;&#49;&#46;&#49;\">&#114;&#x6f;&#x6f;&#116;&#64;&#49;&#x39;&#50;&#46;&#49;&#x36;&#56;&#x2e;&#49;&#46;&#49;</a></p>\n<h2 id=\"上传文件夹到远程目录：\"><a href=\"#上传文件夹到远程目录：\" class=\"headerlink\" title=\"上传文件夹到远程目录：\"></a>上传文件夹到远程目录：</h2><p>scp -r /usr/xxx <a href=\"mailto:&#114;&#111;&#x6f;&#116;&#64;&#49;&#x39;&#50;&#46;&#x31;&#54;&#56;&#x2e;&#49;&#46;&#x31;\">&#114;&#111;&#x6f;&#116;&#64;&#49;&#x39;&#50;&#46;&#x31;&#54;&#56;&#x2e;&#49;&#46;&#x31;</a>:/opt/project<br>这个命令执行的结果是，xxx目录会存在于服务器project目录下</p>\n<h2 id=\"删除文件夹：\"><a href=\"#删除文件夹：\" class=\"headerlink\" title=\"删除文件夹：\"></a>删除文件夹：</h2><blockquote>\n<p>rm -rf dist</p>\n</blockquote>\n<h2 id=\"移动所有文件到上一个目录：\"><a href=\"#移动所有文件到上一个目录：\" class=\"headerlink\" title=\"移动所有文件到上一个目录：\"></a>移动所有文件到上一个目录：</h2><blockquote>\n<p>mv * ../</p>\n</blockquote>\n<h2 id=\"查看当前目录：\"><a href=\"#查看当前目录：\" class=\"headerlink\" title=\"查看当前目录：\"></a>查看当前目录：</h2><blockquote>\n<p>pwd</p>\n</blockquote>\n<h2 id=\"查看用户：\"><a href=\"#查看用户：\" class=\"headerlink\" title=\"查看用户：\"></a>查看用户：</h2><blockquote>\n<p>cat /etc/passwd</p>\n</blockquote>\n<h2 id=\"查看用户组：\"><a href=\"#查看用户组：\" class=\"headerlink\" title=\"查看用户组：\"></a>查看用户组：</h2><blockquote>\n<p>cat /etc/group</p>\n</blockquote>\n<h2 id=\"查看用户属于哪个组：\"><a href=\"#查看用户属于哪个组：\" class=\"headerlink\" title=\"查看用户属于哪个组：\"></a>查看用户属于哪个组：</h2><blockquote>\n<p>id root</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"查看端口占用情况\"><a href=\"#查看端口占用情况\" class=\"headerlink\" title=\"查看端口占用情况\"></a>查看端口占用情况</h2><blockquote>\n<p>sudo netstat -apn | grep 80</p>\n</blockquote>\n<p><img src=\"/images/2019060301.png\"></p>\n<p>最后一列可以看到进程号</p>\n<h2 id=\"查看ngin端口启用状态：\"><a href=\"#查看ngin端口启用状态：\" class=\"headerlink\" title=\"查看ngin端口启用状态：\"></a>查看ngin端口启用状态：</h2><blockquote>\n<p>ps -ef | grep nginx</p>\n</blockquote>\n<h2 id=\"查看端口进程\"><a href=\"#查看端口进程\" class=\"headerlink\" title=\"查看端口进程\"></a>查看端口进程</h2><p>上一步的进程号可以查出是哪个应用占用了端口</p>\n<blockquote>\n<p>ps -ef | grep 3345</p>\n</blockquote>\n<h2 id=\"杀掉进程\"><a href=\"#杀掉进程\" class=\"headerlink\" title=\"杀掉进程\"></a>杀掉进程</h2><blockquote>\n<p>sudo kill -9 3345</p>\n</blockquote>\n<p>-9只是一个信号，表示强制终止，不管正在终止的进程在做什么</p>\n<h2 id=\"查看或编辑nginx配置\"><a href=\"#查看或编辑nginx配置\" class=\"headerlink\" title=\"查看或编辑nginx配置\"></a>查看或编辑nginx配置</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /usr/local/nginx/conf/nginx.conf</span><br><span class=\"line\">vi nginx.conf</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重启服务器：\"><a href=\"#重启服务器：\" class=\"headerlink\" title=\"重启服务器：\"></a>重启服务器：</h2><blockquote>\n<p>/usr/local/nginx/sbin/nginx -s reload</p>\n</blockquote>\n<h2 id=\"连接远程服务器\"><a href=\"#连接远程服务器\" class=\"headerlink\" title=\"连接远程服务器:\"></a>连接远程服务器:</h2><p>ssh <a href=\"mailto:&#114;&#x6f;&#x6f;&#116;&#64;&#49;&#x39;&#50;&#46;&#49;&#x36;&#56;&#x2e;&#49;&#46;&#49;\">&#114;&#x6f;&#x6f;&#116;&#64;&#49;&#x39;&#50;&#46;&#49;&#x36;&#56;&#x2e;&#49;&#46;&#49;</a></p>\n<h2 id=\"上传文件夹到远程目录：\"><a href=\"#上传文件夹到远程目录：\" class=\"headerlink\" title=\"上传文件夹到远程目录：\"></a>上传文件夹到远程目录：</h2><p>scp -r /usr/xxx <a href=\"mailto:&#114;&#111;&#x6f;&#116;&#64;&#49;&#x39;&#50;&#46;&#x31;&#54;&#56;&#x2e;&#49;&#46;&#x31;\">&#114;&#111;&#x6f;&#116;&#64;&#49;&#x39;&#50;&#46;&#x31;&#54;&#56;&#x2e;&#49;&#46;&#x31;</a>:/opt/project<br>这个命令执行的结果是，xxx目录会存在于服务器project目录下</p>\n<h2 id=\"删除文件夹：\"><a href=\"#删除文件夹：\" class=\"headerlink\" title=\"删除文件夹：\"></a>删除文件夹：</h2><blockquote>\n<p>rm -rf dist</p>\n</blockquote>\n<h2 id=\"移动所有文件到上一个目录：\"><a href=\"#移动所有文件到上一个目录：\" class=\"headerlink\" title=\"移动所有文件到上一个目录：\"></a>移动所有文件到上一个目录：</h2><blockquote>\n<p>mv * ../</p>\n</blockquote>\n<h2 id=\"查看当前目录：\"><a href=\"#查看当前目录：\" class=\"headerlink\" title=\"查看当前目录：\"></a>查看当前目录：</h2><blockquote>\n<p>pwd</p>\n</blockquote>\n<h2 id=\"查看用户：\"><a href=\"#查看用户：\" class=\"headerlink\" title=\"查看用户：\"></a>查看用户：</h2><blockquote>\n<p>cat /etc/passwd</p>\n</blockquote>\n<h2 id=\"查看用户组：\"><a href=\"#查看用户组：\" class=\"headerlink\" title=\"查看用户组：\"></a>查看用户组：</h2><blockquote>\n<p>cat /etc/group</p>\n</blockquote>\n<h2 id=\"查看用户属于哪个组：\"><a href=\"#查看用户属于哪个组：\" class=\"headerlink\" title=\"查看用户属于哪个组：\"></a>查看用户属于哪个组：</h2><blockquote>\n<p>id root</p>\n</blockquote>\n"},{"title":"移动端meta","date":"2019-05-28T16:00:00.000Z","_content":" \n\n## viewport\n\n```\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=yes,minimal-ui\">\n```\n\n## MobileOptimized\n\n告诉浏览器页面为某个宽度特殊优化 (微软系)\n\n```\n<meta name=\"MobileOptimized\" content=\"320\" />\n```\n\n## HandheldFriendly\n\n告诉浏览器页面是否为手持设备优化，会被MobileOptimized覆盖 (旧浏览器和功能机上某些浏览器识别)\n\n\n```\n<meta name=\"HandheldFriendly\" content=\"true\" />\n```\n\n## Apple私有\n\n\n```\n<!-- iOS 设备 begin -->\n    <meta name=\"apple-mobile-web-app-title\" content=\"标题\">\n    <!-- 添加到主屏后的标题（iOS 6 新增） -->\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\"/>\n    <!-- 是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏 -->\n\n    <meta name=\"apple-itunes-app\" content=\"app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL\">\n    <!-- 添加智能 App 广告条 Smart App Banner（iOS 6+ Safari） -->\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\"/>\n    <!-- 设置苹果工具栏颜色 -->\n    <meta name=\"format-detection\" content=\"telphone=no, email=no\"/>\n    <!-- 忽略页面中的数字识别为电话，忽略email识别 -->\n    <!-- 启用360浏览器的极速模式(webkit) -->\n    <meta name=\"renderer\" content=\"webkit\">\n    <!-- 避免IE使用兼容模式 -->\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 -->\n    <meta name=\"HandheldFriendly\" content=\"true\">\n    <!-- 微软的老式浏览器 -->\n    <meta name=\"MobileOptimized\" content=\"320\">\n    <!-- uc强制竖屏 -->\n    <meta name=\"screen-orientation\" content=\"portrait\">\n    <!-- QQ强制竖屏 -->\n    <meta name=\"x5-orientation\" content=\"portrait\">\n    <!-- UC强制全屏 -->\n    <meta name=\"full-screen\" content=\"yes\">\n    <!-- QQ强制全屏 -->\n    <meta name=\"x5-fullscreen\" content=\"true\">\n    <!-- UC应用模式 -->\n    <meta name=\"browsermode\" content=\"application\">\n    <!-- QQ应用模式 -->\n    <meta name=\"x5-page-mode\" content=\"app\">\n    <!-- windows phone 点击无高光 -->\n    <meta name=\"msapplication-tap-highlight\" content=\"no\">\n    <!-- iOS 图标 begin -->\n    <link rel=\"apple-touch-icon-precomposed\" href=\"/apple-touch-icon-57x57-precomposed.png\"/>\n    <!-- iPhone 和 iTouch，默认 57x57 像素，必须有 -->\n    <link rel=\"apple-touch-icon-precomposed\" sizes=\"114x114\" href=\"/apple-touch-icon-114x114-precomposed.png\"/>\n    <!-- Retina iPhone 和 Retina iTouch，114x114 像素，可以没有，但推荐有 -->\n    <link rel=\"apple-touch-icon-precomposed\" sizes=\"144x144\" href=\"/apple-touch-icon-144x144-precomposed.png\"/>\n    <!-- Retina iPad，144x144 像素，可以没有，但推荐有 -->\n    <!-- iOS 图标 end -->\n    <!-- iOS 启动画面 begin -->\n    <link rel=\"apple-touch-startup-image\" sizes=\"768x1004\" href=\"/splash-screen-768x1004.png\"/>\n    <!-- iPad 竖屏 768 x 1004（标准分辨率） -->\n    <link rel=\"apple-touch-startup-image\" sizes=\"1536x2008\" href=\"/splash-screen-1536x2008.png\"/>\n    <!-- iPad 竖屏 1536x2008（Retina） -->\n    <link rel=\"apple-touch-startup-image\" sizes=\"1024x748\" href=\"/Default-Portrait-1024x748.png\"/>\n    <!-- iPad 横屏 1024x748（标准分辨率） -->\n    <link rel=\"apple-touch-startup-image\" sizes=\"2048x1496\" href=\"/splash-screen-2048x1496.png\"/>\n    <!-- iPad 横屏 2048x1496（Retina） -->\n\n    <link rel=\"apple-touch-startup-image\" href=\"/splash-screen-320x480.png\"/>\n    <!-- iPhone/iPod Touch 竖屏 320x480 (标准分辨率) -->\n    <link rel=\"apple-touch-startup-image\" sizes=\"640x960\" href=\"/splash-screen-640x960.png\"/>\n    <!-- iPhone/iPod Touch 竖屏 640x960 (Retina) -->\n    <link rel=\"apple-touch-startup-image\" sizes=\"640x1136\" href=\"/splash-screen-640x1136.png\"/>\n    <!-- iPhone 5/iPod Touch 5 竖屏 640x1136 (Retina) -->\n    <!-- iOS 启动画面 end -->\n\n    <!-- iOS 设备 end -->\n```\n\n\n## format-detection\n\n禁用电话号码和邮箱识别\n\n```\n<meta name=\"format-detection\" content=\"telphone=no, email=no\" />\n```\n\n\n参考资料：\n[移动端头部meta大全](https://gist.github.com/overtrue/f540fbea3c33e3da53fd)\n","source":"_posts/blogs/meta.md","raw":"---\ntitle: 移动端meta\ncategories: H5\ndate: 2019-5-29\n--- \n\n## viewport\n\n```\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=yes,minimal-ui\">\n```\n\n## MobileOptimized\n\n告诉浏览器页面为某个宽度特殊优化 (微软系)\n\n```\n<meta name=\"MobileOptimized\" content=\"320\" />\n```\n\n## HandheldFriendly\n\n告诉浏览器页面是否为手持设备优化，会被MobileOptimized覆盖 (旧浏览器和功能机上某些浏览器识别)\n\n\n```\n<meta name=\"HandheldFriendly\" content=\"true\" />\n```\n\n## Apple私有\n\n\n```\n<!-- iOS 设备 begin -->\n    <meta name=\"apple-mobile-web-app-title\" content=\"标题\">\n    <!-- 添加到主屏后的标题（iOS 6 新增） -->\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\"/>\n    <!-- 是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏 -->\n\n    <meta name=\"apple-itunes-app\" content=\"app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL\">\n    <!-- 添加智能 App 广告条 Smart App Banner（iOS 6+ Safari） -->\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\"/>\n    <!-- 设置苹果工具栏颜色 -->\n    <meta name=\"format-detection\" content=\"telphone=no, email=no\"/>\n    <!-- 忽略页面中的数字识别为电话，忽略email识别 -->\n    <!-- 启用360浏览器的极速模式(webkit) -->\n    <meta name=\"renderer\" content=\"webkit\">\n    <!-- 避免IE使用兼容模式 -->\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 -->\n    <meta name=\"HandheldFriendly\" content=\"true\">\n    <!-- 微软的老式浏览器 -->\n    <meta name=\"MobileOptimized\" content=\"320\">\n    <!-- uc强制竖屏 -->\n    <meta name=\"screen-orientation\" content=\"portrait\">\n    <!-- QQ强制竖屏 -->\n    <meta name=\"x5-orientation\" content=\"portrait\">\n    <!-- UC强制全屏 -->\n    <meta name=\"full-screen\" content=\"yes\">\n    <!-- QQ强制全屏 -->\n    <meta name=\"x5-fullscreen\" content=\"true\">\n    <!-- UC应用模式 -->\n    <meta name=\"browsermode\" content=\"application\">\n    <!-- QQ应用模式 -->\n    <meta name=\"x5-page-mode\" content=\"app\">\n    <!-- windows phone 点击无高光 -->\n    <meta name=\"msapplication-tap-highlight\" content=\"no\">\n    <!-- iOS 图标 begin -->\n    <link rel=\"apple-touch-icon-precomposed\" href=\"/apple-touch-icon-57x57-precomposed.png\"/>\n    <!-- iPhone 和 iTouch，默认 57x57 像素，必须有 -->\n    <link rel=\"apple-touch-icon-precomposed\" sizes=\"114x114\" href=\"/apple-touch-icon-114x114-precomposed.png\"/>\n    <!-- Retina iPhone 和 Retina iTouch，114x114 像素，可以没有，但推荐有 -->\n    <link rel=\"apple-touch-icon-precomposed\" sizes=\"144x144\" href=\"/apple-touch-icon-144x144-precomposed.png\"/>\n    <!-- Retina iPad，144x144 像素，可以没有，但推荐有 -->\n    <!-- iOS 图标 end -->\n    <!-- iOS 启动画面 begin -->\n    <link rel=\"apple-touch-startup-image\" sizes=\"768x1004\" href=\"/splash-screen-768x1004.png\"/>\n    <!-- iPad 竖屏 768 x 1004（标准分辨率） -->\n    <link rel=\"apple-touch-startup-image\" sizes=\"1536x2008\" href=\"/splash-screen-1536x2008.png\"/>\n    <!-- iPad 竖屏 1536x2008（Retina） -->\n    <link rel=\"apple-touch-startup-image\" sizes=\"1024x748\" href=\"/Default-Portrait-1024x748.png\"/>\n    <!-- iPad 横屏 1024x748（标准分辨率） -->\n    <link rel=\"apple-touch-startup-image\" sizes=\"2048x1496\" href=\"/splash-screen-2048x1496.png\"/>\n    <!-- iPad 横屏 2048x1496（Retina） -->\n\n    <link rel=\"apple-touch-startup-image\" href=\"/splash-screen-320x480.png\"/>\n    <!-- iPhone/iPod Touch 竖屏 320x480 (标准分辨率) -->\n    <link rel=\"apple-touch-startup-image\" sizes=\"640x960\" href=\"/splash-screen-640x960.png\"/>\n    <!-- iPhone/iPod Touch 竖屏 640x960 (Retina) -->\n    <link rel=\"apple-touch-startup-image\" sizes=\"640x1136\" href=\"/splash-screen-640x1136.png\"/>\n    <!-- iPhone 5/iPod Touch 5 竖屏 640x1136 (Retina) -->\n    <!-- iOS 启动画面 end -->\n\n    <!-- iOS 设备 end -->\n```\n\n\n## format-detection\n\n禁用电话号码和邮箱识别\n\n```\n<meta name=\"format-detection\" content=\"telphone=no, email=no\" />\n```\n\n\n参考资料：\n[移动端头部meta大全](https://gist.github.com/overtrue/f540fbea3c33e3da53fd)\n","slug":"blogs/meta","published":1,"updated":"2021-05-31T00:30:50.580Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpcooutl0007u9q8dpsx2vk0","content":"<h2 id=\"viewport\"><a href=\"#viewport\" class=\"headerlink\" title=\"viewport\"></a>viewport</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=yes,minimal-ui&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MobileOptimized\"><a href=\"#MobileOptimized\" class=\"headerlink\" title=\"MobileOptimized\"></a>MobileOptimized</h2><p>告诉浏览器页面为某个宽度特殊优化 (微软系)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;MobileOptimized&quot; content=&quot;320&quot; /&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"HandheldFriendly\"><a href=\"#HandheldFriendly\" class=\"headerlink\" title=\"HandheldFriendly\"></a>HandheldFriendly</h2><p>告诉浏览器页面是否为手持设备优化，会被MobileOptimized覆盖 (旧浏览器和功能机上某些浏览器识别)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;HandheldFriendly&quot; content=&quot;true&quot; /&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Apple私有\"><a href=\"#Apple私有\" class=\"headerlink\" title=\"Apple私有\"></a>Apple私有</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- iOS 设备 begin --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;apple-mobile-web-app-title&quot; content=&quot;标题&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 添加到主屏后的标题（iOS 6 新增） --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- 是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏 --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;meta name=&quot;apple-itunes-app&quot; content=&quot;app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 添加智能 App 广告条 Smart App Banner（iOS 6+ Safari） --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- 设置苹果工具栏颜色 --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;format-detection&quot; content=&quot;telphone=no, email=no&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- 忽略页面中的数字识别为电话，忽略email识别 --&gt;</span><br><span class=\"line\">    &lt;!-- 启用360浏览器的极速模式(webkit) --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 避免IE使用兼容模式 --&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;HandheldFriendly&quot; content=&quot;true&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 微软的老式浏览器 --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;MobileOptimized&quot; content=&quot;320&quot;&gt;</span><br><span class=\"line\">    &lt;!-- uc强制竖屏 --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;screen-orientation&quot; content=&quot;portrait&quot;&gt;</span><br><span class=\"line\">    &lt;!-- QQ强制竖屏 --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;x5-orientation&quot; content=&quot;portrait&quot;&gt;</span><br><span class=\"line\">    &lt;!-- UC强制全屏 --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;full-screen&quot; content=&quot;yes&quot;&gt;</span><br><span class=\"line\">    &lt;!-- QQ强制全屏 --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;x5-fullscreen&quot; content=&quot;true&quot;&gt;</span><br><span class=\"line\">    &lt;!-- UC应用模式 --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;browsermode&quot; content=&quot;application&quot;&gt;</span><br><span class=\"line\">    &lt;!-- QQ应用模式 --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;x5-page-mode&quot; content=&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;!-- windows phone 点击无高光 --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;msapplication-tap-highlight&quot; content=&quot;no&quot;&gt;</span><br><span class=\"line\">    &lt;!-- iOS 图标 begin --&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;apple-touch-icon-precomposed&quot; href=&quot;/apple-touch-icon-57x57-precomposed.png&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- iPhone 和 iTouch，默认 57x57 像素，必须有 --&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;114x114&quot; href=&quot;/apple-touch-icon-114x114-precomposed.png&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- Retina iPhone 和 Retina iTouch，114x114 像素，可以没有，但推荐有 --&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;144x144&quot; href=&quot;/apple-touch-icon-144x144-precomposed.png&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- Retina iPad，144x144 像素，可以没有，但推荐有 --&gt;</span><br><span class=\"line\">    &lt;!-- iOS 图标 end --&gt;</span><br><span class=\"line\">    &lt;!-- iOS 启动画面 begin --&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;768x1004&quot; href=&quot;/splash-screen-768x1004.png&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- iPad 竖屏 768 x 1004（标准分辨率） --&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;1536x2008&quot; href=&quot;/splash-screen-1536x2008.png&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- iPad 竖屏 1536x2008（Retina） --&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;1024x748&quot; href=&quot;/Default-Portrait-1024x748.png&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- iPad 横屏 1024x748（标准分辨率） --&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;2048x1496&quot; href=&quot;/splash-screen-2048x1496.png&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- iPad 横屏 2048x1496（Retina） --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;link rel=&quot;apple-touch-startup-image&quot; href=&quot;/splash-screen-320x480.png&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- iPhone/iPod Touch 竖屏 320x480 (标准分辨率) --&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;640x960&quot; href=&quot;/splash-screen-640x960.png&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- iPhone/iPod Touch 竖屏 640x960 (Retina) --&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;640x1136&quot; href=&quot;/splash-screen-640x1136.png&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- iPhone 5/iPod Touch 5 竖屏 640x1136 (Retina) --&gt;</span><br><span class=\"line\">    &lt;!-- iOS 启动画面 end --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- iOS 设备 end --&gt;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"format-detection\"><a href=\"#format-detection\" class=\"headerlink\" title=\"format-detection\"></a>format-detection</h2><p>禁用电话号码和邮箱识别</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;format-detection&quot; content=&quot;telphone=no, email=no&quot; /&gt;</span><br></pre></td></tr></table></figure>\n\n\n<p>参考资料：<br><a href=\"https://gist.github.com/overtrue/f540fbea3c33e3da53fd\">移动端头部meta大全</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"viewport\"><a href=\"#viewport\" class=\"headerlink\" title=\"viewport\"></a>viewport</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=yes,minimal-ui&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MobileOptimized\"><a href=\"#MobileOptimized\" class=\"headerlink\" title=\"MobileOptimized\"></a>MobileOptimized</h2><p>告诉浏览器页面为某个宽度特殊优化 (微软系)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;MobileOptimized&quot; content=&quot;320&quot; /&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"HandheldFriendly\"><a href=\"#HandheldFriendly\" class=\"headerlink\" title=\"HandheldFriendly\"></a>HandheldFriendly</h2><p>告诉浏览器页面是否为手持设备优化，会被MobileOptimized覆盖 (旧浏览器和功能机上某些浏览器识别)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;HandheldFriendly&quot; content=&quot;true&quot; /&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Apple私有\"><a href=\"#Apple私有\" class=\"headerlink\" title=\"Apple私有\"></a>Apple私有</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- iOS 设备 begin --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;apple-mobile-web-app-title&quot; content=&quot;标题&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 添加到主屏后的标题（iOS 6 新增） --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- 是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏 --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;meta name=&quot;apple-itunes-app&quot; content=&quot;app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 添加智能 App 广告条 Smart App Banner（iOS 6+ Safari） --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- 设置苹果工具栏颜色 --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;format-detection&quot; content=&quot;telphone=no, email=no&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- 忽略页面中的数字识别为电话，忽略email识别 --&gt;</span><br><span class=\"line\">    &lt;!-- 启用360浏览器的极速模式(webkit) --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 避免IE使用兼容模式 --&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;HandheldFriendly&quot; content=&quot;true&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 微软的老式浏览器 --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;MobileOptimized&quot; content=&quot;320&quot;&gt;</span><br><span class=\"line\">    &lt;!-- uc强制竖屏 --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;screen-orientation&quot; content=&quot;portrait&quot;&gt;</span><br><span class=\"line\">    &lt;!-- QQ强制竖屏 --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;x5-orientation&quot; content=&quot;portrait&quot;&gt;</span><br><span class=\"line\">    &lt;!-- UC强制全屏 --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;full-screen&quot; content=&quot;yes&quot;&gt;</span><br><span class=\"line\">    &lt;!-- QQ强制全屏 --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;x5-fullscreen&quot; content=&quot;true&quot;&gt;</span><br><span class=\"line\">    &lt;!-- UC应用模式 --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;browsermode&quot; content=&quot;application&quot;&gt;</span><br><span class=\"line\">    &lt;!-- QQ应用模式 --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;x5-page-mode&quot; content=&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;!-- windows phone 点击无高光 --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;msapplication-tap-highlight&quot; content=&quot;no&quot;&gt;</span><br><span class=\"line\">    &lt;!-- iOS 图标 begin --&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;apple-touch-icon-precomposed&quot; href=&quot;/apple-touch-icon-57x57-precomposed.png&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- iPhone 和 iTouch，默认 57x57 像素，必须有 --&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;114x114&quot; href=&quot;/apple-touch-icon-114x114-precomposed.png&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- Retina iPhone 和 Retina iTouch，114x114 像素，可以没有，但推荐有 --&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;144x144&quot; href=&quot;/apple-touch-icon-144x144-precomposed.png&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- Retina iPad，144x144 像素，可以没有，但推荐有 --&gt;</span><br><span class=\"line\">    &lt;!-- iOS 图标 end --&gt;</span><br><span class=\"line\">    &lt;!-- iOS 启动画面 begin --&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;768x1004&quot; href=&quot;/splash-screen-768x1004.png&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- iPad 竖屏 768 x 1004（标准分辨率） --&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;1536x2008&quot; href=&quot;/splash-screen-1536x2008.png&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- iPad 竖屏 1536x2008（Retina） --&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;1024x748&quot; href=&quot;/Default-Portrait-1024x748.png&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- iPad 横屏 1024x748（标准分辨率） --&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;2048x1496&quot; href=&quot;/splash-screen-2048x1496.png&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- iPad 横屏 2048x1496（Retina） --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;link rel=&quot;apple-touch-startup-image&quot; href=&quot;/splash-screen-320x480.png&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- iPhone/iPod Touch 竖屏 320x480 (标准分辨率) --&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;640x960&quot; href=&quot;/splash-screen-640x960.png&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- iPhone/iPod Touch 竖屏 640x960 (Retina) --&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;640x1136&quot; href=&quot;/splash-screen-640x1136.png&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- iPhone 5/iPod Touch 5 竖屏 640x1136 (Retina) --&gt;</span><br><span class=\"line\">    &lt;!-- iOS 启动画面 end --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- iOS 设备 end --&gt;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"format-detection\"><a href=\"#format-detection\" class=\"headerlink\" title=\"format-detection\"></a>format-detection</h2><p>禁用电话号码和邮箱识别</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;format-detection&quot; content=&quot;telphone=no, email=no&quot; /&gt;</span><br></pre></td></tr></table></figure>\n\n\n<p>参考资料：<br><a href=\"https://gist.github.com/overtrue/f540fbea3c33e3da53fd\">移动端头部meta大全</a></p>\n"},{"title":"纯js实现打印功能","date":"2019-08-19T16:00:00.000Z","_content":" \n\n打印其实最终都是调用window.print方法实现打印。只不过，我们通常不是打印整个页面，所以，诞生了各种各样的方法实现部分打印。适配vue框架的打印组件有vuePlugs_printjs和vue-print-nb。这两者实现的方式是一样的，都是使用iframe插入打印区域和对应样式。区别只是使用方式的区别。\n\n那么，我也实现了一个原生js实现的打印功能。\n\n## 一、新建iframe窗口\n为了打印出想要的部分，我们需要新建一个窗口，把需要的dom装进去。为了避免部分浏览器阻止窗口弹出导致无法打印，建议使用iframe。\n\n打印的时候，我们需要防止iframe的显示影响页面布局，只需要在父页面设置iframe的样式为display: none即可。如下：\n\n```javascript\nconst frame = document.createElement('iframe')\nframe.style.display = 'none'\ndocument.body.appendChild(frame)\n```\n\n## 二、选择需要打印的部分dom\n\n从当前dom选择需要打印的dom元素，插入iframe。\n\n```javascript\nlet target = document.getElementById('print-target')\nif (target) {\n  frame.contentDocument.body.innerHTML = target.outerHTML\n}\n```\n\n## 三、插入样式\n\n一般情况下，你可以直接将父页面的style和link全部拷贝到iframe中，这样打印到样式和原本样式是一样的，除非打印部分的样式受未打印部分的父元素控制导致样式脱节，所以，打印部分的样式尽量和父元素解耦。\n\n我们知道，浏览器打印的时候你可能需要不一样的样式，只需要加多一个style标签引入打印样式即可。比较典型的就是，打印的时候你想要按照需要打印的纸张尺寸打印，这时候可以在@media print中将容器的宽度改为打印尺寸（如A4是210mm，css支持mm单位的尺寸）。\n\n## 四、特殊元素处理\n\n由于我们将打印区域拷贝到ifame中采用对的是将targetElement.outerHTML赋值给iframe的body的。这样赋值的情况下，部分表单组件会失去值，所以，我们需要在赋值之前将值固定，如下：\n\n```javascript\n// https://github.com/Power-kxLee/vue-print-nb/blob/master/src/packages/printarea.js\nlet copy = ele.cloneNode(true);\nlet copiedInputs = copy.querySelectorAll('input,select,textarea');\nlet selectCount = -1;\nfor (let i = 0; i < copiedInputs.length; i++) {\n    let item = copiedInputs[i];\n    let typeInput = item.getAttribute('type');\n    let copiedInput = copiedInputs[i];\n    // 获取select标签\n    if (!typeInput) {\n        typeInput = item.tagName === 'SELECT' ? 'select' : item.tagName === 'TEXTAREA' ? 'textarea' : '';\n    }\n    // 处理input框\n    if (item.tagName === 'INPUT') {\n        // 除了单选框 多选框比较特别\n        if (typeInput === 'radio' || typeInput === 'checkbox') {\n            copiedInput.setAttribute('checked', item.checked);\n        // \n        } else {\n            copiedInput.value = item.value;\n            copiedInput.setAttribute('value', item.value);\n        } \n    // 处理select\n    } else if (typeInput === 'select') {\n        \n        selectCount ++;\n        for (let b = 0; b < ele.querySelectorAll('select').length; b++) {\n            let select = ele.querySelectorAll('select')[b]; // 获取原始层每一个select\n            !select.getAttribute('newbs') && select.setAttribute('newbs', b) // 添加标识\n            if (select.getAttribute('newbs') == selectCount) {\n                let opSelectedIndex = ele.querySelectorAll('select')[selectCount].selectedIndex;\n                item.options[opSelectedIndex].setAttribute('selected', true);\n\n            }\n        }\n    // 处理textarea\n    } else{\n        copiedInput.innerHTML = item.value;\n        copiedInput.setAttribute('html', item.value);\n    }\n}\n```\n","source":"_posts/blogs/print.md","raw":"---\ntitle: 纯js实现打印功能\ncategories: js\ndate: 2019-8-20\n--- \n\n打印其实最终都是调用window.print方法实现打印。只不过，我们通常不是打印整个页面，所以，诞生了各种各样的方法实现部分打印。适配vue框架的打印组件有vuePlugs_printjs和vue-print-nb。这两者实现的方式是一样的，都是使用iframe插入打印区域和对应样式。区别只是使用方式的区别。\n\n那么，我也实现了一个原生js实现的打印功能。\n\n## 一、新建iframe窗口\n为了打印出想要的部分，我们需要新建一个窗口，把需要的dom装进去。为了避免部分浏览器阻止窗口弹出导致无法打印，建议使用iframe。\n\n打印的时候，我们需要防止iframe的显示影响页面布局，只需要在父页面设置iframe的样式为display: none即可。如下：\n\n```javascript\nconst frame = document.createElement('iframe')\nframe.style.display = 'none'\ndocument.body.appendChild(frame)\n```\n\n## 二、选择需要打印的部分dom\n\n从当前dom选择需要打印的dom元素，插入iframe。\n\n```javascript\nlet target = document.getElementById('print-target')\nif (target) {\n  frame.contentDocument.body.innerHTML = target.outerHTML\n}\n```\n\n## 三、插入样式\n\n一般情况下，你可以直接将父页面的style和link全部拷贝到iframe中，这样打印到样式和原本样式是一样的，除非打印部分的样式受未打印部分的父元素控制导致样式脱节，所以，打印部分的样式尽量和父元素解耦。\n\n我们知道，浏览器打印的时候你可能需要不一样的样式，只需要加多一个style标签引入打印样式即可。比较典型的就是，打印的时候你想要按照需要打印的纸张尺寸打印，这时候可以在@media print中将容器的宽度改为打印尺寸（如A4是210mm，css支持mm单位的尺寸）。\n\n## 四、特殊元素处理\n\n由于我们将打印区域拷贝到ifame中采用对的是将targetElement.outerHTML赋值给iframe的body的。这样赋值的情况下，部分表单组件会失去值，所以，我们需要在赋值之前将值固定，如下：\n\n```javascript\n// https://github.com/Power-kxLee/vue-print-nb/blob/master/src/packages/printarea.js\nlet copy = ele.cloneNode(true);\nlet copiedInputs = copy.querySelectorAll('input,select,textarea');\nlet selectCount = -1;\nfor (let i = 0; i < copiedInputs.length; i++) {\n    let item = copiedInputs[i];\n    let typeInput = item.getAttribute('type');\n    let copiedInput = copiedInputs[i];\n    // 获取select标签\n    if (!typeInput) {\n        typeInput = item.tagName === 'SELECT' ? 'select' : item.tagName === 'TEXTAREA' ? 'textarea' : '';\n    }\n    // 处理input框\n    if (item.tagName === 'INPUT') {\n        // 除了单选框 多选框比较特别\n        if (typeInput === 'radio' || typeInput === 'checkbox') {\n            copiedInput.setAttribute('checked', item.checked);\n        // \n        } else {\n            copiedInput.value = item.value;\n            copiedInput.setAttribute('value', item.value);\n        } \n    // 处理select\n    } else if (typeInput === 'select') {\n        \n        selectCount ++;\n        for (let b = 0; b < ele.querySelectorAll('select').length; b++) {\n            let select = ele.querySelectorAll('select')[b]; // 获取原始层每一个select\n            !select.getAttribute('newbs') && select.setAttribute('newbs', b) // 添加标识\n            if (select.getAttribute('newbs') == selectCount) {\n                let opSelectedIndex = ele.querySelectorAll('select')[selectCount].selectedIndex;\n                item.options[opSelectedIndex].setAttribute('selected', true);\n\n            }\n        }\n    // 处理textarea\n    } else{\n        copiedInput.innerHTML = item.value;\n        copiedInput.setAttribute('html', item.value);\n    }\n}\n```\n","slug":"blogs/print","published":1,"updated":"2021-05-31T00:31:00.002Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpcooutl0008u9q88l7m28ny","content":"<p>打印其实最终都是调用window.print方法实现打印。只不过，我们通常不是打印整个页面，所以，诞生了各种各样的方法实现部分打印。适配vue框架的打印组件有vuePlugs_printjs和vue-print-nb。这两者实现的方式是一样的，都是使用iframe插入打印区域和对应样式。区别只是使用方式的区别。</p>\n<p>那么，我也实现了一个原生js实现的打印功能。</p>\n<h2 id=\"一、新建iframe窗口\"><a href=\"#一、新建iframe窗口\" class=\"headerlink\" title=\"一、新建iframe窗口\"></a>一、新建iframe窗口</h2><p>为了打印出想要的部分，我们需要新建一个窗口，把需要的dom装进去。为了避免部分浏览器阻止窗口弹出导致无法打印，建议使用iframe。</p>\n<p>打印的时候，我们需要防止iframe的显示影响页面布局，只需要在父页面设置iframe的样式为display: none即可。如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> frame = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;iframe&#x27;</span>)</span><br><span class=\"line\">frame.style.display = <span class=\"string\">&#x27;none&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(frame)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、选择需要打印的部分dom\"><a href=\"#二、选择需要打印的部分dom\" class=\"headerlink\" title=\"二、选择需要打印的部分dom\"></a>二、选择需要打印的部分dom</h2><p>从当前dom选择需要打印的dom元素，插入iframe。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> target = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;print-target&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (target) &#123;</span><br><span class=\"line\">  frame.contentDocument.body.innerHTML = target.outerHTML</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、插入样式\"><a href=\"#三、插入样式\" class=\"headerlink\" title=\"三、插入样式\"></a>三、插入样式</h2><p>一般情况下，你可以直接将父页面的style和link全部拷贝到iframe中，这样打印到样式和原本样式是一样的，除非打印部分的样式受未打印部分的父元素控制导致样式脱节，所以，打印部分的样式尽量和父元素解耦。</p>\n<p>我们知道，浏览器打印的时候你可能需要不一样的样式，只需要加多一个style标签引入打印样式即可。比较典型的就是，打印的时候你想要按照需要打印的纸张尺寸打印，这时候可以在@media print中将容器的宽度改为打印尺寸（如A4是210mm，css支持mm单位的尺寸）。</p>\n<h2 id=\"四、特殊元素处理\"><a href=\"#四、特殊元素处理\" class=\"headerlink\" title=\"四、特殊元素处理\"></a>四、特殊元素处理</h2><p>由于我们将打印区域拷贝到ifame中采用对的是将targetElement.outerHTML赋值给iframe的body的。这样赋值的情况下，部分表单组件会失去值，所以，我们需要在赋值之前将值固定，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// https://github.com/Power-kxLee/vue-print-nb/blob/master/src/packages/printarea.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> copy = ele.cloneNode(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> copiedInputs = copy.querySelectorAll(<span class=\"string\">&#x27;input,select,textarea&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> selectCount = -<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; copiedInputs.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> item = copiedInputs[i];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> typeInput = item.getAttribute(<span class=\"string\">&#x27;type&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> copiedInput = copiedInputs[i];</span><br><span class=\"line\">    <span class=\"comment\">// 获取select标签</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!typeInput) &#123;</span><br><span class=\"line\">        typeInput = item.tagName === <span class=\"string\">&#x27;SELECT&#x27;</span> ? <span class=\"string\">&#x27;select&#x27;</span> : item.tagName === <span class=\"string\">&#x27;TEXTAREA&#x27;</span> ? <span class=\"string\">&#x27;textarea&#x27;</span> : <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 处理input框</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item.tagName === <span class=\"string\">&#x27;INPUT&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 除了单选框 多选框比较特别</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (typeInput === <span class=\"string\">&#x27;radio&#x27;</span> || typeInput === <span class=\"string\">&#x27;checkbox&#x27;</span>) &#123;</span><br><span class=\"line\">            copiedInput.setAttribute(<span class=\"string\">&#x27;checked&#x27;</span>, item.checked);</span><br><span class=\"line\">        <span class=\"comment\">// </span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            copiedInput.value = item.value;</span><br><span class=\"line\">            copiedInput.setAttribute(<span class=\"string\">&#x27;value&#x27;</span>, item.value);</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    <span class=\"comment\">// 处理select</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (typeInput === <span class=\"string\">&#x27;select&#x27;</span>) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        selectCount ++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> b = <span class=\"number\">0</span>; b &lt; ele.querySelectorAll(<span class=\"string\">&#x27;select&#x27;</span>).length; b++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> select = ele.querySelectorAll(<span class=\"string\">&#x27;select&#x27;</span>)[b]; <span class=\"comment\">// 获取原始层每一个select</span></span><br><span class=\"line\">            !select.getAttribute(<span class=\"string\">&#x27;newbs&#x27;</span>) &amp;&amp; select.setAttribute(<span class=\"string\">&#x27;newbs&#x27;</span>, b) <span class=\"comment\">// 添加标识</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (select.getAttribute(<span class=\"string\">&#x27;newbs&#x27;</span>) == selectCount) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> opSelectedIndex = ele.querySelectorAll(<span class=\"string\">&#x27;select&#x27;</span>)[selectCount].selectedIndex;</span><br><span class=\"line\">                item.options[opSelectedIndex].setAttribute(<span class=\"string\">&#x27;selected&#x27;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 处理textarea</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        copiedInput.innerHTML = item.value;</span><br><span class=\"line\">        copiedInput.setAttribute(<span class=\"string\">&#x27;html&#x27;</span>, item.value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>打印其实最终都是调用window.print方法实现打印。只不过，我们通常不是打印整个页面，所以，诞生了各种各样的方法实现部分打印。适配vue框架的打印组件有vuePlugs_printjs和vue-print-nb。这两者实现的方式是一样的，都是使用iframe插入打印区域和对应样式。区别只是使用方式的区别。</p>\n<p>那么，我也实现了一个原生js实现的打印功能。</p>\n<h2 id=\"一、新建iframe窗口\"><a href=\"#一、新建iframe窗口\" class=\"headerlink\" title=\"一、新建iframe窗口\"></a>一、新建iframe窗口</h2><p>为了打印出想要的部分，我们需要新建一个窗口，把需要的dom装进去。为了避免部分浏览器阻止窗口弹出导致无法打印，建议使用iframe。</p>\n<p>打印的时候，我们需要防止iframe的显示影响页面布局，只需要在父页面设置iframe的样式为display: none即可。如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> frame = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;iframe&#x27;</span>)</span><br><span class=\"line\">frame.style.display = <span class=\"string\">&#x27;none&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(frame)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、选择需要打印的部分dom\"><a href=\"#二、选择需要打印的部分dom\" class=\"headerlink\" title=\"二、选择需要打印的部分dom\"></a>二、选择需要打印的部分dom</h2><p>从当前dom选择需要打印的dom元素，插入iframe。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> target = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;print-target&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (target) &#123;</span><br><span class=\"line\">  frame.contentDocument.body.innerHTML = target.outerHTML</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、插入样式\"><a href=\"#三、插入样式\" class=\"headerlink\" title=\"三、插入样式\"></a>三、插入样式</h2><p>一般情况下，你可以直接将父页面的style和link全部拷贝到iframe中，这样打印到样式和原本样式是一样的，除非打印部分的样式受未打印部分的父元素控制导致样式脱节，所以，打印部分的样式尽量和父元素解耦。</p>\n<p>我们知道，浏览器打印的时候你可能需要不一样的样式，只需要加多一个style标签引入打印样式即可。比较典型的就是，打印的时候你想要按照需要打印的纸张尺寸打印，这时候可以在@media print中将容器的宽度改为打印尺寸（如A4是210mm，css支持mm单位的尺寸）。</p>\n<h2 id=\"四、特殊元素处理\"><a href=\"#四、特殊元素处理\" class=\"headerlink\" title=\"四、特殊元素处理\"></a>四、特殊元素处理</h2><p>由于我们将打印区域拷贝到ifame中采用对的是将targetElement.outerHTML赋值给iframe的body的。这样赋值的情况下，部分表单组件会失去值，所以，我们需要在赋值之前将值固定，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// https://github.com/Power-kxLee/vue-print-nb/blob/master/src/packages/printarea.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> copy = ele.cloneNode(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> copiedInputs = copy.querySelectorAll(<span class=\"string\">&#x27;input,select,textarea&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> selectCount = -<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; copiedInputs.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> item = copiedInputs[i];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> typeInput = item.getAttribute(<span class=\"string\">&#x27;type&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> copiedInput = copiedInputs[i];</span><br><span class=\"line\">    <span class=\"comment\">// 获取select标签</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!typeInput) &#123;</span><br><span class=\"line\">        typeInput = item.tagName === <span class=\"string\">&#x27;SELECT&#x27;</span> ? <span class=\"string\">&#x27;select&#x27;</span> : item.tagName === <span class=\"string\">&#x27;TEXTAREA&#x27;</span> ? <span class=\"string\">&#x27;textarea&#x27;</span> : <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 处理input框</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item.tagName === <span class=\"string\">&#x27;INPUT&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 除了单选框 多选框比较特别</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (typeInput === <span class=\"string\">&#x27;radio&#x27;</span> || typeInput === <span class=\"string\">&#x27;checkbox&#x27;</span>) &#123;</span><br><span class=\"line\">            copiedInput.setAttribute(<span class=\"string\">&#x27;checked&#x27;</span>, item.checked);</span><br><span class=\"line\">        <span class=\"comment\">// </span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            copiedInput.value = item.value;</span><br><span class=\"line\">            copiedInput.setAttribute(<span class=\"string\">&#x27;value&#x27;</span>, item.value);</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    <span class=\"comment\">// 处理select</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (typeInput === <span class=\"string\">&#x27;select&#x27;</span>) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        selectCount ++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> b = <span class=\"number\">0</span>; b &lt; ele.querySelectorAll(<span class=\"string\">&#x27;select&#x27;</span>).length; b++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> select = ele.querySelectorAll(<span class=\"string\">&#x27;select&#x27;</span>)[b]; <span class=\"comment\">// 获取原始层每一个select</span></span><br><span class=\"line\">            !select.getAttribute(<span class=\"string\">&#x27;newbs&#x27;</span>) &amp;&amp; select.setAttribute(<span class=\"string\">&#x27;newbs&#x27;</span>, b) <span class=\"comment\">// 添加标识</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (select.getAttribute(<span class=\"string\">&#x27;newbs&#x27;</span>) == selectCount) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> opSelectedIndex = ele.querySelectorAll(<span class=\"string\">&#x27;select&#x27;</span>)[selectCount].selectedIndex;</span><br><span class=\"line\">                item.options[opSelectedIndex].setAttribute(<span class=\"string\">&#x27;selected&#x27;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 处理textarea</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        copiedInput.innerHTML = item.value;</span><br><span class=\"line\">        copiedInput.setAttribute(<span class=\"string\">&#x27;html&#x27;</span>, item.value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"html property & attribute","date":"2018-07-02T16:00:00.000Z","_content":" \n## property\n\nDOM元素的属性，如selectedIndex, tagName, nodeName, nodeType, ownerDocument, defaultChecked, defaultSelected\n\nDOM是提供给js访问页面元素的对象\n\n## attribute\n\nHTML标签上绑定的属性，包括id, value, name, type，除了value之外，其它属性基本都是字符串类型的\n\n### JQuery的attr()和prop()方法的区别\n\n#### prop()就是获取property属性的值，attr()是获取attribute的值\n\n#### 如果要改变DOM的值，获取会发生变化的属性值，需要调用prop()方法，比如checked, selected, or disabled\n\n\n```\n<input type=\"checkbox\" checked=\"checked\" />\n```\n\n对于以上标签，获取值对应关系如下：\n\n```\nelem.checked\ttrue (Boolean) Will change with checkbox state\n$( elem ).prop( \"checked\" )\ttrue (Boolean) Will change with checkbox state\nelem.getAttribute( \"checked\" )\t\"checked\" (String) Initial state of the checkbox; does not change\n$( elem ).attr( \"checked\" ) (1.6)\t\"checked\" (String) Initial state of the checkbox; does not change\n$( elem ).attr( \"checked\" ) (1.6.1+)\t\"checked\" (String) Will change with checkbox state\n$( elem ).attr( \"checked\" ) (pre-1.6)\ttrue (Boolean) Changed with checkbox state\n```\n","source":"_posts/blogs/property-attribute.md","raw":"---\ntitle: html property & attribute\ncategories: html\ndate: 2018-7-3\n--- \n## property\n\nDOM元素的属性，如selectedIndex, tagName, nodeName, nodeType, ownerDocument, defaultChecked, defaultSelected\n\nDOM是提供给js访问页面元素的对象\n\n## attribute\n\nHTML标签上绑定的属性，包括id, value, name, type，除了value之外，其它属性基本都是字符串类型的\n\n### JQuery的attr()和prop()方法的区别\n\n#### prop()就是获取property属性的值，attr()是获取attribute的值\n\n#### 如果要改变DOM的值，获取会发生变化的属性值，需要调用prop()方法，比如checked, selected, or disabled\n\n\n```\n<input type=\"checkbox\" checked=\"checked\" />\n```\n\n对于以上标签，获取值对应关系如下：\n\n```\nelem.checked\ttrue (Boolean) Will change with checkbox state\n$( elem ).prop( \"checked\" )\ttrue (Boolean) Will change with checkbox state\nelem.getAttribute( \"checked\" )\t\"checked\" (String) Initial state of the checkbox; does not change\n$( elem ).attr( \"checked\" ) (1.6)\t\"checked\" (String) Initial state of the checkbox; does not change\n$( elem ).attr( \"checked\" ) (1.6.1+)\t\"checked\" (String) Will change with checkbox state\n$( elem ).attr( \"checked\" ) (pre-1.6)\ttrue (Boolean) Changed with checkbox state\n```\n","slug":"blogs/property-attribute","published":1,"updated":"2021-05-31T00:31:21.300Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpcooutm0009u9q861p6djq5","content":"<h2 id=\"property\"><a href=\"#property\" class=\"headerlink\" title=\"property\"></a>property</h2><p>DOM元素的属性，如selectedIndex, tagName, nodeName, nodeType, ownerDocument, defaultChecked, defaultSelected</p>\n<p>DOM是提供给js访问页面元素的对象</p>\n<h2 id=\"attribute\"><a href=\"#attribute\" class=\"headerlink\" title=\"attribute\"></a>attribute</h2><p>HTML标签上绑定的属性，包括id, value, name, type，除了value之外，其它属性基本都是字符串类型的</p>\n<h3 id=\"JQuery的attr-和prop-方法的区别\"><a href=\"#JQuery的attr-和prop-方法的区别\" class=\"headerlink\" title=\"JQuery的attr()和prop()方法的区别\"></a>JQuery的attr()和prop()方法的区别</h3><h4 id=\"prop-就是获取property属性的值，attr-是获取attribute的值\"><a href=\"#prop-就是获取property属性的值，attr-是获取attribute的值\" class=\"headerlink\" title=\"prop()就是获取property属性的值，attr()是获取attribute的值\"></a>prop()就是获取property属性的值，attr()是获取attribute的值</h4><h4 id=\"如果要改变DOM的值，获取会发生变化的属性值，需要调用prop-方法，比如checked-selected-or-disabled\"><a href=\"#如果要改变DOM的值，获取会发生变化的属性值，需要调用prop-方法，比如checked-selected-or-disabled\" class=\"headerlink\" title=\"如果要改变DOM的值，获取会发生变化的属性值，需要调用prop()方法，比如checked, selected, or disabled\"></a>如果要改变DOM的值，获取会发生变化的属性值，需要调用prop()方法，比如checked, selected, or disabled</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;checkbox&quot; checked=&quot;checked&quot; /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>对于以上标签，获取值对应关系如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elem.checked\ttrue (Boolean) Will change with checkbox state</span><br><span class=\"line\">$( elem ).prop( &quot;checked&quot; )\ttrue (Boolean) Will change with checkbox state</span><br><span class=\"line\">elem.getAttribute( &quot;checked&quot; )\t&quot;checked&quot; (String) Initial state of the checkbox; does not change</span><br><span class=\"line\">$( elem ).attr( &quot;checked&quot; ) (1.6)\t&quot;checked&quot; (String) Initial state of the checkbox; does not change</span><br><span class=\"line\">$( elem ).attr( &quot;checked&quot; ) (1.6.1+)\t&quot;checked&quot; (String) Will change with checkbox state</span><br><span class=\"line\">$( elem ).attr( &quot;checked&quot; ) (pre-1.6)\ttrue (Boolean) Changed with checkbox state</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"property\"><a href=\"#property\" class=\"headerlink\" title=\"property\"></a>property</h2><p>DOM元素的属性，如selectedIndex, tagName, nodeName, nodeType, ownerDocument, defaultChecked, defaultSelected</p>\n<p>DOM是提供给js访问页面元素的对象</p>\n<h2 id=\"attribute\"><a href=\"#attribute\" class=\"headerlink\" title=\"attribute\"></a>attribute</h2><p>HTML标签上绑定的属性，包括id, value, name, type，除了value之外，其它属性基本都是字符串类型的</p>\n<h3 id=\"JQuery的attr-和prop-方法的区别\"><a href=\"#JQuery的attr-和prop-方法的区别\" class=\"headerlink\" title=\"JQuery的attr()和prop()方法的区别\"></a>JQuery的attr()和prop()方法的区别</h3><h4 id=\"prop-就是获取property属性的值，attr-是获取attribute的值\"><a href=\"#prop-就是获取property属性的值，attr-是获取attribute的值\" class=\"headerlink\" title=\"prop()就是获取property属性的值，attr()是获取attribute的值\"></a>prop()就是获取property属性的值，attr()是获取attribute的值</h4><h4 id=\"如果要改变DOM的值，获取会发生变化的属性值，需要调用prop-方法，比如checked-selected-or-disabled\"><a href=\"#如果要改变DOM的值，获取会发生变化的属性值，需要调用prop-方法，比如checked-selected-or-disabled\" class=\"headerlink\" title=\"如果要改变DOM的值，获取会发生变化的属性值，需要调用prop()方法，比如checked, selected, or disabled\"></a>如果要改变DOM的值，获取会发生变化的属性值，需要调用prop()方法，比如checked, selected, or disabled</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;checkbox&quot; checked=&quot;checked&quot; /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>对于以上标签，获取值对应关系如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elem.checked\ttrue (Boolean) Will change with checkbox state</span><br><span class=\"line\">$( elem ).prop( &quot;checked&quot; )\ttrue (Boolean) Will change with checkbox state</span><br><span class=\"line\">elem.getAttribute( &quot;checked&quot; )\t&quot;checked&quot; (String) Initial state of the checkbox; does not change</span><br><span class=\"line\">$( elem ).attr( &quot;checked&quot; ) (1.6)\t&quot;checked&quot; (String) Initial state of the checkbox; does not change</span><br><span class=\"line\">$( elem ).attr( &quot;checked&quot; ) (1.6.1+)\t&quot;checked&quot; (String) Will change with checkbox state</span><br><span class=\"line\">$( elem ).attr( &quot;checked&quot; ) (pre-1.6)\ttrue (Boolean) Changed with checkbox state</span><br></pre></td></tr></table></figure>\n"},{"title":"proxy 与 reflect","date":"2020-03-14T16:00:00.000Z","_content":" \n## Proxy\n\n### 定义\n> 在目标`对象`上架设一个`拦截`层， `外界`对该对象的`访问`先经过这一个`拦截`层，这个拦截层可以对外界对访问进行`过滤`和`改写`。翻译为`代理器`。\n\n举个`拦截`和`改写`例子：\n\n```javascript\nlet proxy = new Proxy({}, {\n  get: function() {\n    return 35\n  }\n})\n\nproxy.time // 35\nproxy.name // 35\n```\n\n上面对代码拦截了一个空对象的属性getter。只要是需要访问到对象的属性，都会触发getter。\n\n### Proxy 能拦截哪些`访问`行为呢？\n\n拦截行为 | 触发条件 | 返回值说明 \n-|-|-\nget(target, propKey, receiver)| 读取对象属性，proxy.foo，proxy['foo'] | 返回属性值 \nset(target, propKey, value, receiver) | 设置对象属性，proxy.foo = v，proxy['foo'] = v | 返回一个布尔值，表示是否设置成功\nhas(target, propKey) | propKey in proxy的操作 | 返回一个布尔值，表示是否包含此属性\ndeleteProperty(target, propKey) | delete proxy[propKey] | 返回一个布尔值，表示是否删除成功\nownKeys(target) | Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for...in循环 | 返回目标对象所有自身的属性的属性名\ngetOwnPropertyDescriptor(target, propKey) | Object.getOwnPropertyDescriptor(proxy, propKey) | 返回属性的描述对象\ndefineProperty(target, propKey, propDesc) | Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs) | 返回一个布尔值表示是否定义成功\npreventExtensions(target) | Object.preventExtensions(proxy) | 返回一个布尔值表示是否定义成功\ngetPrototypeOf(target) | Object.getPrototypeOf(proxy) | 返回一个对象（对象原型）\nisExtensible(target) | Object.isExtensible(proxy) | 返回一个布尔值\nsetPrototypeOf(target, proto) | Object.setPrototypeOf(proxy, proto) | 返回一个布尔值\napply(target, object, args) | 拦截 Proxy 实例作为函数调用的操作，比如proxy(...args)、proxy.call(object, ...args)、proxy.apply(...) | 无限制\nconstruct(target, args) | 拦截 Proxy 实例作为构造函数调用的操作，比如new proxy(...args) | 返回实例对象\n\n## Reflect\n\n### 定义\n\n1. 将Proxy支持的代理方法一一对应到Reflect，方便在Proxy中使用原对象的默认行为。\n```javascript\nlet proxy = new Proxy(target, {\n  set: function(target, name, value, receiver) {\n    var success = Reflect.set(target, name, value, receiver);\n    if (success) {\n      console.log('property ' + name + ' on ' + target + ' set to ' + value);\n    }\n    return success;\n  }\n});\nproxy.a = 1\n```\n\n2. 某些方法和Object原型方法行为高度一致，所以，除了在Proxy中使用，还可以单独使用。\n```javascript\n// 老写法\ntry {\n  Object.defineProperty(target, property, attributes);\n  // success\n} catch (e) {\n  // failure\n}\n\n// 新写法\nif (Reflect.defineProperty(target, property, attributes)) {\n  // success\n} else {\n  // failure\n}\n```\n\n\n## 谁在用\n\n### Vue\n\n#### 设置内置属性只读\n设置内置keyCode为只读：\n```javascript\nconst hasProxy =\n    typeof Proxy !== 'undefined' &&\n    Proxy.toString().match(/native code/)\n\n  if (hasProxy) {\n    const isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact')\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn(`Avoid overwriting built-in modifier in config.keyCodes: .${key}`)\n          return false\n        } else {\n          target[key] = value\n          return true\n        }\n      }\n    })\n  }\n```\n\n```javascript\nVue.config.keyCodes.ctrl = 86\n```\n以上代码会报错：\n![](/images/2019071701.jpeg)\n\n### 测试框架\n\n### 和defineProperty什么关系？\n\n## 什么时候适合用？","source":"_posts/blogs/proxy-reflect.md","raw":"---\ntitle: proxy 与 reflect\ncategories: js\ndate: 2020-3-15\n--- \n## Proxy\n\n### 定义\n> 在目标`对象`上架设一个`拦截`层， `外界`对该对象的`访问`先经过这一个`拦截`层，这个拦截层可以对外界对访问进行`过滤`和`改写`。翻译为`代理器`。\n\n举个`拦截`和`改写`例子：\n\n```javascript\nlet proxy = new Proxy({}, {\n  get: function() {\n    return 35\n  }\n})\n\nproxy.time // 35\nproxy.name // 35\n```\n\n上面对代码拦截了一个空对象的属性getter。只要是需要访问到对象的属性，都会触发getter。\n\n### Proxy 能拦截哪些`访问`行为呢？\n\n拦截行为 | 触发条件 | 返回值说明 \n-|-|-\nget(target, propKey, receiver)| 读取对象属性，proxy.foo，proxy['foo'] | 返回属性值 \nset(target, propKey, value, receiver) | 设置对象属性，proxy.foo = v，proxy['foo'] = v | 返回一个布尔值，表示是否设置成功\nhas(target, propKey) | propKey in proxy的操作 | 返回一个布尔值，表示是否包含此属性\ndeleteProperty(target, propKey) | delete proxy[propKey] | 返回一个布尔值，表示是否删除成功\nownKeys(target) | Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for...in循环 | 返回目标对象所有自身的属性的属性名\ngetOwnPropertyDescriptor(target, propKey) | Object.getOwnPropertyDescriptor(proxy, propKey) | 返回属性的描述对象\ndefineProperty(target, propKey, propDesc) | Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs) | 返回一个布尔值表示是否定义成功\npreventExtensions(target) | Object.preventExtensions(proxy) | 返回一个布尔值表示是否定义成功\ngetPrototypeOf(target) | Object.getPrototypeOf(proxy) | 返回一个对象（对象原型）\nisExtensible(target) | Object.isExtensible(proxy) | 返回一个布尔值\nsetPrototypeOf(target, proto) | Object.setPrototypeOf(proxy, proto) | 返回一个布尔值\napply(target, object, args) | 拦截 Proxy 实例作为函数调用的操作，比如proxy(...args)、proxy.call(object, ...args)、proxy.apply(...) | 无限制\nconstruct(target, args) | 拦截 Proxy 实例作为构造函数调用的操作，比如new proxy(...args) | 返回实例对象\n\n## Reflect\n\n### 定义\n\n1. 将Proxy支持的代理方法一一对应到Reflect，方便在Proxy中使用原对象的默认行为。\n```javascript\nlet proxy = new Proxy(target, {\n  set: function(target, name, value, receiver) {\n    var success = Reflect.set(target, name, value, receiver);\n    if (success) {\n      console.log('property ' + name + ' on ' + target + ' set to ' + value);\n    }\n    return success;\n  }\n});\nproxy.a = 1\n```\n\n2. 某些方法和Object原型方法行为高度一致，所以，除了在Proxy中使用，还可以单独使用。\n```javascript\n// 老写法\ntry {\n  Object.defineProperty(target, property, attributes);\n  // success\n} catch (e) {\n  // failure\n}\n\n// 新写法\nif (Reflect.defineProperty(target, property, attributes)) {\n  // success\n} else {\n  // failure\n}\n```\n\n\n## 谁在用\n\n### Vue\n\n#### 设置内置属性只读\n设置内置keyCode为只读：\n```javascript\nconst hasProxy =\n    typeof Proxy !== 'undefined' &&\n    Proxy.toString().match(/native code/)\n\n  if (hasProxy) {\n    const isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact')\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn(`Avoid overwriting built-in modifier in config.keyCodes: .${key}`)\n          return false\n        } else {\n          target[key] = value\n          return true\n        }\n      }\n    })\n  }\n```\n\n```javascript\nVue.config.keyCodes.ctrl = 86\n```\n以上代码会报错：\n![](/images/2019071701.jpeg)\n\n### 测试框架\n\n### 和defineProperty什么关系？\n\n## 什么时候适合用？","slug":"blogs/proxy-reflect","published":1,"updated":"2021-05-31T14:15:38.835Z","_id":"ckpcooutn000au9q81mct80zd","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Proxy\"><a href=\"#Proxy\" class=\"headerlink\" title=\"Proxy\"></a>Proxy</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><blockquote>\n<p>在目标<code>对象</code>上架设一个<code>拦截</code>层， <code>外界</code>对该对象的<code>访问</code>先经过这一个<code>拦截</code>层，这个拦截层可以对外界对访问进行<code>过滤</code>和<code>改写</code>。翻译为<code>代理器</code>。</p>\n</blockquote>\n<p>举个<code>拦截</code>和<code>改写</code>例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">  <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">35</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">proxy.time <span class=\"comment\">// 35</span></span><br><span class=\"line\">proxy.name <span class=\"comment\">// 35</span></span><br></pre></td></tr></table></figure>\n\n<p>上面对代码拦截了一个空对象的属性getter。只要是需要访问到对象的属性，都会触发getter。</p>\n<h3 id=\"Proxy-能拦截哪些访问行为呢？\"><a href=\"#Proxy-能拦截哪些访问行为呢？\" class=\"headerlink\" title=\"Proxy 能拦截哪些访问行为呢？\"></a>Proxy 能拦截哪些<code>访问</code>行为呢？</h3><table>\n<thead>\n<tr>\n<th>拦截行为</th>\n<th>触发条件</th>\n<th>返回值说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>get(target, propKey, receiver)</td>\n<td>读取对象属性，proxy.foo，proxy[‘foo’]</td>\n<td>返回属性值</td>\n</tr>\n<tr>\n<td>set(target, propKey, value, receiver)</td>\n<td>设置对象属性，proxy.foo = v，proxy[‘foo’] = v</td>\n<td>返回一个布尔值，表示是否设置成功</td>\n</tr>\n<tr>\n<td>has(target, propKey)</td>\n<td>propKey in proxy的操作</td>\n<td>返回一个布尔值，表示是否包含此属性</td>\n</tr>\n<tr>\n<td>deleteProperty(target, propKey)</td>\n<td>delete proxy[propKey]</td>\n<td>返回一个布尔值，表示是否删除成功</td>\n</tr>\n<tr>\n<td>ownKeys(target)</td>\n<td>Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for…in循环</td>\n<td>返回目标对象所有自身的属性的属性名</td>\n</tr>\n<tr>\n<td>getOwnPropertyDescriptor(target, propKey)</td>\n<td>Object.getOwnPropertyDescriptor(proxy, propKey)</td>\n<td>返回属性的描述对象</td>\n</tr>\n<tr>\n<td>defineProperty(target, propKey, propDesc)</td>\n<td>Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs)</td>\n<td>返回一个布尔值表示是否定义成功</td>\n</tr>\n<tr>\n<td>preventExtensions(target)</td>\n<td>Object.preventExtensions(proxy)</td>\n<td>返回一个布尔值表示是否定义成功</td>\n</tr>\n<tr>\n<td>getPrototypeOf(target)</td>\n<td>Object.getPrototypeOf(proxy)</td>\n<td>返回一个对象（对象原型）</td>\n</tr>\n<tr>\n<td>isExtensible(target)</td>\n<td>Object.isExtensible(proxy)</td>\n<td>返回一个布尔值</td>\n</tr>\n<tr>\n<td>setPrototypeOf(target, proto)</td>\n<td>Object.setPrototypeOf(proxy, proto)</td>\n<td>返回一个布尔值</td>\n</tr>\n<tr>\n<td>apply(target, object, args)</td>\n<td>拦截 Proxy 实例作为函数调用的操作，比如proxy(…args)、proxy.call(object, …args)、proxy.apply(…)</td>\n<td>无限制</td>\n</tr>\n<tr>\n<td>construct(target, args)</td>\n<td>拦截 Proxy 实例作为构造函数调用的操作，比如new proxy(…args)</td>\n<td>返回实例对象</td>\n</tr>\n</tbody></table>\n<h2 id=\"Reflect\"><a href=\"#Reflect\" class=\"headerlink\" title=\"Reflect\"></a>Reflect</h2><h3 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h3><ol>\n<li><p>将Proxy支持的代理方法一一对应到Reflect，方便在Proxy中使用原对象的默认行为。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, &#123;</span><br><span class=\"line\">  <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, name, value, receiver</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> success = <span class=\"built_in\">Reflect</span>.set(target, name, value, receiver);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (success) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;property &#x27;</span> + name + <span class=\"string\">&#x27; on &#x27;</span> + target + <span class=\"string\">&#x27; set to &#x27;</span> + value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> success;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">proxy.a = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure></li>\n<li><p>某些方法和Object原型方法行为高度一致，所以，除了在Proxy中使用，还可以单独使用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 老写法</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(target, property, attributes);</span><br><span class=\"line\">  <span class=\"comment\">// success</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// failure</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新写法</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">Reflect</span>.defineProperty(target, property, attributes)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// success</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// failure</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"谁在用\"><a href=\"#谁在用\" class=\"headerlink\" title=\"谁在用\"></a>谁在用</h2><h3 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h3><h4 id=\"设置内置属性只读\"><a href=\"#设置内置属性只读\" class=\"headerlink\" title=\"设置内置属性只读\"></a>设置内置属性只读</h4><p>设置内置keyCode为只读：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> hasProxy =</span><br><span class=\"line\">    <span class=\"keyword\">typeof</span> <span class=\"built_in\">Proxy</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp;</span><br><span class=\"line\">    <span class=\"built_in\">Proxy</span>.toString().match(<span class=\"regexp\">/native code/</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (hasProxy) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> isBuiltInModifier = makeMap(<span class=\"string\">&#x27;stop,prevent,self,ctrl,shift,alt,meta,exact&#x27;</span>)</span><br><span class=\"line\">    config.keyCodes = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(config.keyCodes, &#123;</span><br><span class=\"line\">      set (target, key, value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isBuiltInModifier(key)) &#123;</span><br><span class=\"line\">          warn(<span class=\"string\">`Avoid overwriting built-in modifier in config.keyCodes: .<span class=\"subst\">$&#123;key&#125;</span>`</span>)</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          target[key] = value</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.config.keyCodes.ctrl = <span class=\"number\">86</span></span><br></pre></td></tr></table></figure>\n<p>以上代码会报错：<br><img src=\"/images/2019071701.jpeg\"></p>\n<h3 id=\"测试框架\"><a href=\"#测试框架\" class=\"headerlink\" title=\"测试框架\"></a>测试框架</h3><h3 id=\"和defineProperty什么关系？\"><a href=\"#和defineProperty什么关系？\" class=\"headerlink\" title=\"和defineProperty什么关系？\"></a>和defineProperty什么关系？</h3><h2 id=\"什么时候适合用？\"><a href=\"#什么时候适合用？\" class=\"headerlink\" title=\"什么时候适合用？\"></a>什么时候适合用？</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Proxy\"><a href=\"#Proxy\" class=\"headerlink\" title=\"Proxy\"></a>Proxy</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><blockquote>\n<p>在目标<code>对象</code>上架设一个<code>拦截</code>层， <code>外界</code>对该对象的<code>访问</code>先经过这一个<code>拦截</code>层，这个拦截层可以对外界对访问进行<code>过滤</code>和<code>改写</code>。翻译为<code>代理器</code>。</p>\n</blockquote>\n<p>举个<code>拦截</code>和<code>改写</code>例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">  <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">35</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">proxy.time <span class=\"comment\">// 35</span></span><br><span class=\"line\">proxy.name <span class=\"comment\">// 35</span></span><br></pre></td></tr></table></figure>\n\n<p>上面对代码拦截了一个空对象的属性getter。只要是需要访问到对象的属性，都会触发getter。</p>\n<h3 id=\"Proxy-能拦截哪些访问行为呢？\"><a href=\"#Proxy-能拦截哪些访问行为呢？\" class=\"headerlink\" title=\"Proxy 能拦截哪些访问行为呢？\"></a>Proxy 能拦截哪些<code>访问</code>行为呢？</h3><table>\n<thead>\n<tr>\n<th>拦截行为</th>\n<th>触发条件</th>\n<th>返回值说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>get(target, propKey, receiver)</td>\n<td>读取对象属性，proxy.foo，proxy[‘foo’]</td>\n<td>返回属性值</td>\n</tr>\n<tr>\n<td>set(target, propKey, value, receiver)</td>\n<td>设置对象属性，proxy.foo = v，proxy[‘foo’] = v</td>\n<td>返回一个布尔值，表示是否设置成功</td>\n</tr>\n<tr>\n<td>has(target, propKey)</td>\n<td>propKey in proxy的操作</td>\n<td>返回一个布尔值，表示是否包含此属性</td>\n</tr>\n<tr>\n<td>deleteProperty(target, propKey)</td>\n<td>delete proxy[propKey]</td>\n<td>返回一个布尔值，表示是否删除成功</td>\n</tr>\n<tr>\n<td>ownKeys(target)</td>\n<td>Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for…in循环</td>\n<td>返回目标对象所有自身的属性的属性名</td>\n</tr>\n<tr>\n<td>getOwnPropertyDescriptor(target, propKey)</td>\n<td>Object.getOwnPropertyDescriptor(proxy, propKey)</td>\n<td>返回属性的描述对象</td>\n</tr>\n<tr>\n<td>defineProperty(target, propKey, propDesc)</td>\n<td>Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs)</td>\n<td>返回一个布尔值表示是否定义成功</td>\n</tr>\n<tr>\n<td>preventExtensions(target)</td>\n<td>Object.preventExtensions(proxy)</td>\n<td>返回一个布尔值表示是否定义成功</td>\n</tr>\n<tr>\n<td>getPrototypeOf(target)</td>\n<td>Object.getPrototypeOf(proxy)</td>\n<td>返回一个对象（对象原型）</td>\n</tr>\n<tr>\n<td>isExtensible(target)</td>\n<td>Object.isExtensible(proxy)</td>\n<td>返回一个布尔值</td>\n</tr>\n<tr>\n<td>setPrototypeOf(target, proto)</td>\n<td>Object.setPrototypeOf(proxy, proto)</td>\n<td>返回一个布尔值</td>\n</tr>\n<tr>\n<td>apply(target, object, args)</td>\n<td>拦截 Proxy 实例作为函数调用的操作，比如proxy(…args)、proxy.call(object, …args)、proxy.apply(…)</td>\n<td>无限制</td>\n</tr>\n<tr>\n<td>construct(target, args)</td>\n<td>拦截 Proxy 实例作为构造函数调用的操作，比如new proxy(…args)</td>\n<td>返回实例对象</td>\n</tr>\n</tbody></table>\n<h2 id=\"Reflect\"><a href=\"#Reflect\" class=\"headerlink\" title=\"Reflect\"></a>Reflect</h2><h3 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h3><ol>\n<li><p>将Proxy支持的代理方法一一对应到Reflect，方便在Proxy中使用原对象的默认行为。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, &#123;</span><br><span class=\"line\">  <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, name, value, receiver</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> success = <span class=\"built_in\">Reflect</span>.set(target, name, value, receiver);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (success) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;property &#x27;</span> + name + <span class=\"string\">&#x27; on &#x27;</span> + target + <span class=\"string\">&#x27; set to &#x27;</span> + value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> success;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">proxy.a = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure></li>\n<li><p>某些方法和Object原型方法行为高度一致，所以，除了在Proxy中使用，还可以单独使用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 老写法</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(target, property, attributes);</span><br><span class=\"line\">  <span class=\"comment\">// success</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// failure</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新写法</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">Reflect</span>.defineProperty(target, property, attributes)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// success</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// failure</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"谁在用\"><a href=\"#谁在用\" class=\"headerlink\" title=\"谁在用\"></a>谁在用</h2><h3 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h3><h4 id=\"设置内置属性只读\"><a href=\"#设置内置属性只读\" class=\"headerlink\" title=\"设置内置属性只读\"></a>设置内置属性只读</h4><p>设置内置keyCode为只读：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> hasProxy =</span><br><span class=\"line\">    <span class=\"keyword\">typeof</span> <span class=\"built_in\">Proxy</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp;</span><br><span class=\"line\">    <span class=\"built_in\">Proxy</span>.toString().match(<span class=\"regexp\">/native code/</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (hasProxy) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> isBuiltInModifier = makeMap(<span class=\"string\">&#x27;stop,prevent,self,ctrl,shift,alt,meta,exact&#x27;</span>)</span><br><span class=\"line\">    config.keyCodes = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(config.keyCodes, &#123;</span><br><span class=\"line\">      set (target, key, value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isBuiltInModifier(key)) &#123;</span><br><span class=\"line\">          warn(<span class=\"string\">`Avoid overwriting built-in modifier in config.keyCodes: .<span class=\"subst\">$&#123;key&#125;</span>`</span>)</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          target[key] = value</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.config.keyCodes.ctrl = <span class=\"number\">86</span></span><br></pre></td></tr></table></figure>\n<p>以上代码会报错：<br><img src=\"/images/2019071701.jpeg\"></p>\n<h3 id=\"测试框架\"><a href=\"#测试框架\" class=\"headerlink\" title=\"测试框架\"></a>测试框架</h3><h3 id=\"和defineProperty什么关系？\"><a href=\"#和defineProperty什么关系？\" class=\"headerlink\" title=\"和defineProperty什么关系？\"></a>和defineProperty什么关系？</h3><h2 id=\"什么时候适合用？\"><a href=\"#什么时候适合用？\" class=\"headerlink\" title=\"什么时候适合用？\"></a>什么时候适合用？</h2>"},{"title":"正向代理和反向代理的区别","date":"2020-03-16T16:00:00.000Z","_content":" \n## 正向代理\n\n位于客户端和服务器之间的代理服务器，对服务器不可见。\n\n![](/images/2019021401.png)\n\n客户端可以访问该代理服务器，但是客户端不直接访问代理背后的服务器，或者客户端根本没办法访问代理背后的服务器。\n\n客户端需要明确指定代理服务器的地址。以及可能需要身份认证来限制其它客户端随意访问。\n\n正向代理比较常见的使用场景是翻墙，局域网抓包。\n\n## 反向代理\n\n隐藏于服务器背后，对客户端不可见\n\n![](/images/2019021402.png)\n\n客户端访问的服务器本身就是反向代理服务器，只是客户端不知情。反向代理服务器将客户端的请求代发给其背后的服务器，拿到结果并传回给客户端。\n\n反向代理比较常见的场景是本地代码调试线上接口，表面访问本地接口，但是由本地反向代理服务器将接口转发到线上地址以解决接口跨域问题。\n另外一个常用的场景是服务器负载均衡，以及外网灰度发布。\n\n外网灰度发布举个例子，反向代理负责将请求转发给3个服务器，这3个服务器上的代码有一个是旧版本，另外2个是新版本。代理服务器将某些ip段客户端的请求转发给旧版本，其它的转发给新版本。这样就可以达到灰度发布的效果。\n","source":"_posts/blogs/proxy.md","raw":"---\ntitle: 正向代理和反向代理的区别\ncategories: 网络\ndate: 2020-3-17\n--- \n## 正向代理\n\n位于客户端和服务器之间的代理服务器，对服务器不可见。\n\n![](/images/2019021401.png)\n\n客户端可以访问该代理服务器，但是客户端不直接访问代理背后的服务器，或者客户端根本没办法访问代理背后的服务器。\n\n客户端需要明确指定代理服务器的地址。以及可能需要身份认证来限制其它客户端随意访问。\n\n正向代理比较常见的使用场景是翻墙，局域网抓包。\n\n## 反向代理\n\n隐藏于服务器背后，对客户端不可见\n\n![](/images/2019021402.png)\n\n客户端访问的服务器本身就是反向代理服务器，只是客户端不知情。反向代理服务器将客户端的请求代发给其背后的服务器，拿到结果并传回给客户端。\n\n反向代理比较常见的场景是本地代码调试线上接口，表面访问本地接口，但是由本地反向代理服务器将接口转发到线上地址以解决接口跨域问题。\n另外一个常用的场景是服务器负载均衡，以及外网灰度发布。\n\n外网灰度发布举个例子，反向代理负责将请求转发给3个服务器，这3个服务器上的代码有一个是旧版本，另外2个是新版本。代理服务器将某些ip段客户端的请求转发给旧版本，其它的转发给新版本。这样就可以达到灰度发布的效果。\n","slug":"blogs/proxy","published":1,"updated":"2021-05-31T14:15:38.835Z","_id":"ckpcooutn000bu9q82mrz7fyq","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"正向代理\"><a href=\"#正向代理\" class=\"headerlink\" title=\"正向代理\"></a>正向代理</h2><p>位于客户端和服务器之间的代理服务器，对服务器不可见。</p>\n<p><img src=\"/images/2019021401.png\"></p>\n<p>客户端可以访问该代理服务器，但是客户端不直接访问代理背后的服务器，或者客户端根本没办法访问代理背后的服务器。</p>\n<p>客户端需要明确指定代理服务器的地址。以及可能需要身份认证来限制其它客户端随意访问。</p>\n<p>正向代理比较常见的使用场景是翻墙，局域网抓包。</p>\n<h2 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h2><p>隐藏于服务器背后，对客户端不可见</p>\n<p><img src=\"/images/2019021402.png\"></p>\n<p>客户端访问的服务器本身就是反向代理服务器，只是客户端不知情。反向代理服务器将客户端的请求代发给其背后的服务器，拿到结果并传回给客户端。</p>\n<p>反向代理比较常见的场景是本地代码调试线上接口，表面访问本地接口，但是由本地反向代理服务器将接口转发到线上地址以解决接口跨域问题。<br>另外一个常用的场景是服务器负载均衡，以及外网灰度发布。</p>\n<p>外网灰度发布举个例子，反向代理负责将请求转发给3个服务器，这3个服务器上的代码有一个是旧版本，另外2个是新版本。代理服务器将某些ip段客户端的请求转发给旧版本，其它的转发给新版本。这样就可以达到灰度发布的效果。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"正向代理\"><a href=\"#正向代理\" class=\"headerlink\" title=\"正向代理\"></a>正向代理</h2><p>位于客户端和服务器之间的代理服务器，对服务器不可见。</p>\n<p><img src=\"/images/2019021401.png\"></p>\n<p>客户端可以访问该代理服务器，但是客户端不直接访问代理背后的服务器，或者客户端根本没办法访问代理背后的服务器。</p>\n<p>客户端需要明确指定代理服务器的地址。以及可能需要身份认证来限制其它客户端随意访问。</p>\n<p>正向代理比较常见的使用场景是翻墙，局域网抓包。</p>\n<h2 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h2><p>隐藏于服务器背后，对客户端不可见</p>\n<p><img src=\"/images/2019021402.png\"></p>\n<p>客户端访问的服务器本身就是反向代理服务器，只是客户端不知情。反向代理服务器将客户端的请求代发给其背后的服务器，拿到结果并传回给客户端。</p>\n<p>反向代理比较常见的场景是本地代码调试线上接口，表面访问本地接口，但是由本地反向代理服务器将接口转发到线上地址以解决接口跨域问题。<br>另外一个常用的场景是服务器负载均衡，以及外网灰度发布。</p>\n<p>外网灰度发布举个例子，反向代理负责将请求转发给3个服务器，这3个服务器上的代码有一个是旧版本，另外2个是新版本。代理服务器将某些ip段客户端的请求转发给旧版本，其它的转发给新版本。这样就可以达到灰度发布的效果。</p>\n"},{"title":"有趣的正则表达式","date":"2019-04-15T16:00:00.000Z","_content":" \n\n## 字符串拼接\n\n假设有这样一种场景：\n\n有三个字符串类型的变量，姓名(name)，性别(sex)，年龄(age)。想把这三个变量值用逗号拼接成1个字符串userInfo。\n\n常规的方法可能就是类似这样：\n```\nlet userInfo = `${name}，${sex}，${age}`\n```\n问题是，这三个变量可能都为空。你肯定不希望userInfo是\"，，10\"或者\"小明，，10\"或者\"，，\"\n\n简单的思考后你可能会这样做：\n```\nlet userInfo = ''\nname ? userInfo += name + '，' :\nsex ? userInfo += sex + '，':\nage ? userInfo += age + '，':\n```\n本着足够懒的想法，仔细考虑了一番之后，我总结出的规律就是：\n1. 开头结尾的连接符删除\n2. 中间有2个或以上的连接符都要删减至1个\n\n所以可以这样写：\n```\nlet userInfo = `${name}，${sex}，${age}`.replace(/(^，)|(，$)/g, '').replace(/，{2,}/, '，')\n```\n\n\n\n","source":"_posts/blogs/regexpression.md","raw":"---\ntitle: 有趣的正则表达式\ncategories: js\ndate: 2019-4-16\n--- \n\n## 字符串拼接\n\n假设有这样一种场景：\n\n有三个字符串类型的变量，姓名(name)，性别(sex)，年龄(age)。想把这三个变量值用逗号拼接成1个字符串userInfo。\n\n常规的方法可能就是类似这样：\n```\nlet userInfo = `${name}，${sex}，${age}`\n```\n问题是，这三个变量可能都为空。你肯定不希望userInfo是\"，，10\"或者\"小明，，10\"或者\"，，\"\n\n简单的思考后你可能会这样做：\n```\nlet userInfo = ''\nname ? userInfo += name + '，' :\nsex ? userInfo += sex + '，':\nage ? userInfo += age + '，':\n```\n本着足够懒的想法，仔细考虑了一番之后，我总结出的规律就是：\n1. 开头结尾的连接符删除\n2. 中间有2个或以上的连接符都要删减至1个\n\n所以可以这样写：\n```\nlet userInfo = `${name}，${sex}，${age}`.replace(/(^，)|(，$)/g, '').replace(/，{2,}/, '，')\n```\n\n\n\n","slug":"blogs/regexpression","published":1,"updated":"2021-05-31T00:32:06.756Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpcoouto000cu9q8duiodtxs","content":"<h2 id=\"字符串拼接\"><a href=\"#字符串拼接\" class=\"headerlink\" title=\"字符串拼接\"></a>字符串拼接</h2><p>假设有这样一种场景：</p>\n<p>有三个字符串类型的变量，姓名(name)，性别(sex)，年龄(age)。想把这三个变量值用逗号拼接成1个字符串userInfo。</p>\n<p>常规的方法可能就是类似这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let userInfo = `$&#123;name&#125;，$&#123;sex&#125;，$&#123;age&#125;`</span><br></pre></td></tr></table></figure>\n<p>问题是，这三个变量可能都为空。你肯定不希望userInfo是”，，10”或者”小明，，10”或者”，，”</p>\n<p>简单的思考后你可能会这样做：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let userInfo = &#x27;&#x27;</span><br><span class=\"line\">name ? userInfo += name + &#x27;，&#x27; :</span><br><span class=\"line\">sex ? userInfo += sex + &#x27;，&#x27;:</span><br><span class=\"line\">age ? userInfo += age + &#x27;，&#x27;:</span><br></pre></td></tr></table></figure>\n<p>本着足够懒的想法，仔细考虑了一番之后，我总结出的规律就是：</p>\n<ol>\n<li>开头结尾的连接符删除</li>\n<li>中间有2个或以上的连接符都要删减至1个</li>\n</ol>\n<p>所以可以这样写：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let userInfo = `$&#123;name&#125;，$&#123;sex&#125;，$&#123;age&#125;`.replace(/(^，)|(，$)/g, &#x27;&#x27;).replace(/，&#123;2,&#125;/, &#x27;，&#x27;)</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"字符串拼接\"><a href=\"#字符串拼接\" class=\"headerlink\" title=\"字符串拼接\"></a>字符串拼接</h2><p>假设有这样一种场景：</p>\n<p>有三个字符串类型的变量，姓名(name)，性别(sex)，年龄(age)。想把这三个变量值用逗号拼接成1个字符串userInfo。</p>\n<p>常规的方法可能就是类似这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let userInfo = `$&#123;name&#125;，$&#123;sex&#125;，$&#123;age&#125;`</span><br></pre></td></tr></table></figure>\n<p>问题是，这三个变量可能都为空。你肯定不希望userInfo是”，，10”或者”小明，，10”或者”，，”</p>\n<p>简单的思考后你可能会这样做：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let userInfo = &#x27;&#x27;</span><br><span class=\"line\">name ? userInfo += name + &#x27;，&#x27; :</span><br><span class=\"line\">sex ? userInfo += sex + &#x27;，&#x27;:</span><br><span class=\"line\">age ? userInfo += age + &#x27;，&#x27;:</span><br></pre></td></tr></table></figure>\n<p>本着足够懒的想法，仔细考虑了一番之后，我总结出的规律就是：</p>\n<ol>\n<li>开头结尾的连接符删除</li>\n<li>中间有2个或以上的连接符都要删减至1个</li>\n</ol>\n<p>所以可以这样写：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let userInfo = `$&#123;name&#125;，$&#123;sex&#125;，$&#123;age&#125;`.replace(/(^，)|(，$)/g, &#x27;&#x27;).replace(/，&#123;2,&#125;/, &#x27;，&#x27;)</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"base64字符串保存","date":"2020-05-07T16:00:00.000Z","_content":" \n\n```html\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>Document</title>\n</head>\n<body>\n\n</body>\n<script>\n//方法1\nfunction saveAsLink(base64Str) {\n  var a = document.createElement('a');   // 转换完成，创建一个a标签用于下载\n  a.download = fileName;\n  a.href = 'data:application/msword;base64,' + base64Str;\n  a.style.display = 'none';\n  document.body.appendChild(a)    // 修复firefox中无法触发click\n  a.click();\n  document.body.removeChild(a)\n}\nsaveAsLink(fileBse64Str)\n//方法2(firefox浏览器不兼容)\nvar blob = new Blob([_base64ToArrayBuffer(fileBse64Str)], {type: 'application/msword'}), fileName = '文件名称.doc'\nfunction _base64ToArrayBuffer(base64) {\n    var binary_string =  window.atob(base64);\n    var len = binary_string.length;\n    var bytes = new Uint8Array( len );\n    for (var i = 0; i < len; i++)        {\n        bytes[i] = binary_string.charCodeAt(i);\n    }\n    return bytes.buffer;\n}\nfunction downFile(blob, fileName) {\n  if (window.navigator.msSaveOrOpenBlob) {\n      navigator.msSaveBlob(blob, fileName);\n  } else {\n      var link = document.createElement('a');\n      debugger\n      link.href = window.URL.createObjectURL(blob);\n      link.download = fileName;\n      link.click();\n      window.URL.revokeObjectURL(link.href);\n  }\n}\ndownFile(blob, fileName)\n</script>\n</html>\n```\n","source":"_posts/blogs/save-base64.md","raw":"---\ntitle: base64字符串保存\ncategories: js\ndate: 2020-5-8\n--- \n\n```html\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>Document</title>\n</head>\n<body>\n\n</body>\n<script>\n//方法1\nfunction saveAsLink(base64Str) {\n  var a = document.createElement('a');   // 转换完成，创建一个a标签用于下载\n  a.download = fileName;\n  a.href = 'data:application/msword;base64,' + base64Str;\n  a.style.display = 'none';\n  document.body.appendChild(a)    // 修复firefox中无法触发click\n  a.click();\n  document.body.removeChild(a)\n}\nsaveAsLink(fileBse64Str)\n//方法2(firefox浏览器不兼容)\nvar blob = new Blob([_base64ToArrayBuffer(fileBse64Str)], {type: 'application/msword'}), fileName = '文件名称.doc'\nfunction _base64ToArrayBuffer(base64) {\n    var binary_string =  window.atob(base64);\n    var len = binary_string.length;\n    var bytes = new Uint8Array( len );\n    for (var i = 0; i < len; i++)        {\n        bytes[i] = binary_string.charCodeAt(i);\n    }\n    return bytes.buffer;\n}\nfunction downFile(blob, fileName) {\n  if (window.navigator.msSaveOrOpenBlob) {\n      navigator.msSaveBlob(blob, fileName);\n  } else {\n      var link = document.createElement('a');\n      debugger\n      link.href = window.URL.createObjectURL(blob);\n      link.download = fileName;\n      link.click();\n      window.URL.revokeObjectURL(link.href);\n  }\n}\ndownFile(blob, fileName)\n</script>\n</html>\n```\n","slug":"blogs/save-base64","published":1,"updated":"2021-05-31T00:27:27.882Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpcoouto000du9q8hl4c5ik6","content":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//方法1</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">saveAsLink</span>(<span class=\"params\">base64Str</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> a = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;a&#x27;</span>);   <span class=\"comment\">// 转换完成，创建一个a标签用于下载</span></span></span><br><span class=\"line\"><span class=\"javascript\">  a.download = fileName;</span></span><br><span class=\"line\"><span class=\"javascript\">  a.href = <span class=\"string\">&#x27;data:application/msword;base64,&#x27;</span> + base64Str;</span></span><br><span class=\"line\"><span class=\"javascript\">  a.style.display = <span class=\"string\">&#x27;none&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">document</span>.body.appendChild(a)    <span class=\"comment\">// 修复firefox中无法触发click</span></span></span><br><span class=\"line\"><span class=\"javascript\">  a.click();</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">document</span>.body.removeChild(a)</span></span><br><span class=\"line\"><span class=\"javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">saveAsLink(fileBse64Str)</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//方法2(firefox浏览器不兼容)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> blob = <span class=\"keyword\">new</span> Blob([_base64ToArrayBuffer(fileBse64Str)], &#123;<span class=\"attr\">type</span>: <span class=\"string\">&#x27;application/msword&#x27;</span>&#125;), fileName = <span class=\"string\">&#x27;文件名称.doc&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_base64ToArrayBuffer</span>(<span class=\"params\">base64</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> binary_string =  <span class=\"built_in\">window</span>.atob(base64);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> len = binary_string.length;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> bytes = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>( len );</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len; i++)        &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        bytes[i] = binary_string.charCodeAt(i);</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> bytes.buffer;</span></span><br><span class=\"line\"><span class=\"javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">downFile</span>(<span class=\"params\">blob, fileName</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.navigator.msSaveOrOpenBlob) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      navigator.msSaveBlob(blob, fileName);</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">var</span> link = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;a&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">debugger</span></span></span><br><span class=\"line\"><span class=\"javascript\">      link.href = <span class=\"built_in\">window</span>.URL.createObjectURL(blob);</span></span><br><span class=\"line\"><span class=\"javascript\">      link.download = fileName;</span></span><br><span class=\"line\"><span class=\"javascript\">      link.click();</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">window</span>.URL.revokeObjectURL(link.href);</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">downFile(blob, fileName)</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//方法1</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">saveAsLink</span>(<span class=\"params\">base64Str</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> a = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;a&#x27;</span>);   <span class=\"comment\">// 转换完成，创建一个a标签用于下载</span></span></span><br><span class=\"line\"><span class=\"javascript\">  a.download = fileName;</span></span><br><span class=\"line\"><span class=\"javascript\">  a.href = <span class=\"string\">&#x27;data:application/msword;base64,&#x27;</span> + base64Str;</span></span><br><span class=\"line\"><span class=\"javascript\">  a.style.display = <span class=\"string\">&#x27;none&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">document</span>.body.appendChild(a)    <span class=\"comment\">// 修复firefox中无法触发click</span></span></span><br><span class=\"line\"><span class=\"javascript\">  a.click();</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">document</span>.body.removeChild(a)</span></span><br><span class=\"line\"><span class=\"javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">saveAsLink(fileBse64Str)</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//方法2(firefox浏览器不兼容)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> blob = <span class=\"keyword\">new</span> Blob([_base64ToArrayBuffer(fileBse64Str)], &#123;<span class=\"attr\">type</span>: <span class=\"string\">&#x27;application/msword&#x27;</span>&#125;), fileName = <span class=\"string\">&#x27;文件名称.doc&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_base64ToArrayBuffer</span>(<span class=\"params\">base64</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> binary_string =  <span class=\"built_in\">window</span>.atob(base64);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> len = binary_string.length;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> bytes = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>( len );</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len; i++)        &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        bytes[i] = binary_string.charCodeAt(i);</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> bytes.buffer;</span></span><br><span class=\"line\"><span class=\"javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">downFile</span>(<span class=\"params\">blob, fileName</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.navigator.msSaveOrOpenBlob) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      navigator.msSaveBlob(blob, fileName);</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">var</span> link = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;a&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">debugger</span></span></span><br><span class=\"line\"><span class=\"javascript\">      link.href = <span class=\"built_in\">window</span>.URL.createObjectURL(blob);</span></span><br><span class=\"line\"><span class=\"javascript\">      link.download = fileName;</span></span><br><span class=\"line\"><span class=\"javascript\">      link.click();</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">window</span>.URL.revokeObjectURL(link.href);</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">downFile(blob, fileName)</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"nuxt导航共用","date":"2020-01-19T16:00:00.000Z","_content":"  \n\n导航作为多个页面之间共用的部分，一般是动态的，即每个页面返回之前需要异步请求。\n\n服务端异步请求的方法有asyncData，fetch。但是这俩方法都只支持页面组件，不支持layout中使用。\n\n所以，我们只能用vuex作为中转站，将页面组件获取的导航信息存储到vuex中。layout再从vuex中获取。\n\nlayout/default\n```javascript\nimport navigator from '@@/navigator/index.vue'\nexport default {\n  name: 'Music163',\n  components: { navigator },\n  data () {\n    return {\n    }\n  },\n  computed: {\n    menus () {\n      return this.$store.state.menu.menus\n    }\n  }\n}\n```\n\npages/index\n```javascript\nexport default {\n  fetch ({ store, params }) {\n    store.dispatch('menu/GET_MENU')\n  }\n}\n```\n\nstore/menu\n```javascript\nexport const state = () => ({\n  menus: []\n})\n\nexport const mutations = {\n  SET_MENU (state, menus) {\n    state.menus = menus\n  }\n}\n\nexport const actions = {\n  GET_MENU (store, menus) {\n    const data = [{\n      title: '发现音乐'\n    }, {\n      title: '我的音乐'\n    }]\n    store.commit('SET_MENU', data)\n  }\n}\n\n```","source":"_posts/nuxt/navigator.md","raw":"---\ntitle: nuxt导航共用\ncategories: nuxt\ndate: 2020-1-20\n---  \n\n导航作为多个页面之间共用的部分，一般是动态的，即每个页面返回之前需要异步请求。\n\n服务端异步请求的方法有asyncData，fetch。但是这俩方法都只支持页面组件，不支持layout中使用。\n\n所以，我们只能用vuex作为中转站，将页面组件获取的导航信息存储到vuex中。layout再从vuex中获取。\n\nlayout/default\n```javascript\nimport navigator from '@@/navigator/index.vue'\nexport default {\n  name: 'Music163',\n  components: { navigator },\n  data () {\n    return {\n    }\n  },\n  computed: {\n    menus () {\n      return this.$store.state.menu.menus\n    }\n  }\n}\n```\n\npages/index\n```javascript\nexport default {\n  fetch ({ store, params }) {\n    store.dispatch('menu/GET_MENU')\n  }\n}\n```\n\nstore/menu\n```javascript\nexport const state = () => ({\n  menus: []\n})\n\nexport const mutations = {\n  SET_MENU (state, menus) {\n    state.menus = menus\n  }\n}\n\nexport const actions = {\n  GET_MENU (store, menus) {\n    const data = [{\n      title: '发现音乐'\n    }, {\n      title: '我的音乐'\n    }]\n    store.commit('SET_MENU', data)\n  }\n}\n\n```","slug":"nuxt/navigator","published":1,"updated":"2021-05-31T00:32:31.912Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpcooutp000eu9q87avwchp2","content":"<p>导航作为多个页面之间共用的部分，一般是动态的，即每个页面返回之前需要异步请求。</p>\n<p>服务端异步请求的方法有asyncData，fetch。但是这俩方法都只支持页面组件，不支持layout中使用。</p>\n<p>所以，我们只能用vuex作为中转站，将页面组件获取的导航信息存储到vuex中。layout再从vuex中获取。</p>\n<p>layout/default</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> navigator <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@@/navigator/index.vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Music163&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">components</span>: &#123; navigator &#125;,</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    menus () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.$store.state.menu.menus</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>pages/index</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  fetch (&#123; store, params &#125;) &#123;</span><br><span class=\"line\">    store.dispatch(<span class=\"string\">&#x27;menu/GET_MENU&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>store/menu</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> state = <span class=\"function\">() =&gt;</span> (&#123;</span><br><span class=\"line\">  <span class=\"attr\">menus</span>: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">  SET_MENU (state, menus) &#123;</span><br><span class=\"line\">    state.menus = menus</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">  GET_MENU (store, menus) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = [&#123;</span><br><span class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">&#x27;发现音乐&#x27;</span></span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">&#x27;我的音乐&#x27;</span></span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">    store.commit(<span class=\"string\">&#x27;SET_MENU&#x27;</span>, data)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>导航作为多个页面之间共用的部分，一般是动态的，即每个页面返回之前需要异步请求。</p>\n<p>服务端异步请求的方法有asyncData，fetch。但是这俩方法都只支持页面组件，不支持layout中使用。</p>\n<p>所以，我们只能用vuex作为中转站，将页面组件获取的导航信息存储到vuex中。layout再从vuex中获取。</p>\n<p>layout/default</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> navigator <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@@/navigator/index.vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Music163&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">components</span>: &#123; navigator &#125;,</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    menus () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.$store.state.menu.menus</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>pages/index</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  fetch (&#123; store, params &#125;) &#123;</span><br><span class=\"line\">    store.dispatch(<span class=\"string\">&#x27;menu/GET_MENU&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>store/menu</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> state = <span class=\"function\">() =&gt;</span> (&#123;</span><br><span class=\"line\">  <span class=\"attr\">menus</span>: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">  SET_MENU (state, menus) &#123;</span><br><span class=\"line\">    state.menus = menus</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">  GET_MENU (store, menus) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = [&#123;</span><br><span class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">&#x27;发现音乐&#x27;</span></span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">&#x27;我的音乐&#x27;</span></span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">    store.commit(<span class=\"string\">&#x27;SET_MENU&#x27;</span>, data)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"一次技术方案的分析过程","date":"2021-05-09T16:00:00.000Z","_content":" \n\n> 分析技术方案时，保持以终为始的原则。思维就像一棵树，方案就像树枝，遍历之后发现不可行，只需要往根部回溯，重新思考达到目标的其它方法。\n\n\n## 背景\n这是我负责的一个H5项目，内嵌于APP的webview，页面跳转通过打开新的webview来实现类app的效果。\n\n在app内从另外一个项目跳转到该应用时，需要带上一个sourceid，标记引流入口。sourceid可能是来源于首页或者商品详情页，只有在下单的时候会提交给订单。\n\n任务\n对该sourceid生命周期的要求是： 外部项目跳转进入该项目之后，到关闭由它打开的所有页面为止，算一个生命周期。\n\n## 行动\n### 从页面跳转传参入手\napp为和提供了桥接sdk，应用内webview调用的是同一个api，打开新窗口前可以使用proxy拦截该api，获取当前窗口的链接，将链接上的sourceid带到新窗口上，实现sourceid参数的透传。\n\n这个方法简单粗暴，却有明显的缺点：\n* 业务和工具耦合，不利于维护\n* 分享转发前需要把该参数去掉，会影响到旧的逻辑\n* 该方法可行，但是属于对公共代码的修改，容易引发bug，暂时纳入备选方案。\n\n### 从本地存储方案入手\n浏览器本地缓存方案有localstorage、sessionStorage、cookie。这些方案在webview中是否也适用呢？\n\n经过在ios中验证localstorage的缓存行为和浏览器类似，sessionStorage和cookie在webview之间不共享，因此2者被排除。\n\n> 请教了ios客户端的同事，了解到，ios平台的app目前使用的是WKwebview实现，窗口之间使用的是不同的WKProcessPool，所以数据共享是个问题，localstorage之所以看起来像是共享了，实际上只是在打开同源窗口时复制了一份，新开的窗口对localStorgae所做的修改不会对旧窗口有影响。这些问题在以前UIwebview开发的时代是不存在的，而UIwebview的是因为内存占用过高而逐渐被淘汰。\n\n可共享的存储方案就只剩下localstorage。由于localstorage属于持久化存储，想要识别一次完整使用，需要抓住一个边界点：要如何识别一次完整使用，是否具有开始或者结束的标志。在这个边界点更新sourceid\n\n完整使用的标志有：\n* 该webview是应用中当前存在的唯一本项目的webview，标记一次使用的开始\n* 应用中当前存在的唯一本项目的webview被销毁，标记一次使用的结束\n\n这2种标志如何去标记呢？我想到了以下办法：\n* app提供相关api告诉我们是否是同源webview的第一个页面，就像微信小程序那样，打开非首页的头部左上角会显示一个home按钮。很遗憾没有找到相关api。\n* 像window.onbeforeunload那样监听页面销毁，存储过sourceid的页面在页面销毁前销毁缓存的sourceid。通俗来讲，就是自产自销（销毁）。经测试发现，webview关闭并不会触发window.onbeforeunload和onunload事件。该方法不可行。\n\n### 不那么完美的实现方案\n当没有完美的解决方案时，问自己，我们真的一定要完美的实现吗？经过和产品的讨论，产品方认为，不需要。可以根据用户的使用习惯，大致确定sourceid的合理有效时间，通过localstorage实现超时清理方案。\n\n## 结论\n又一个很简单的决策公式：决策 = 收益 - 成本 - 风险\n以下列出了暂时可行的方案评估表：\n\n方案 | 收益 | 成本（开发）| 风险（上线+后期维护）| 决策\n---|---|---|---|---\nproxy拦截api添加参数 | 10 | 3 | 1+1 | 5\nlocalstorage有效期 | 8 | 1 | 0+0 | 7 \n\n根据上表的结果，最终选择了“localstorage有效期”这个方案。\n\n\n\n","source":"_posts/think/fanganfenxi.md","raw":"---\ntitle: 一次技术方案的分析过程\ncategories: 思考\ndate: 2021-5-10\n--- \n\n> 分析技术方案时，保持以终为始的原则。思维就像一棵树，方案就像树枝，遍历之后发现不可行，只需要往根部回溯，重新思考达到目标的其它方法。\n\n\n## 背景\n这是我负责的一个H5项目，内嵌于APP的webview，页面跳转通过打开新的webview来实现类app的效果。\n\n在app内从另外一个项目跳转到该应用时，需要带上一个sourceid，标记引流入口。sourceid可能是来源于首页或者商品详情页，只有在下单的时候会提交给订单。\n\n任务\n对该sourceid生命周期的要求是： 外部项目跳转进入该项目之后，到关闭由它打开的所有页面为止，算一个生命周期。\n\n## 行动\n### 从页面跳转传参入手\napp为和提供了桥接sdk，应用内webview调用的是同一个api，打开新窗口前可以使用proxy拦截该api，获取当前窗口的链接，将链接上的sourceid带到新窗口上，实现sourceid参数的透传。\n\n这个方法简单粗暴，却有明显的缺点：\n* 业务和工具耦合，不利于维护\n* 分享转发前需要把该参数去掉，会影响到旧的逻辑\n* 该方法可行，但是属于对公共代码的修改，容易引发bug，暂时纳入备选方案。\n\n### 从本地存储方案入手\n浏览器本地缓存方案有localstorage、sessionStorage、cookie。这些方案在webview中是否也适用呢？\n\n经过在ios中验证localstorage的缓存行为和浏览器类似，sessionStorage和cookie在webview之间不共享，因此2者被排除。\n\n> 请教了ios客户端的同事，了解到，ios平台的app目前使用的是WKwebview实现，窗口之间使用的是不同的WKProcessPool，所以数据共享是个问题，localstorage之所以看起来像是共享了，实际上只是在打开同源窗口时复制了一份，新开的窗口对localStorgae所做的修改不会对旧窗口有影响。这些问题在以前UIwebview开发的时代是不存在的，而UIwebview的是因为内存占用过高而逐渐被淘汰。\n\n可共享的存储方案就只剩下localstorage。由于localstorage属于持久化存储，想要识别一次完整使用，需要抓住一个边界点：要如何识别一次完整使用，是否具有开始或者结束的标志。在这个边界点更新sourceid\n\n完整使用的标志有：\n* 该webview是应用中当前存在的唯一本项目的webview，标记一次使用的开始\n* 应用中当前存在的唯一本项目的webview被销毁，标记一次使用的结束\n\n这2种标志如何去标记呢？我想到了以下办法：\n* app提供相关api告诉我们是否是同源webview的第一个页面，就像微信小程序那样，打开非首页的头部左上角会显示一个home按钮。很遗憾没有找到相关api。\n* 像window.onbeforeunload那样监听页面销毁，存储过sourceid的页面在页面销毁前销毁缓存的sourceid。通俗来讲，就是自产自销（销毁）。经测试发现，webview关闭并不会触发window.onbeforeunload和onunload事件。该方法不可行。\n\n### 不那么完美的实现方案\n当没有完美的解决方案时，问自己，我们真的一定要完美的实现吗？经过和产品的讨论，产品方认为，不需要。可以根据用户的使用习惯，大致确定sourceid的合理有效时间，通过localstorage实现超时清理方案。\n\n## 结论\n又一个很简单的决策公式：决策 = 收益 - 成本 - 风险\n以下列出了暂时可行的方案评估表：\n\n方案 | 收益 | 成本（开发）| 风险（上线+后期维护）| 决策\n---|---|---|---|---\nproxy拦截api添加参数 | 10 | 3 | 1+1 | 5\nlocalstorage有效期 | 8 | 1 | 0+0 | 7 \n\n根据上表的结果，最终选择了“localstorage有效期”这个方案。\n\n\n\n","slug":"think/fanganfenxi","published":1,"updated":"2021-05-31T00:32:42.483Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpcooutp000fu9q87bb04imy","content":"<blockquote>\n<p>分析技术方案时，保持以终为始的原则。思维就像一棵树，方案就像树枝，遍历之后发现不可行，只需要往根部回溯，重新思考达到目标的其它方法。</p>\n</blockquote>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>这是我负责的一个H5项目，内嵌于APP的webview，页面跳转通过打开新的webview来实现类app的效果。</p>\n<p>在app内从另外一个项目跳转到该应用时，需要带上一个sourceid，标记引流入口。sourceid可能是来源于首页或者商品详情页，只有在下单的时候会提交给订单。</p>\n<p>任务<br>对该sourceid生命周期的要求是： 外部项目跳转进入该项目之后，到关闭由它打开的所有页面为止，算一个生命周期。</p>\n<h2 id=\"行动\"><a href=\"#行动\" class=\"headerlink\" title=\"行动\"></a>行动</h2><h3 id=\"从页面跳转传参入手\"><a href=\"#从页面跳转传参入手\" class=\"headerlink\" title=\"从页面跳转传参入手\"></a>从页面跳转传参入手</h3><p>app为和提供了桥接sdk，应用内webview调用的是同一个api，打开新窗口前可以使用proxy拦截该api，获取当前窗口的链接，将链接上的sourceid带到新窗口上，实现sourceid参数的透传。</p>\n<p>这个方法简单粗暴，却有明显的缺点：</p>\n<ul>\n<li>业务和工具耦合，不利于维护</li>\n<li>分享转发前需要把该参数去掉，会影响到旧的逻辑</li>\n<li>该方法可行，但是属于对公共代码的修改，容易引发bug，暂时纳入备选方案。</li>\n</ul>\n<h3 id=\"从本地存储方案入手\"><a href=\"#从本地存储方案入手\" class=\"headerlink\" title=\"从本地存储方案入手\"></a>从本地存储方案入手</h3><p>浏览器本地缓存方案有localstorage、sessionStorage、cookie。这些方案在webview中是否也适用呢？</p>\n<p>经过在ios中验证localstorage的缓存行为和浏览器类似，sessionStorage和cookie在webview之间不共享，因此2者被排除。</p>\n<blockquote>\n<p>请教了ios客户端的同事，了解到，ios平台的app目前使用的是WKwebview实现，窗口之间使用的是不同的WKProcessPool，所以数据共享是个问题，localstorage之所以看起来像是共享了，实际上只是在打开同源窗口时复制了一份，新开的窗口对localStorgae所做的修改不会对旧窗口有影响。这些问题在以前UIwebview开发的时代是不存在的，而UIwebview的是因为内存占用过高而逐渐被淘汰。</p>\n</blockquote>\n<p>可共享的存储方案就只剩下localstorage。由于localstorage属于持久化存储，想要识别一次完整使用，需要抓住一个边界点：要如何识别一次完整使用，是否具有开始或者结束的标志。在这个边界点更新sourceid</p>\n<p>完整使用的标志有：</p>\n<ul>\n<li>该webview是应用中当前存在的唯一本项目的webview，标记一次使用的开始</li>\n<li>应用中当前存在的唯一本项目的webview被销毁，标记一次使用的结束</li>\n</ul>\n<p>这2种标志如何去标记呢？我想到了以下办法：</p>\n<ul>\n<li>app提供相关api告诉我们是否是同源webview的第一个页面，就像微信小程序那样，打开非首页的头部左上角会显示一个home按钮。很遗憾没有找到相关api。</li>\n<li>像window.onbeforeunload那样监听页面销毁，存储过sourceid的页面在页面销毁前销毁缓存的sourceid。通俗来讲，就是自产自销（销毁）。经测试发现，webview关闭并不会触发window.onbeforeunload和onunload事件。该方法不可行。</li>\n</ul>\n<h3 id=\"不那么完美的实现方案\"><a href=\"#不那么完美的实现方案\" class=\"headerlink\" title=\"不那么完美的实现方案\"></a>不那么完美的实现方案</h3><p>当没有完美的解决方案时，问自己，我们真的一定要完美的实现吗？经过和产品的讨论，产品方认为，不需要。可以根据用户的使用习惯，大致确定sourceid的合理有效时间，通过localstorage实现超时清理方案。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>又一个很简单的决策公式：决策 = 收益 - 成本 - 风险<br>以下列出了暂时可行的方案评估表：</p>\n<table>\n<thead>\n<tr>\n<th>方案</th>\n<th>收益</th>\n<th>成本（开发）</th>\n<th>风险（上线+后期维护）</th>\n<th>决策</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>proxy拦截api添加参数</td>\n<td>10</td>\n<td>3</td>\n<td>1+1</td>\n<td>5</td>\n</tr>\n<tr>\n<td>localstorage有效期</td>\n<td>8</td>\n<td>1</td>\n<td>0+0</td>\n<td>7</td>\n</tr>\n</tbody></table>\n<p>根据上表的结果，最终选择了“localstorage有效期”这个方案。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>分析技术方案时，保持以终为始的原则。思维就像一棵树，方案就像树枝，遍历之后发现不可行，只需要往根部回溯，重新思考达到目标的其它方法。</p>\n</blockquote>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>这是我负责的一个H5项目，内嵌于APP的webview，页面跳转通过打开新的webview来实现类app的效果。</p>\n<p>在app内从另外一个项目跳转到该应用时，需要带上一个sourceid，标记引流入口。sourceid可能是来源于首页或者商品详情页，只有在下单的时候会提交给订单。</p>\n<p>任务<br>对该sourceid生命周期的要求是： 外部项目跳转进入该项目之后，到关闭由它打开的所有页面为止，算一个生命周期。</p>\n<h2 id=\"行动\"><a href=\"#行动\" class=\"headerlink\" title=\"行动\"></a>行动</h2><h3 id=\"从页面跳转传参入手\"><a href=\"#从页面跳转传参入手\" class=\"headerlink\" title=\"从页面跳转传参入手\"></a>从页面跳转传参入手</h3><p>app为和提供了桥接sdk，应用内webview调用的是同一个api，打开新窗口前可以使用proxy拦截该api，获取当前窗口的链接，将链接上的sourceid带到新窗口上，实现sourceid参数的透传。</p>\n<p>这个方法简单粗暴，却有明显的缺点：</p>\n<ul>\n<li>业务和工具耦合，不利于维护</li>\n<li>分享转发前需要把该参数去掉，会影响到旧的逻辑</li>\n<li>该方法可行，但是属于对公共代码的修改，容易引发bug，暂时纳入备选方案。</li>\n</ul>\n<h3 id=\"从本地存储方案入手\"><a href=\"#从本地存储方案入手\" class=\"headerlink\" title=\"从本地存储方案入手\"></a>从本地存储方案入手</h3><p>浏览器本地缓存方案有localstorage、sessionStorage、cookie。这些方案在webview中是否也适用呢？</p>\n<p>经过在ios中验证localstorage的缓存行为和浏览器类似，sessionStorage和cookie在webview之间不共享，因此2者被排除。</p>\n<blockquote>\n<p>请教了ios客户端的同事，了解到，ios平台的app目前使用的是WKwebview实现，窗口之间使用的是不同的WKProcessPool，所以数据共享是个问题，localstorage之所以看起来像是共享了，实际上只是在打开同源窗口时复制了一份，新开的窗口对localStorgae所做的修改不会对旧窗口有影响。这些问题在以前UIwebview开发的时代是不存在的，而UIwebview的是因为内存占用过高而逐渐被淘汰。</p>\n</blockquote>\n<p>可共享的存储方案就只剩下localstorage。由于localstorage属于持久化存储，想要识别一次完整使用，需要抓住一个边界点：要如何识别一次完整使用，是否具有开始或者结束的标志。在这个边界点更新sourceid</p>\n<p>完整使用的标志有：</p>\n<ul>\n<li>该webview是应用中当前存在的唯一本项目的webview，标记一次使用的开始</li>\n<li>应用中当前存在的唯一本项目的webview被销毁，标记一次使用的结束</li>\n</ul>\n<p>这2种标志如何去标记呢？我想到了以下办法：</p>\n<ul>\n<li>app提供相关api告诉我们是否是同源webview的第一个页面，就像微信小程序那样，打开非首页的头部左上角会显示一个home按钮。很遗憾没有找到相关api。</li>\n<li>像window.onbeforeunload那样监听页面销毁，存储过sourceid的页面在页面销毁前销毁缓存的sourceid。通俗来讲，就是自产自销（销毁）。经测试发现，webview关闭并不会触发window.onbeforeunload和onunload事件。该方法不可行。</li>\n</ul>\n<h3 id=\"不那么完美的实现方案\"><a href=\"#不那么完美的实现方案\" class=\"headerlink\" title=\"不那么完美的实现方案\"></a>不那么完美的实现方案</h3><p>当没有完美的解决方案时，问自己，我们真的一定要完美的实现吗？经过和产品的讨论，产品方认为，不需要。可以根据用户的使用习惯，大致确定sourceid的合理有效时间，通过localstorage实现超时清理方案。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>又一个很简单的决策公式：决策 = 收益 - 成本 - 风险<br>以下列出了暂时可行的方案评估表：</p>\n<table>\n<thead>\n<tr>\n<th>方案</th>\n<th>收益</th>\n<th>成本（开发）</th>\n<th>风险（上线+后期维护）</th>\n<th>决策</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>proxy拦截api添加参数</td>\n<td>10</td>\n<td>3</td>\n<td>1+1</td>\n<td>5</td>\n</tr>\n<tr>\n<td>localstorage有效期</td>\n<td>8</td>\n<td>1</td>\n<td>0+0</td>\n<td>7</td>\n</tr>\n</tbody></table>\n<p>根据上表的结果，最终选择了“localstorage有效期”这个方案。</p>\n"},{"title":"charles 重写请求","date":"2020-01-31T16:00:00.000Z","_content":"\ncharles 和fiddler既然都可以拦截返回体，没有理由不可以拦截请求是不是？\n\n我这里只说charles吧。\n\n###  配置重写域名\n1. 进入菜单 Tools -> Rewrite 可见如下界面\n\n![](/images/2019061301.png)\n\n2. 点击sets 区域的Add按钮添加重写任务。\n3. 在右侧的Locations区域点击Add按钮添加需要重写的请求的域名\n\n![](/images/2019061302.png)\n\n\n###  配置域名下的重写规则\n\n1. 选中上一个步骤中添加的域名，在Rules区域点击Add按钮\n\n2. 在Type项那里选择重写类型\n\n![](/images/2019061303.png)\n\n有以上几种类型可供选择。\n从上图可以看出来，重写规则可以重写请求头部和请求体，也可以重写返回头部和返回体。\n\n这个功能不仅能调试身份认证信息，还能调试跨域网站，以及接口数据。\n\n3. 在Match和Replace区域配置重写规则\n\n![](/images/2019061304.png)\n\n上图将请求头部uniType的值替换为105，仅当uniType的值为101的时候才替换。","source":"_posts/tools/charles-rewrite-header.md","raw":"---\ntitle: charles 重写请求\ncategories: 工具\ndate: 2020-2-1\n---\n\ncharles 和fiddler既然都可以拦截返回体，没有理由不可以拦截请求是不是？\n\n我这里只说charles吧。\n\n###  配置重写域名\n1. 进入菜单 Tools -> Rewrite 可见如下界面\n\n![](/images/2019061301.png)\n\n2. 点击sets 区域的Add按钮添加重写任务。\n3. 在右侧的Locations区域点击Add按钮添加需要重写的请求的域名\n\n![](/images/2019061302.png)\n\n\n###  配置域名下的重写规则\n\n1. 选中上一个步骤中添加的域名，在Rules区域点击Add按钮\n\n2. 在Type项那里选择重写类型\n\n![](/images/2019061303.png)\n\n有以上几种类型可供选择。\n从上图可以看出来，重写规则可以重写请求头部和请求体，也可以重写返回头部和返回体。\n\n这个功能不仅能调试身份认证信息，还能调试跨域网站，以及接口数据。\n\n3. 在Match和Replace区域配置重写规则\n\n![](/images/2019061304.png)\n\n上图将请求头部uniType的值替换为105，仅当uniType的值为101的时候才替换。","slug":"tools/charles-rewrite-header","published":1,"updated":"2021-05-31T14:15:40.440Z","_id":"ckpcooutq000gu9q8e74b9x6v","comments":1,"layout":"post","photos":[],"link":"","content":"<p>charles 和fiddler既然都可以拦截返回体，没有理由不可以拦截请求是不是？</p>\n<p>我这里只说charles吧。</p>\n<h3 id=\"配置重写域名\"><a href=\"#配置重写域名\" class=\"headerlink\" title=\"配置重写域名\"></a>配置重写域名</h3><ol>\n<li>进入菜单 Tools -&gt; Rewrite 可见如下界面</li>\n</ol>\n<p><img src=\"/images/2019061301.png\"></p>\n<ol start=\"2\">\n<li>点击sets 区域的Add按钮添加重写任务。</li>\n<li>在右侧的Locations区域点击Add按钮添加需要重写的请求的域名</li>\n</ol>\n<p><img src=\"/images/2019061302.png\"></p>\n<h3 id=\"配置域名下的重写规则\"><a href=\"#配置域名下的重写规则\" class=\"headerlink\" title=\"配置域名下的重写规则\"></a>配置域名下的重写规则</h3><ol>\n<li><p>选中上一个步骤中添加的域名，在Rules区域点击Add按钮</p>\n</li>\n<li><p>在Type项那里选择重写类型</p>\n</li>\n</ol>\n<p><img src=\"/images/2019061303.png\"></p>\n<p>有以上几种类型可供选择。<br>从上图可以看出来，重写规则可以重写请求头部和请求体，也可以重写返回头部和返回体。</p>\n<p>这个功能不仅能调试身份认证信息，还能调试跨域网站，以及接口数据。</p>\n<ol start=\"3\">\n<li>在Match和Replace区域配置重写规则</li>\n</ol>\n<p><img src=\"/images/2019061304.png\"></p>\n<p>上图将请求头部uniType的值替换为105，仅当uniType的值为101的时候才替换。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>charles 和fiddler既然都可以拦截返回体，没有理由不可以拦截请求是不是？</p>\n<p>我这里只说charles吧。</p>\n<h3 id=\"配置重写域名\"><a href=\"#配置重写域名\" class=\"headerlink\" title=\"配置重写域名\"></a>配置重写域名</h3><ol>\n<li>进入菜单 Tools -&gt; Rewrite 可见如下界面</li>\n</ol>\n<p><img src=\"/images/2019061301.png\"></p>\n<ol start=\"2\">\n<li>点击sets 区域的Add按钮添加重写任务。</li>\n<li>在右侧的Locations区域点击Add按钮添加需要重写的请求的域名</li>\n</ol>\n<p><img src=\"/images/2019061302.png\"></p>\n<h3 id=\"配置域名下的重写规则\"><a href=\"#配置域名下的重写规则\" class=\"headerlink\" title=\"配置域名下的重写规则\"></a>配置域名下的重写规则</h3><ol>\n<li><p>选中上一个步骤中添加的域名，在Rules区域点击Add按钮</p>\n</li>\n<li><p>在Type项那里选择重写类型</p>\n</li>\n</ol>\n<p><img src=\"/images/2019061303.png\"></p>\n<p>有以上几种类型可供选择。<br>从上图可以看出来，重写规则可以重写请求头部和请求体，也可以重写返回头部和返回体。</p>\n<p>这个功能不仅能调试身份认证信息，还能调试跨域网站，以及接口数据。</p>\n<ol start=\"3\">\n<li>在Match和Replace区域配置重写规则</li>\n</ol>\n<p><img src=\"/images/2019061304.png\"></p>\n<p>上图将请求头部uniType的值替换为105，仅当uniType的值为101的时候才替换。</p>\n"},{"title":"抓包工具调试线上代码","date":"2020-02-01T16:00:00.000Z","_content":"\nweb应用代码混淆和压缩可以一定程度上缩短代码的请求时间，从而提高页面的访问体验，但是却不方便调试。这里教大家使用抓包工具调试线上代码。\n\n以下方法假设你已经成功用fiddler或者charles代理你要调试的线上应用。\n\n## fiddler拦截客户端代码\n\n很久以前遇到一个线上问题，本地不能复现，而且还是手机浏览器环境，而且客户端报错日志找不到相关的问题。当时想到的调试方法就是使用fiddler修改返回的js代码，开启vconsole的debug模式查看页面报错信息。这个方法其实就是拦截返回js并正则匹配内容进行修改。\n### 局部修改\n\n使用fildder可以拦截http返回内容并修改。\n\n#### 1.打开CustomRules.js\n\n点击fiddler的Rules=>Customize Rules，FiddlerScript editor工具就会自动的打开CustomRules.js文件。\n\n#### 2.修改 OnBeforeResponse 函数\n\n假如，我想把http://my.example.com/index.html 资源返回代码中的\"vconsole.debug = false\"改为\"vconsole.debug = true\"，只需要在这个函数中插入一个if语句。可以这样写：\n```\n//判断Url内容中是否包含特定内容，针对这个Url进行下面的操作\nif (oSession.uriContains(\"my.example.com/index.html\")) { \n  oSession.utilDecodeResponse();\n  oSession.utilReplaceInResponse(\"vconsole.debug = false\", \"vconsole.debug = true\");\n} \n```\n  \n这个方法比较难操作，毕竟你需要先找到要修改的代码，确保需要替换的内容是独一无二的，而且，如果想修改替换内容需要重新修改替换逻辑。更加简单粗暴的方法是直接下载代码下来，将这个资源代理到本地，想怎么修改就怎么修改。\n\n###  fiddler将代码代理到本地\n\n#### 1.找到你需要代理的请求\n![](/images/2019060101.jpeg)\n\n标黄的请求就是目标请求，拖拽到右侧的AutoResponse标签中\n\n#### 2.选中代理选项\n\n勾选右侧AutoResponse标签中的\n\n> 1. Enable rules：开启重定向使规则生效，指的是代理到本地这个规则。\n> 2. Umatched requests passthrough:不影响那些没满足我们处理条件的请求通过。\n\n![](/images/2019060102.png)\n\n#### 3.选择需要代理的到的本地文件\n\n上图右侧选中第一步拖进去的请求，并在右下角的Rule Editor中的第二个下拉框选择Find a file。此时会打开本地资源管理器要求你选择文件。\n\n![](/images/2019060103.png)\n\n#### 4.修改代码刷新页面\n\n修改上一步你选中的代码，保存之后刷新你要调试的页面，重新加载的资源就回变成你本地的资源。\n\n## charles拦截客户端代码\n\n### 设置map local\n\n在请求中找到需要调试的代码文件，右键，菜单中选择 Map Local\n![](/images/2019060501.png)\n弹窗中选择需要映射到的本地文件\n![](/images/2019060502.png)\n点OK即可。\n### 重新请求对应的资源\n发现已经是本地的代码文件了。这时候可以随意的修改代理到的本地文件调试。\n\n### 取消map\n在Tools->Map Local菜单下可以删除刚刚添加的map。\n![](/images/2019060503.png)\n\n\n","source":"_posts/tools/fiddler-debug-online.md","raw":"---\ntitle: 抓包工具调试线上代码\ncategories: 工具\ndate: 2020-2-2\n---\n\nweb应用代码混淆和压缩可以一定程度上缩短代码的请求时间，从而提高页面的访问体验，但是却不方便调试。这里教大家使用抓包工具调试线上代码。\n\n以下方法假设你已经成功用fiddler或者charles代理你要调试的线上应用。\n\n## fiddler拦截客户端代码\n\n很久以前遇到一个线上问题，本地不能复现，而且还是手机浏览器环境，而且客户端报错日志找不到相关的问题。当时想到的调试方法就是使用fiddler修改返回的js代码，开启vconsole的debug模式查看页面报错信息。这个方法其实就是拦截返回js并正则匹配内容进行修改。\n### 局部修改\n\n使用fildder可以拦截http返回内容并修改。\n\n#### 1.打开CustomRules.js\n\n点击fiddler的Rules=>Customize Rules，FiddlerScript editor工具就会自动的打开CustomRules.js文件。\n\n#### 2.修改 OnBeforeResponse 函数\n\n假如，我想把http://my.example.com/index.html 资源返回代码中的\"vconsole.debug = false\"改为\"vconsole.debug = true\"，只需要在这个函数中插入一个if语句。可以这样写：\n```\n//判断Url内容中是否包含特定内容，针对这个Url进行下面的操作\nif (oSession.uriContains(\"my.example.com/index.html\")) { \n  oSession.utilDecodeResponse();\n  oSession.utilReplaceInResponse(\"vconsole.debug = false\", \"vconsole.debug = true\");\n} \n```\n  \n这个方法比较难操作，毕竟你需要先找到要修改的代码，确保需要替换的内容是独一无二的，而且，如果想修改替换内容需要重新修改替换逻辑。更加简单粗暴的方法是直接下载代码下来，将这个资源代理到本地，想怎么修改就怎么修改。\n\n###  fiddler将代码代理到本地\n\n#### 1.找到你需要代理的请求\n![](/images/2019060101.jpeg)\n\n标黄的请求就是目标请求，拖拽到右侧的AutoResponse标签中\n\n#### 2.选中代理选项\n\n勾选右侧AutoResponse标签中的\n\n> 1. Enable rules：开启重定向使规则生效，指的是代理到本地这个规则。\n> 2. Umatched requests passthrough:不影响那些没满足我们处理条件的请求通过。\n\n![](/images/2019060102.png)\n\n#### 3.选择需要代理的到的本地文件\n\n上图右侧选中第一步拖进去的请求，并在右下角的Rule Editor中的第二个下拉框选择Find a file。此时会打开本地资源管理器要求你选择文件。\n\n![](/images/2019060103.png)\n\n#### 4.修改代码刷新页面\n\n修改上一步你选中的代码，保存之后刷新你要调试的页面，重新加载的资源就回变成你本地的资源。\n\n## charles拦截客户端代码\n\n### 设置map local\n\n在请求中找到需要调试的代码文件，右键，菜单中选择 Map Local\n![](/images/2019060501.png)\n弹窗中选择需要映射到的本地文件\n![](/images/2019060502.png)\n点OK即可。\n### 重新请求对应的资源\n发现已经是本地的代码文件了。这时候可以随意的修改代理到的本地文件调试。\n\n### 取消map\n在Tools->Map Local菜单下可以删除刚刚添加的map。\n![](/images/2019060503.png)\n\n\n","slug":"tools/fiddler-debug-online","published":1,"updated":"2021-05-31T14:15:38.835Z","_id":"ckpcooutq000hu9q83jaod5ye","comments":1,"layout":"post","photos":[],"link":"","content":"<p>web应用代码混淆和压缩可以一定程度上缩短代码的请求时间，从而提高页面的访问体验，但是却不方便调试。这里教大家使用抓包工具调试线上代码。</p>\n<p>以下方法假设你已经成功用fiddler或者charles代理你要调试的线上应用。</p>\n<h2 id=\"fiddler拦截客户端代码\"><a href=\"#fiddler拦截客户端代码\" class=\"headerlink\" title=\"fiddler拦截客户端代码\"></a>fiddler拦截客户端代码</h2><p>很久以前遇到一个线上问题，本地不能复现，而且还是手机浏览器环境，而且客户端报错日志找不到相关的问题。当时想到的调试方法就是使用fiddler修改返回的js代码，开启vconsole的debug模式查看页面报错信息。这个方法其实就是拦截返回js并正则匹配内容进行修改。</p>\n<h3 id=\"局部修改\"><a href=\"#局部修改\" class=\"headerlink\" title=\"局部修改\"></a>局部修改</h3><p>使用fildder可以拦截http返回内容并修改。</p>\n<h4 id=\"1-打开CustomRules-js\"><a href=\"#1-打开CustomRules-js\" class=\"headerlink\" title=\"1.打开CustomRules.js\"></a>1.打开CustomRules.js</h4><p>点击fiddler的Rules=&gt;Customize Rules，FiddlerScript editor工具就会自动的打开CustomRules.js文件。</p>\n<h4 id=\"2-修改-OnBeforeResponse-函数\"><a href=\"#2-修改-OnBeforeResponse-函数\" class=\"headerlink\" title=\"2.修改 OnBeforeResponse 函数\"></a>2.修改 OnBeforeResponse 函数</h4><p>假如，我想把<a href=\"http://my.example.com/index.html\">http://my.example.com/index.html</a> 资源返回代码中的”vconsole.debug = false”改为”vconsole.debug = true”，只需要在这个函数中插入一个if语句。可以这样写：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//判断Url内容中是否包含特定内容，针对这个Url进行下面的操作</span><br><span class=\"line\">if (oSession.uriContains(&quot;my.example.com/index.html&quot;)) &#123; </span><br><span class=\"line\">  oSession.utilDecodeResponse();</span><br><span class=\"line\">  oSession.utilReplaceInResponse(&quot;vconsole.debug = false&quot;, &quot;vconsole.debug = true&quot;);</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>这个方法比较难操作，毕竟你需要先找到要修改的代码，确保需要替换的内容是独一无二的，而且，如果想修改替换内容需要重新修改替换逻辑。更加简单粗暴的方法是直接下载代码下来，将这个资源代理到本地，想怎么修改就怎么修改。</p>\n<h3 id=\"fiddler将代码代理到本地\"><a href=\"#fiddler将代码代理到本地\" class=\"headerlink\" title=\"fiddler将代码代理到本地\"></a>fiddler将代码代理到本地</h3><h4 id=\"1-找到你需要代理的请求\"><a href=\"#1-找到你需要代理的请求\" class=\"headerlink\" title=\"1.找到你需要代理的请求\"></a>1.找到你需要代理的请求</h4><p><img src=\"/images/2019060101.jpeg\"></p>\n<p>标黄的请求就是目标请求，拖拽到右侧的AutoResponse标签中</p>\n<h4 id=\"2-选中代理选项\"><a href=\"#2-选中代理选项\" class=\"headerlink\" title=\"2.选中代理选项\"></a>2.选中代理选项</h4><p>勾选右侧AutoResponse标签中的</p>\n<blockquote>\n<ol>\n<li>Enable rules：开启重定向使规则生效，指的是代理到本地这个规则。</li>\n<li>Umatched requests passthrough:不影响那些没满足我们处理条件的请求通过。</li>\n</ol>\n</blockquote>\n<p><img src=\"/images/2019060102.png\"></p>\n<h4 id=\"3-选择需要代理的到的本地文件\"><a href=\"#3-选择需要代理的到的本地文件\" class=\"headerlink\" title=\"3.选择需要代理的到的本地文件\"></a>3.选择需要代理的到的本地文件</h4><p>上图右侧选中第一步拖进去的请求，并在右下角的Rule Editor中的第二个下拉框选择Find a file。此时会打开本地资源管理器要求你选择文件。</p>\n<p><img src=\"/images/2019060103.png\"></p>\n<h4 id=\"4-修改代码刷新页面\"><a href=\"#4-修改代码刷新页面\" class=\"headerlink\" title=\"4.修改代码刷新页面\"></a>4.修改代码刷新页面</h4><p>修改上一步你选中的代码，保存之后刷新你要调试的页面，重新加载的资源就回变成你本地的资源。</p>\n<h2 id=\"charles拦截客户端代码\"><a href=\"#charles拦截客户端代码\" class=\"headerlink\" title=\"charles拦截客户端代码\"></a>charles拦截客户端代码</h2><h3 id=\"设置map-local\"><a href=\"#设置map-local\" class=\"headerlink\" title=\"设置map local\"></a>设置map local</h3><p>在请求中找到需要调试的代码文件，右键，菜单中选择 Map Local<br><img src=\"/images/2019060501.png\"><br>弹窗中选择需要映射到的本地文件<br><img src=\"/images/2019060502.png\"><br>点OK即可。</p>\n<h3 id=\"重新请求对应的资源\"><a href=\"#重新请求对应的资源\" class=\"headerlink\" title=\"重新请求对应的资源\"></a>重新请求对应的资源</h3><p>发现已经是本地的代码文件了。这时候可以随意的修改代理到的本地文件调试。</p>\n<h3 id=\"取消map\"><a href=\"#取消map\" class=\"headerlink\" title=\"取消map\"></a>取消map</h3><p>在Tools-&gt;Map Local菜单下可以删除刚刚添加的map。<br><img src=\"/images/2019060503.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>web应用代码混淆和压缩可以一定程度上缩短代码的请求时间，从而提高页面的访问体验，但是却不方便调试。这里教大家使用抓包工具调试线上代码。</p>\n<p>以下方法假设你已经成功用fiddler或者charles代理你要调试的线上应用。</p>\n<h2 id=\"fiddler拦截客户端代码\"><a href=\"#fiddler拦截客户端代码\" class=\"headerlink\" title=\"fiddler拦截客户端代码\"></a>fiddler拦截客户端代码</h2><p>很久以前遇到一个线上问题，本地不能复现，而且还是手机浏览器环境，而且客户端报错日志找不到相关的问题。当时想到的调试方法就是使用fiddler修改返回的js代码，开启vconsole的debug模式查看页面报错信息。这个方法其实就是拦截返回js并正则匹配内容进行修改。</p>\n<h3 id=\"局部修改\"><a href=\"#局部修改\" class=\"headerlink\" title=\"局部修改\"></a>局部修改</h3><p>使用fildder可以拦截http返回内容并修改。</p>\n<h4 id=\"1-打开CustomRules-js\"><a href=\"#1-打开CustomRules-js\" class=\"headerlink\" title=\"1.打开CustomRules.js\"></a>1.打开CustomRules.js</h4><p>点击fiddler的Rules=&gt;Customize Rules，FiddlerScript editor工具就会自动的打开CustomRules.js文件。</p>\n<h4 id=\"2-修改-OnBeforeResponse-函数\"><a href=\"#2-修改-OnBeforeResponse-函数\" class=\"headerlink\" title=\"2.修改 OnBeforeResponse 函数\"></a>2.修改 OnBeforeResponse 函数</h4><p>假如，我想把<a href=\"http://my.example.com/index.html\">http://my.example.com/index.html</a> 资源返回代码中的”vconsole.debug = false”改为”vconsole.debug = true”，只需要在这个函数中插入一个if语句。可以这样写：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//判断Url内容中是否包含特定内容，针对这个Url进行下面的操作</span><br><span class=\"line\">if (oSession.uriContains(&quot;my.example.com/index.html&quot;)) &#123; </span><br><span class=\"line\">  oSession.utilDecodeResponse();</span><br><span class=\"line\">  oSession.utilReplaceInResponse(&quot;vconsole.debug = false&quot;, &quot;vconsole.debug = true&quot;);</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>这个方法比较难操作，毕竟你需要先找到要修改的代码，确保需要替换的内容是独一无二的，而且，如果想修改替换内容需要重新修改替换逻辑。更加简单粗暴的方法是直接下载代码下来，将这个资源代理到本地，想怎么修改就怎么修改。</p>\n<h3 id=\"fiddler将代码代理到本地\"><a href=\"#fiddler将代码代理到本地\" class=\"headerlink\" title=\"fiddler将代码代理到本地\"></a>fiddler将代码代理到本地</h3><h4 id=\"1-找到你需要代理的请求\"><a href=\"#1-找到你需要代理的请求\" class=\"headerlink\" title=\"1.找到你需要代理的请求\"></a>1.找到你需要代理的请求</h4><p><img src=\"/images/2019060101.jpeg\"></p>\n<p>标黄的请求就是目标请求，拖拽到右侧的AutoResponse标签中</p>\n<h4 id=\"2-选中代理选项\"><a href=\"#2-选中代理选项\" class=\"headerlink\" title=\"2.选中代理选项\"></a>2.选中代理选项</h4><p>勾选右侧AutoResponse标签中的</p>\n<blockquote>\n<ol>\n<li>Enable rules：开启重定向使规则生效，指的是代理到本地这个规则。</li>\n<li>Umatched requests passthrough:不影响那些没满足我们处理条件的请求通过。</li>\n</ol>\n</blockquote>\n<p><img src=\"/images/2019060102.png\"></p>\n<h4 id=\"3-选择需要代理的到的本地文件\"><a href=\"#3-选择需要代理的到的本地文件\" class=\"headerlink\" title=\"3.选择需要代理的到的本地文件\"></a>3.选择需要代理的到的本地文件</h4><p>上图右侧选中第一步拖进去的请求，并在右下角的Rule Editor中的第二个下拉框选择Find a file。此时会打开本地资源管理器要求你选择文件。</p>\n<p><img src=\"/images/2019060103.png\"></p>\n<h4 id=\"4-修改代码刷新页面\"><a href=\"#4-修改代码刷新页面\" class=\"headerlink\" title=\"4.修改代码刷新页面\"></a>4.修改代码刷新页面</h4><p>修改上一步你选中的代码，保存之后刷新你要调试的页面，重新加载的资源就回变成你本地的资源。</p>\n<h2 id=\"charles拦截客户端代码\"><a href=\"#charles拦截客户端代码\" class=\"headerlink\" title=\"charles拦截客户端代码\"></a>charles拦截客户端代码</h2><h3 id=\"设置map-local\"><a href=\"#设置map-local\" class=\"headerlink\" title=\"设置map local\"></a>设置map local</h3><p>在请求中找到需要调试的代码文件，右键，菜单中选择 Map Local<br><img src=\"/images/2019060501.png\"><br>弹窗中选择需要映射到的本地文件<br><img src=\"/images/2019060502.png\"><br>点OK即可。</p>\n<h3 id=\"重新请求对应的资源\"><a href=\"#重新请求对应的资源\" class=\"headerlink\" title=\"重新请求对应的资源\"></a>重新请求对应的资源</h3><p>发现已经是本地的代码文件了。这时候可以随意的修改代理到的本地文件调试。</p>\n<h3 id=\"取消map\"><a href=\"#取消map\" class=\"headerlink\" title=\"取消map\"></a>取消map</h3><p>在Tools-&gt;Map Local菜单下可以删除刚刚添加的map。<br><img src=\"/images/2019060503.png\"></p>\n"},{"title":"四象限时间管理","date":"2019-04-08T16:00:00.000Z","_content":"  \n\n史蒂芬·科维的《高效能人士的七个习惯》在描述如何实现个人领域成功时提到了一个很重要的习惯，“要事第一”。\n\n通常我们列出来的TODO list是线性的，从上至下排列，我们的评判标准只有一个：是否重要。\n\n## 一、2个维度 4个象限\n\n### 2个维度：\n1. 是否重要\n\n  重要性对一个人来说要从价值观的角度去考虑。这件事做了之后是否有收获，这个收获一定要对自己有意义。\n\n  通常大家觉得，让自己有收获的事情才是最重要的。我觉得，工作期间和工作之余要区分开来。即在该做什么事情的时候就做什么事情。所以，针对工作和生活可以使用2份4象限表。\n\n\n2. 是否紧急\n\n  在近期内必须要完成的，即紧急的\n\n  一般比较紧急的是有deadline的事情。\n  工作上的例子：项目上线，会议前的方案搜集\n  生活中的例子：上学，煮饭\n\n### 4个象限：\n1. 重要且紧急\n2. 重要不紧急\n3. 不重要但紧急\n4. 不重要不紧急。\n\n## 二、如何区分事件属于哪个象限？\n\n以下针对4个象限的界定标准进行描述。\n\n### 重要&紧急 (Urgent & Important)\n\n这个象限内的事情可以说不得不做。生活中应该尽量避免堆积太多此类事情，否则整日焦头烂额。\n\n> 1. 不立即做的话将来随时可能产生危机\n> 2. 必须在deadline之前赶出来，这个deadline强调外界压力\n\n### 重要&不紧急 (Important & Not Urgent)\n\n> 1. 有助于个人长远发展的事情， 比如学习计划，技术方案调研\n> 2. 有助于群体长远发展的事情，比如培训计划\n> 3. 有助于减少“重要紧急”事项的事情。\n\n我们通常说，有拖延症的人通常指，把重要但是不紧急的事情拖延到演变为重要紧急的事情，导致花更多的时间在第一象限。\n\n### 紧急&不重要 (Urgent & Not Important)\n\n> 1. 需要近期做的事情，迫不得已可以选择不做或者接受延期的\n> 2. 时间比较赶，但是不怎么耗费精力\n\n这类工作最好做，但是在精力状态一般的情况下做，必要的时候选择不做。这样可以充分利用以及节约时间。这类事情包括约会，群体活动，回复邮件。\n\n### 不重要&不紧急 (Not Important & Not Urgent)\n\n> 1. 纯粹打发时间，没有任何实际意义\n> 2. 短期精神满足，实则空虚\n\n这类事情在其它象限的事情没有处理完的时候尽量不要做。除非其它象限的事情完全没有精力做下去了又不想休息。\n\n## 三、如何实施\n\n### 1、针对列出的任务清单，问自己2个问题：\n\n1. 这件事情，真的很重要吗？如果是工作任务，是否属于高优先级的任务？如果是学习任务，是否能让自己有所收获？所需要的时间是多久？\n\n通过以上问题，把任务分成重要和不重要的，相同类别下的任务分别赋值一个重要指数。\n\n2. 这件事情你自己计划或者上级需要什么时候完成？写下deadline，给自己定下的deadline最好比实际要求的更早。\n\n通过以上问题，把最近1周内需要做的事情按照deadline进行排序，其它的事情暂时安排到下周。如果任务需要花的时间比较长，最好做一下任务分解，说不定可以分解出一些可以延后的任务。\n\n### 2、针对排好的任务进行象限组合、排序\n\n把每个任务放到所属的象限内，并根据2个维度的指数进行象限内排序。\n\n### 3、执行顺序\n\n大体上任务的执行顺序按照 重要&紧急，重要&不紧急，紧急&不重要，不紧急不重要 的顺序来。\n\n但是，如果你是替别人打工，有些工作上“不重要且紧急”的事情需要排在“重要&不紧急”的事情前面，往往前者比后者更加耗时间，所以可以选择在前者的间隙处理后者。\n\n### 4、每日调整&总结\n\n安排总会因为各种原因变化，我们要重视对任务重新梳理的过程，以免做无用功。\n\n不要每天给自己安排过多的任务，总结的时候发现没有按时完成任务会带来懊悔和自我否定。合理的安排比压榨自己更加划算。\n\n\n","source":"_posts/think/manage-time.md","raw":"---\ntitle: 四象限时间管理\ncategories: 思考\ndate: 2019-4-9\n---  \n\n史蒂芬·科维的《高效能人士的七个习惯》在描述如何实现个人领域成功时提到了一个很重要的习惯，“要事第一”。\n\n通常我们列出来的TODO list是线性的，从上至下排列，我们的评判标准只有一个：是否重要。\n\n## 一、2个维度 4个象限\n\n### 2个维度：\n1. 是否重要\n\n  重要性对一个人来说要从价值观的角度去考虑。这件事做了之后是否有收获，这个收获一定要对自己有意义。\n\n  通常大家觉得，让自己有收获的事情才是最重要的。我觉得，工作期间和工作之余要区分开来。即在该做什么事情的时候就做什么事情。所以，针对工作和生活可以使用2份4象限表。\n\n\n2. 是否紧急\n\n  在近期内必须要完成的，即紧急的\n\n  一般比较紧急的是有deadline的事情。\n  工作上的例子：项目上线，会议前的方案搜集\n  生活中的例子：上学，煮饭\n\n### 4个象限：\n1. 重要且紧急\n2. 重要不紧急\n3. 不重要但紧急\n4. 不重要不紧急。\n\n## 二、如何区分事件属于哪个象限？\n\n以下针对4个象限的界定标准进行描述。\n\n### 重要&紧急 (Urgent & Important)\n\n这个象限内的事情可以说不得不做。生活中应该尽量避免堆积太多此类事情，否则整日焦头烂额。\n\n> 1. 不立即做的话将来随时可能产生危机\n> 2. 必须在deadline之前赶出来，这个deadline强调外界压力\n\n### 重要&不紧急 (Important & Not Urgent)\n\n> 1. 有助于个人长远发展的事情， 比如学习计划，技术方案调研\n> 2. 有助于群体长远发展的事情，比如培训计划\n> 3. 有助于减少“重要紧急”事项的事情。\n\n我们通常说，有拖延症的人通常指，把重要但是不紧急的事情拖延到演变为重要紧急的事情，导致花更多的时间在第一象限。\n\n### 紧急&不重要 (Urgent & Not Important)\n\n> 1. 需要近期做的事情，迫不得已可以选择不做或者接受延期的\n> 2. 时间比较赶，但是不怎么耗费精力\n\n这类工作最好做，但是在精力状态一般的情况下做，必要的时候选择不做。这样可以充分利用以及节约时间。这类事情包括约会，群体活动，回复邮件。\n\n### 不重要&不紧急 (Not Important & Not Urgent)\n\n> 1. 纯粹打发时间，没有任何实际意义\n> 2. 短期精神满足，实则空虚\n\n这类事情在其它象限的事情没有处理完的时候尽量不要做。除非其它象限的事情完全没有精力做下去了又不想休息。\n\n## 三、如何实施\n\n### 1、针对列出的任务清单，问自己2个问题：\n\n1. 这件事情，真的很重要吗？如果是工作任务，是否属于高优先级的任务？如果是学习任务，是否能让自己有所收获？所需要的时间是多久？\n\n通过以上问题，把任务分成重要和不重要的，相同类别下的任务分别赋值一个重要指数。\n\n2. 这件事情你自己计划或者上级需要什么时候完成？写下deadline，给自己定下的deadline最好比实际要求的更早。\n\n通过以上问题，把最近1周内需要做的事情按照deadline进行排序，其它的事情暂时安排到下周。如果任务需要花的时间比较长，最好做一下任务分解，说不定可以分解出一些可以延后的任务。\n\n### 2、针对排好的任务进行象限组合、排序\n\n把每个任务放到所属的象限内，并根据2个维度的指数进行象限内排序。\n\n### 3、执行顺序\n\n大体上任务的执行顺序按照 重要&紧急，重要&不紧急，紧急&不重要，不紧急不重要 的顺序来。\n\n但是，如果你是替别人打工，有些工作上“不重要且紧急”的事情需要排在“重要&不紧急”的事情前面，往往前者比后者更加耗时间，所以可以选择在前者的间隙处理后者。\n\n### 4、每日调整&总结\n\n安排总会因为各种原因变化，我们要重视对任务重新梳理的过程，以免做无用功。\n\n不要每天给自己安排过多的任务，总结的时候发现没有按时完成任务会带来懊悔和自我否定。合理的安排比压榨自己更加划算。\n\n\n","slug":"think/manage-time","published":1,"updated":"2021-05-31T00:32:57.788Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpcooutr000iu9q8h86agnjc","content":"<p>史蒂芬·科维的《高效能人士的七个习惯》在描述如何实现个人领域成功时提到了一个很重要的习惯，“要事第一”。</p>\n<p>通常我们列出来的TODO list是线性的，从上至下排列，我们的评判标准只有一个：是否重要。</p>\n<h2 id=\"一、2个维度-4个象限\"><a href=\"#一、2个维度-4个象限\" class=\"headerlink\" title=\"一、2个维度 4个象限\"></a>一、2个维度 4个象限</h2><h3 id=\"2个维度：\"><a href=\"#2个维度：\" class=\"headerlink\" title=\"2个维度：\"></a>2个维度：</h3><ol>\n<li>是否重要</li>\n</ol>\n<p>  重要性对一个人来说要从价值观的角度去考虑。这件事做了之后是否有收获，这个收获一定要对自己有意义。</p>\n<p>  通常大家觉得，让自己有收获的事情才是最重要的。我觉得，工作期间和工作之余要区分开来。即在该做什么事情的时候就做什么事情。所以，针对工作和生活可以使用2份4象限表。</p>\n<ol start=\"2\">\n<li>是否紧急</li>\n</ol>\n<p>  在近期内必须要完成的，即紧急的</p>\n<p>  一般比较紧急的是有deadline的事情。<br>  工作上的例子：项目上线，会议前的方案搜集<br>  生活中的例子：上学，煮饭</p>\n<h3 id=\"4个象限：\"><a href=\"#4个象限：\" class=\"headerlink\" title=\"4个象限：\"></a>4个象限：</h3><ol>\n<li>重要且紧急</li>\n<li>重要不紧急</li>\n<li>不重要但紧急</li>\n<li>不重要不紧急。</li>\n</ol>\n<h2 id=\"二、如何区分事件属于哪个象限？\"><a href=\"#二、如何区分事件属于哪个象限？\" class=\"headerlink\" title=\"二、如何区分事件属于哪个象限？\"></a>二、如何区分事件属于哪个象限？</h2><p>以下针对4个象限的界定标准进行描述。</p>\n<h3 id=\"重要-amp-紧急-Urgent-amp-Important\"><a href=\"#重要-amp-紧急-Urgent-amp-Important\" class=\"headerlink\" title=\"重要&amp;紧急 (Urgent &amp; Important)\"></a>重要&amp;紧急 (Urgent &amp; Important)</h3><p>这个象限内的事情可以说不得不做。生活中应该尽量避免堆积太多此类事情，否则整日焦头烂额。</p>\n<blockquote>\n<ol>\n<li>不立即做的话将来随时可能产生危机</li>\n<li>必须在deadline之前赶出来，这个deadline强调外界压力</li>\n</ol>\n</blockquote>\n<h3 id=\"重要-amp-不紧急-Important-amp-Not-Urgent\"><a href=\"#重要-amp-不紧急-Important-amp-Not-Urgent\" class=\"headerlink\" title=\"重要&amp;不紧急 (Important &amp; Not Urgent)\"></a>重要&amp;不紧急 (Important &amp; Not Urgent)</h3><blockquote>\n<ol>\n<li>有助于个人长远发展的事情， 比如学习计划，技术方案调研</li>\n<li>有助于群体长远发展的事情，比如培训计划</li>\n<li>有助于减少“重要紧急”事项的事情。</li>\n</ol>\n</blockquote>\n<p>我们通常说，有拖延症的人通常指，把重要但是不紧急的事情拖延到演变为重要紧急的事情，导致花更多的时间在第一象限。</p>\n<h3 id=\"紧急-amp-不重要-Urgent-amp-Not-Important\"><a href=\"#紧急-amp-不重要-Urgent-amp-Not-Important\" class=\"headerlink\" title=\"紧急&amp;不重要 (Urgent &amp; Not Important)\"></a>紧急&amp;不重要 (Urgent &amp; Not Important)</h3><blockquote>\n<ol>\n<li>需要近期做的事情，迫不得已可以选择不做或者接受延期的</li>\n<li>时间比较赶，但是不怎么耗费精力</li>\n</ol>\n</blockquote>\n<p>这类工作最好做，但是在精力状态一般的情况下做，必要的时候选择不做。这样可以充分利用以及节约时间。这类事情包括约会，群体活动，回复邮件。</p>\n<h3 id=\"不重要-amp-不紧急-Not-Important-amp-Not-Urgent\"><a href=\"#不重要-amp-不紧急-Not-Important-amp-Not-Urgent\" class=\"headerlink\" title=\"不重要&amp;不紧急 (Not Important &amp; Not Urgent)\"></a>不重要&amp;不紧急 (Not Important &amp; Not Urgent)</h3><blockquote>\n<ol>\n<li>纯粹打发时间，没有任何实际意义</li>\n<li>短期精神满足，实则空虚</li>\n</ol>\n</blockquote>\n<p>这类事情在其它象限的事情没有处理完的时候尽量不要做。除非其它象限的事情完全没有精力做下去了又不想休息。</p>\n<h2 id=\"三、如何实施\"><a href=\"#三、如何实施\" class=\"headerlink\" title=\"三、如何实施\"></a>三、如何实施</h2><h3 id=\"1、针对列出的任务清单，问自己2个问题：\"><a href=\"#1、针对列出的任务清单，问自己2个问题：\" class=\"headerlink\" title=\"1、针对列出的任务清单，问自己2个问题：\"></a>1、针对列出的任务清单，问自己2个问题：</h3><ol>\n<li>这件事情，真的很重要吗？如果是工作任务，是否属于高优先级的任务？如果是学习任务，是否能让自己有所收获？所需要的时间是多久？</li>\n</ol>\n<p>通过以上问题，把任务分成重要和不重要的，相同类别下的任务分别赋值一个重要指数。</p>\n<ol start=\"2\">\n<li>这件事情你自己计划或者上级需要什么时候完成？写下deadline，给自己定下的deadline最好比实际要求的更早。</li>\n</ol>\n<p>通过以上问题，把最近1周内需要做的事情按照deadline进行排序，其它的事情暂时安排到下周。如果任务需要花的时间比较长，最好做一下任务分解，说不定可以分解出一些可以延后的任务。</p>\n<h3 id=\"2、针对排好的任务进行象限组合、排序\"><a href=\"#2、针对排好的任务进行象限组合、排序\" class=\"headerlink\" title=\"2、针对排好的任务进行象限组合、排序\"></a>2、针对排好的任务进行象限组合、排序</h3><p>把每个任务放到所属的象限内，并根据2个维度的指数进行象限内排序。</p>\n<h3 id=\"3、执行顺序\"><a href=\"#3、执行顺序\" class=\"headerlink\" title=\"3、执行顺序\"></a>3、执行顺序</h3><p>大体上任务的执行顺序按照 重要&amp;紧急，重要&amp;不紧急，紧急&amp;不重要，不紧急不重要 的顺序来。</p>\n<p>但是，如果你是替别人打工，有些工作上“不重要且紧急”的事情需要排在“重要&amp;不紧急”的事情前面，往往前者比后者更加耗时间，所以可以选择在前者的间隙处理后者。</p>\n<h3 id=\"4、每日调整-amp-总结\"><a href=\"#4、每日调整-amp-总结\" class=\"headerlink\" title=\"4、每日调整&amp;总结\"></a>4、每日调整&amp;总结</h3><p>安排总会因为各种原因变化，我们要重视对任务重新梳理的过程，以免做无用功。</p>\n<p>不要每天给自己安排过多的任务，总结的时候发现没有按时完成任务会带来懊悔和自我否定。合理的安排比压榨自己更加划算。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>史蒂芬·科维的《高效能人士的七个习惯》在描述如何实现个人领域成功时提到了一个很重要的习惯，“要事第一”。</p>\n<p>通常我们列出来的TODO list是线性的，从上至下排列，我们的评判标准只有一个：是否重要。</p>\n<h2 id=\"一、2个维度-4个象限\"><a href=\"#一、2个维度-4个象限\" class=\"headerlink\" title=\"一、2个维度 4个象限\"></a>一、2个维度 4个象限</h2><h3 id=\"2个维度：\"><a href=\"#2个维度：\" class=\"headerlink\" title=\"2个维度：\"></a>2个维度：</h3><ol>\n<li>是否重要</li>\n</ol>\n<p>  重要性对一个人来说要从价值观的角度去考虑。这件事做了之后是否有收获，这个收获一定要对自己有意义。</p>\n<p>  通常大家觉得，让自己有收获的事情才是最重要的。我觉得，工作期间和工作之余要区分开来。即在该做什么事情的时候就做什么事情。所以，针对工作和生活可以使用2份4象限表。</p>\n<ol start=\"2\">\n<li>是否紧急</li>\n</ol>\n<p>  在近期内必须要完成的，即紧急的</p>\n<p>  一般比较紧急的是有deadline的事情。<br>  工作上的例子：项目上线，会议前的方案搜集<br>  生活中的例子：上学，煮饭</p>\n<h3 id=\"4个象限：\"><a href=\"#4个象限：\" class=\"headerlink\" title=\"4个象限：\"></a>4个象限：</h3><ol>\n<li>重要且紧急</li>\n<li>重要不紧急</li>\n<li>不重要但紧急</li>\n<li>不重要不紧急。</li>\n</ol>\n<h2 id=\"二、如何区分事件属于哪个象限？\"><a href=\"#二、如何区分事件属于哪个象限？\" class=\"headerlink\" title=\"二、如何区分事件属于哪个象限？\"></a>二、如何区分事件属于哪个象限？</h2><p>以下针对4个象限的界定标准进行描述。</p>\n<h3 id=\"重要-amp-紧急-Urgent-amp-Important\"><a href=\"#重要-amp-紧急-Urgent-amp-Important\" class=\"headerlink\" title=\"重要&amp;紧急 (Urgent &amp; Important)\"></a>重要&amp;紧急 (Urgent &amp; Important)</h3><p>这个象限内的事情可以说不得不做。生活中应该尽量避免堆积太多此类事情，否则整日焦头烂额。</p>\n<blockquote>\n<ol>\n<li>不立即做的话将来随时可能产生危机</li>\n<li>必须在deadline之前赶出来，这个deadline强调外界压力</li>\n</ol>\n</blockquote>\n<h3 id=\"重要-amp-不紧急-Important-amp-Not-Urgent\"><a href=\"#重要-amp-不紧急-Important-amp-Not-Urgent\" class=\"headerlink\" title=\"重要&amp;不紧急 (Important &amp; Not Urgent)\"></a>重要&amp;不紧急 (Important &amp; Not Urgent)</h3><blockquote>\n<ol>\n<li>有助于个人长远发展的事情， 比如学习计划，技术方案调研</li>\n<li>有助于群体长远发展的事情，比如培训计划</li>\n<li>有助于减少“重要紧急”事项的事情。</li>\n</ol>\n</blockquote>\n<p>我们通常说，有拖延症的人通常指，把重要但是不紧急的事情拖延到演变为重要紧急的事情，导致花更多的时间在第一象限。</p>\n<h3 id=\"紧急-amp-不重要-Urgent-amp-Not-Important\"><a href=\"#紧急-amp-不重要-Urgent-amp-Not-Important\" class=\"headerlink\" title=\"紧急&amp;不重要 (Urgent &amp; Not Important)\"></a>紧急&amp;不重要 (Urgent &amp; Not Important)</h3><blockquote>\n<ol>\n<li>需要近期做的事情，迫不得已可以选择不做或者接受延期的</li>\n<li>时间比较赶，但是不怎么耗费精力</li>\n</ol>\n</blockquote>\n<p>这类工作最好做，但是在精力状态一般的情况下做，必要的时候选择不做。这样可以充分利用以及节约时间。这类事情包括约会，群体活动，回复邮件。</p>\n<h3 id=\"不重要-amp-不紧急-Not-Important-amp-Not-Urgent\"><a href=\"#不重要-amp-不紧急-Not-Important-amp-Not-Urgent\" class=\"headerlink\" title=\"不重要&amp;不紧急 (Not Important &amp; Not Urgent)\"></a>不重要&amp;不紧急 (Not Important &amp; Not Urgent)</h3><blockquote>\n<ol>\n<li>纯粹打发时间，没有任何实际意义</li>\n<li>短期精神满足，实则空虚</li>\n</ol>\n</blockquote>\n<p>这类事情在其它象限的事情没有处理完的时候尽量不要做。除非其它象限的事情完全没有精力做下去了又不想休息。</p>\n<h2 id=\"三、如何实施\"><a href=\"#三、如何实施\" class=\"headerlink\" title=\"三、如何实施\"></a>三、如何实施</h2><h3 id=\"1、针对列出的任务清单，问自己2个问题：\"><a href=\"#1、针对列出的任务清单，问自己2个问题：\" class=\"headerlink\" title=\"1、针对列出的任务清单，问自己2个问题：\"></a>1、针对列出的任务清单，问自己2个问题：</h3><ol>\n<li>这件事情，真的很重要吗？如果是工作任务，是否属于高优先级的任务？如果是学习任务，是否能让自己有所收获？所需要的时间是多久？</li>\n</ol>\n<p>通过以上问题，把任务分成重要和不重要的，相同类别下的任务分别赋值一个重要指数。</p>\n<ol start=\"2\">\n<li>这件事情你自己计划或者上级需要什么时候完成？写下deadline，给自己定下的deadline最好比实际要求的更早。</li>\n</ol>\n<p>通过以上问题，把最近1周内需要做的事情按照deadline进行排序，其它的事情暂时安排到下周。如果任务需要花的时间比较长，最好做一下任务分解，说不定可以分解出一些可以延后的任务。</p>\n<h3 id=\"2、针对排好的任务进行象限组合、排序\"><a href=\"#2、针对排好的任务进行象限组合、排序\" class=\"headerlink\" title=\"2、针对排好的任务进行象限组合、排序\"></a>2、针对排好的任务进行象限组合、排序</h3><p>把每个任务放到所属的象限内，并根据2个维度的指数进行象限内排序。</p>\n<h3 id=\"3、执行顺序\"><a href=\"#3、执行顺序\" class=\"headerlink\" title=\"3、执行顺序\"></a>3、执行顺序</h3><p>大体上任务的执行顺序按照 重要&amp;紧急，重要&amp;不紧急，紧急&amp;不重要，不紧急不重要 的顺序来。</p>\n<p>但是，如果你是替别人打工，有些工作上“不重要且紧急”的事情需要排在“重要&amp;不紧急”的事情前面，往往前者比后者更加耗时间，所以可以选择在前者的间隙处理后者。</p>\n<h3 id=\"4、每日调整-amp-总结\"><a href=\"#4、每日调整-amp-总结\" class=\"headerlink\" title=\"4、每日调整&amp;总结\"></a>4、每日调整&amp;总结</h3><p>安排总会因为各种原因变化，我们要重视对任务重新梳理的过程，以免做无用功。</p>\n<p>不要每天给自己安排过多的任务，总结的时候发现没有按时完成任务会带来懊悔和自我否定。合理的安排比压榨自己更加划算。</p>\n"},{"title":"git 常用命令","date":"2019-11-30T16:00:00.000Z","_content":"\n## 本地代码新建远程仓库\n\n如果本地配置的ssh 是其它域名下的，比如说公司内网gitlab，但是你此时想要创建的仓库是github上的，那代码推到远程仓库的时候需要使用https协议，而不是ssh，不然的话身份认证会失败的。\n\n```\ngit@github.com: Permission denied (publickey).\n```\n\n##### 远程：\n创建一个仓库， 假如链接为\n```\nhttps://github.com/sharemeans/vue.git/\n```\n\n##### 本地：\n```\ncd my-vue\ngit init\ngit add .\ngit commit -m \"项目初始化\"\ngit remote add origin https://github.com/sharemeans/vue.git/\n// 根据提示输入账号密码，成功之后代码自动上传\n// 代码推送到远程 -u表示推送成功后自动建立本地分支与远程分支的追踪\ngit push -u origin master\n```\n\n## 查看远程仓库地址\n```\ngit remote -v\n```\n\n## 查看本地分支跟踪的远程分支\n```\ngit branch -vv\n```\n## 基于远程分支A创建本地跟踪分支A\n```\ngit checkout -b A origin/A\n```\n\n## 基于本地分支B创建本地分支A\n```\ngit checkout -b A B\n```\n\n## 基于远程分支创建本地同名跟踪分支\n```\ngit checkout --track origin/A\n```\n\n## 合并A 分支到当前分支，且所有冲突都采用A分支\n```\ngit pull -s recursive -X theirs A\n```\n","source":"_posts/tools/git.md","raw":"---\ntitle: git 常用命令\ncategories: 工具\ndate: 2019-12-1\n---\n\n## 本地代码新建远程仓库\n\n如果本地配置的ssh 是其它域名下的，比如说公司内网gitlab，但是你此时想要创建的仓库是github上的，那代码推到远程仓库的时候需要使用https协议，而不是ssh，不然的话身份认证会失败的。\n\n```\ngit@github.com: Permission denied (publickey).\n```\n\n##### 远程：\n创建一个仓库， 假如链接为\n```\nhttps://github.com/sharemeans/vue.git/\n```\n\n##### 本地：\n```\ncd my-vue\ngit init\ngit add .\ngit commit -m \"项目初始化\"\ngit remote add origin https://github.com/sharemeans/vue.git/\n// 根据提示输入账号密码，成功之后代码自动上传\n// 代码推送到远程 -u表示推送成功后自动建立本地分支与远程分支的追踪\ngit push -u origin master\n```\n\n## 查看远程仓库地址\n```\ngit remote -v\n```\n\n## 查看本地分支跟踪的远程分支\n```\ngit branch -vv\n```\n## 基于远程分支A创建本地跟踪分支A\n```\ngit checkout -b A origin/A\n```\n\n## 基于本地分支B创建本地分支A\n```\ngit checkout -b A B\n```\n\n## 基于远程分支创建本地同名跟踪分支\n```\ngit checkout --track origin/A\n```\n\n## 合并A 分支到当前分支，且所有冲突都采用A分支\n```\ngit pull -s recursive -X theirs A\n```\n","slug":"tools/git","published":1,"updated":"2021-05-31T00:33:34.776Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpcooutr000ju9q8ghg61lzt","content":"<h2 id=\"本地代码新建远程仓库\"><a href=\"#本地代码新建远程仓库\" class=\"headerlink\" title=\"本地代码新建远程仓库\"></a>本地代码新建远程仓库</h2><p>如果本地配置的ssh 是其它域名下的，比如说公司内网gitlab，但是你此时想要创建的仓库是github上的，那代码推到远程仓库的时候需要使用https协议，而不是ssh，不然的话身份认证会失败的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git@github.com: Permission denied (publickey).</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"远程：\"><a href=\"#远程：\" class=\"headerlink\" title=\"远程：\"></a>远程：</h5><p>创建一个仓库， 假如链接为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/sharemeans/vue.git/</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"本地：\"><a href=\"#本地：\" class=\"headerlink\" title=\"本地：\"></a>本地：</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd my-vue</span><br><span class=\"line\">git init</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;项目初始化&quot;</span><br><span class=\"line\">git remote add origin https://github.com/sharemeans/vue.git/</span><br><span class=\"line\">// 根据提示输入账号密码，成功之后代码自动上传</span><br><span class=\"line\">// 代码推送到远程 -u表示推送成功后自动建立本地分支与远程分支的追踪</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看远程仓库地址\"><a href=\"#查看远程仓库地址\" class=\"headerlink\" title=\"查看远程仓库地址\"></a>查看远程仓库地址</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看本地分支跟踪的远程分支\"><a href=\"#查看本地分支跟踪的远程分支\" class=\"headerlink\" title=\"查看本地分支跟踪的远程分支\"></a>查看本地分支跟踪的远程分支</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -vv</span><br></pre></td></tr></table></figure>\n<h2 id=\"基于远程分支A创建本地跟踪分支A\"><a href=\"#基于远程分支A创建本地跟踪分支A\" class=\"headerlink\" title=\"基于远程分支A创建本地跟踪分支A\"></a>基于远程分支A创建本地跟踪分支A</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b A origin/A</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基于本地分支B创建本地分支A\"><a href=\"#基于本地分支B创建本地分支A\" class=\"headerlink\" title=\"基于本地分支B创建本地分支A\"></a>基于本地分支B创建本地分支A</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b A B</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基于远程分支创建本地同名跟踪分支\"><a href=\"#基于远程分支创建本地同名跟踪分支\" class=\"headerlink\" title=\"基于远程分支创建本地同名跟踪分支\"></a>基于远程分支创建本地同名跟踪分支</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout --track origin/A</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"合并A-分支到当前分支，且所有冲突都采用A分支\"><a href=\"#合并A-分支到当前分支，且所有冲突都采用A分支\" class=\"headerlink\" title=\"合并A 分支到当前分支，且所有冲突都采用A分支\"></a>合并A 分支到当前分支，且所有冲突都采用A分支</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull -s recursive -X theirs A</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"本地代码新建远程仓库\"><a href=\"#本地代码新建远程仓库\" class=\"headerlink\" title=\"本地代码新建远程仓库\"></a>本地代码新建远程仓库</h2><p>如果本地配置的ssh 是其它域名下的，比如说公司内网gitlab，但是你此时想要创建的仓库是github上的，那代码推到远程仓库的时候需要使用https协议，而不是ssh，不然的话身份认证会失败的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git@github.com: Permission denied (publickey).</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"远程：\"><a href=\"#远程：\" class=\"headerlink\" title=\"远程：\"></a>远程：</h5><p>创建一个仓库， 假如链接为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/sharemeans/vue.git/</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"本地：\"><a href=\"#本地：\" class=\"headerlink\" title=\"本地：\"></a>本地：</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd my-vue</span><br><span class=\"line\">git init</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;项目初始化&quot;</span><br><span class=\"line\">git remote add origin https://github.com/sharemeans/vue.git/</span><br><span class=\"line\">// 根据提示输入账号密码，成功之后代码自动上传</span><br><span class=\"line\">// 代码推送到远程 -u表示推送成功后自动建立本地分支与远程分支的追踪</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看远程仓库地址\"><a href=\"#查看远程仓库地址\" class=\"headerlink\" title=\"查看远程仓库地址\"></a>查看远程仓库地址</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看本地分支跟踪的远程分支\"><a href=\"#查看本地分支跟踪的远程分支\" class=\"headerlink\" title=\"查看本地分支跟踪的远程分支\"></a>查看本地分支跟踪的远程分支</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -vv</span><br></pre></td></tr></table></figure>\n<h2 id=\"基于远程分支A创建本地跟踪分支A\"><a href=\"#基于远程分支A创建本地跟踪分支A\" class=\"headerlink\" title=\"基于远程分支A创建本地跟踪分支A\"></a>基于远程分支A创建本地跟踪分支A</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b A origin/A</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基于本地分支B创建本地分支A\"><a href=\"#基于本地分支B创建本地分支A\" class=\"headerlink\" title=\"基于本地分支B创建本地分支A\"></a>基于本地分支B创建本地分支A</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b A B</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基于远程分支创建本地同名跟踪分支\"><a href=\"#基于远程分支创建本地同名跟踪分支\" class=\"headerlink\" title=\"基于远程分支创建本地同名跟踪分支\"></a>基于远程分支创建本地同名跟踪分支</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout --track origin/A</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"合并A-分支到当前分支，且所有冲突都采用A分支\"><a href=\"#合并A-分支到当前分支，且所有冲突都采用A分支\" class=\"headerlink\" title=\"合并A 分支到当前分支，且所有冲突都采用A分支\"></a>合并A 分支到当前分支，且所有冲突都采用A分支</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull -s recursive -X theirs A</span><br></pre></td></tr></table></figure>\n"},{"title":"插件Pipeline: Groovy","date":"2021-04-29T16:00:00.000Z","_content":" \n\nJenkins 自动化构建基于一系列插件，[常用的插件](https://www.jianshu.com/p/e0b7d377132a?from=timeline)\n\n最基础的是流水线插件。公司内的流水线插件配置使用Pipeline: Groovy。该插件的基本配置如下。\n\n可以直接在文本框写入简单的脚本（Pipeline script），也可以读取Jenkinsfile内的流水线脚本（Pipeline script from scm）。scm全称是Source Control Management，如gitlab。\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343189420-image.png)\n\n选择了SCM之后需要配置git的地址和账号密码：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343216758-image.png)\n\n选择构建分支：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343247362-image.png)\n\n构建分支BRANCH的值来源于参数，需要配置参数化构建，Jenkins可配置的参数类型有：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343271570-image.png)\n\n其中，Git Parameter类型需要安装插件：Git Parameter。\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343386941-image.png)\n\n该插件获取以下类型的值，并赋值给我们定义的变量名BRANCH（可以是其它名字）：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343409839-image.png)\n\n分支选择时可以配置过滤器以及分支显示框的高度：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343429756-image.png)\n\n另外可以配置其它参数，如构建环境：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343450153-image.png)\ncheckbox类型的值传入Jenkinsfile中的格式为字符串，分隔符和Jenkins上的配置一致。\n\nJenkinsfile中可以通过params 获取到参数化构建中传入的参数：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343471298-image.png)\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343490451-image.png)\n\n\n选择构建分支时，可以使用参数化构建传入的参数：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343513092-image.png)\n\npipeline:Groovy可以配置构建执行脚本文件路径：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343529779-image.png)","source":"_posts/tools/pipeline-groovy.md","raw":"---\ntitle: \"插件Pipeline: Groovy\"\ncategories: 工具\ndate: 2021-4-30\n--- \n\nJenkins 自动化构建基于一系列插件，[常用的插件](https://www.jianshu.com/p/e0b7d377132a?from=timeline)\n\n最基础的是流水线插件。公司内的流水线插件配置使用Pipeline: Groovy。该插件的基本配置如下。\n\n可以直接在文本框写入简单的脚本（Pipeline script），也可以读取Jenkinsfile内的流水线脚本（Pipeline script from scm）。scm全称是Source Control Management，如gitlab。\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343189420-image.png)\n\n选择了SCM之后需要配置git的地址和账号密码：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343216758-image.png)\n\n选择构建分支：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343247362-image.png)\n\n构建分支BRANCH的值来源于参数，需要配置参数化构建，Jenkins可配置的参数类型有：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343271570-image.png)\n\n其中，Git Parameter类型需要安装插件：Git Parameter。\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343386941-image.png)\n\n该插件获取以下类型的值，并赋值给我们定义的变量名BRANCH（可以是其它名字）：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343409839-image.png)\n\n分支选择时可以配置过滤器以及分支显示框的高度：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343429756-image.png)\n\n另外可以配置其它参数，如构建环境：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343450153-image.png)\ncheckbox类型的值传入Jenkinsfile中的格式为字符串，分隔符和Jenkins上的配置一致。\n\nJenkinsfile中可以通过params 获取到参数化构建中传入的参数：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343471298-image.png)\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343490451-image.png)\n\n\n选择构建分支时，可以使用参数化构建传入的参数：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343513092-image.png)\n\npipeline:Groovy可以配置构建执行脚本文件路径：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343529779-image.png)","slug":"tools/pipeline-groovy","published":1,"updated":"2021-05-31T00:34:04.547Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpcoouts000ku9q8f8nzaa9u","content":"<p>Jenkins 自动化构建基于一系列插件，<a href=\"https://www.jianshu.com/p/e0b7d377132a?from=timeline\">常用的插件</a></p>\n<p>最基础的是流水线插件。公司内的流水线插件配置使用Pipeline: Groovy。该插件的基本配置如下。</p>\n<p>可以直接在文本框写入简单的脚本（Pipeline script），也可以读取Jenkinsfile内的流水线脚本（Pipeline script from scm）。scm全称是Source Control Management，如gitlab。</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343189420-image.png\"></p>\n<p>选择了SCM之后需要配置git的地址和账号密码：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343216758-image.png\"></p>\n<p>选择构建分支：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343247362-image.png\"></p>\n<p>构建分支BRANCH的值来源于参数，需要配置参数化构建，Jenkins可配置的参数类型有：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343271570-image.png\"></p>\n<p>其中，Git Parameter类型需要安装插件：Git Parameter。</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343386941-image.png\"></p>\n<p>该插件获取以下类型的值，并赋值给我们定义的变量名BRANCH（可以是其它名字）：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343409839-image.png\"></p>\n<p>分支选择时可以配置过滤器以及分支显示框的高度：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343429756-image.png\"></p>\n<p>另外可以配置其它参数，如构建环境：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343450153-image.png\"><br>checkbox类型的值传入Jenkinsfile中的格式为字符串，分隔符和Jenkins上的配置一致。</p>\n<p>Jenkinsfile中可以通过params 获取到参数化构建中传入的参数：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343471298-image.png\"><br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343490451-image.png\"></p>\n<p>选择构建分支时，可以使用参数化构建传入的参数：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343513092-image.png\"></p>\n<p>pipeline:Groovy可以配置构建执行脚本文件路径：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343529779-image.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Jenkins 自动化构建基于一系列插件，<a href=\"https://www.jianshu.com/p/e0b7d377132a?from=timeline\">常用的插件</a></p>\n<p>最基础的是流水线插件。公司内的流水线插件配置使用Pipeline: Groovy。该插件的基本配置如下。</p>\n<p>可以直接在文本框写入简单的脚本（Pipeline script），也可以读取Jenkinsfile内的流水线脚本（Pipeline script from scm）。scm全称是Source Control Management，如gitlab。</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343189420-image.png\"></p>\n<p>选择了SCM之后需要配置git的地址和账号密码：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343216758-image.png\"></p>\n<p>选择构建分支：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343247362-image.png\"></p>\n<p>构建分支BRANCH的值来源于参数，需要配置参数化构建，Jenkins可配置的参数类型有：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343271570-image.png\"></p>\n<p>其中，Git Parameter类型需要安装插件：Git Parameter。</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343386941-image.png\"></p>\n<p>该插件获取以下类型的值，并赋值给我们定义的变量名BRANCH（可以是其它名字）：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343409839-image.png\"></p>\n<p>分支选择时可以配置过滤器以及分支显示框的高度：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343429756-image.png\"></p>\n<p>另外可以配置其它参数，如构建环境：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343450153-image.png\"><br>checkbox类型的值传入Jenkinsfile中的格式为字符串，分隔符和Jenkins上的配置一致。</p>\n<p>Jenkinsfile中可以通过params 获取到参数化构建中传入的参数：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343471298-image.png\"><br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343490451-image.png\"></p>\n<p>选择构建分支时，可以使用参数化构建传入的参数：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343513092-image.png\"></p>\n<p>pipeline:Groovy可以配置构建执行脚本文件路径：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343529779-image.png\"></p>\n"},{"title":"uni-app H5模式下treeShaking的坑","date":"2021-05-09T16:00:00.000Z","_content":"  \n\nuni-apph5打包模式，使用[treeShaking](https://uniapp.dcloud.io/collocation/manifest?id=treeshaking)时，该配置只在生产模式下有效，即使部署到测试和预生产都没有问题，发布到生产之前一定要先本地打包生产模式确保无异常。\n\n我们的项目发布到生产之后运行h5出现以下报错：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622344617219-image.png)\n\n经过一番全局搜索，看到了一个插件（目录：@dcloudio/vue-cli-plugin-uni-optimize/packages/babel-plugin-uni-api/index.js）：\n\n```\nprocess.UNI_APIS = new Set()\nmodule.exports = function ({\n  types: t\n}) {\n  return {\n    visitor: {\n      MemberExpression (path, state) {\n        if (\n          t.isIdentifier(path.node.object) &&\n          (\n            path.node.object.name === 'uni' ||\n            path.node.object.name === 'wx'\n          )\n        ) {\n          process.UNI_APIS.add(path.node.property.name || path.node.property.value)\n        }\n      }\n    }\n  }\n}\n```\n该插件在获取了AST语法树之后，将遇到uni.xxx语法的对象属性引用对应的api名称添加到process.UNI_APIS中。\n\n然而，通过调试发现代码并没有运行到此处，此路不通。\n\n后来终于发现了一个关键线索。\n\n1. 读取optimization.treeShaking开关并标记\n\n@dcloudio/vue-cli-plugin-uni/lib/env.js文件中读取到optimization.treeShaking配置为true时，就会执行以下代码：\n```\nprocess.env.UNI_OPT_TREESHAKINGNG = true\n```\n\n2. vue-cli-optimize插件\n\nvue-cli-plugin-uni-optimize插件（@dcloudio/vue-cli-plugin-uni-optimize/index.js）针对uni-api做了以下事情：\n* 将process.UNI_APIS写入@dcloudio\\vue-cli-plugin-uni-optimize\\.tmp\\api.js路径下的文件\n* 将uni api的模块引用路径替换成@dcloudio\\vue-cli-plugin-uni-optimize\\.tmp\\api.js路径下的文件\n\n但是我们从前文可知，唯一一处更新process.UNI_APIS的代码并未执行（猜测是uni-app代码的bug），导致uni-api update了个寂寞:\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622345030913-image.png)\n\n以上关键代码并未更新任何api，只是引入了一些默认的核心api（@dcloudio/vue-cli-plugin-uni-optimize/packages/webpack-optimize-plugin/api.js）:\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622345080481-image.png)\n\n以上代码标记部分，manifest[name][2]的值为true，即为核心api时才会被默认引入。\n\n由于不知道什么原因没有使用babel-plugin-uni-api，而且，考虑到该插件的tree-shaking比较粗暴，增加了业务代码的开发复杂度。\n\n而我负责的项目，业务中存在对uni的直接使用扩展运算符来实现uni-api和其它自定义api的整合：\n```\nsdk = {\n    ...uni,\n    someCustomApi: function(){...}\n}\n```\n即使babel-plugin-uni-api插件正常工作，根据该插件的shaking原理，我们需要将扩展运算符改为按需赋值的结构：\n```\nsdk = {\n    api1: uni.api1,\n    api2: uni.api2,\n    someCustomApi: function(){...}\n}\n```\n每增加一个新的uni-api都要去修改sdk文件，这是开发不希望发生的事情。因此考虑简单粗暴从manifest.json文件入手，让每一个api都成为核心api。在compiler的beforeCompile钩子回调中修改manifest文件的标记：\n```\nconst manifest = require('@dcloudio/uni-h5/manifest.json')\nObject.keys(manifest).forEach(name => {\n  if (manifest[name].length < 3) {\n    manifest[name].push(true)\n  }\n})\nconst newManifest = JSON.stringify(manifest, null, 2);\ntry {\n  fs.writeFileSync(path.resolve(process.cwd(), 'node_modules', '@dcloudio/uni-h5/manifest.json'), newManifest)\n  console.log('@dcloudio/uni-h5/manifest.json 替换成功...')\n} catch (err) {\n  console.log('@dcloudio/uni-h5/manifest.json 替换失败...')\n}\n```\n> writeFileSync将json写回文件时，需要转化为字符串，为了让字符串能够换行，保持json格式，需要传入JSON.stringify的第三个参数值为2，表示保留换行和空格，以及每次缩进使用2个空格。\n\n## 结果\n\n将“未开启tree-shaking”，“开启tree-shaking打包异常”，“开启tree-shaking并修复api打包异常”3个版本打包结果对比：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622345486280-image.png)\n\n可以看到，uni-app的tree-shaking效果一般，修复tree-shaking的打包结果依旧比开启前少了0.1M。\n\n[uni-app 2.2 大幅优化H5端性能体验，只开发H5，也要用uni-app](https://ask.dcloud.net.cn/article/36279)这篇文章提到，manifest内部的的tree-shaking其实主要做了2件事，内置组件的treeShaking和api的treeShaking，而且，文中数据显示，shaking效果拔群。但是本人尝试的结果发现效果实在一般。\n\n","source":"_posts/uni-app/h5-tree-shaking.md","raw":"---\ntitle: uni-app H5模式下treeShaking的坑\ncategories: uni-app\ndate: 2021-5-10\n---  \n\nuni-apph5打包模式，使用[treeShaking](https://uniapp.dcloud.io/collocation/manifest?id=treeshaking)时，该配置只在生产模式下有效，即使部署到测试和预生产都没有问题，发布到生产之前一定要先本地打包生产模式确保无异常。\n\n我们的项目发布到生产之后运行h5出现以下报错：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622344617219-image.png)\n\n经过一番全局搜索，看到了一个插件（目录：@dcloudio/vue-cli-plugin-uni-optimize/packages/babel-plugin-uni-api/index.js）：\n\n```\nprocess.UNI_APIS = new Set()\nmodule.exports = function ({\n  types: t\n}) {\n  return {\n    visitor: {\n      MemberExpression (path, state) {\n        if (\n          t.isIdentifier(path.node.object) &&\n          (\n            path.node.object.name === 'uni' ||\n            path.node.object.name === 'wx'\n          )\n        ) {\n          process.UNI_APIS.add(path.node.property.name || path.node.property.value)\n        }\n      }\n    }\n  }\n}\n```\n该插件在获取了AST语法树之后，将遇到uni.xxx语法的对象属性引用对应的api名称添加到process.UNI_APIS中。\n\n然而，通过调试发现代码并没有运行到此处，此路不通。\n\n后来终于发现了一个关键线索。\n\n1. 读取optimization.treeShaking开关并标记\n\n@dcloudio/vue-cli-plugin-uni/lib/env.js文件中读取到optimization.treeShaking配置为true时，就会执行以下代码：\n```\nprocess.env.UNI_OPT_TREESHAKINGNG = true\n```\n\n2. vue-cli-optimize插件\n\nvue-cli-plugin-uni-optimize插件（@dcloudio/vue-cli-plugin-uni-optimize/index.js）针对uni-api做了以下事情：\n* 将process.UNI_APIS写入@dcloudio\\vue-cli-plugin-uni-optimize\\.tmp\\api.js路径下的文件\n* 将uni api的模块引用路径替换成@dcloudio\\vue-cli-plugin-uni-optimize\\.tmp\\api.js路径下的文件\n\n但是我们从前文可知，唯一一处更新process.UNI_APIS的代码并未执行（猜测是uni-app代码的bug），导致uni-api update了个寂寞:\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622345030913-image.png)\n\n以上关键代码并未更新任何api，只是引入了一些默认的核心api（@dcloudio/vue-cli-plugin-uni-optimize/packages/webpack-optimize-plugin/api.js）:\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622345080481-image.png)\n\n以上代码标记部分，manifest[name][2]的值为true，即为核心api时才会被默认引入。\n\n由于不知道什么原因没有使用babel-plugin-uni-api，而且，考虑到该插件的tree-shaking比较粗暴，增加了业务代码的开发复杂度。\n\n而我负责的项目，业务中存在对uni的直接使用扩展运算符来实现uni-api和其它自定义api的整合：\n```\nsdk = {\n    ...uni,\n    someCustomApi: function(){...}\n}\n```\n即使babel-plugin-uni-api插件正常工作，根据该插件的shaking原理，我们需要将扩展运算符改为按需赋值的结构：\n```\nsdk = {\n    api1: uni.api1,\n    api2: uni.api2,\n    someCustomApi: function(){...}\n}\n```\n每增加一个新的uni-api都要去修改sdk文件，这是开发不希望发生的事情。因此考虑简单粗暴从manifest.json文件入手，让每一个api都成为核心api。在compiler的beforeCompile钩子回调中修改manifest文件的标记：\n```\nconst manifest = require('@dcloudio/uni-h5/manifest.json')\nObject.keys(manifest).forEach(name => {\n  if (manifest[name].length < 3) {\n    manifest[name].push(true)\n  }\n})\nconst newManifest = JSON.stringify(manifest, null, 2);\ntry {\n  fs.writeFileSync(path.resolve(process.cwd(), 'node_modules', '@dcloudio/uni-h5/manifest.json'), newManifest)\n  console.log('@dcloudio/uni-h5/manifest.json 替换成功...')\n} catch (err) {\n  console.log('@dcloudio/uni-h5/manifest.json 替换失败...')\n}\n```\n> writeFileSync将json写回文件时，需要转化为字符串，为了让字符串能够换行，保持json格式，需要传入JSON.stringify的第三个参数值为2，表示保留换行和空格，以及每次缩进使用2个空格。\n\n## 结果\n\n将“未开启tree-shaking”，“开启tree-shaking打包异常”，“开启tree-shaking并修复api打包异常”3个版本打包结果对比：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622345486280-image.png)\n\n可以看到，uni-app的tree-shaking效果一般，修复tree-shaking的打包结果依旧比开启前少了0.1M。\n\n[uni-app 2.2 大幅优化H5端性能体验，只开发H5，也要用uni-app](https://ask.dcloud.net.cn/article/36279)这篇文章提到，manifest内部的的tree-shaking其实主要做了2件事，内置组件的treeShaking和api的treeShaking，而且，文中数据显示，shaking效果拔群。但是本人尝试的结果发现效果实在一般。\n\n","slug":"uni-app/h5-tree-shaking","published":1,"updated":"2021-05-31T00:34:09.779Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpcoouts000lu9q8458r7tn7","content":"<p>uni-apph5打包模式，使用<a href=\"https://uniapp.dcloud.io/collocation/manifest?id=treeshaking\">treeShaking</a>时，该配置只在生产模式下有效，即使部署到测试和预生产都没有问题，发布到生产之前一定要先本地打包生产模式确保无异常。</p>\n<p>我们的项目发布到生产之后运行h5出现以下报错：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622344617219-image.png\"></p>\n<p>经过一番全局搜索，看到了一个插件（目录：@dcloudio/vue-cli-plugin-uni-optimize/packages/babel-plugin-uni-api/index.js）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.UNI_APIS = new Set()</span><br><span class=\"line\">module.exports = function (&#123;</span><br><span class=\"line\">  types: t</span><br><span class=\"line\">&#125;) &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    visitor: &#123;</span><br><span class=\"line\">      MemberExpression (path, state) &#123;</span><br><span class=\"line\">        if (</span><br><span class=\"line\">          t.isIdentifier(path.node.object) &amp;&amp;</span><br><span class=\"line\">          (</span><br><span class=\"line\">            path.node.object.name === &#x27;uni&#x27; ||</span><br><span class=\"line\">            path.node.object.name === &#x27;wx&#x27;</span><br><span class=\"line\">          )</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">          process.UNI_APIS.add(path.node.property.name || path.node.property.value)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该插件在获取了AST语法树之后，将遇到uni.xxx语法的对象属性引用对应的api名称添加到process.UNI_APIS中。</p>\n<p>然而，通过调试发现代码并没有运行到此处，此路不通。</p>\n<p>后来终于发现了一个关键线索。</p>\n<ol>\n<li>读取optimization.treeShaking开关并标记</li>\n</ol>\n<p>@dcloudio/vue-cli-plugin-uni/lib/env.js文件中读取到optimization.treeShaking配置为true时，就会执行以下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.env.UNI_OPT_TREESHAKINGNG = true</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>vue-cli-optimize插件</li>\n</ol>\n<p>vue-cli-plugin-uni-optimize插件（@dcloudio/vue-cli-plugin-uni-optimize/index.js）针对uni-api做了以下事情：</p>\n<ul>\n<li>将process.UNI_APIS写入@dcloudio\\vue-cli-plugin-uni-optimize.tmp\\api.js路径下的文件</li>\n<li>将uni api的模块引用路径替换成@dcloudio\\vue-cli-plugin-uni-optimize.tmp\\api.js路径下的文件</li>\n</ul>\n<p>但是我们从前文可知，唯一一处更新process.UNI_APIS的代码并未执行（猜测是uni-app代码的bug），导致uni-api update了个寂寞:<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622345030913-image.png\"></p>\n<p>以上关键代码并未更新任何api，只是引入了一些默认的核心api（@dcloudio/vue-cli-plugin-uni-optimize/packages/webpack-optimize-plugin/api.js）:<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622345080481-image.png\"></p>\n<p>以上代码标记部分，manifest[name][2]的值为true，即为核心api时才会被默认引入。</p>\n<p>由于不知道什么原因没有使用babel-plugin-uni-api，而且，考虑到该插件的tree-shaking比较粗暴，增加了业务代码的开发复杂度。</p>\n<p>而我负责的项目，业务中存在对uni的直接使用扩展运算符来实现uni-api和其它自定义api的整合：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sdk = &#123;</span><br><span class=\"line\">    ...uni,</span><br><span class=\"line\">    someCustomApi: function()&#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>即使babel-plugin-uni-api插件正常工作，根据该插件的shaking原理，我们需要将扩展运算符改为按需赋值的结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sdk = &#123;</span><br><span class=\"line\">    api1: uni.api1,</span><br><span class=\"line\">    api2: uni.api2,</span><br><span class=\"line\">    someCustomApi: function()&#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>每增加一个新的uni-api都要去修改sdk文件，这是开发不希望发生的事情。因此考虑简单粗暴从manifest.json文件入手，让每一个api都成为核心api。在compiler的beforeCompile钩子回调中修改manifest文件的标记：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const manifest = require(&#x27;@dcloudio/uni-h5/manifest.json&#x27;)</span><br><span class=\"line\">Object.keys(manifest).forEach(name =&gt; &#123;</span><br><span class=\"line\">  if (manifest[name].length &lt; 3) &#123;</span><br><span class=\"line\">    manifest[name].push(true)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">const newManifest = JSON.stringify(manifest, null, 2);</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">  fs.writeFileSync(path.resolve(process.cwd(), &#x27;node_modules&#x27;, &#x27;@dcloudio/uni-h5/manifest.json&#x27;), newManifest)</span><br><span class=\"line\">  console.log(&#x27;@dcloudio/uni-h5/manifest.json 替换成功...&#x27;)</span><br><span class=\"line\">&#125; catch (err) &#123;</span><br><span class=\"line\">  console.log(&#x27;@dcloudio/uni-h5/manifest.json 替换失败...&#x27;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>writeFileSync将json写回文件时，需要转化为字符串，为了让字符串能够换行，保持json格式，需要传入JSON.stringify的第三个参数值为2，表示保留换行和空格，以及每次缩进使用2个空格。</p>\n</blockquote>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p>将“未开启tree-shaking”，“开启tree-shaking打包异常”，“开启tree-shaking并修复api打包异常”3个版本打包结果对比：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622345486280-image.png\"></p>\n<p>可以看到，uni-app的tree-shaking效果一般，修复tree-shaking的打包结果依旧比开启前少了0.1M。</p>\n<p><a href=\"https://ask.dcloud.net.cn/article/36279\">uni-app 2.2 大幅优化H5端性能体验，只开发H5，也要用uni-app</a>这篇文章提到，manifest内部的的tree-shaking其实主要做了2件事，内置组件的treeShaking和api的treeShaking，而且，文中数据显示，shaking效果拔群。但是本人尝试的结果发现效果实在一般。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>uni-apph5打包模式，使用<a href=\"https://uniapp.dcloud.io/collocation/manifest?id=treeshaking\">treeShaking</a>时，该配置只在生产模式下有效，即使部署到测试和预生产都没有问题，发布到生产之前一定要先本地打包生产模式确保无异常。</p>\n<p>我们的项目发布到生产之后运行h5出现以下报错：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622344617219-image.png\"></p>\n<p>经过一番全局搜索，看到了一个插件（目录：@dcloudio/vue-cli-plugin-uni-optimize/packages/babel-plugin-uni-api/index.js）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.UNI_APIS = new Set()</span><br><span class=\"line\">module.exports = function (&#123;</span><br><span class=\"line\">  types: t</span><br><span class=\"line\">&#125;) &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    visitor: &#123;</span><br><span class=\"line\">      MemberExpression (path, state) &#123;</span><br><span class=\"line\">        if (</span><br><span class=\"line\">          t.isIdentifier(path.node.object) &amp;&amp;</span><br><span class=\"line\">          (</span><br><span class=\"line\">            path.node.object.name === &#x27;uni&#x27; ||</span><br><span class=\"line\">            path.node.object.name === &#x27;wx&#x27;</span><br><span class=\"line\">          )</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">          process.UNI_APIS.add(path.node.property.name || path.node.property.value)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该插件在获取了AST语法树之后，将遇到uni.xxx语法的对象属性引用对应的api名称添加到process.UNI_APIS中。</p>\n<p>然而，通过调试发现代码并没有运行到此处，此路不通。</p>\n<p>后来终于发现了一个关键线索。</p>\n<ol>\n<li>读取optimization.treeShaking开关并标记</li>\n</ol>\n<p>@dcloudio/vue-cli-plugin-uni/lib/env.js文件中读取到optimization.treeShaking配置为true时，就会执行以下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.env.UNI_OPT_TREESHAKINGNG = true</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>vue-cli-optimize插件</li>\n</ol>\n<p>vue-cli-plugin-uni-optimize插件（@dcloudio/vue-cli-plugin-uni-optimize/index.js）针对uni-api做了以下事情：</p>\n<ul>\n<li>将process.UNI_APIS写入@dcloudio\\vue-cli-plugin-uni-optimize.tmp\\api.js路径下的文件</li>\n<li>将uni api的模块引用路径替换成@dcloudio\\vue-cli-plugin-uni-optimize.tmp\\api.js路径下的文件</li>\n</ul>\n<p>但是我们从前文可知，唯一一处更新process.UNI_APIS的代码并未执行（猜测是uni-app代码的bug），导致uni-api update了个寂寞:<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622345030913-image.png\"></p>\n<p>以上关键代码并未更新任何api，只是引入了一些默认的核心api（@dcloudio/vue-cli-plugin-uni-optimize/packages/webpack-optimize-plugin/api.js）:<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622345080481-image.png\"></p>\n<p>以上代码标记部分，manifest[name][2]的值为true，即为核心api时才会被默认引入。</p>\n<p>由于不知道什么原因没有使用babel-plugin-uni-api，而且，考虑到该插件的tree-shaking比较粗暴，增加了业务代码的开发复杂度。</p>\n<p>而我负责的项目，业务中存在对uni的直接使用扩展运算符来实现uni-api和其它自定义api的整合：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sdk = &#123;</span><br><span class=\"line\">    ...uni,</span><br><span class=\"line\">    someCustomApi: function()&#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>即使babel-plugin-uni-api插件正常工作，根据该插件的shaking原理，我们需要将扩展运算符改为按需赋值的结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sdk = &#123;</span><br><span class=\"line\">    api1: uni.api1,</span><br><span class=\"line\">    api2: uni.api2,</span><br><span class=\"line\">    someCustomApi: function()&#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>每增加一个新的uni-api都要去修改sdk文件，这是开发不希望发生的事情。因此考虑简单粗暴从manifest.json文件入手，让每一个api都成为核心api。在compiler的beforeCompile钩子回调中修改manifest文件的标记：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const manifest = require(&#x27;@dcloudio/uni-h5/manifest.json&#x27;)</span><br><span class=\"line\">Object.keys(manifest).forEach(name =&gt; &#123;</span><br><span class=\"line\">  if (manifest[name].length &lt; 3) &#123;</span><br><span class=\"line\">    manifest[name].push(true)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">const newManifest = JSON.stringify(manifest, null, 2);</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">  fs.writeFileSync(path.resolve(process.cwd(), &#x27;node_modules&#x27;, &#x27;@dcloudio/uni-h5/manifest.json&#x27;), newManifest)</span><br><span class=\"line\">  console.log(&#x27;@dcloudio/uni-h5/manifest.json 替换成功...&#x27;)</span><br><span class=\"line\">&#125; catch (err) &#123;</span><br><span class=\"line\">  console.log(&#x27;@dcloudio/uni-h5/manifest.json 替换失败...&#x27;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>writeFileSync将json写回文件时，需要转化为字符串，为了让字符串能够换行，保持json格式，需要传入JSON.stringify的第三个参数值为2，表示保留换行和空格，以及每次缩进使用2个空格。</p>\n</blockquote>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p>将“未开启tree-shaking”，“开启tree-shaking打包异常”，“开启tree-shaking并修复api打包异常”3个版本打包结果对比：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622345486280-image.png\"></p>\n<p>可以看到，uni-app的tree-shaking效果一般，修复tree-shaking的打包结果依旧比开启前少了0.1M。</p>\n<p><a href=\"https://ask.dcloud.net.cn/article/36279\">uni-app 2.2 大幅优化H5端性能体验，只开发H5，也要用uni-app</a>这篇文章提到，manifest内部的的tree-shaking其实主要做了2件事，内置组件的treeShaking和api的treeShaking，而且，文中数据显示，shaking效果拔群。但是本人尝试的结果发现效果实在一般。</p>\n"},{"title":"vue 的mount 过程","date":"2020-04-01T16:00:00.000Z","_content":"\n>> 前段时间学习了vue的源码，理清了vue的mount流程，在此做下总结。\n\n![](/images/2019051301.svg)\n\nmount过程分为2个大阶段，生成vnode，和渲染dom\n\n## 生成vnode\n\nmount方法其实调用了render函数，该函数返回的就是vnode\n\n## 渲染 dom\n\n这个过程主要调用了update方法。每一个vnode的渲染都会调用一次update方法。\n\n针对组件，render返回的对应vnode只是一个占位vnode。在update的时候占位vnode会根据组件配置生成所有内容的dom。\n\n渲染过程其实是一个深度遍历的过程。即，最先生成子dom，逐个层级向上插入，直到插入根结点的dom中。\n","source":"_posts/vue/mount-flow.md","raw":"---\ntitle: vue 的mount 过程\ncategories: vue\ndate: 2020-4-2\n---\n\n>> 前段时间学习了vue的源码，理清了vue的mount流程，在此做下总结。\n\n![](/images/2019051301.svg)\n\nmount过程分为2个大阶段，生成vnode，和渲染dom\n\n## 生成vnode\n\nmount方法其实调用了render函数，该函数返回的就是vnode\n\n## 渲染 dom\n\n这个过程主要调用了update方法。每一个vnode的渲染都会调用一次update方法。\n\n针对组件，render返回的对应vnode只是一个占位vnode。在update的时候占位vnode会根据组件配置生成所有内容的dom。\n\n渲染过程其实是一个深度遍历的过程。即，最先生成子dom，逐个层级向上插入，直到插入根结点的dom中。\n","slug":"vue/mount-flow","published":1,"updated":"2021-05-31T14:15:38.835Z","_id":"ckpcooutt000mu9q8b5ti7hm1","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<blockquote>\n<p>前段时间学习了vue的源码，理清了vue的mount流程，在此做下总结。</p>\n</blockquote>\n</blockquote>\n<p><img src=\"/images/2019051301.svg\"></p>\n<p>mount过程分为2个大阶段，生成vnode，和渲染dom</p>\n<h2 id=\"生成vnode\"><a href=\"#生成vnode\" class=\"headerlink\" title=\"生成vnode\"></a>生成vnode</h2><p>mount方法其实调用了render函数，该函数返回的就是vnode</p>\n<h2 id=\"渲染-dom\"><a href=\"#渲染-dom\" class=\"headerlink\" title=\"渲染 dom\"></a>渲染 dom</h2><p>这个过程主要调用了update方法。每一个vnode的渲染都会调用一次update方法。</p>\n<p>针对组件，render返回的对应vnode只是一个占位vnode。在update的时候占位vnode会根据组件配置生成所有内容的dom。</p>\n<p>渲染过程其实是一个深度遍历的过程。即，最先生成子dom，逐个层级向上插入，直到插入根结点的dom中。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<blockquote>\n<p>前段时间学习了vue的源码，理清了vue的mount流程，在此做下总结。</p>\n</blockquote>\n</blockquote>\n<p><img src=\"/images/2019051301.svg\"></p>\n<p>mount过程分为2个大阶段，生成vnode，和渲染dom</p>\n<h2 id=\"生成vnode\"><a href=\"#生成vnode\" class=\"headerlink\" title=\"生成vnode\"></a>生成vnode</h2><p>mount方法其实调用了render函数，该函数返回的就是vnode</p>\n<h2 id=\"渲染-dom\"><a href=\"#渲染-dom\" class=\"headerlink\" title=\"渲染 dom\"></a>渲染 dom</h2><p>这个过程主要调用了update方法。每一个vnode的渲染都会调用一次update方法。</p>\n<p>针对组件，render返回的对应vnode只是一个占位vnode。在update的时候占位vnode会根据组件配置生成所有内容的dom。</p>\n<p>渲染过程其实是一个深度遍历的过程。即，最先生成子dom，逐个层级向上插入，直到插入根结点的dom中。</p>\n"},{"title":"defineProperty","date":"2019-11-02T16:00:00.000Z","_content":"定义了如下一个对象：\n\n```javascript\nlet arr = {\n  a: []\n}\nObject.defineProperty(arr, 'a', {\n  get() {\n    console.log('get')\n    return []\n  },\n  set(val) {\n    console.log('set')\n  }\n})\n```\n当执行`arr.a = [1, 2]`时输出\n```\nset\n```\n当执行`arr.a.push(1)`或者`arr.a[0] = 1`时输出\n```\nget\n```\n这说明，Array的元素的增减不会触发setter。\n\n那，为什么在 Vue中，`arr.a[0] = 1`不会触发视图更新，但是`arr.a.push(1)`却可以呢。\n\n> Vue 将被侦听的数组的变异方法进行了包裹，所以它们也将会触发视图更新。这些被包裹过的方法包括： push, pop, shift, unshift, splice, sort, reverse\n\n截取核心的代码实现：\n\n```javascript\n/* observer/array.js */\nimport { def } from '../util/index'\n\nconst arrayProto = Array.prototype\nexport const arrayMethods = Object.create(arrayProto)\n\n[\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n]\n.forEach(function (method) {\n  // cache original method\n  const original = arrayProto[method]\n  def(arrayMethods, method, function mutator (...args) {\n    // 执行默认行为 original: Array.prototype[method]\n    const result = original.apply(this, args)\n    // ob: Observer实例\n    const ob = this.__ob__\n    // 获取数组中新增的元素，并为其添加watcher\n    let inserted\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args\n        break\n      case 'splice':\n        inserted = args.slice(2)\n        break\n    }\n    if (inserted) ob.observeArray(inserted)\n    // notify change\n    ob.dep.notify()\n    return result\n  })\n})\n// ------------------------------------- //\n\n/* util/lang.js */\n/**\n * Define a property.\n */\nexport function def (obj: Object, key: string, val: any, enumerable?: boolean) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  })\n}\n// ------------------------------------- //\n/* observer/index.js */\nimport { arrayMethods } from './array'\n\nfunction protoAugment (target, src: Object, keys: any) {\n  target.__proto__ = src\n}\nfunction copyAugment (target: Object, src: Object, keys: Array<string>) {\n  for (let i = 0, l = keys.length; i < l; i++) {\n    const key = keys[i]\n    def(target, key, src[key])\n  }\n}\n\n// ...\nexport class Observer {\n  value: any;\n  dep: Dep;\n  vmCount: number; // number of vms that has this object as root $data\n\n  constructor (value: any) {\n    this.value = value\n    this.dep = new Dep()\n    this.vmCount = 0\n    def(value, '__ob__', this)\n    if (Array.isArray(value)) {\n      const augment = hasProto\n        ? protoAugment\n        : copyAugment\n      augment(value, arrayMethods, arrayKeys)\n      this.observeArray(value)\n    } else {\n      this.walk(value)\n    }\n  }\n  // ...\n  /**\n   * Observe a list of Array items.\n   */\n  observeArray (items: Array<any>) {\n    for (let i = 0, l = items.length; i < l; i++) {\n      observe(items[i])\n    }\n  }\n}\n```\n输出挂载在Vue实例上的数组和未挂载在Vue实例上的数组进行比较：\n\n```html\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n</head>\n<body>\n  <div></div>\n</body>\n<script>\nnew Vue({\n  data: {\n    arr: [1, 2]\n  },\n  created() {\n    console.log('arr on vue:', this.arr)\n    console.log('arr free:', [1, 2])\n  }\n})\n</script>\n</html>\n```\n输出对比：\n![](/images/2019072201.jpeg)\n![](/images/2019072202.jpeg)\n\n可以看出来，挂载在vue实例上的数组，原型是arrayMethods，arrayMethods继承于Array。\n\n上面输出的结果说明了什么？只有调用了数组上的'push','pop','shift','unshift','splice','sort','reverse'方法，才能触发watcher更新DOM。\n\n可运行下面的代码以做验证：\n```html\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <script src=\"https://cdn.jsdelivr.net/npm/vue\"></script>\n</head>\n<body>\n  <div id=\"app\">\n    <div v-for=\"number in arr\">\n      {{number}}\n    </div>\n    <button @click=\"push\">push</button>\n    <button @click=\"rawPush\">rawPush</button>\n  </div>\n</body>\n<script>\nnew Vue({\n  el: '#app',\n  data: {\n    arr: [1, 2]\n  },\n  methods: {\n    push() {\n      this.arr.push('3')\n    },\n    rawPush() {\n      Array.prototype.push.apply(this.arr, [4])\n    }\n  }\n})\n</script>\n</html>\n```\n上面的代码中，push方法执行后视图立即更新。rawPush方法执行后视图没有更新，但是内容有push成功。下次执行push方法才会把rawPush进去的值渲染出来。\n\n为什么有时候直接对数组的某个元素赋值却发现有更新呢？\n\n原因是存在搭便车的情况。请看如下代码：\n\n```html\n<template>\n  <div>\n    <button @click=\"changeArr\">修改arr</button>\n    <button @click=\"changeProp\">修改prop</button>\n    <button @click=\"changeBoth\">一起修改</button>\n    <div>arr:</div>\n    <div v-for=\"(item, $index) in arr\" :key=\"$index\">{{item}}</div>\n    <div><br>prop:</div>\n    <div>{{JSON.stringify(prop)}}</div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      arr: [1, 2],\n      prop: {\n        a: {\n          b: {\n            c: ''\n          }\n        }\n      }\n    }\n  },\n  methods: {\n    changeProp() {\n      this.prop.a.b.c = 'hello'\n    },\n    changeArr() {\n      this.arr[0] = 111\n    },\n    changeBoth() {\n      this.changeProp()\n      this.changeArr()\n    }\n  }\n}\n</script>\n```\n对数组的某个元素直接修改，视图不会先更新，除非在修改之后其它因素触发了视图更新。\n\n假如，prop属性没有渲染在视图中，那么，点击任何一个按钮都不会刷新视图。","source":"_posts/vue/define-property.md","raw":"---\ntitle: defineProperty\ncategories: js\ndate: 2019-11-3\n---\n定义了如下一个对象：\n\n```javascript\nlet arr = {\n  a: []\n}\nObject.defineProperty(arr, 'a', {\n  get() {\n    console.log('get')\n    return []\n  },\n  set(val) {\n    console.log('set')\n  }\n})\n```\n当执行`arr.a = [1, 2]`时输出\n```\nset\n```\n当执行`arr.a.push(1)`或者`arr.a[0] = 1`时输出\n```\nget\n```\n这说明，Array的元素的增减不会触发setter。\n\n那，为什么在 Vue中，`arr.a[0] = 1`不会触发视图更新，但是`arr.a.push(1)`却可以呢。\n\n> Vue 将被侦听的数组的变异方法进行了包裹，所以它们也将会触发视图更新。这些被包裹过的方法包括： push, pop, shift, unshift, splice, sort, reverse\n\n截取核心的代码实现：\n\n```javascript\n/* observer/array.js */\nimport { def } from '../util/index'\n\nconst arrayProto = Array.prototype\nexport const arrayMethods = Object.create(arrayProto)\n\n[\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n]\n.forEach(function (method) {\n  // cache original method\n  const original = arrayProto[method]\n  def(arrayMethods, method, function mutator (...args) {\n    // 执行默认行为 original: Array.prototype[method]\n    const result = original.apply(this, args)\n    // ob: Observer实例\n    const ob = this.__ob__\n    // 获取数组中新增的元素，并为其添加watcher\n    let inserted\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args\n        break\n      case 'splice':\n        inserted = args.slice(2)\n        break\n    }\n    if (inserted) ob.observeArray(inserted)\n    // notify change\n    ob.dep.notify()\n    return result\n  })\n})\n// ------------------------------------- //\n\n/* util/lang.js */\n/**\n * Define a property.\n */\nexport function def (obj: Object, key: string, val: any, enumerable?: boolean) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  })\n}\n// ------------------------------------- //\n/* observer/index.js */\nimport { arrayMethods } from './array'\n\nfunction protoAugment (target, src: Object, keys: any) {\n  target.__proto__ = src\n}\nfunction copyAugment (target: Object, src: Object, keys: Array<string>) {\n  for (let i = 0, l = keys.length; i < l; i++) {\n    const key = keys[i]\n    def(target, key, src[key])\n  }\n}\n\n// ...\nexport class Observer {\n  value: any;\n  dep: Dep;\n  vmCount: number; // number of vms that has this object as root $data\n\n  constructor (value: any) {\n    this.value = value\n    this.dep = new Dep()\n    this.vmCount = 0\n    def(value, '__ob__', this)\n    if (Array.isArray(value)) {\n      const augment = hasProto\n        ? protoAugment\n        : copyAugment\n      augment(value, arrayMethods, arrayKeys)\n      this.observeArray(value)\n    } else {\n      this.walk(value)\n    }\n  }\n  // ...\n  /**\n   * Observe a list of Array items.\n   */\n  observeArray (items: Array<any>) {\n    for (let i = 0, l = items.length; i < l; i++) {\n      observe(items[i])\n    }\n  }\n}\n```\n输出挂载在Vue实例上的数组和未挂载在Vue实例上的数组进行比较：\n\n```html\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n</head>\n<body>\n  <div></div>\n</body>\n<script>\nnew Vue({\n  data: {\n    arr: [1, 2]\n  },\n  created() {\n    console.log('arr on vue:', this.arr)\n    console.log('arr free:', [1, 2])\n  }\n})\n</script>\n</html>\n```\n输出对比：\n![](/images/2019072201.jpeg)\n![](/images/2019072202.jpeg)\n\n可以看出来，挂载在vue实例上的数组，原型是arrayMethods，arrayMethods继承于Array。\n\n上面输出的结果说明了什么？只有调用了数组上的'push','pop','shift','unshift','splice','sort','reverse'方法，才能触发watcher更新DOM。\n\n可运行下面的代码以做验证：\n```html\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <script src=\"https://cdn.jsdelivr.net/npm/vue\"></script>\n</head>\n<body>\n  <div id=\"app\">\n    <div v-for=\"number in arr\">\n      {{number}}\n    </div>\n    <button @click=\"push\">push</button>\n    <button @click=\"rawPush\">rawPush</button>\n  </div>\n</body>\n<script>\nnew Vue({\n  el: '#app',\n  data: {\n    arr: [1, 2]\n  },\n  methods: {\n    push() {\n      this.arr.push('3')\n    },\n    rawPush() {\n      Array.prototype.push.apply(this.arr, [4])\n    }\n  }\n})\n</script>\n</html>\n```\n上面的代码中，push方法执行后视图立即更新。rawPush方法执行后视图没有更新，但是内容有push成功。下次执行push方法才会把rawPush进去的值渲染出来。\n\n为什么有时候直接对数组的某个元素赋值却发现有更新呢？\n\n原因是存在搭便车的情况。请看如下代码：\n\n```html\n<template>\n  <div>\n    <button @click=\"changeArr\">修改arr</button>\n    <button @click=\"changeProp\">修改prop</button>\n    <button @click=\"changeBoth\">一起修改</button>\n    <div>arr:</div>\n    <div v-for=\"(item, $index) in arr\" :key=\"$index\">{{item}}</div>\n    <div><br>prop:</div>\n    <div>{{JSON.stringify(prop)}}</div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      arr: [1, 2],\n      prop: {\n        a: {\n          b: {\n            c: ''\n          }\n        }\n      }\n    }\n  },\n  methods: {\n    changeProp() {\n      this.prop.a.b.c = 'hello'\n    },\n    changeArr() {\n      this.arr[0] = 111\n    },\n    changeBoth() {\n      this.changeProp()\n      this.changeArr()\n    }\n  }\n}\n</script>\n```\n对数组的某个元素直接修改，视图不会先更新，除非在修改之后其它因素触发了视图更新。\n\n假如，prop属性没有渲染在视图中，那么，点击任何一个按钮都不会刷新视图。","slug":"vue/define-property","published":1,"updated":"2021-05-31T14:15:38.832Z","_id":"ckpcooutt000nu9q838t7gv91","comments":1,"layout":"post","photos":[],"link":"","content":"<p>定义了如下一个对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: []</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(arr, <span class=\"string\">&#x27;a&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;get&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> []</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">val</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;set&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>当执行<code>arr.a = [1, 2]</code>时输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set</span><br></pre></td></tr></table></figure>\n<p>当执行<code>arr.a.push(1)</code>或者<code>arr.a[0] = 1</code>时输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get</span><br></pre></td></tr></table></figure>\n<p>这说明，Array的元素的增减不会触发setter。</p>\n<p>那，为什么在 Vue中，<code>arr.a[0] = 1</code>不会触发视图更新，但是<code>arr.a.push(1)</code>却可以呢。</p>\n<blockquote>\n<p>Vue 将被侦听的数组的变异方法进行了包裹，所以它们也将会触发视图更新。这些被包裹过的方法包括： push, pop, shift, unshift, splice, sort, reverse</p>\n</blockquote>\n<p>截取核心的代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* observer/array.js */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; def &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../util/index&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arrayProto = <span class=\"built_in\">Array</span>.prototype</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> arrayMethods = <span class=\"built_in\">Object</span>.create(arrayProto)</span><br><span class=\"line\"></span><br><span class=\"line\">[</span><br><span class=\"line\">  <span class=\"string\">&#x27;push&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;pop&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;shift&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;unshift&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;splice&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;sort&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;reverse&#x27;</span></span><br><span class=\"line\">]</span><br><span class=\"line\">.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">method</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// cache original method</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> original = arrayProto[method]</span><br><span class=\"line\">  def(arrayMethods, method, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mutator</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行默认行为 original: Array.prototype[method]</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = original.apply(<span class=\"built_in\">this</span>, args)</span><br><span class=\"line\">    <span class=\"comment\">// ob: Observer实例</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> ob = <span class=\"built_in\">this</span>.__ob__</span><br><span class=\"line\">    <span class=\"comment\">// 获取数组中新增的元素，并为其添加watcher</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> inserted</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (method) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;push&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;unshift&#x27;</span>:</span><br><span class=\"line\">        inserted = args</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;splice&#x27;</span>:</span><br><span class=\"line\">        inserted = args.slice(<span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (inserted) ob.observeArray(inserted)</span><br><span class=\"line\">    <span class=\"comment\">// notify change</span></span><br><span class=\"line\">    ob.dep.notify()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// ------------------------------------- //</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* util/lang.js */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Define a property.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">def</span> (<span class=\"params\">obj: <span class=\"built_in\">Object</span>, key: string, val: any, enumerable?: boolean</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(obj, key, &#123;</span><br><span class=\"line\">    <span class=\"attr\">value</span>: val,</span><br><span class=\"line\">    <span class=\"attr\">enumerable</span>: !!enumerable,</span><br><span class=\"line\">    <span class=\"attr\">writable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ------------------------------------- //</span></span><br><span class=\"line\"><span class=\"comment\">/* observer/index.js */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; arrayMethods &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./array&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">protoAugment</span> (<span class=\"params\">target, src: <span class=\"built_in\">Object</span>, keys: any</span>) </span>&#123;</span><br><span class=\"line\">  target.__proto__ = src</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copyAugment</span> (<span class=\"params\">target: <span class=\"built_in\">Object</span>, src: <span class=\"built_in\">Object</span>, keys: <span class=\"built_in\">Array</span>&lt;string&gt;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = keys.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = keys[i]</span><br><span class=\"line\">    def(target, key, src[key])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: any;</span><br><span class=\"line\">  dep: Dep;</span><br><span class=\"line\">  vmCount: number; <span class=\"comment\">// number of vms that has this object as root $data</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title\">constructor</span> (<span class=\"params\">value: any</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.value = value</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.dep = <span class=\"keyword\">new</span> Dep()</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.vmCount = <span class=\"number\">0</span></span><br><span class=\"line\">    def(value, <span class=\"string\">&#x27;__ob__&#x27;</span>, <span class=\"built_in\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(value)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> augment = hasProto</span><br><span class=\"line\">        ? protoAugment</span><br><span class=\"line\">        : copyAugment</span><br><span class=\"line\">      augment(value, arrayMethods, arrayKeys)</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.observeArray(value)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.walk(value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Observe a list of Array items.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  observeArray (items: <span class=\"built_in\">Array</span>&lt;any&gt;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = items.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">      observe(items[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出挂载在Vue实例上的数组和未挂载在Vue实例上的数组进行比较：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">arr</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;arr on vue:&#x27;</span>, <span class=\"built_in\">this</span>.arr)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;arr free:&#x27;</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>])</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">&#125;)</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>输出对比：<br><img src=\"/images/2019072201.jpeg\"><br><img src=\"/images/2019072202.jpeg\"></p>\n<p>可以看出来，挂载在vue实例上的数组，原型是arrayMethods，arrayMethods继承于Array。</p>\n<p>上面输出的结果说明了什么？只有调用了数组上的’push’,’pop’,’shift’,’unshift’,’splice’,’sort’,’reverse’方法，才能触发watcher更新DOM。</p>\n<p>可运行下面的代码以做验证：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;number in arr&quot;</span>&gt;</span></span><br><span class=\"line\">      &#123;&#123;number&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;push&quot;</span>&gt;</span>push<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;rawPush&quot;</span>&gt;</span>rawPush<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">arr</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">push</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">this</span>.arr.push(<span class=\"string\">&#x27;3&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">rawPush</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">Array</span>.prototype.push.apply(<span class=\"built_in\">this</span>.arr, [<span class=\"number\">4</span>])</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">&#125;)</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码中，push方法执行后视图立即更新。rawPush方法执行后视图没有更新，但是内容有push成功。下次执行push方法才会把rawPush进去的值渲染出来。</p>\n<p>为什么有时候直接对数组的某个元素赋值却发现有更新呢？</p>\n<p>原因是存在搭便车的情况。请看如下代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;changeArr&quot;</span>&gt;</span>修改arr<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;changeProp&quot;</span>&gt;</span>修改prop<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;changeBoth&quot;</span>&gt;</span>一起修改<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>arr:<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item, $index) in arr&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;$index&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>prop:<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;JSON.stringify(prop)&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">arr</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>],</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">prop</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">a</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"attr\">b</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">c</span>: <span class=\"string\">&#x27;&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">          &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">changeProp</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">this</span>.prop.a.b.c = <span class=\"string\">&#x27;hello&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">changeArr</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">this</span>.arr[<span class=\"number\">0</span>] = <span class=\"number\">111</span></span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">changeBoth</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">this</span>.changeProp()</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">this</span>.changeArr()</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>对数组的某个元素直接修改，视图不会先更新，除非在修改之后其它因素触发了视图更新。</p>\n<p>假如，prop属性没有渲染在视图中，那么，点击任何一个按钮都不会刷新视图。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>定义了如下一个对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: []</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(arr, <span class=\"string\">&#x27;a&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;get&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> []</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">val</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;set&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>当执行<code>arr.a = [1, 2]</code>时输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set</span><br></pre></td></tr></table></figure>\n<p>当执行<code>arr.a.push(1)</code>或者<code>arr.a[0] = 1</code>时输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get</span><br></pre></td></tr></table></figure>\n<p>这说明，Array的元素的增减不会触发setter。</p>\n<p>那，为什么在 Vue中，<code>arr.a[0] = 1</code>不会触发视图更新，但是<code>arr.a.push(1)</code>却可以呢。</p>\n<blockquote>\n<p>Vue 将被侦听的数组的变异方法进行了包裹，所以它们也将会触发视图更新。这些被包裹过的方法包括： push, pop, shift, unshift, splice, sort, reverse</p>\n</blockquote>\n<p>截取核心的代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* observer/array.js */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; def &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../util/index&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arrayProto = <span class=\"built_in\">Array</span>.prototype</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> arrayMethods = <span class=\"built_in\">Object</span>.create(arrayProto)</span><br><span class=\"line\"></span><br><span class=\"line\">[</span><br><span class=\"line\">  <span class=\"string\">&#x27;push&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;pop&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;shift&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;unshift&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;splice&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;sort&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;reverse&#x27;</span></span><br><span class=\"line\">]</span><br><span class=\"line\">.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">method</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// cache original method</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> original = arrayProto[method]</span><br><span class=\"line\">  def(arrayMethods, method, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mutator</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行默认行为 original: Array.prototype[method]</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = original.apply(<span class=\"built_in\">this</span>, args)</span><br><span class=\"line\">    <span class=\"comment\">// ob: Observer实例</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> ob = <span class=\"built_in\">this</span>.__ob__</span><br><span class=\"line\">    <span class=\"comment\">// 获取数组中新增的元素，并为其添加watcher</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> inserted</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (method) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;push&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;unshift&#x27;</span>:</span><br><span class=\"line\">        inserted = args</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;splice&#x27;</span>:</span><br><span class=\"line\">        inserted = args.slice(<span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (inserted) ob.observeArray(inserted)</span><br><span class=\"line\">    <span class=\"comment\">// notify change</span></span><br><span class=\"line\">    ob.dep.notify()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// ------------------------------------- //</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* util/lang.js */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Define a property.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">def</span> (<span class=\"params\">obj: <span class=\"built_in\">Object</span>, key: string, val: any, enumerable?: boolean</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(obj, key, &#123;</span><br><span class=\"line\">    <span class=\"attr\">value</span>: val,</span><br><span class=\"line\">    <span class=\"attr\">enumerable</span>: !!enumerable,</span><br><span class=\"line\">    <span class=\"attr\">writable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ------------------------------------- //</span></span><br><span class=\"line\"><span class=\"comment\">/* observer/index.js */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; arrayMethods &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./array&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">protoAugment</span> (<span class=\"params\">target, src: <span class=\"built_in\">Object</span>, keys: any</span>) </span>&#123;</span><br><span class=\"line\">  target.__proto__ = src</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copyAugment</span> (<span class=\"params\">target: <span class=\"built_in\">Object</span>, src: <span class=\"built_in\">Object</span>, keys: <span class=\"built_in\">Array</span>&lt;string&gt;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = keys.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = keys[i]</span><br><span class=\"line\">    def(target, key, src[key])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: any;</span><br><span class=\"line\">  dep: Dep;</span><br><span class=\"line\">  vmCount: number; <span class=\"comment\">// number of vms that has this object as root $data</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title\">constructor</span> (<span class=\"params\">value: any</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.value = value</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.dep = <span class=\"keyword\">new</span> Dep()</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.vmCount = <span class=\"number\">0</span></span><br><span class=\"line\">    def(value, <span class=\"string\">&#x27;__ob__&#x27;</span>, <span class=\"built_in\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(value)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> augment = hasProto</span><br><span class=\"line\">        ? protoAugment</span><br><span class=\"line\">        : copyAugment</span><br><span class=\"line\">      augment(value, arrayMethods, arrayKeys)</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.observeArray(value)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.walk(value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Observe a list of Array items.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  observeArray (items: <span class=\"built_in\">Array</span>&lt;any&gt;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = items.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">      observe(items[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出挂载在Vue实例上的数组和未挂载在Vue实例上的数组进行比较：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">arr</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;arr on vue:&#x27;</span>, <span class=\"built_in\">this</span>.arr)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;arr free:&#x27;</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>])</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">&#125;)</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>输出对比：<br><img src=\"/images/2019072201.jpeg\"><br><img src=\"/images/2019072202.jpeg\"></p>\n<p>可以看出来，挂载在vue实例上的数组，原型是arrayMethods，arrayMethods继承于Array。</p>\n<p>上面输出的结果说明了什么？只有调用了数组上的’push’,’pop’,’shift’,’unshift’,’splice’,’sort’,’reverse’方法，才能触发watcher更新DOM。</p>\n<p>可运行下面的代码以做验证：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;number in arr&quot;</span>&gt;</span></span><br><span class=\"line\">      &#123;&#123;number&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;push&quot;</span>&gt;</span>push<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;rawPush&quot;</span>&gt;</span>rawPush<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">arr</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">push</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">this</span>.arr.push(<span class=\"string\">&#x27;3&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">rawPush</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">Array</span>.prototype.push.apply(<span class=\"built_in\">this</span>.arr, [<span class=\"number\">4</span>])</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">&#125;)</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码中，push方法执行后视图立即更新。rawPush方法执行后视图没有更新，但是内容有push成功。下次执行push方法才会把rawPush进去的值渲染出来。</p>\n<p>为什么有时候直接对数组的某个元素赋值却发现有更新呢？</p>\n<p>原因是存在搭便车的情况。请看如下代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;changeArr&quot;</span>&gt;</span>修改arr<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;changeProp&quot;</span>&gt;</span>修改prop<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;changeBoth&quot;</span>&gt;</span>一起修改<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>arr:<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item, $index) in arr&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;$index&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>prop:<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;JSON.stringify(prop)&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">arr</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>],</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">prop</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">a</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"attr\">b</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">c</span>: <span class=\"string\">&#x27;&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">          &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">changeProp</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">this</span>.prop.a.b.c = <span class=\"string\">&#x27;hello&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">changeArr</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">this</span>.arr[<span class=\"number\">0</span>] = <span class=\"number\">111</span></span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">changeBoth</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">this</span>.changeProp()</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">this</span>.changeArr()</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>对数组的某个元素直接修改，视图不会先更新，除非在修改之后其它因素触发了视图更新。</p>\n<p>假如，prop属性没有渲染在视图中，那么，点击任何一个按钮都不会刷新视图。</p>\n"},{"title":"常见的vue 报错信息","date":"2020-07-08T16:00:00.000Z","_content":"\n\n### 模板渲染初始化问题\n\n```ruby\nProxy.render Cannot read property '0' of undefined\n```\n上面这个报错是指在构建DOM的时候，有个变量是undefined，但是这个变量被当成Array类型并访问了下标值。\n\n这种情况通常出现在数据初始化的时候，某些属性不存在，但是访问了这个不存在的属性的子属性\n\n### 计算属性绑定v-model\n```ruby\nComputed property \"\" was assigned to but it has no setter.\n```\n\n通常这个报错的原因是，用一个计算属性绑定到v-model上面。\n\n```ruby\n//  template部分\n<el-rate\n v-model=\"rate\"\n disabled></el-rate>\n// js部分\ncomputed: {\n    rate() {\n      if (this.detail) {\n        return parseFloat(this.detail.starRating) || 0\n      } else {\n        return 0\n      }\n    }\n  }\n```\n\n解决办法\n\n1. 尽量避免计算属性用在v-model上，因为计算属性一般是通过现有的值计算出来的。如果可以通过其它方式修改计算属性的话，数据状态会比较混乱。\n2. 计算属性默认是只有getter的，就是说只能取值，不能设值。computed支持手动添加set函数。具体参考[vue 计算属性](https://cn.vuejs.org/v2/api/#computed)\n","source":"_posts/vue/vue-error.md","raw":"---\ntitle: 常见的vue 报错信息\ncategories: vue\ndate: 2020-7-9\n---\n\n\n### 模板渲染初始化问题\n\n```ruby\nProxy.render Cannot read property '0' of undefined\n```\n上面这个报错是指在构建DOM的时候，有个变量是undefined，但是这个变量被当成Array类型并访问了下标值。\n\n这种情况通常出现在数据初始化的时候，某些属性不存在，但是访问了这个不存在的属性的子属性\n\n### 计算属性绑定v-model\n```ruby\nComputed property \"\" was assigned to but it has no setter.\n```\n\n通常这个报错的原因是，用一个计算属性绑定到v-model上面。\n\n```ruby\n//  template部分\n<el-rate\n v-model=\"rate\"\n disabled></el-rate>\n// js部分\ncomputed: {\n    rate() {\n      if (this.detail) {\n        return parseFloat(this.detail.starRating) || 0\n      } else {\n        return 0\n      }\n    }\n  }\n```\n\n解决办法\n\n1. 尽量避免计算属性用在v-model上，因为计算属性一般是通过现有的值计算出来的。如果可以通过其它方式修改计算属性的话，数据状态会比较混乱。\n2. 计算属性默认是只有getter的，就是说只能取值，不能设值。computed支持手动添加set函数。具体参考[vue 计算属性](https://cn.vuejs.org/v2/api/#computed)\n","slug":"vue/vue-error","published":1,"updated":"2021-05-31T00:34:59.786Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpcooutv000ou9q834ar5b4o","content":"<h3 id=\"模板渲染初始化问题\"><a href=\"#模板渲染初始化问题\" class=\"headerlink\" title=\"模板渲染初始化问题\"></a>模板渲染初始化问题</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Proxy.render Cannot read property <span class=\"string\">&#x27;0&#x27;</span> of undefined</span><br></pre></td></tr></table></figure>\n<p>上面这个报错是指在构建DOM的时候，有个变量是undefined，但是这个变量被当成Array类型并访问了下标值。</p>\n<p>这种情况通常出现在数据初始化的时候，某些属性不存在，但是访问了这个不存在的属性的子属性</p>\n<h3 id=\"计算属性绑定v-model\"><a href=\"#计算属性绑定v-model\" class=\"headerlink\" title=\"计算属性绑定v-model\"></a>计算属性绑定v-model</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Computed property <span class=\"string\">&quot;&quot;</span> was assigned to but it has no setter.</span><br></pre></td></tr></table></figure>\n\n<p>通常这个报错的原因是，用一个计算属性绑定到v-model上面。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/<span class=\"regexp\">/  template部分</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;el-rate</span></span><br><span class=\"line\"><span class=\"regexp\"> v-model=&quot;rate&quot;</span></span><br><span class=\"line\"><span class=\"regexp\"> disabled&gt;&lt;/el</span>-rate&gt;</span><br><span class=\"line\"><span class=\"regexp\">//</span> js部分</span><br><span class=\"line\"><span class=\"symbol\">computed:</span> &#123;</span><br><span class=\"line\">    rate() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (this.detail) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parseFloat(this.detail.starRating) <span class=\"params\">||</span> <span class=\"number\">0</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>解决办法</p>\n<ol>\n<li>尽量避免计算属性用在v-model上，因为计算属性一般是通过现有的值计算出来的。如果可以通过其它方式修改计算属性的话，数据状态会比较混乱。</li>\n<li>计算属性默认是只有getter的，就是说只能取值，不能设值。computed支持手动添加set函数。具体参考<a href=\"https://cn.vuejs.org/v2/api/#computed\">vue 计算属性</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"模板渲染初始化问题\"><a href=\"#模板渲染初始化问题\" class=\"headerlink\" title=\"模板渲染初始化问题\"></a>模板渲染初始化问题</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Proxy.render Cannot read property <span class=\"string\">&#x27;0&#x27;</span> of undefined</span><br></pre></td></tr></table></figure>\n<p>上面这个报错是指在构建DOM的时候，有个变量是undefined，但是这个变量被当成Array类型并访问了下标值。</p>\n<p>这种情况通常出现在数据初始化的时候，某些属性不存在，但是访问了这个不存在的属性的子属性</p>\n<h3 id=\"计算属性绑定v-model\"><a href=\"#计算属性绑定v-model\" class=\"headerlink\" title=\"计算属性绑定v-model\"></a>计算属性绑定v-model</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Computed property <span class=\"string\">&quot;&quot;</span> was assigned to but it has no setter.</span><br></pre></td></tr></table></figure>\n\n<p>通常这个报错的原因是，用一个计算属性绑定到v-model上面。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/<span class=\"regexp\">/  template部分</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;el-rate</span></span><br><span class=\"line\"><span class=\"regexp\"> v-model=&quot;rate&quot;</span></span><br><span class=\"line\"><span class=\"regexp\"> disabled&gt;&lt;/el</span>-rate&gt;</span><br><span class=\"line\"><span class=\"regexp\">//</span> js部分</span><br><span class=\"line\"><span class=\"symbol\">computed:</span> &#123;</span><br><span class=\"line\">    rate() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (this.detail) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parseFloat(this.detail.starRating) <span class=\"params\">||</span> <span class=\"number\">0</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>解决办法</p>\n<ol>\n<li>尽量避免计算属性用在v-model上，因为计算属性一般是通过现有的值计算出来的。如果可以通过其它方式修改计算属性的话，数据状态会比较混乱。</li>\n<li>计算属性默认是只有getter的，就是说只能取值，不能设值。computed支持手动添加set函数。具体参考<a href=\"https://cn.vuejs.org/v2/api/#computed\">vue 计算属性</a></li>\n</ol>\n"},{"title":"一次bug引出的关于vue 的节点复用的思考","date":"2020-08-24T16:00:00.000Z","_content":"\nvue使用v-for时会要求绑定key属性，这个涉及到vue的节点复用的功能。\n\n其实，你有没有发现，其实我们可能一直没有搞清楚究竟它是什么样的复用逻辑。\n\n现在，我们分别从官方文档和源码的角度给予分析。\n\n## 什么情况下会复用节点\n\n\n\n## 为什么v-for渲染的文本节点内容没有复用，但是图片节点被复用","source":"_posts/vue/node-reuse.md","raw":"---\ntitle: 一次bug引出的关于vue 的节点复用的思考\ncategories: vue\ndate: 2020-8-25\n---\n\nvue使用v-for时会要求绑定key属性，这个涉及到vue的节点复用的功能。\n\n其实，你有没有发现，其实我们可能一直没有搞清楚究竟它是什么样的复用逻辑。\n\n现在，我们分别从官方文档和源码的角度给予分析。\n\n## 什么情况下会复用节点\n\n\n\n## 为什么v-for渲染的文本节点内容没有复用，但是图片节点被复用","slug":"vue/node-reuse","published":1,"updated":"2021-05-31T00:34:49.726Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpcooutv000pu9q85m8w5zaz","content":"<p>vue使用v-for时会要求绑定key属性，这个涉及到vue的节点复用的功能。</p>\n<p>其实，你有没有发现，其实我们可能一直没有搞清楚究竟它是什么样的复用逻辑。</p>\n<p>现在，我们分别从官方文档和源码的角度给予分析。</p>\n<h2 id=\"什么情况下会复用节点\"><a href=\"#什么情况下会复用节点\" class=\"headerlink\" title=\"什么情况下会复用节点\"></a>什么情况下会复用节点</h2><h2 id=\"为什么v-for渲染的文本节点内容没有复用，但是图片节点被复用\"><a href=\"#为什么v-for渲染的文本节点内容没有复用，但是图片节点被复用\" class=\"headerlink\" title=\"为什么v-for渲染的文本节点内容没有复用，但是图片节点被复用\"></a>为什么v-for渲染的文本节点内容没有复用，但是图片节点被复用</h2>","site":{"data":{}},"excerpt":"","more":"<p>vue使用v-for时会要求绑定key属性，这个涉及到vue的节点复用的功能。</p>\n<p>其实，你有没有发现，其实我们可能一直没有搞清楚究竟它是什么样的复用逻辑。</p>\n<p>现在，我们分别从官方文档和源码的角度给予分析。</p>\n<h2 id=\"什么情况下会复用节点\"><a href=\"#什么情况下会复用节点\" class=\"headerlink\" title=\"什么情况下会复用节点\"></a>什么情况下会复用节点</h2><h2 id=\"为什么v-for渲染的文本节点内容没有复用，但是图片节点被复用\"><a href=\"#为什么v-for渲染的文本节点内容没有复用，但是图片节点被复用\" class=\"headerlink\" title=\"为什么v-for渲染的文本节点内容没有复用，但是图片节点被复用\"></a>为什么v-for渲染的文本节点内容没有复用，但是图片节点被复用</h2>"},{"title":"vue runtime 和 esm","date":"2020-07-31T16:00:00.000Z","_content":"## 一. esm是vue 的“运行时”和“编译器”的集合\n\n### 运行时\n\n运行时是用来创建 Vue 实例、渲染并处理虚拟 DOM 等的代码。基本上就是除去编译器的其它一切。\n\n\n### 编译器\n\n用来将模板字符串编译成为 JavaScript 渲染函数的代码。\n\n在客户端编译模板包含以下情况：\n\n1. el属性指定模版挂载的DOM，和该DOM包含的html，也就是说，既没有指定template，又没有render函数\n\n2. 用template属性指定模板渲染的字符串\n\n### 如何选择\n\nvue的package.json文件中的module属性指定了模块的入口文件为vue.runtime.esm.js，为什么呢，因为这个只包含了运行时，不包含编译器。相比全部包含的vue.esm.js文件而言，vue.runtime.esm.js体积小了将近三分之一，初始化运行速度相对来说会高一些。\n\n我发现，在开发单页应用的时候，绝大多数情况下可以避免出现使用编译器的情况，所以，我只说下我遇到的情况。\n\n通常，我们的单页应用的入口html，入口文件和顶级组件分别是index.html, main.js和App.js。代码如下：\n\n```html\n<!-- index.html -->\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\n    <title></title>\n  </head>\n  <body>\n    <div id=\"app\">\n    </div>\n    <!-- built files will be auto injected -->\n  </body>\n</html>\n\n<!-- main.js -->\nimport Vue from 'vue'\nimport App from './App'\n\nVue.config.productionTip = false\n\nnew Vue({\n  el: '#app',\n  template: '<App/>',\n  components: {App}\n})\n\n<!-- App.vue -->\n<template>\n  <div>\n    HelloWorld\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'App'\n}\n</script>\n```\n\n就像上面这种情况，初始化根实例的时候，用template指定了挂载元素，这就意味着，一定要用编译器。如果你的webpack.config.js里面没有设置vue的alias，并且，在main.js文件中，直接使用import Vue from 'vue'，你会发现，浏览器会报错:\n\n\n```\n[Vue warn]: You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.\n```\n\n但是，如果你把\n\n```\nimport Vue from 'vue'\n```\n改成\n\n```\nimport Vue from 'vue/dist/vue.esm.js'\n```\n就会运行正常。\n不知道有多少项目都只是因为这个根实例导致不得不引入vue.esm.js。\n\n那么，针对这个情况怎么解决呢？想必很多人都知道答案了。代码如下：\n\n\n```html\n<!-- index.html -->\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\n    <title></title>\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <!-- built files will be auto injected -->\n  </body>\n</html>\n\n<!-- main.js -->\nimport Vue from 'vue'\nimport App from './App'\n\nVue.config.productionTip = false\n\nnew Vue({\n  el: '#app',\n  render(h) {\n    return h(App)\n  }\n})\n\n<!-- App.vue -->\n<template>\n  <div>\n    HelloWorld\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'App'\n}\n</script>\n```\n其实只改了一行代码，就是把main.js中的template替换成render函数。之前发现有的项目用render有的直接template，现在才知道是这么回事。\n\n## 二. esm和common什么关系，为什么除了runtime.esm和esm之外，还有vue.common.js和vue.js呢？\n\n### 1. esm全称是ESModule，意思是遵循es6的import export模块化规则。\n\n### 2. common的意思是遵循common.js的exports模块化规则。\n\n### 3. 如何选择?\n\n我们知道common.js的模块化是输出一个exports对象，没法做到按需引入，一旦引入，就是用 require引入整个exports对象。但是ES6的import 可以选择引入哪些属性。\n\n前者是运行时引入，后者是编译时引入（NodeJS打包）。由于编译时即可知道哪些是没有用到的，这样就可以达到tree shaking的目的（通过webpack配合达到）。\n\nesm.js文件里面是符合ES6模块规则的es5的语法，是经过babel编译过的。为什么要是es5的语法呢？一般情况下业务代码在使用babel-loader的时候会exclude掉node_module目录，这是因为，node_module目录里面有大量的源代码，处理起来很浪费时间，所以干脆模块开发者帮你编译好，别人直接用你编译好的，而且能tree shaking的代码版本即可。\n","source":"_posts/vue/vue-runtime-compile.md","raw":"---\ntitle: vue runtime 和 esm\ncategories: vue\ndate: 2020-8-1\n---\n## 一. esm是vue 的“运行时”和“编译器”的集合\n\n### 运行时\n\n运行时是用来创建 Vue 实例、渲染并处理虚拟 DOM 等的代码。基本上就是除去编译器的其它一切。\n\n\n### 编译器\n\n用来将模板字符串编译成为 JavaScript 渲染函数的代码。\n\n在客户端编译模板包含以下情况：\n\n1. el属性指定模版挂载的DOM，和该DOM包含的html，也就是说，既没有指定template，又没有render函数\n\n2. 用template属性指定模板渲染的字符串\n\n### 如何选择\n\nvue的package.json文件中的module属性指定了模块的入口文件为vue.runtime.esm.js，为什么呢，因为这个只包含了运行时，不包含编译器。相比全部包含的vue.esm.js文件而言，vue.runtime.esm.js体积小了将近三分之一，初始化运行速度相对来说会高一些。\n\n我发现，在开发单页应用的时候，绝大多数情况下可以避免出现使用编译器的情况，所以，我只说下我遇到的情况。\n\n通常，我们的单页应用的入口html，入口文件和顶级组件分别是index.html, main.js和App.js。代码如下：\n\n```html\n<!-- index.html -->\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\n    <title></title>\n  </head>\n  <body>\n    <div id=\"app\">\n    </div>\n    <!-- built files will be auto injected -->\n  </body>\n</html>\n\n<!-- main.js -->\nimport Vue from 'vue'\nimport App from './App'\n\nVue.config.productionTip = false\n\nnew Vue({\n  el: '#app',\n  template: '<App/>',\n  components: {App}\n})\n\n<!-- App.vue -->\n<template>\n  <div>\n    HelloWorld\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'App'\n}\n</script>\n```\n\n就像上面这种情况，初始化根实例的时候，用template指定了挂载元素，这就意味着，一定要用编译器。如果你的webpack.config.js里面没有设置vue的alias，并且，在main.js文件中，直接使用import Vue from 'vue'，你会发现，浏览器会报错:\n\n\n```\n[Vue warn]: You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.\n```\n\n但是，如果你把\n\n```\nimport Vue from 'vue'\n```\n改成\n\n```\nimport Vue from 'vue/dist/vue.esm.js'\n```\n就会运行正常。\n不知道有多少项目都只是因为这个根实例导致不得不引入vue.esm.js。\n\n那么，针对这个情况怎么解决呢？想必很多人都知道答案了。代码如下：\n\n\n```html\n<!-- index.html -->\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\n    <title></title>\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <!-- built files will be auto injected -->\n  </body>\n</html>\n\n<!-- main.js -->\nimport Vue from 'vue'\nimport App from './App'\n\nVue.config.productionTip = false\n\nnew Vue({\n  el: '#app',\n  render(h) {\n    return h(App)\n  }\n})\n\n<!-- App.vue -->\n<template>\n  <div>\n    HelloWorld\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'App'\n}\n</script>\n```\n其实只改了一行代码，就是把main.js中的template替换成render函数。之前发现有的项目用render有的直接template，现在才知道是这么回事。\n\n## 二. esm和common什么关系，为什么除了runtime.esm和esm之外，还有vue.common.js和vue.js呢？\n\n### 1. esm全称是ESModule，意思是遵循es6的import export模块化规则。\n\n### 2. common的意思是遵循common.js的exports模块化规则。\n\n### 3. 如何选择?\n\n我们知道common.js的模块化是输出一个exports对象，没法做到按需引入，一旦引入，就是用 require引入整个exports对象。但是ES6的import 可以选择引入哪些属性。\n\n前者是运行时引入，后者是编译时引入（NodeJS打包）。由于编译时即可知道哪些是没有用到的，这样就可以达到tree shaking的目的（通过webpack配合达到）。\n\nesm.js文件里面是符合ES6模块规则的es5的语法，是经过babel编译过的。为什么要是es5的语法呢？一般情况下业务代码在使用babel-loader的时候会exclude掉node_module目录，这是因为，node_module目录里面有大量的源代码，处理起来很浪费时间，所以干脆模块开发者帮你编译好，别人直接用你编译好的，而且能tree shaking的代码版本即可。\n","slug":"vue/vue-runtime-compile","published":1,"updated":"2021-05-31T00:35:08.099Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpcooutw000qu9q8dm0hduhi","content":"<h2 id=\"一-esm是vue-的“运行时”和“编译器”的集合\"><a href=\"#一-esm是vue-的“运行时”和“编译器”的集合\" class=\"headerlink\" title=\"一. esm是vue 的“运行时”和“编译器”的集合\"></a>一. esm是vue 的“运行时”和“编译器”的集合</h2><h3 id=\"运行时\"><a href=\"#运行时\" class=\"headerlink\" title=\"运行时\"></a>运行时</h3><p>运行时是用来创建 Vue 实例、渲染并处理虚拟 DOM 等的代码。基本上就是除去编译器的其它一切。</p>\n<h3 id=\"编译器\"><a href=\"#编译器\" class=\"headerlink\" title=\"编译器\"></a>编译器</h3><p>用来将模板字符串编译成为 JavaScript 渲染函数的代码。</p>\n<p>在客户端编译模板包含以下情况：</p>\n<ol>\n<li><p>el属性指定模版挂载的DOM，和该DOM包含的html，也就是说，既没有指定template，又没有render函数</p>\n</li>\n<li><p>用template属性指定模板渲染的字符串</p>\n</li>\n</ol>\n<h3 id=\"如何选择\"><a href=\"#如何选择\" class=\"headerlink\" title=\"如何选择\"></a>如何选择</h3><p>vue的package.json文件中的module属性指定了模块的入口文件为vue.runtime.esm.js，为什么呢，因为这个只包含了运行时，不包含编译器。相比全部包含的vue.esm.js文件而言，vue.runtime.esm.js体积小了将近三分之一，初始化运行速度相对来说会高一些。</p>\n<p>我发现，在开发单页应用的时候，绝大多数情况下可以避免出现使用编译器的情况，所以，我只说下我遇到的情况。</p>\n<p>通常，我们的单页应用的入口html，入口文件和顶级组件分别是index.html, main.js和App.js。代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- index.html --&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- main.js --&gt;</span></span><br><span class=\"line\">import Vue from &#x27;vue&#x27;</span><br><span class=\"line\">import App from &#x27;./App&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.productionTip = false</span><br><span class=\"line\"></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: &#x27;#app&#x27;,</span><br><span class=\"line\">  template: &#x27;<span class=\"tag\">&lt;<span class=\"name\">App</span>/&gt;</span>&#x27;,</span><br><span class=\"line\">  components: &#123;App&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- App.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    HelloWorld</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;App&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>就像上面这种情况，初始化根实例的时候，用template指定了挂载元素，这就意味着，一定要用编译器。如果你的webpack.config.js里面没有设置vue的alias，并且，在main.js文件中，直接使用import Vue from ‘vue’，你会发现，浏览器会报错:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Vue warn]: You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.</span><br></pre></td></tr></table></figure>\n\n<p>但是，如果你把</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vue from &#x27;vue&#x27;</span><br></pre></td></tr></table></figure>\n<p>改成</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vue from &#x27;vue/dist/vue.esm.js&#x27;</span><br></pre></td></tr></table></figure>\n<p>就会运行正常。<br>不知道有多少项目都只是因为这个根实例导致不得不引入vue.esm.js。</p>\n<p>那么，针对这个情况怎么解决呢？想必很多人都知道答案了。代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- index.html --&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- main.js --&gt;</span></span><br><span class=\"line\">import Vue from &#x27;vue&#x27;</span><br><span class=\"line\">import App from &#x27;./App&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.productionTip = false</span><br><span class=\"line\"></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: &#x27;#app&#x27;,</span><br><span class=\"line\">  render(h) &#123;</span><br><span class=\"line\">    return h(App)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- App.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    HelloWorld</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;App&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其实只改了一行代码，就是把main.js中的template替换成render函数。之前发现有的项目用render有的直接template，现在才知道是这么回事。</p>\n<h2 id=\"二-esm和common什么关系，为什么除了runtime-esm和esm之外，还有vue-common-js和vue-js呢？\"><a href=\"#二-esm和common什么关系，为什么除了runtime-esm和esm之外，还有vue-common-js和vue-js呢？\" class=\"headerlink\" title=\"二. esm和common什么关系，为什么除了runtime.esm和esm之外，还有vue.common.js和vue.js呢？\"></a>二. esm和common什么关系，为什么除了runtime.esm和esm之外，还有vue.common.js和vue.js呢？</h2><h3 id=\"1-esm全称是ESModule，意思是遵循es6的import-export模块化规则。\"><a href=\"#1-esm全称是ESModule，意思是遵循es6的import-export模块化规则。\" class=\"headerlink\" title=\"1. esm全称是ESModule，意思是遵循es6的import export模块化规则。\"></a>1. esm全称是ESModule，意思是遵循es6的import export模块化规则。</h3><h3 id=\"2-common的意思是遵循common-js的exports模块化规则。\"><a href=\"#2-common的意思是遵循common-js的exports模块化规则。\" class=\"headerlink\" title=\"2. common的意思是遵循common.js的exports模块化规则。\"></a>2. common的意思是遵循common.js的exports模块化规则。</h3><h3 id=\"3-如何选择\"><a href=\"#3-如何选择\" class=\"headerlink\" title=\"3. 如何选择?\"></a>3. 如何选择?</h3><p>我们知道common.js的模块化是输出一个exports对象，没法做到按需引入，一旦引入，就是用 require引入整个exports对象。但是ES6的import 可以选择引入哪些属性。</p>\n<p>前者是运行时引入，后者是编译时引入（NodeJS打包）。由于编译时即可知道哪些是没有用到的，这样就可以达到tree shaking的目的（通过webpack配合达到）。</p>\n<p>esm.js文件里面是符合ES6模块规则的es5的语法，是经过babel编译过的。为什么要是es5的语法呢？一般情况下业务代码在使用babel-loader的时候会exclude掉node_module目录，这是因为，node_module目录里面有大量的源代码，处理起来很浪费时间，所以干脆模块开发者帮你编译好，别人直接用你编译好的，而且能tree shaking的代码版本即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一-esm是vue-的“运行时”和“编译器”的集合\"><a href=\"#一-esm是vue-的“运行时”和“编译器”的集合\" class=\"headerlink\" title=\"一. esm是vue 的“运行时”和“编译器”的集合\"></a>一. esm是vue 的“运行时”和“编译器”的集合</h2><h3 id=\"运行时\"><a href=\"#运行时\" class=\"headerlink\" title=\"运行时\"></a>运行时</h3><p>运行时是用来创建 Vue 实例、渲染并处理虚拟 DOM 等的代码。基本上就是除去编译器的其它一切。</p>\n<h3 id=\"编译器\"><a href=\"#编译器\" class=\"headerlink\" title=\"编译器\"></a>编译器</h3><p>用来将模板字符串编译成为 JavaScript 渲染函数的代码。</p>\n<p>在客户端编译模板包含以下情况：</p>\n<ol>\n<li><p>el属性指定模版挂载的DOM，和该DOM包含的html，也就是说，既没有指定template，又没有render函数</p>\n</li>\n<li><p>用template属性指定模板渲染的字符串</p>\n</li>\n</ol>\n<h3 id=\"如何选择\"><a href=\"#如何选择\" class=\"headerlink\" title=\"如何选择\"></a>如何选择</h3><p>vue的package.json文件中的module属性指定了模块的入口文件为vue.runtime.esm.js，为什么呢，因为这个只包含了运行时，不包含编译器。相比全部包含的vue.esm.js文件而言，vue.runtime.esm.js体积小了将近三分之一，初始化运行速度相对来说会高一些。</p>\n<p>我发现，在开发单页应用的时候，绝大多数情况下可以避免出现使用编译器的情况，所以，我只说下我遇到的情况。</p>\n<p>通常，我们的单页应用的入口html，入口文件和顶级组件分别是index.html, main.js和App.js。代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- index.html --&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- main.js --&gt;</span></span><br><span class=\"line\">import Vue from &#x27;vue&#x27;</span><br><span class=\"line\">import App from &#x27;./App&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.productionTip = false</span><br><span class=\"line\"></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: &#x27;#app&#x27;,</span><br><span class=\"line\">  template: &#x27;<span class=\"tag\">&lt;<span class=\"name\">App</span>/&gt;</span>&#x27;,</span><br><span class=\"line\">  components: &#123;App&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- App.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    HelloWorld</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;App&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>就像上面这种情况，初始化根实例的时候，用template指定了挂载元素，这就意味着，一定要用编译器。如果你的webpack.config.js里面没有设置vue的alias，并且，在main.js文件中，直接使用import Vue from ‘vue’，你会发现，浏览器会报错:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Vue warn]: You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.</span><br></pre></td></tr></table></figure>\n\n<p>但是，如果你把</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vue from &#x27;vue&#x27;</span><br></pre></td></tr></table></figure>\n<p>改成</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vue from &#x27;vue/dist/vue.esm.js&#x27;</span><br></pre></td></tr></table></figure>\n<p>就会运行正常。<br>不知道有多少项目都只是因为这个根实例导致不得不引入vue.esm.js。</p>\n<p>那么，针对这个情况怎么解决呢？想必很多人都知道答案了。代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- index.html --&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- main.js --&gt;</span></span><br><span class=\"line\">import Vue from &#x27;vue&#x27;</span><br><span class=\"line\">import App from &#x27;./App&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.productionTip = false</span><br><span class=\"line\"></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: &#x27;#app&#x27;,</span><br><span class=\"line\">  render(h) &#123;</span><br><span class=\"line\">    return h(App)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- App.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    HelloWorld</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;App&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其实只改了一行代码，就是把main.js中的template替换成render函数。之前发现有的项目用render有的直接template，现在才知道是这么回事。</p>\n<h2 id=\"二-esm和common什么关系，为什么除了runtime-esm和esm之外，还有vue-common-js和vue-js呢？\"><a href=\"#二-esm和common什么关系，为什么除了runtime-esm和esm之外，还有vue-common-js和vue-js呢？\" class=\"headerlink\" title=\"二. esm和common什么关系，为什么除了runtime.esm和esm之外，还有vue.common.js和vue.js呢？\"></a>二. esm和common什么关系，为什么除了runtime.esm和esm之外，还有vue.common.js和vue.js呢？</h2><h3 id=\"1-esm全称是ESModule，意思是遵循es6的import-export模块化规则。\"><a href=\"#1-esm全称是ESModule，意思是遵循es6的import-export模块化规则。\" class=\"headerlink\" title=\"1. esm全称是ESModule，意思是遵循es6的import export模块化规则。\"></a>1. esm全称是ESModule，意思是遵循es6的import export模块化规则。</h3><h3 id=\"2-common的意思是遵循common-js的exports模块化规则。\"><a href=\"#2-common的意思是遵循common-js的exports模块化规则。\" class=\"headerlink\" title=\"2. common的意思是遵循common.js的exports模块化规则。\"></a>2. common的意思是遵循common.js的exports模块化规则。</h3><h3 id=\"3-如何选择\"><a href=\"#3-如何选择\" class=\"headerlink\" title=\"3. 如何选择?\"></a>3. 如何选择?</h3><p>我们知道common.js的模块化是输出一个exports对象，没法做到按需引入，一旦引入，就是用 require引入整个exports对象。但是ES6的import 可以选择引入哪些属性。</p>\n<p>前者是运行时引入，后者是编译时引入（NodeJS打包）。由于编译时即可知道哪些是没有用到的，这样就可以达到tree shaking的目的（通过webpack配合达到）。</p>\n<p>esm.js文件里面是符合ES6模块规则的es5的语法，是经过babel编译过的。为什么要是es5的语法呢？一般情况下业务代码在使用babel-loader的时候会exclude掉node_module目录，这是因为，node_module目录里面有大量的源代码，处理起来很浪费时间，所以干脆模块开发者帮你编译好，别人直接用你编译好的，而且能tree shaking的代码版本即可。</p>\n"},{"title":"项目静态资源CDN服务无响应情况的回源","date":"2021-05-26T16:00:00.000Z","_content":"\n## 背景\n某日，华为云上部署的cdn服务故障导致部分区域静态资源（js和css）响应超时。这种情况是我们没有预料到的，幸亏用户不多，否则需要紧急发版将静态资源指向源服务器。\n\n我们的项目采用uni-app框架开发，内部基于vue-cli。生产模式会使用publicPath配置将静态资源指向cdn服务器，即，代码经过webpack编译后资源引用地址就已经固定了。\n\n## 任务拆解\n为了应对以上情况，我们需要实现一种机制，能够识别cdn异常，并切换资源为源服务器。\n\n我们的任务分为以下：\n1. publicPath运行时全局变更\n2. cdn资源请求异常识别方法\n3. 资源开关切换机制\n\n## 方案分析与实施\n### publicPath运行时全局变更\n经过分析打包后的模块代码：\n```\n/******/  function jsonpScriptSrc(chunkId) {\n/******/    return __webpack_require__.p + \"static/js/\" + ({\"project-qlymain-pages-404\":\"project-qlymain-pages-404\"}[chunkId]||chunkId) + \".\" + {\"chunk-0826ee9b\":\"964d9183\",\"chunk-69a5a22c\":\"9e1c8209\",\"project-qlymain-pages-404\":\"330de720\"}[chunkId] + \".js\"\n/******/  }\n/******/  ....此处省略一些中间代码\n/******/  // __webpack_public_path__\n/******/  __webpack_require__.p = \"/\";\n```\n以及webpack源码：\n```\nthis.hooks.requireExtensions.tap(\"MainTemplate\", (source, chunk, hash) => {\n  const buf = [];\n  const chunkMaps = chunk.getChunkMaps();\n  // ...\n  // ...\n  buf.push(\"// __webpack_public_path__\");\n  buf.push(`${this.requireFn}.p = ${JSON.stringify(publicPath)};`);\n  return Template.asString(buf);\n});\n```\n可以发现，publicPath被写入模块属性`__webpack_require__.p`上，我只需要修改这个属性值就可以了。\n\n一开始我写了个插件，通过拦截compiler钩子修改这个模块属性：\n```\nfunction pushBuff(valName, defaultVal, source) {\n  var buf = [];\n  buf.push(source);\n  buf.push('');\n  buf.push('// Dynamic assets path override (/build/plugins/runtime-publicpath-plugin)');\n  buf.push(`__webpack_require__.p = ${valName} || '${defaultVal}'`);\n  return buf.join('\\n');\n}\n// ...\nif (compiler.hooks && compiler.hooks.thisCompilation) {\n    compiler.hooks.thisCompilation.tap('RuntimePublicpathPlugin', function (compilation) {\n        compilation.mainTemplate.hooks.requireExtensions.tap('RuntimePublicpathPlugin', function (source, chunk, hash) {\n            return pushBuff(globalVariable, defaultPublicPath, source)\n        })\n    });\n}\n```\n\n但是，这个插件的目的是覆盖`__webpack_require__.p`的值为runtime的运行时全局变量（window[globalVariable]），但是我们的开关状态可能要存储到localstorage中（因为要实现状态缓存），而且存进去的字段名由业务代码决定，这样就导致插件和业务过渡耦合。\n\n后来发现业务代码中可以使用webpack提供的变量[__webpack_public_path__](https://webpack.js.org/api/module-variables/#__webpack_public_path__-webpack-specific)，webpack会在编译时将这些变量替换成__webpack_require__.p。\n\n至此，我们找到了publicPath运行时的覆盖方法：\n```\n__webpack_public_path__ = localstorage.getItem('__webpack_public_path__')\n```\n#### 异步资源加载\n打包后按需加载的代码：\n```\n// script path function\nfunction jsonpScriptSrc(chunkId) {\n    return __webpack_require__.p + \"\" + ({\n    \"project-qlymall-views-order-logisticsDetail\":\"project-qlymall-views-order-logisticsDetail\",\n    \"project-qlymall-views-order-refundDetail\":\"project-qlymall-views-order-refundDetail\"\n    // ......\n    }[chunkId]||chunkId)+'.js'\n}\n// ......\n// 创建script标签\n/******/        var script = document.createElement('script');\n/******/        // ......\n/******/        script.src = jsonpScriptSrc(chunkId);\n/******/\n```\n为了使我们的开关机制生效，需要保证jsonpScriptSrc方法在publicPath变更后执行。实施发现只要将以下语句放在入口文件最顶部执行即可。\n```\n__webpack_public_path__ = localstorage.getItem('__webpack_public_path__')\n```\n\n\n#### 插入index.html的cdn标签需要重写\n处理完异步加载的资源，我们还要处理入口index.html的资源。vue-cli内部使用了html-webpack-plugin将所有的assets插入了index.html中，包括pulicPath：\n```\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n    <head>\n        <meta charset=\"utf-8\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n        <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, viewport-fit=cover\">\n        <link rel=\"stylesheet\" href=\"https://mycdn.mycompany.com/static/index.css\" />\n    </head>\n    <body>\n        <div id=\"app\"></div>\n        <script src=https://mycdn.mycompany.com/static/js/index.bd9cfc6f.js></script>\n    </body>\n</html>\n```\n如何处理这种情况呢？有2个思路。\n1. 本着解决问题不如绕开问题的原则，考虑入口文件代码直接内联\n2. 入口文件也使用异步加载的方法\n\n针对方案1，看起来很简单粗暴，但是会产生一个问题：index.html使用的是源站资源，而非cdn。index.js一般代码比较大，如果内联是不是本身就违背了cdn的初衷呢？所以最终我们采用了方案2。\n\n##### 入口文件异步加载\n让入口文件异步加载的方法，一开始想到的方案是，写插件，覆盖vue-cli使用html-webpack-plugin的默认行为，替代为动态插入script标签的逻辑，这段代码由于不经过babel，所以语法需要谨慎。想想这样做有点大费周章了。\n\n后来发现可以直接覆盖掉入口文件，我们称之为main2.js，该文件关键代码：\n```\n/* 加载主入口文件 */\nimport('@/main.js').catch(err => {\n  handleError(err)\n})\n```\n这样就巧妙实现了入口文件异步加载。那么问题来了，main2.js又会被html-webpack-plugin插入index.html。由于main2.js的代码量较少，我选择内联，使用HtmlWebpackInlineSourcePlugin将main.js内联到index.html中。\n#### index.css的处理\n在调试HtmlWebpackInlineSourcePlugin的过程中发现，index.css并不在assets列表中。我们看看index.css的生成代码：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622347411128-image.png)\n\n这段代码做了2件事：\n1. 通过检查html中有没有VUE_APP_INDEX_CSS_HASH来判断生辰的index.css文件名要不要带上hash\n2. 将@dcloudio/uni-h5/dist/index.css文件中的内容取出来再加工，用copyWebpackPlugin插件将文件粘贴到dist目录中。\n\n鉴于该文件不大，可以选择内联或者在main2.js中动态插入link标签。我选择了后者。\n\n既然选择了动态插入link标签，就要知道，index.[hash].css的文件名，如何在运行时知晓呢？很简单，使用definePlugin将VUE_APP_INDEX_CSS_HASH注入运行时即可。\n\n### cdn加载异常识别\n\n一开始想到的是使用window.addEventListener('error')，但是尝试后发现无法捕获promise中的异常，所以改用window.addEventListener('unhandledrejection')。\n\n在回调中，需要做判断区分是否是资源加载超时。通过分析webpack模块源码可以发现它有做超时异常处理：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622347667614-image.png)\n\n且超时时间可以通过output.chunkLoadTimeout配置修改，默认值是120s，觉得太长的可以考虑覆盖。对于现在的用户来说，12s都算很长了，所以我选择缩短到12s。此外，超时异常格式可以通过上图的type和message匹配。\n\n## cdn开关切换\n针对开关切换，一开始想到的方案是通过接口变更开关状态，但是这样存在以下问题：\n1. 简单的开关可以通过人为控制apollo字段实现，但是无法感知客户端异常。开发者需要实现一个客户端告警机制触发开关变更，实现成本较高。\n2. 开关属于全局性的，一旦切换到源服务器，将会对源服务器造成较大压力。\n\n后来选择客户端自行切换开关的方案：\n\n**识别到cdn加载超时之后，我们业务的处理逻辑是：切换开关，将开关缓存5min，缓存的原因是，我们的业务属于APP内嵌h5，每个窗口都会重新初始化，所以需要窗口之间开关状态共享。**\n\n\n## 难点清单\n* 找到动态资源拼接的代码，找到__webpack_require__.p，如何重写它，使得运行时可修改\nindex.css处理\n* 内联？还是动态插入的选择\n* index.css文件名有hash怎么办\n\n\n","source":"_posts/webpack/cdn-switch.md","raw":"---\ntitle: 项目静态资源CDN服务无响应情况的回源\ncategories: webpack\ndate: 2021-5-27\n---\n\n## 背景\n某日，华为云上部署的cdn服务故障导致部分区域静态资源（js和css）响应超时。这种情况是我们没有预料到的，幸亏用户不多，否则需要紧急发版将静态资源指向源服务器。\n\n我们的项目采用uni-app框架开发，内部基于vue-cli。生产模式会使用publicPath配置将静态资源指向cdn服务器，即，代码经过webpack编译后资源引用地址就已经固定了。\n\n## 任务拆解\n为了应对以上情况，我们需要实现一种机制，能够识别cdn异常，并切换资源为源服务器。\n\n我们的任务分为以下：\n1. publicPath运行时全局变更\n2. cdn资源请求异常识别方法\n3. 资源开关切换机制\n\n## 方案分析与实施\n### publicPath运行时全局变更\n经过分析打包后的模块代码：\n```\n/******/  function jsonpScriptSrc(chunkId) {\n/******/    return __webpack_require__.p + \"static/js/\" + ({\"project-qlymain-pages-404\":\"project-qlymain-pages-404\"}[chunkId]||chunkId) + \".\" + {\"chunk-0826ee9b\":\"964d9183\",\"chunk-69a5a22c\":\"9e1c8209\",\"project-qlymain-pages-404\":\"330de720\"}[chunkId] + \".js\"\n/******/  }\n/******/  ....此处省略一些中间代码\n/******/  // __webpack_public_path__\n/******/  __webpack_require__.p = \"/\";\n```\n以及webpack源码：\n```\nthis.hooks.requireExtensions.tap(\"MainTemplate\", (source, chunk, hash) => {\n  const buf = [];\n  const chunkMaps = chunk.getChunkMaps();\n  // ...\n  // ...\n  buf.push(\"// __webpack_public_path__\");\n  buf.push(`${this.requireFn}.p = ${JSON.stringify(publicPath)};`);\n  return Template.asString(buf);\n});\n```\n可以发现，publicPath被写入模块属性`__webpack_require__.p`上，我只需要修改这个属性值就可以了。\n\n一开始我写了个插件，通过拦截compiler钩子修改这个模块属性：\n```\nfunction pushBuff(valName, defaultVal, source) {\n  var buf = [];\n  buf.push(source);\n  buf.push('');\n  buf.push('// Dynamic assets path override (/build/plugins/runtime-publicpath-plugin)');\n  buf.push(`__webpack_require__.p = ${valName} || '${defaultVal}'`);\n  return buf.join('\\n');\n}\n// ...\nif (compiler.hooks && compiler.hooks.thisCompilation) {\n    compiler.hooks.thisCompilation.tap('RuntimePublicpathPlugin', function (compilation) {\n        compilation.mainTemplate.hooks.requireExtensions.tap('RuntimePublicpathPlugin', function (source, chunk, hash) {\n            return pushBuff(globalVariable, defaultPublicPath, source)\n        })\n    });\n}\n```\n\n但是，这个插件的目的是覆盖`__webpack_require__.p`的值为runtime的运行时全局变量（window[globalVariable]），但是我们的开关状态可能要存储到localstorage中（因为要实现状态缓存），而且存进去的字段名由业务代码决定，这样就导致插件和业务过渡耦合。\n\n后来发现业务代码中可以使用webpack提供的变量[__webpack_public_path__](https://webpack.js.org/api/module-variables/#__webpack_public_path__-webpack-specific)，webpack会在编译时将这些变量替换成__webpack_require__.p。\n\n至此，我们找到了publicPath运行时的覆盖方法：\n```\n__webpack_public_path__ = localstorage.getItem('__webpack_public_path__')\n```\n#### 异步资源加载\n打包后按需加载的代码：\n```\n// script path function\nfunction jsonpScriptSrc(chunkId) {\n    return __webpack_require__.p + \"\" + ({\n    \"project-qlymall-views-order-logisticsDetail\":\"project-qlymall-views-order-logisticsDetail\",\n    \"project-qlymall-views-order-refundDetail\":\"project-qlymall-views-order-refundDetail\"\n    // ......\n    }[chunkId]||chunkId)+'.js'\n}\n// ......\n// 创建script标签\n/******/        var script = document.createElement('script');\n/******/        // ......\n/******/        script.src = jsonpScriptSrc(chunkId);\n/******/\n```\n为了使我们的开关机制生效，需要保证jsonpScriptSrc方法在publicPath变更后执行。实施发现只要将以下语句放在入口文件最顶部执行即可。\n```\n__webpack_public_path__ = localstorage.getItem('__webpack_public_path__')\n```\n\n\n#### 插入index.html的cdn标签需要重写\n处理完异步加载的资源，我们还要处理入口index.html的资源。vue-cli内部使用了html-webpack-plugin将所有的assets插入了index.html中，包括pulicPath：\n```\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n    <head>\n        <meta charset=\"utf-8\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n        <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, viewport-fit=cover\">\n        <link rel=\"stylesheet\" href=\"https://mycdn.mycompany.com/static/index.css\" />\n    </head>\n    <body>\n        <div id=\"app\"></div>\n        <script src=https://mycdn.mycompany.com/static/js/index.bd9cfc6f.js></script>\n    </body>\n</html>\n```\n如何处理这种情况呢？有2个思路。\n1. 本着解决问题不如绕开问题的原则，考虑入口文件代码直接内联\n2. 入口文件也使用异步加载的方法\n\n针对方案1，看起来很简单粗暴，但是会产生一个问题：index.html使用的是源站资源，而非cdn。index.js一般代码比较大，如果内联是不是本身就违背了cdn的初衷呢？所以最终我们采用了方案2。\n\n##### 入口文件异步加载\n让入口文件异步加载的方法，一开始想到的方案是，写插件，覆盖vue-cli使用html-webpack-plugin的默认行为，替代为动态插入script标签的逻辑，这段代码由于不经过babel，所以语法需要谨慎。想想这样做有点大费周章了。\n\n后来发现可以直接覆盖掉入口文件，我们称之为main2.js，该文件关键代码：\n```\n/* 加载主入口文件 */\nimport('@/main.js').catch(err => {\n  handleError(err)\n})\n```\n这样就巧妙实现了入口文件异步加载。那么问题来了，main2.js又会被html-webpack-plugin插入index.html。由于main2.js的代码量较少，我选择内联，使用HtmlWebpackInlineSourcePlugin将main.js内联到index.html中。\n#### index.css的处理\n在调试HtmlWebpackInlineSourcePlugin的过程中发现，index.css并不在assets列表中。我们看看index.css的生成代码：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622347411128-image.png)\n\n这段代码做了2件事：\n1. 通过检查html中有没有VUE_APP_INDEX_CSS_HASH来判断生辰的index.css文件名要不要带上hash\n2. 将@dcloudio/uni-h5/dist/index.css文件中的内容取出来再加工，用copyWebpackPlugin插件将文件粘贴到dist目录中。\n\n鉴于该文件不大，可以选择内联或者在main2.js中动态插入link标签。我选择了后者。\n\n既然选择了动态插入link标签，就要知道，index.[hash].css的文件名，如何在运行时知晓呢？很简单，使用definePlugin将VUE_APP_INDEX_CSS_HASH注入运行时即可。\n\n### cdn加载异常识别\n\n一开始想到的是使用window.addEventListener('error')，但是尝试后发现无法捕获promise中的异常，所以改用window.addEventListener('unhandledrejection')。\n\n在回调中，需要做判断区分是否是资源加载超时。通过分析webpack模块源码可以发现它有做超时异常处理：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622347667614-image.png)\n\n且超时时间可以通过output.chunkLoadTimeout配置修改，默认值是120s，觉得太长的可以考虑覆盖。对于现在的用户来说，12s都算很长了，所以我选择缩短到12s。此外，超时异常格式可以通过上图的type和message匹配。\n\n## cdn开关切换\n针对开关切换，一开始想到的方案是通过接口变更开关状态，但是这样存在以下问题：\n1. 简单的开关可以通过人为控制apollo字段实现，但是无法感知客户端异常。开发者需要实现一个客户端告警机制触发开关变更，实现成本较高。\n2. 开关属于全局性的，一旦切换到源服务器，将会对源服务器造成较大压力。\n\n后来选择客户端自行切换开关的方案：\n\n**识别到cdn加载超时之后，我们业务的处理逻辑是：切换开关，将开关缓存5min，缓存的原因是，我们的业务属于APP内嵌h5，每个窗口都会重新初始化，所以需要窗口之间开关状态共享。**\n\n\n## 难点清单\n* 找到动态资源拼接的代码，找到__webpack_require__.p，如何重写它，使得运行时可修改\nindex.css处理\n* 内联？还是动态插入的选择\n* index.css文件名有hash怎么办\n\n\n","slug":"webpack/cdn-switch","published":1,"updated":"2021-05-31T00:35:24.159Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckpcooutw000ru9q8d1ro98bc","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>某日，华为云上部署的cdn服务故障导致部分区域静态资源（js和css）响应超时。这种情况是我们没有预料到的，幸亏用户不多，否则需要紧急发版将静态资源指向源服务器。</p>\n<p>我们的项目采用uni-app框架开发，内部基于vue-cli。生产模式会使用publicPath配置将静态资源指向cdn服务器，即，代码经过webpack编译后资源引用地址就已经固定了。</p>\n<h2 id=\"任务拆解\"><a href=\"#任务拆解\" class=\"headerlink\" title=\"任务拆解\"></a>任务拆解</h2><p>为了应对以上情况，我们需要实现一种机制，能够识别cdn异常，并切换资源为源服务器。</p>\n<p>我们的任务分为以下：</p>\n<ol>\n<li>publicPath运行时全局变更</li>\n<li>cdn资源请求异常识别方法</li>\n<li>资源开关切换机制</li>\n</ol>\n<h2 id=\"方案分析与实施\"><a href=\"#方案分析与实施\" class=\"headerlink\" title=\"方案分析与实施\"></a>方案分析与实施</h2><h3 id=\"publicPath运行时全局变更\"><a href=\"#publicPath运行时全局变更\" class=\"headerlink\" title=\"publicPath运行时全局变更\"></a>publicPath运行时全局变更</h3><p>经过分析打包后的模块代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/******/  function jsonpScriptSrc(chunkId) &#123;</span><br><span class=\"line\">/******/    return __webpack_require__.p + &quot;static/js/&quot; + (&#123;&quot;project-qlymain-pages-404&quot;:&quot;project-qlymain-pages-404&quot;&#125;[chunkId]||chunkId) + &quot;.&quot; + &#123;&quot;chunk-0826ee9b&quot;:&quot;964d9183&quot;,&quot;chunk-69a5a22c&quot;:&quot;9e1c8209&quot;,&quot;project-qlymain-pages-404&quot;:&quot;330de720&quot;&#125;[chunkId] + &quot;.js&quot;</span><br><span class=\"line\">/******/  &#125;</span><br><span class=\"line\">/******/  ....此处省略一些中间代码</span><br><span class=\"line\">/******/  // __webpack_public_path__</span><br><span class=\"line\">/******/  __webpack_require__.p = &quot;/&quot;;</span><br></pre></td></tr></table></figure>\n<p>以及webpack源码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.hooks.requireExtensions.tap(&quot;MainTemplate&quot;, (source, chunk, hash) =&gt; &#123;</span><br><span class=\"line\">  const buf = [];</span><br><span class=\"line\">  const chunkMaps = chunk.getChunkMaps();</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">  buf.push(&quot;// __webpack_public_path__&quot;);</span><br><span class=\"line\">  buf.push(`$&#123;this.requireFn&#125;.p = $&#123;JSON.stringify(publicPath)&#125;;`);</span><br><span class=\"line\">  return Template.asString(buf);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>可以发现，publicPath被写入模块属性<code>__webpack_require__.p</code>上，我只需要修改这个属性值就可以了。</p>\n<p>一开始我写了个插件，通过拦截compiler钩子修改这个模块属性：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function pushBuff(valName, defaultVal, source) &#123;</span><br><span class=\"line\">  var buf = [];</span><br><span class=\"line\">  buf.push(source);</span><br><span class=\"line\">  buf.push(&#x27;&#x27;);</span><br><span class=\"line\">  buf.push(&#x27;// Dynamic assets path override (/build/plugins/runtime-publicpath-plugin)&#x27;);</span><br><span class=\"line\">  buf.push(`__webpack_require__.p = $&#123;valName&#125; || &#x27;$&#123;defaultVal&#125;&#x27;`);</span><br><span class=\"line\">  return buf.join(&#x27;\\n&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// ...</span><br><span class=\"line\">if (compiler.hooks &amp;&amp; compiler.hooks.thisCompilation) &#123;</span><br><span class=\"line\">    compiler.hooks.thisCompilation.tap(&#x27;RuntimePublicpathPlugin&#x27;, function (compilation) &#123;</span><br><span class=\"line\">        compilation.mainTemplate.hooks.requireExtensions.tap(&#x27;RuntimePublicpathPlugin&#x27;, function (source, chunk, hash) &#123;</span><br><span class=\"line\">            return pushBuff(globalVariable, defaultPublicPath, source)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是，这个插件的目的是覆盖<code>__webpack_require__.p</code>的值为runtime的运行时全局变量（window[globalVariable]），但是我们的开关状态可能要存储到localstorage中（因为要实现状态缓存），而且存进去的字段名由业务代码决定，这样就导致插件和业务过渡耦合。</p>\n<p>后来发现业务代码中可以使用webpack提供的变量<a href=\"https://webpack.js.org/api/module-variables/#__webpack_public_path__-webpack-specific\"><strong>webpack_public_path</strong></a>，webpack会在编译时将这些变量替换成__webpack_require__.p。</p>\n<p>至此，我们找到了publicPath运行时的覆盖方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__webpack_public_path__ = localstorage.getItem(&#x27;__webpack_public_path__&#x27;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"异步资源加载\"><a href=\"#异步资源加载\" class=\"headerlink\" title=\"异步资源加载\"></a>异步资源加载</h4><p>打包后按需加载的代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// script path function</span><br><span class=\"line\">function jsonpScriptSrc(chunkId) &#123;</span><br><span class=\"line\">    return __webpack_require__.p + &quot;&quot; + (&#123;</span><br><span class=\"line\">    &quot;project-qlymall-views-order-logisticsDetail&quot;:&quot;project-qlymall-views-order-logisticsDetail&quot;,</span><br><span class=\"line\">    &quot;project-qlymall-views-order-refundDetail&quot;:&quot;project-qlymall-views-order-refundDetail&quot;</span><br><span class=\"line\">    // ......</span><br><span class=\"line\">    &#125;[chunkId]||chunkId)+&#x27;.js&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// ......</span><br><span class=\"line\">// 创建script标签</span><br><span class=\"line\">/******/        var script = document.createElement(&#x27;script&#x27;);</span><br><span class=\"line\">/******/        // ......</span><br><span class=\"line\">/******/        script.src = jsonpScriptSrc(chunkId);</span><br><span class=\"line\">/******/</span><br></pre></td></tr></table></figure>\n<p>为了使我们的开关机制生效，需要保证jsonpScriptSrc方法在publicPath变更后执行。实施发现只要将以下语句放在入口文件最顶部执行即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__webpack_public_path__ = localstorage.getItem(&#x27;__webpack_public_path__&#x27;)</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"插入index-html的cdn标签需要重写\"><a href=\"#插入index-html的cdn标签需要重写\" class=\"headerlink\" title=\"插入index.html的cdn标签需要重写\"></a>插入index.html的cdn标签需要重写</h4><p>处理完异步加载的资源，我们还要处理入口index.html的资源。vue-cli内部使用了html-webpack-plugin将所有的assets插入了index.html中，包括pulicPath：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class=\"line\">        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, viewport-fit=cover&quot;&gt;</span><br><span class=\"line\">        &lt;link rel=&quot;stylesheet&quot; href=&quot;https://mycdn.mycompany.com/static/index.css&quot; /&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;script src=https://mycdn.mycompany.com/static/js/index.bd9cfc6f.js&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>如何处理这种情况呢？有2个思路。</p>\n<ol>\n<li>本着解决问题不如绕开问题的原则，考虑入口文件代码直接内联</li>\n<li>入口文件也使用异步加载的方法</li>\n</ol>\n<p>针对方案1，看起来很简单粗暴，但是会产生一个问题：index.html使用的是源站资源，而非cdn。index.js一般代码比较大，如果内联是不是本身就违背了cdn的初衷呢？所以最终我们采用了方案2。</p>\n<h5 id=\"入口文件异步加载\"><a href=\"#入口文件异步加载\" class=\"headerlink\" title=\"入口文件异步加载\"></a>入口文件异步加载</h5><p>让入口文件异步加载的方法，一开始想到的方案是，写插件，覆盖vue-cli使用html-webpack-plugin的默认行为，替代为动态插入script标签的逻辑，这段代码由于不经过babel，所以语法需要谨慎。想想这样做有点大费周章了。</p>\n<p>后来发现可以直接覆盖掉入口文件，我们称之为main2.js，该文件关键代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 加载主入口文件 */</span><br><span class=\"line\">import(&#x27;@/main.js&#x27;).catch(err =&gt; &#123;</span><br><span class=\"line\">  handleError(err)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这样就巧妙实现了入口文件异步加载。那么问题来了，main2.js又会被html-webpack-plugin插入index.html。由于main2.js的代码量较少，我选择内联，使用HtmlWebpackInlineSourcePlugin将main.js内联到index.html中。</p>\n<h4 id=\"index-css的处理\"><a href=\"#index-css的处理\" class=\"headerlink\" title=\"index.css的处理\"></a>index.css的处理</h4><p>在调试HtmlWebpackInlineSourcePlugin的过程中发现，index.css并不在assets列表中。我们看看index.css的生成代码：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622347411128-image.png\"></p>\n<p>这段代码做了2件事：</p>\n<ol>\n<li>通过检查html中有没有VUE_APP_INDEX_CSS_HASH来判断生辰的index.css文件名要不要带上hash</li>\n<li>将@dcloudio/uni-h5/dist/index.css文件中的内容取出来再加工，用copyWebpackPlugin插件将文件粘贴到dist目录中。</li>\n</ol>\n<p>鉴于该文件不大，可以选择内联或者在main2.js中动态插入link标签。我选择了后者。</p>\n<p>既然选择了动态插入link标签，就要知道，index.[hash].css的文件名，如何在运行时知晓呢？很简单，使用definePlugin将VUE_APP_INDEX_CSS_HASH注入运行时即可。</p>\n<h3 id=\"cdn加载异常识别\"><a href=\"#cdn加载异常识别\" class=\"headerlink\" title=\"cdn加载异常识别\"></a>cdn加载异常识别</h3><p>一开始想到的是使用window.addEventListener(‘error’)，但是尝试后发现无法捕获promise中的异常，所以改用window.addEventListener(‘unhandledrejection’)。</p>\n<p>在回调中，需要做判断区分是否是资源加载超时。通过分析webpack模块源码可以发现它有做超时异常处理：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622347667614-image.png\"></p>\n<p>且超时时间可以通过output.chunkLoadTimeout配置修改，默认值是120s，觉得太长的可以考虑覆盖。对于现在的用户来说，12s都算很长了，所以我选择缩短到12s。此外，超时异常格式可以通过上图的type和message匹配。</p>\n<h2 id=\"cdn开关切换\"><a href=\"#cdn开关切换\" class=\"headerlink\" title=\"cdn开关切换\"></a>cdn开关切换</h2><p>针对开关切换，一开始想到的方案是通过接口变更开关状态，但是这样存在以下问题：</p>\n<ol>\n<li>简单的开关可以通过人为控制apollo字段实现，但是无法感知客户端异常。开发者需要实现一个客户端告警机制触发开关变更，实现成本较高。</li>\n<li>开关属于全局性的，一旦切换到源服务器，将会对源服务器造成较大压力。</li>\n</ol>\n<p>后来选择客户端自行切换开关的方案：</p>\n<p><strong>识别到cdn加载超时之后，我们业务的处理逻辑是：切换开关，将开关缓存5min，缓存的原因是，我们的业务属于APP内嵌h5，每个窗口都会重新初始化，所以需要窗口之间开关状态共享。</strong></p>\n<h2 id=\"难点清单\"><a href=\"#难点清单\" class=\"headerlink\" title=\"难点清单\"></a>难点清单</h2><ul>\n<li>找到动态资源拼接的代码，找到__webpack_require__.p，如何重写它，使得运行时可修改<br>index.css处理</li>\n<li>内联？还是动态插入的选择</li>\n<li>index.css文件名有hash怎么办</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>某日，华为云上部署的cdn服务故障导致部分区域静态资源（js和css）响应超时。这种情况是我们没有预料到的，幸亏用户不多，否则需要紧急发版将静态资源指向源服务器。</p>\n<p>我们的项目采用uni-app框架开发，内部基于vue-cli。生产模式会使用publicPath配置将静态资源指向cdn服务器，即，代码经过webpack编译后资源引用地址就已经固定了。</p>\n<h2 id=\"任务拆解\"><a href=\"#任务拆解\" class=\"headerlink\" title=\"任务拆解\"></a>任务拆解</h2><p>为了应对以上情况，我们需要实现一种机制，能够识别cdn异常，并切换资源为源服务器。</p>\n<p>我们的任务分为以下：</p>\n<ol>\n<li>publicPath运行时全局变更</li>\n<li>cdn资源请求异常识别方法</li>\n<li>资源开关切换机制</li>\n</ol>\n<h2 id=\"方案分析与实施\"><a href=\"#方案分析与实施\" class=\"headerlink\" title=\"方案分析与实施\"></a>方案分析与实施</h2><h3 id=\"publicPath运行时全局变更\"><a href=\"#publicPath运行时全局变更\" class=\"headerlink\" title=\"publicPath运行时全局变更\"></a>publicPath运行时全局变更</h3><p>经过分析打包后的模块代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/******/  function jsonpScriptSrc(chunkId) &#123;</span><br><span class=\"line\">/******/    return __webpack_require__.p + &quot;static/js/&quot; + (&#123;&quot;project-qlymain-pages-404&quot;:&quot;project-qlymain-pages-404&quot;&#125;[chunkId]||chunkId) + &quot;.&quot; + &#123;&quot;chunk-0826ee9b&quot;:&quot;964d9183&quot;,&quot;chunk-69a5a22c&quot;:&quot;9e1c8209&quot;,&quot;project-qlymain-pages-404&quot;:&quot;330de720&quot;&#125;[chunkId] + &quot;.js&quot;</span><br><span class=\"line\">/******/  &#125;</span><br><span class=\"line\">/******/  ....此处省略一些中间代码</span><br><span class=\"line\">/******/  // __webpack_public_path__</span><br><span class=\"line\">/******/  __webpack_require__.p = &quot;/&quot;;</span><br></pre></td></tr></table></figure>\n<p>以及webpack源码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.hooks.requireExtensions.tap(&quot;MainTemplate&quot;, (source, chunk, hash) =&gt; &#123;</span><br><span class=\"line\">  const buf = [];</span><br><span class=\"line\">  const chunkMaps = chunk.getChunkMaps();</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">  buf.push(&quot;// __webpack_public_path__&quot;);</span><br><span class=\"line\">  buf.push(`$&#123;this.requireFn&#125;.p = $&#123;JSON.stringify(publicPath)&#125;;`);</span><br><span class=\"line\">  return Template.asString(buf);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>可以发现，publicPath被写入模块属性<code>__webpack_require__.p</code>上，我只需要修改这个属性值就可以了。</p>\n<p>一开始我写了个插件，通过拦截compiler钩子修改这个模块属性：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function pushBuff(valName, defaultVal, source) &#123;</span><br><span class=\"line\">  var buf = [];</span><br><span class=\"line\">  buf.push(source);</span><br><span class=\"line\">  buf.push(&#x27;&#x27;);</span><br><span class=\"line\">  buf.push(&#x27;// Dynamic assets path override (/build/plugins/runtime-publicpath-plugin)&#x27;);</span><br><span class=\"line\">  buf.push(`__webpack_require__.p = $&#123;valName&#125; || &#x27;$&#123;defaultVal&#125;&#x27;`);</span><br><span class=\"line\">  return buf.join(&#x27;\\n&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// ...</span><br><span class=\"line\">if (compiler.hooks &amp;&amp; compiler.hooks.thisCompilation) &#123;</span><br><span class=\"line\">    compiler.hooks.thisCompilation.tap(&#x27;RuntimePublicpathPlugin&#x27;, function (compilation) &#123;</span><br><span class=\"line\">        compilation.mainTemplate.hooks.requireExtensions.tap(&#x27;RuntimePublicpathPlugin&#x27;, function (source, chunk, hash) &#123;</span><br><span class=\"line\">            return pushBuff(globalVariable, defaultPublicPath, source)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是，这个插件的目的是覆盖<code>__webpack_require__.p</code>的值为runtime的运行时全局变量（window[globalVariable]），但是我们的开关状态可能要存储到localstorage中（因为要实现状态缓存），而且存进去的字段名由业务代码决定，这样就导致插件和业务过渡耦合。</p>\n<p>后来发现业务代码中可以使用webpack提供的变量<a href=\"https://webpack.js.org/api/module-variables/#__webpack_public_path__-webpack-specific\"><strong>webpack_public_path</strong></a>，webpack会在编译时将这些变量替换成__webpack_require__.p。</p>\n<p>至此，我们找到了publicPath运行时的覆盖方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__webpack_public_path__ = localstorage.getItem(&#x27;__webpack_public_path__&#x27;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"异步资源加载\"><a href=\"#异步资源加载\" class=\"headerlink\" title=\"异步资源加载\"></a>异步资源加载</h4><p>打包后按需加载的代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// script path function</span><br><span class=\"line\">function jsonpScriptSrc(chunkId) &#123;</span><br><span class=\"line\">    return __webpack_require__.p + &quot;&quot; + (&#123;</span><br><span class=\"line\">    &quot;project-qlymall-views-order-logisticsDetail&quot;:&quot;project-qlymall-views-order-logisticsDetail&quot;,</span><br><span class=\"line\">    &quot;project-qlymall-views-order-refundDetail&quot;:&quot;project-qlymall-views-order-refundDetail&quot;</span><br><span class=\"line\">    // ......</span><br><span class=\"line\">    &#125;[chunkId]||chunkId)+&#x27;.js&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// ......</span><br><span class=\"line\">// 创建script标签</span><br><span class=\"line\">/******/        var script = document.createElement(&#x27;script&#x27;);</span><br><span class=\"line\">/******/        // ......</span><br><span class=\"line\">/******/        script.src = jsonpScriptSrc(chunkId);</span><br><span class=\"line\">/******/</span><br></pre></td></tr></table></figure>\n<p>为了使我们的开关机制生效，需要保证jsonpScriptSrc方法在publicPath变更后执行。实施发现只要将以下语句放在入口文件最顶部执行即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__webpack_public_path__ = localstorage.getItem(&#x27;__webpack_public_path__&#x27;)</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"插入index-html的cdn标签需要重写\"><a href=\"#插入index-html的cdn标签需要重写\" class=\"headerlink\" title=\"插入index.html的cdn标签需要重写\"></a>插入index.html的cdn标签需要重写</h4><p>处理完异步加载的资源，我们还要处理入口index.html的资源。vue-cli内部使用了html-webpack-plugin将所有的assets插入了index.html中，包括pulicPath：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class=\"line\">        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, viewport-fit=cover&quot;&gt;</span><br><span class=\"line\">        &lt;link rel=&quot;stylesheet&quot; href=&quot;https://mycdn.mycompany.com/static/index.css&quot; /&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;script src=https://mycdn.mycompany.com/static/js/index.bd9cfc6f.js&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>如何处理这种情况呢？有2个思路。</p>\n<ol>\n<li>本着解决问题不如绕开问题的原则，考虑入口文件代码直接内联</li>\n<li>入口文件也使用异步加载的方法</li>\n</ol>\n<p>针对方案1，看起来很简单粗暴，但是会产生一个问题：index.html使用的是源站资源，而非cdn。index.js一般代码比较大，如果内联是不是本身就违背了cdn的初衷呢？所以最终我们采用了方案2。</p>\n<h5 id=\"入口文件异步加载\"><a href=\"#入口文件异步加载\" class=\"headerlink\" title=\"入口文件异步加载\"></a>入口文件异步加载</h5><p>让入口文件异步加载的方法，一开始想到的方案是，写插件，覆盖vue-cli使用html-webpack-plugin的默认行为，替代为动态插入script标签的逻辑，这段代码由于不经过babel，所以语法需要谨慎。想想这样做有点大费周章了。</p>\n<p>后来发现可以直接覆盖掉入口文件，我们称之为main2.js，该文件关键代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 加载主入口文件 */</span><br><span class=\"line\">import(&#x27;@/main.js&#x27;).catch(err =&gt; &#123;</span><br><span class=\"line\">  handleError(err)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这样就巧妙实现了入口文件异步加载。那么问题来了，main2.js又会被html-webpack-plugin插入index.html。由于main2.js的代码量较少，我选择内联，使用HtmlWebpackInlineSourcePlugin将main.js内联到index.html中。</p>\n<h4 id=\"index-css的处理\"><a href=\"#index-css的处理\" class=\"headerlink\" title=\"index.css的处理\"></a>index.css的处理</h4><p>在调试HtmlWebpackInlineSourcePlugin的过程中发现，index.css并不在assets列表中。我们看看index.css的生成代码：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622347411128-image.png\"></p>\n<p>这段代码做了2件事：</p>\n<ol>\n<li>通过检查html中有没有VUE_APP_INDEX_CSS_HASH来判断生辰的index.css文件名要不要带上hash</li>\n<li>将@dcloudio/uni-h5/dist/index.css文件中的内容取出来再加工，用copyWebpackPlugin插件将文件粘贴到dist目录中。</li>\n</ol>\n<p>鉴于该文件不大，可以选择内联或者在main2.js中动态插入link标签。我选择了后者。</p>\n<p>既然选择了动态插入link标签，就要知道，index.[hash].css的文件名，如何在运行时知晓呢？很简单，使用definePlugin将VUE_APP_INDEX_CSS_HASH注入运行时即可。</p>\n<h3 id=\"cdn加载异常识别\"><a href=\"#cdn加载异常识别\" class=\"headerlink\" title=\"cdn加载异常识别\"></a>cdn加载异常识别</h3><p>一开始想到的是使用window.addEventListener(‘error’)，但是尝试后发现无法捕获promise中的异常，所以改用window.addEventListener(‘unhandledrejection’)。</p>\n<p>在回调中，需要做判断区分是否是资源加载超时。通过分析webpack模块源码可以发现它有做超时异常处理：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622347667614-image.png\"></p>\n<p>且超时时间可以通过output.chunkLoadTimeout配置修改，默认值是120s，觉得太长的可以考虑覆盖。对于现在的用户来说，12s都算很长了，所以我选择缩短到12s。此外，超时异常格式可以通过上图的type和message匹配。</p>\n<h2 id=\"cdn开关切换\"><a href=\"#cdn开关切换\" class=\"headerlink\" title=\"cdn开关切换\"></a>cdn开关切换</h2><p>针对开关切换，一开始想到的方案是通过接口变更开关状态，但是这样存在以下问题：</p>\n<ol>\n<li>简单的开关可以通过人为控制apollo字段实现，但是无法感知客户端异常。开发者需要实现一个客户端告警机制触发开关变更，实现成本较高。</li>\n<li>开关属于全局性的，一旦切换到源服务器，将会对源服务器造成较大压力。</li>\n</ol>\n<p>后来选择客户端自行切换开关的方案：</p>\n<p><strong>识别到cdn加载超时之后，我们业务的处理逻辑是：切换开关，将开关缓存5min，缓存的原因是，我们的业务属于APP内嵌h5，每个窗口都会重新初始化，所以需要窗口之间开关状态共享。</strong></p>\n<h2 id=\"难点清单\"><a href=\"#难点清单\" class=\"headerlink\" title=\"难点清单\"></a>难点清单</h2><ul>\n<li>找到动态资源拼接的代码，找到__webpack_require__.p，如何重写它，使得运行时可修改<br>index.css处理</li>\n<li>内联？还是动态插入的选择</li>\n<li>index.css文件名有hash怎么办</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckpcooutf0001u9q85j719pd3","category_id":"ckpcoovh2000su9q83bs05o9w","_id":"ckpcoovic001ju9q8dz3f7kqn"},{"post_id":"ckpcoouti0002u9q85fl97d33","category_id":"ckpcoovhc000tu9q8fq3mg7qt","_id":"ckpcoovic001ku9q8dqafbjrk"},{"post_id":"ckpcoouti0003u9q8gb1pbkhw","category_id":"ckpcoovhc000uu9q8dp0g6t5z","_id":"ckpcoovid001lu9q89i6lazd5"},{"post_id":"ckpcooutj0004u9q8euhw8jjp","category_id":"ckpcoovhd000vu9q88w5v52f0","_id":"ckpcoovid001mu9q85sud51cy"},{"post_id":"ckpcooutj0005u9q8bmbndasw","category_id":"ckpcoovhc000uu9q8dp0g6t5z","_id":"ckpcoovid001nu9q8et629wbb"},{"post_id":"ckpcooutk0006u9q84asb2lfa","category_id":"ckpcoovhg000xu9q814dvez6i","_id":"ckpcoovid001ou9q89ljoce58"},{"post_id":"ckpcooutl0007u9q8dpsx2vk0","category_id":"ckpcoovhh000yu9q85vhzc2dp","_id":"ckpcoovid001pu9q8gq0152zx"},{"post_id":"ckpcooutl0008u9q88l7m28ny","category_id":"ckpcoovhh000zu9q860715qbp","_id":"ckpcoovid001qu9q858jf5ewm"},{"post_id":"ckpcooutm0009u9q861p6djq5","category_id":"ckpcoovhi0010u9q8282a2f1j","_id":"ckpcoovid001ru9q80qujhbey"},{"post_id":"ckpcooutn000au9q81mct80zd","category_id":"ckpcoovhh000zu9q860715qbp","_id":"ckpcoovid001su9q85whn6ht5"},{"post_id":"ckpcooutn000bu9q82mrz7fyq","category_id":"ckpcoovhd000vu9q88w5v52f0","_id":"ckpcoovie001tu9q80qm45ere"},{"post_id":"ckpcoouto000cu9q8duiodtxs","category_id":"ckpcoovhh000zu9q860715qbp","_id":"ckpcoovie001uu9q86wh31s0k"},{"post_id":"ckpcoouto000du9q8hl4c5ik6","category_id":"ckpcoovhh000zu9q860715qbp","_id":"ckpcoovie001vu9q817cu5iav"},{"post_id":"ckpcooutp000eu9q87avwchp2","category_id":"ckpcoovhl0015u9q82jt400ou","_id":"ckpcoovie001wu9q82p6b25fz"},{"post_id":"ckpcooutp000fu9q87bb04imy","category_id":"ckpcoovhl0016u9q86bg62pys","_id":"ckpcoovie001xu9q80apoch0r"},{"post_id":"ckpcooutq000gu9q8e74b9x6v","category_id":"ckpcoovhc000uu9q8dp0g6t5z","_id":"ckpcoovie001yu9q8a18u9xre"},{"post_id":"ckpcooutq000hu9q83jaod5ye","category_id":"ckpcoovhc000uu9q8dp0g6t5z","_id":"ckpcoovie001zu9q8c3bydwys"},{"post_id":"ckpcooutr000iu9q8h86agnjc","category_id":"ckpcoovhl0016u9q86bg62pys","_id":"ckpcoovie0020u9q85k7d169f"},{"post_id":"ckpcooutr000ju9q8ghg61lzt","category_id":"ckpcoovhc000uu9q8dp0g6t5z","_id":"ckpcoovie0021u9q80cwz42ya"},{"post_id":"ckpcoouts000ku9q8f8nzaa9u","category_id":"ckpcoovhc000uu9q8dp0g6t5z","_id":"ckpcoovif0022u9q8b0yddolb"},{"post_id":"ckpcoouts000lu9q8458r7tn7","category_id":"ckpcoovho001cu9q8hygd6yw8","_id":"ckpcoovif0023u9q8f5cn22d3"},{"post_id":"ckpcooutt000mu9q8b5ti7hm1","category_id":"ckpcoovhp001du9q8h7hecray","_id":"ckpcoovif0024u9q888jjdzdx"},{"post_id":"ckpcooutt000nu9q838t7gv91","category_id":"ckpcoovhh000zu9q860715qbp","_id":"ckpcoovif0025u9q8b6ijg7lx"},{"post_id":"ckpcooutv000ou9q834ar5b4o","category_id":"ckpcoovhp001du9q8h7hecray","_id":"ckpcoovif0026u9q82gjo7ukl"},{"post_id":"ckpcooutv000pu9q85m8w5zaz","category_id":"ckpcoovhp001du9q8h7hecray","_id":"ckpcoovif0027u9q84utn6mb8"},{"post_id":"ckpcooutw000qu9q8dm0hduhi","category_id":"ckpcoovhp001du9q8h7hecray","_id":"ckpcoovif0028u9q8bg1rhle9"},{"post_id":"ckpcooutw000ru9q8d1ro98bc","category_id":"ckpcoovhr001iu9q83smkceey","_id":"ckpcoovif0029u9q8hbun40or"}],"PostTag":[],"Tag":[]}}