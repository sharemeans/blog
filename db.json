{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/icarus/source/css/cyberpunk.styl","path":"css/cyberpunk.styl","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/default.styl","path":"css/default.styl","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/icarus/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/img/favicon.svg","path":"img/favicon.svg","modified":1,"renderable":1},{"_id":"themes/icarus/source/img/logo.svg","path":"img/logo.svg","modified":1,"renderable":1},{"_id":"themes/icarus/source/img/og_image.png","path":"img/og_image.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/img/razor-bottom-black.svg","path":"img/razor-bottom-black.svg","modified":1,"renderable":1},{"_id":"themes/icarus/source/img/razor-top-black.svg","path":"img/razor-top-black.svg","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/animation.js","path":"js/animation.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/back_to_top.js","path":"js/back_to_top.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/column.js","path":"js/column.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"source/images/2019021401.png","path":"images/2019021401.png","modified":1,"renderable":0},{"_id":"source/images/2019021402.png","path":"images/2019021402.png","modified":1,"renderable":0},{"_id":"source/images/2019051301.svg","path":"images/2019051301.svg","modified":1,"renderable":0},{"_id":"source/images/2019060101.jpeg","path":"images/2019060101.jpeg","modified":1,"renderable":0},{"_id":"source/images/2019060102.png","path":"images/2019060102.png","modified":1,"renderable":0},{"_id":"source/images/2019060103.png","path":"images/2019060103.png","modified":1,"renderable":0},{"_id":"source/images/2019060301.png","path":"images/2019060301.png","modified":1,"renderable":0},{"_id":"source/images/2019060501.png","path":"images/2019060501.png","modified":1,"renderable":0},{"_id":"source/images/2019060502.png","path":"images/2019060502.png","modified":1,"renderable":0},{"_id":"source/images/2019060503.png","path":"images/2019060503.png","modified":1,"renderable":0},{"_id":"source/images/2019061301.png","path":"images/2019061301.png","modified":1,"renderable":0},{"_id":"source/images/2019061302.png","path":"images/2019061302.png","modified":1,"renderable":0},{"_id":"source/images/2019061303.png","path":"images/2019061303.png","modified":1,"renderable":0},{"_id":"source/images/2019061304.png","path":"images/2019061304.png","modified":1,"renderable":0},{"_id":"source/images/2019071701.jpeg","path":"images/2019071701.jpeg","modified":1,"renderable":0},{"_id":"source/images/2019072201.jpeg","path":"images/2019072201.jpeg","modified":1,"renderable":0},{"_id":"source/images/2019072202.jpeg","path":"images/2019072202.jpeg","modified":1,"renderable":0},{"_id":"source/images/2019090101.jpg","path":"images/2019090101.jpg","modified":1,"renderable":0},{"_id":"source/images/2019090102.png","path":"images/2019090102.png","modified":1,"renderable":0},{"_id":"source/images/2021061401.gif","path":"images/2021061401.gif","modified":1,"renderable":0},{"_id":"source/images/2021061402.svg","path":"images/2021061402.svg","modified":1,"renderable":0},{"_id":"source/images/avator.jpg","path":"images/avator.jpg","modified":1,"renderable":0},{"_id":"source/images/logo.favicon.big.png","path":"images/logo.favicon.big.png","modified":1,"renderable":0},{"_id":"source/images/logo.favicon.png","path":"images/logo.favicon.png","modified":1,"renderable":0},{"_id":"source/images/logo.png","path":"images/logo.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/categories/index.md","hash":"b321b0994b3f96d6e2132dcdfb404837e6c9aafd","modified":1622357746380},{"_id":"source/.DS_Store","hash":"16bb90aba71d434fd6ce9740196836cc258519f1","modified":1622506885438},{"_id":"source/images/2019021401.png","hash":"2d49d70b32443293192bd4987d5d5b2b9e06b043","modified":1622470617119},{"_id":"source/images/2019051301.svg","hash":"1b7c84ae93ff0179d88cb714ac95992a856c4164","modified":1622470617298},{"_id":"source/images/2019021402.png","hash":"02093e5fdf9d650688ea9daad9f781e781771a38","modified":1622470617254},{"_id":"source/images/2019060503.png","hash":"fdcc2af5b03d9afeac00a41a6a3271cf38eab097","modified":1622470617553},{"_id":"source/images/2019060502.png","hash":"f7350efafb3b4b2fc73c42eb0567a1afd0322efc","modified":1622470617520},{"_id":"source/images/2019060501.png","hash":"cdeebe77a3b3f1a52f9662d8cb4e5a757fd17bd1","modified":1622470617476},{"_id":"source/images/2019061304.png","hash":"9af557806916e71fb4b232a909067218ca2a56e3","modified":1622470617696},{"_id":"source/images/2019061303.png","hash":"0c7681ed464f7b9e479ab58004fbc0b5d878bb30","modified":1622470617654},{"_id":"source/images/2019071701.jpeg","hash":"5db3461acfde212aec32a8a17c9160539069fe47","modified":1622470617729},{"_id":"source/images/2019072201.jpeg","hash":"2e2fcc7a3561d97ff664ed10e0d3f3ed29d9ee1d","modified":1622470617759},{"_id":"source/images/2019072202.jpeg","hash":"86bb28cc80dac8d3e5e099b7871366d07e135ddb","modified":1622470617785},{"_id":"source/images/avator.jpg","hash":"8e0f9e026833643b9fa048580ec6008f692ec148","modified":1622421648603},{"_id":"source/images/logo.favicon.big.png","hash":"e15bdedba379bd1746757c6bf611b4a68fd5b445","modified":1622468218804},{"_id":"source/images/logo.png","hash":"6c1283a23bc7bdb99e57c0a0c3a57a1f776a6bb0","modified":1622467954448},{"_id":"source/images/logo.favicon.png","hash":"bdfa37cdbecd6a29fb07322aedd02a9c0aedadcb","modified":1622468285636},{"_id":"source/_posts/architecture/qiankun.md","hash":"419a8a6c8c740da168f7cabcd82a30a55ecd35eb","modified":1628307948515},{"_id":"source/_posts/blogs/code-clean.md","hash":"edd6150619b4ce3863ded422a3bf98d7c8fa2409","modified":1623636146280},{"_id":"source/_posts/blogs/baidu-map-mark.md","hash":"a429f4eb2afd1dc727e3ff5bf9cbfd74cc69d105","modified":1623636135239},{"_id":"source/_posts/blogs/base64.md","hash":"bb409c70637ca840725e743220a87f668aa8d340","modified":1628306000133},{"_id":"source/_posts/blogs/csp.md","hash":"37a6fb5cb53bd319522c78c7c4c100a878809769","modified":1628123516846},{"_id":"source/_posts/blogs/deep-clone.md","hash":"f8c880b7d36e9d1805fa3b1f2bc6510af76bd55e","modified":1628310104091},{"_id":"source/_posts/blogs/flex-layout.md","hash":"78f70080fb9eccf1659502e0fbefa1396e7d696e","modified":1623636159414},{"_id":"source/_posts/blogs/https.md","hash":"6eb9437ba8e7e6ca3b6424e25a22cfee5d528711","modified":1623636171793},{"_id":"source/_posts/blogs/in-operator.md","hash":"bb8c00de6cf6cba228d9762a2af4a27de18e1226","modified":1623636229324},{"_id":"source/_posts/blogs/linux-command.md","hash":"0b5b46287d3bcb8117bae048c7491ee4b2c12d66","modified":1623636306217},{"_id":"source/_posts/blogs/meta.md","hash":"81d76cdf6d288dedce45b1a2c031a9e905e2e21f","modified":1623636321595},{"_id":"source/_posts/blogs/print.md","hash":"60bb63e0b9c669c04ec75c2aceae325afb1d151b","modified":1623636335429},{"_id":"source/_posts/blogs/incognito-mode.md","hash":"b55a212ed9adf88e7d615eeef3e84287982c99a8","modified":1623636287220},{"_id":"source/_posts/blogs/property-attribute.md","hash":"d54ded1bd6a78b165863716d0ad1cc0721a546b2","modified":1623636367454},{"_id":"source/_posts/blogs/proxy-reflect.md","hash":"abf98a49aa64c651d3d8f61dc8a14cd36d58c2bb","modified":1623636384913},{"_id":"source/_posts/blogs/proxy.md","hash":"aef6653bc2417ab1d14bdf62b2994f69b8f5a537","modified":1623636396377},{"_id":"source/_posts/blogs/regexpression.md","hash":"986523b3399a728498f1935c585ec09b4882e6e4","modified":1623636409802},{"_id":"source/_posts/blogs/prototype.md","hash":"df30052800e510acf742d87de53b7d80f808db3e","modified":1628309952143},{"_id":"source/_posts/blogs/save-base64.md","hash":"94e125c6837a14ca4455aac78aea6023b6410276","modified":1623636462802},{"_id":"source/_posts/css/curved-radius.md","hash":"2e9efdc981c2f3dc476bfbf301c34876b8785a55","modified":1623636497937},{"_id":"source/_posts/blogs/throttle-debounce.md","hash":"8743b8a99cb5d26bd68ff94e2819f59c0b4ae574","modified":1623636484814},{"_id":"source/_posts/css/css-coupon.md","hash":"50f42af0f33232a35d9f76eda697fa740f815a56","modified":1623636494186},{"_id":"source/_posts/blogs/role-auth-design.md","hash":"99b443771a5a97a912e1fb3c09c8064670bfdd49","modified":1623636447904},{"_id":"source/_posts/css/white-space.md","hash":"4e0c686bde03cc30df493fc07955cd95bf2d2db1","modified":1628303904041},{"_id":"source/_posts/nuxt/navigator.md","hash":"6a25df438cea6648b9f730064198f24d50d2de24","modified":1623636504786},{"_id":"source/_posts/css/margin-bottom-ios.md","hash":"a670972ebbbc07189210d19a626f816545daf021","modified":1628123939022},{"_id":"source/_posts/tools/charles-rewrite-header.md","hash":"74a7f149d73a5d71e8040d04f502cf199c052f95","modified":1623636563650},{"_id":"source/_posts/css/inline-tag.md","hash":"64135e9070c8279d09a99420b1bd2fb66ed566dc","modified":1628124011669},{"_id":"source/_posts/tools/https-through-fiddler.md","hash":"b23f94a1e06588e45b04548a9697176e1ccdccf0","modified":1623636576976},{"_id":"source/_posts/tools/fiddler-debug-online.md","hash":"39dd980ffaf52addd0ecf1a5f8a282cbf326e675","modified":1623636592341},{"_id":"source/_posts/tools/npm-learn.md","hash":"cdabb37fde61cf8f5d8bf972a1e88adab0aa4cdd","modified":1623650347373},{"_id":"source/_posts/tools/code-statistics.md","hash":"14bb3936e442c9e7622ca105113876311b321538","modified":1628210843132},{"_id":"source/_posts/tools/git.md","hash":"92b25ee9996588a852c69d20a0931f1f2ef049fc","modified":1628210824925},{"_id":"source/_posts/tools/pipeline-groovy.md","hash":"cd9b01aa5a5978a07444f27d8289c2be5eb062df","modified":1623636622062},{"_id":"source/_posts/think/a-hard-experience.md","hash":"0b9b1c9efb479a9405ada7fff0c39c051b9ac3cf","modified":1628123840831},{"_id":"source/_posts/think/fanganfenxi.md","hash":"6e769d8e7f5ce62e7132e737e96c0d3b2952194d","modified":1623636545705},{"_id":"source/_posts/think/manage-time.md","hash":"2ff4697b804bd54191b2042242c38f94b5440924","modified":1623636549240},{"_id":"source/_posts/uni-app/com-icons.md","hash":"557006870fe0e8788c6f5aed82e0c7c60a271dfd","modified":1623636694847},{"_id":"source/_posts/uni-app/attentions.md","hash":"f7a0c004f7f579608a45b7903abe15c64cb01b72","modified":1628309112368},{"_id":"source/_posts/uni-app/bundle-path.md","hash":"daf3273eb9f2f47d5e5457112d61173bc133919b","modified":1628304492938},{"_id":"source/_posts/tools/vscode-keymap.md","hash":"5e1b5ba908a680d2a4700a3c6f6d036e89ef6d07","modified":1628304877759},{"_id":"source/_posts/uni-app/custom-if.md","hash":"bbc57044cde0790424d87a58eef0faae6d048ac3","modified":1623636949882},{"_id":"source/_posts/uni-app/com-status-bar.md","hash":"13d970336a2e58b630b6ac70cb713053b0b98989","modified":1623636701625},{"_id":"source/_posts/uni-app/com-nav-bar.md","hash":"1b14b05da714656ebceaf3a283f80768c8b9c0ff","modified":1623636698601},{"_id":"source/_posts/uni-app/env.md","hash":"87b9bb2ef8f4ef4df29e320d4bb922af0338c63f","modified":1628304412587},{"_id":"source/_posts/uni-app/h5-tree-shaking.md","hash":"9d460600b94f343fce36e62e974b931cb8cafdfd","modified":1623636716300},{"_id":"source/_posts/uni-app/error-catch.md","hash":"58653b724310166929cb0b840563d7237f75046a","modified":1628309474040},{"_id":"source/_posts/uni-app/fix-bug.md","hash":"8c94bd6f101af3b35637a6f0c94ca9c6c5a10e9f","modified":1628307055555},{"_id":"source/_posts/uni-app/rpx.md","hash":"bac01aecd46e016c046c2ceab6705ad97da3a0d9","modified":1628305900933},{"_id":"source/_posts/uni-app/longpress-copy.md","hash":"403ec88b366e3dd60eddac7e8d761f53fb8d59e6","modified":1628304770241},{"_id":"source/_posts/uni-app/subPackages.md","hash":"5608e437483fb8d71a8df7e197dbb174d65317a8","modified":1628306508086},{"_id":"source/_posts/uni-app/thread-loader.md","hash":"07d03644fbea23f7d9627e3d6b3e7bd282f6ad13","modified":1628307755541},{"_id":"source/_posts/vue/define-reactive.md","hash":"c2e3853a29c5c769d3123b01e20da149d55ec9f9","modified":1623651214262},{"_id":"source/_posts/vue/define-property.md","hash":"57e5f1c82851f8e6df34d8de79cf36b25fbd1ec4","modified":1623636756540},{"_id":"source/_posts/vue/global-style-file.md","hash":"b10417b24fc3bb910bec4261bc3868b0c47d6e12","modified":1628308099330},{"_id":"source/_posts/vue/define-unreactive.md","hash":"9a350cfdaffc14a8cf1fcadb4f01fcfe5f1e6d83","modified":1628308932800},{"_id":"source/_posts/vue/learn-node-reuse.md","hash":"801735f4f0f7d5ace0a232c2e229a80626870525","modified":1624201136392},{"_id":"source/_posts/vue/mount-flow.md","hash":"929d920aa9a20c567c32d2d2f2459c6a4a686608","modified":1623636799207},{"_id":"source/_posts/vue/vue-runtime-compile.md","hash":"b8c5e00c3d2d8149f7fcbbcf6a1536365a455042","modified":1623636905036},{"_id":"source/_posts/vue/vue-router.md","hash":"9093f0cf0c29fab4ca239c9a6dc7f4d4a0457359","modified":1623636897200},{"_id":"source/_posts/vue/vue-error.md","hash":"dff27a4b2771565b9141a1d0e7d2e06f6107fc33","modified":1623636886754},{"_id":"source/_posts/webpack/cdn-switch.md","hash":"2abf8fe5d5640a87510afe821879ff511f0eeacf","modified":1623637043853},{"_id":"source/_posts/webpack/chunk-bundle.md","hash":"7fdd763b34bdb691fb0e105e5a2964f53a85d687","modified":1623636931868},{"_id":"source/_posts/webpack/tapable.md","hash":"ccc8e3aa6f3bd74bef29bdcaf962a34444e85446","modified":1628304723838},{"_id":"source/_posts/webpack/sourcemap.md","hash":"2d46fdf2049f588316512258ef5626adff685fe6","modified":1628306043576},{"_id":"source/_posts/webpack/function-constructor.md","hash":"e0d135ac5eb08334b51840cf342aacbb2f4b17da","modified":1628304349779},{"_id":"source/_posts/weixin-mp/scan-code.md","hash":"e6356902d8fcce50bfcf9aa2ac3e23299594a38a","modified":1628306949235},{"_id":"source/_posts/webpack/work-flow.md","hash":"ff834be1a3bd126be4daa5a09074e6d281226733","modified":1628305723754},{"_id":"source/_posts/weixin-mp/devtool-tips.md","hash":"3f35a8625421f122e9ac8cde3aade8f4714d92ed","modified":1628309374877},{"_id":"source/_posts/weixin-mp/scroll-view.md","hash":"348ae8d2d49e0c60d4184fd14041b1afb273c0c3","modified":1628308723449},{"_id":"source/_posts/weixin-mp/share.md","hash":"15a4923cc1754c029fd6dfb4509d25e9e3b6521c","modified":1628310592414},{"_id":"source/_posts/weixin-mp/webview.md","hash":"709e70a75c68669d8273d9f684cc7ba3c5a6d705","modified":1628309241169},{"_id":"source/images/2019060103.png","hash":"e006aaa9b84ca083eb0883bf1da2094868e3a800","modified":1622470617395},{"_id":"source/images/2019060301.png","hash":"13c2ba79869461361cfb2a70e6efbaee2a32f481","modified":1622470617437},{"_id":"source/images/2019061301.png","hash":"5709f5d12881cb9ee269361b36f4968c7d070cf3","modified":1622470617587},{"_id":"source/images/2019061302.png","hash":"c8e390dad0e76b1fc5eff332a77456d0e8eee094","modified":1622470617625},{"_id":"source/images/2019090102.png","hash":"bbfe3d9b0ed59bc6f69c7cbd21bf01a11f465ba4","modified":1622470617883},{"_id":"themes/icarus/layout/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"themes/icarus/layout/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"themes/icarus/layout/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"themes/icarus/layout/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"themes/icarus/layout/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"themes/icarus/include/schema/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"themes/icarus/include/schema/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"themes/icarus/include/schema/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"themes/icarus/include/schema/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"themes/icarus/include/schema/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"source/images/2019060101.jpeg","hash":"8558932f2c9130299004f8ce3885a6ce2dd39dc7","modified":1622470617339},{"_id":"source/images/2019060102.png","hash":"ac4f710f8e2e4d4316edace2bf9032260c2a3e6b","modified":1622470617353},{"_id":"themes/icarus/package.json","hash":"6842501b858e51ddb7f5c5a4fe9bf2942e2d0977","modified":1622358192576},{"_id":"themes/icarus/include/config.js","hash":"1ff0f174e9670074ad2bee890d5b6da486800c9a","modified":499162500000},{"_id":"themes/icarus/LICENSE","hash":"86037e5335a49321fa73b7815cab542057fac944","modified":499162500000},{"_id":"themes/icarus/include/dependency.js","hash":"d30dbcefd58619f6705d6369b644bc7ba44d2421","modified":499162500000},{"_id":"themes/icarus/include/register.js","hash":"a974b56a1fbb254f1ae048cc2221363faaccec25","modified":499162500000},{"_id":"themes/icarus/CONTRIBUTING.md","hash":"70254c6778c1e41bb2ff222bbf3a70b2239b9bc1","modified":499162500000},{"_id":"themes/icarus/README.md","hash":"247ec8047ee3105d31099dd8e6ca498b6bff1336","modified":499162500000},{"_id":"themes/icarus/languages/de.yml","hash":"01d9c27c3c9224d8c58b1cf7099ef008b9411a45","modified":499162500000},{"_id":"themes/icarus/languages/es.yml","hash":"48fe3d7d304239b5e5e93f63600093700d6f0fed","modified":499162500000},{"_id":"themes/icarus/languages/en.yml","hash":"1bdb74288808c4d306b46630860e586a1fcd88a7","modified":1622469674193},{"_id":"themes/icarus/languages/fr.yml","hash":"14765cc6216b4af5a05341315c9f6ee54d636a78","modified":499162500000},{"_id":"themes/icarus/languages/id.yml","hash":"c04fca89e536d539a8bf95980bff7dff79125ba3","modified":499162500000},{"_id":"themes/icarus/languages/ko.yml","hash":"f2211a8ca1d73f05a1c931aa11accb4e34c483c4","modified":499162500000},{"_id":"themes/icarus/languages/pl.yml","hash":"612639b0e0a15185c12eecfe3e8913b629ecdfdf","modified":499162500000},{"_id":"themes/icarus/languages/ja.yml","hash":"7568f246a21813527ccea8a1da72a9526aa2d233","modified":499162500000},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"531b22c71fab8aae60ddc7599aaa5f46140cf2c1","modified":499162500000},{"_id":"themes/icarus/languages/ru.yml","hash":"bf784c6f31e8fb7ed78509468bddecd447c3b73b","modified":499162500000},{"_id":"themes/icarus/languages/tr.yml","hash":"96d94f7a5d56b2682ae2792f0808139d4b950704","modified":499162500000},{"_id":"themes/icarus/languages/tk.yml","hash":"e5b9b369bbcf90c199a65a877eb75fba05cd7f90","modified":499162500000},{"_id":"themes/icarus/languages/vn.yml","hash":"64307bfa16d851334e2f37a29a84d644624c2060","modified":499162500000},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"92f8cf599ad06bb14f79f4806ac4c695f60044d7","modified":499162500000},{"_id":"themes/icarus/layout/archive.jsx","hash":"05677e93d4a43f417dbbf0d63ca37a99e6349e3b","modified":499162500000},{"_id":"themes/icarus/layout/index.jsx","hash":"0a84a2348394fa9fc5080dd396bd28d357594f47","modified":499162500000},{"_id":"themes/icarus/layout/category.jsx","hash":"fd15e4eac32de9ac8687aeb3dbe179ab61375700","modified":499162500000},{"_id":"themes/icarus/layout/categories.jsx","hash":"b8ad43e28a4990d222bfbb95b032f88555492347","modified":499162500000},{"_id":"themes/icarus/layout/layout.jsx","hash":"a5829907b219e95266f7ed5ee6203e60e2273f93","modified":499162500000},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"82ff607b1671b88d259d10b6ce8ca1bb05b2cff4","modified":1622470106084},{"_id":"themes/icarus/layout/page.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":499162500000},{"_id":"themes/icarus/layout/post.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":499162500000},{"_id":"themes/icarus/layout/tag.jsx","hash":"d2f18cac32ca2725d34ccff3f2051c623be6c892","modified":499162500000},{"_id":"themes/icarus/layout/tags.jsx","hash":"2c42cb64778235dd220c563a27a92108ddc50cc4","modified":499162500000},{"_id":"themes/icarus/scripts/index.js","hash":"0c666db6fcb4ffc4d300f4e108c00ee42b1cbbe6","modified":499162500000},{"_id":"themes/icarus/include/migration/head.js","hash":"269ba172013cbd2f10b9bc51af0496628081329b","modified":499162500000},{"_id":"themes/icarus/include/migration/v3_v4.js","hash":"9faf2184d7fe87debfbe007f3fc9079dcbcafcfe","modified":499162500000},{"_id":"themes/icarus/include/schema/config.json","hash":"ac633f9d349bca4f089d59d2c3738b57376f1b31","modified":499162500000},{"_id":"themes/icarus/include/migration/v2_v3.js","hash":"3ccb2d2ce11018bebd7172da66faecc3983bff00","modified":499162500000},{"_id":"themes/icarus/include/style/base.styl","hash":"2bca6ad099949d52236c87db8db1002ffb99774c","modified":499162500000},{"_id":"themes/icarus/include/style/article.styl","hash":"580b1e9bd356ed6781c32ccc49c6fa3486b94620","modified":499162500000},{"_id":"themes/icarus/include/style/button.styl","hash":"0fb35b4786be1b387c751fa2849bc71523fcedd4","modified":499162500000},{"_id":"themes/icarus/include/style/card.styl","hash":"f78674422eb408cd17c17bbdc3ee1ebe4a453e05","modified":499162500000},{"_id":"themes/icarus/include/style/codeblock.styl","hash":"30bee4cf6792e9665eb648cc20b352d9eaff1207","modified":499162500000},{"_id":"themes/icarus/include/style/donate.styl","hash":"8d0af00628c13134b5f30a558608e7bebf18c2ec","modified":499162500000},{"_id":"themes/icarus/include/style/navbar.styl","hash":"ecc73c8ad504c0fa4bb910eb51500c14e0a8d662","modified":499162500000},{"_id":"themes/icarus/include/style/helper.styl","hash":"9f3393e6122cc9f351091bfab960674e962da343","modified":499162500000},{"_id":"themes/icarus/include/style/pagination.styl","hash":"b81bcd7ff915b4e9299533addc01bc4575ec35e3","modified":499162500000},{"_id":"themes/icarus/include/style/plugin.styl","hash":"679b61b5fc5b3281735a21c37aeb64229d9c51ea","modified":499162500000},{"_id":"themes/icarus/include/style/responsive.styl","hash":"207083fe287612cddee6608b541861b14ac8de81","modified":499162500000},{"_id":"themes/icarus/include/style/footer.styl","hash":"a4ad715dee38b249538ac6cce94efc9b355a904b","modified":1628311082458},{"_id":"themes/icarus/include/util/console.js","hash":"59cf9d277d3ac85a496689bd811b1c316001641d","modified":499162500000},{"_id":"themes/icarus/include/style/timeline.styl","hash":"ea61798a09bffdda07efb93c2ff800b63bddc4c4","modified":499162500000},{"_id":"themes/icarus/include/style/search.styl","hash":"416737e1da4e7e907bd03609b0fee9e2aacfe56c","modified":499162500000},{"_id":"themes/icarus/include/style/widget.styl","hash":"c746902251136544eb3fe523235b3183f4189460","modified":499162500000},{"_id":"themes/icarus/layout/common/donates.jsx","hash":"889fb0a7ccc502f0a43b4a18eb330e351e50493c","modified":499162500000},{"_id":"themes/icarus/layout/common/comment.jsx","hash":"427089c33002707b76e2f38709459a6824fd0f9b","modified":499162500000},{"_id":"themes/icarus/layout/common/footer.jsx","hash":"585807b19409192fa6b725b59fb79a783b2a7e21","modified":1628311273175},{"_id":"themes/icarus/layout/common/article.jsx","hash":"63482f43590bce0095e472f9c737743bda1dd186","modified":1622472269607},{"_id":"themes/icarus/layout/common/navbar.jsx","hash":"fcd9fd4624dee49207ef09ea2a1c63f524f3710c","modified":499162500000},{"_id":"themes/icarus/layout/common/plugins.jsx","hash":"f6826c1a5f5f59f4a0aa00c63bdb0ad4ff4eab69","modified":499162500000},{"_id":"themes/icarus/layout/common/scripts.jsx","hash":"0fe1fddab431fb9f63906d8c480d5cd6b33abc32","modified":499162500000},{"_id":"themes/icarus/layout/common/search.jsx","hash":"6f244a37293031670a2964fe424ecd062e591d7b","modified":499162500000},{"_id":"themes/icarus/layout/common/head.jsx","hash":"d801f584707519683c79f1b8134ef958af7fb136","modified":1622471930863},{"_id":"themes/icarus/layout/common/share.jsx","hash":"c9fb0319ad5e5a10ad3636b26a6c2afed14c590f","modified":499162500000},{"_id":"themes/icarus/layout/common/widgets.jsx","hash":"689cf4a6b79337b11d1d56afa9dda09223a809a1","modified":499162500000},{"_id":"themes/icarus/layout/plugin/animejs.jsx","hash":"e2aa27c3501a58ef1e91e511557b77395c2c02aa","modified":499162500000},{"_id":"themes/icarus/layout/plugin/back_to_top.jsx","hash":"7fc0c5aaabd7d0eaff04cb68ec139442dc3414e8","modified":499162500000},{"_id":"themes/icarus/layout/widget/profile.jsx","hash":"0d3a7fd922c12cc45d2c8d26a8f4d3a9a6ed0ae0","modified":499162500000},{"_id":"themes/icarus/source/css/cyberpunk.styl","hash":"ae17d3528df0c3f089df14a06b7bd82f1bc5fed9","modified":499162500000},{"_id":"themes/icarus/source/css/default.styl","hash":"b01da3028e5a1267a40aaae5c86a11187a2259e3","modified":499162500000},{"_id":"themes/icarus/source/css/style.styl","hash":"5b9815586e993a6ccbe8cdcfc0c65ea38fc315ac","modified":499162500000},{"_id":"themes/icarus/source/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":499162500000},{"_id":"themes/icarus/source/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":499162500000},{"_id":"themes/icarus/source/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":499162500000},{"_id":"themes/icarus/source/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":499162500000},{"_id":"themes/icarus/source/js/animation.js","hash":"12cedd5caaf9109eed97e50eeab8f883f6e49be3","modified":499162500000},{"_id":"themes/icarus/source/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":499162500000},{"_id":"themes/icarus/source/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":499162500000},{"_id":"themes/icarus/source/js/main.js","hash":"13e4b1c4fa287f3db61aae329ad093a81992f23d","modified":499162500000},{"_id":"themes/icarus/include/schema/common/article.json","hash":"8d78149f44629d0848921c6fb9c008b03cef3116","modified":499162500000},{"_id":"themes/icarus/include/schema/common/comment.json","hash":"bd30bd9ffc84e88e704384acdfcaab09019a744f","modified":499162500000},{"_id":"themes/icarus/include/schema/common/donates.json","hash":"ae86e6f177bedf4afbe638502c12635027539305","modified":499162500000},{"_id":"themes/icarus/include/schema/common/footer.json","hash":"09d706cbb94d6da9a0d15c719ce7139325cae1c7","modified":499162500000},{"_id":"themes/icarus/include/schema/common/head.json","hash":"98889f059c635e6bdbd51effd04cf1cf44968a66","modified":499162500000},{"_id":"themes/icarus/include/schema/common/navbar.json","hash":"6691e587284c4cf450e0288680d5ff0f3565f090","modified":499162500000},{"_id":"themes/icarus/include/schema/common/plugins.json","hash":"6036a805749816416850d944f7d64aaae62e5e75","modified":499162500000},{"_id":"themes/icarus/include/schema/common/providers.json","hash":"97ec953d497fb53594227ae98acaef8a8baa91da","modified":499162500000},{"_id":"themes/icarus/include/schema/common/search.json","hash":"985fbcbf47054af714ead1a124869d54f2a8b607","modified":499162500000},{"_id":"themes/icarus/include/schema/common/share.json","hash":"cf4f9ff4fb27c3541b35f57db355c228fa6873e4","modified":499162500000},{"_id":"themes/icarus/include/schema/common/sidebar.json","hash":"eb241beaec4c73e3085dfb3139ce72e827e20549","modified":499162500000},{"_id":"themes/icarus/include/schema/common/widgets.json","hash":"d000b4d1d09bdd64756265aa4cd2ea980ab7ddc7","modified":499162500000},{"_id":"themes/icarus/include/schema/plugin/animejs.json","hash":"e62ab6e20bd8862efa1ed32e7c0db0f8acbcfdec","modified":499162500000},{"_id":"themes/icarus/include/schema/plugin/back_to_top.json","hash":"dc0febab7e7b67075d0ad3f80f5ec8b798b68dea","modified":499162500000},{"_id":"themes/icarus/include/schema/widget/profile.json","hash":"690ee1b0791cab47ea03cf42b5b4932ed2aa5675","modified":499162500000},{"_id":"themes/icarus/source/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":499162500000},{"_id":"themes/icarus/source/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":499162500000},{"_id":"source/images/2021061401.gif","hash":"c22634143a7ec86b3f4c367a623ca802b478f1e8","modified":1623668291611},{"_id":"source/images/2021061402.svg","hash":"8a0bf1dd0d73133b136672dffb5de6759a225364","modified":1566122887000},{"_id":"source/images/2019090101.jpg","hash":"782afcf2bf962bbfd93e36ff29f123274bdab3e3","modified":1622470617851},{"_id":"public/js/algolia.js","hash":"a8df0c0abeeb4ee1d2d720161f3aea7339380704","modified":1628311490341},{"_id":"public/js/google_cse.js","hash":"1a9881669dfdeb2b3214074eee0d3e01e52db2c4","modified":1628311490341},{"_id":"public/js/insight.js","hash":"86bbdb7305d9bf19ad62d2ca2cf169fc8d9f9d31","modified":1628311490341},{"_id":"public/js/toc.js","hash":"da6fb757a1b083b8ed138bf29aad3a7bf8ec4f11","modified":1628311490341},{"_id":"public/content.json","hash":"6af26d88c915956fc5d7bc7a9cf04c3a61a19df4","modified":1628311490341},{"_id":"public/manifest.json","hash":"0b41515bdec5d5b29f13f5d431a58c105806f5c5","modified":1628311490341},{"_id":"public/categories/index.html","hash":"7037f72ba221bbc24828d60347226c0516bc163a","modified":1628311490341},{"_id":"public/2021/08/03/blogs/csp/index.html","hash":"ece42f1f77c3e817979e56c79981c8b473b753a7","modified":1628311490341},{"_id":"public/2021/08/02/webpack/function-constructor/index.html","hash":"790ee9e6d567ea3e48c0b65977d7e05e93fafc69","modified":1628311490341},{"_id":"public/2021/08/01/css/margin-bottom-ios/index.html","hash":"4c8736cf5cbd5047bca117ce2f419dc50e2a2955","modified":1628311490341},{"_id":"public/2021/08/01/uni-app/env/index.html","hash":"35329b4e47f81bc889ed85b23f9e27ea6defc92c","modified":1628311490341},{"_id":"public/2021/07/24/webpack/tapable/index.html","hash":"b6f9ca70333c7c473dc0da1b0530021ae4d8e778","modified":1628311490341},{"_id":"public/2021/07/20/uni-app/longpress-copy/index.html","hash":"1f978c1f8e63b781d2983986021c6f0d17028caa","modified":1628311490341},{"_id":"public/2021/07/19/weixin-mp/share/index.html","hash":"af4398f3a84d9008e9978c3ebb104986eb0a26e0","modified":1628311490341},{"_id":"public/2021/07/12/tools/vscode-keymap/index.html","hash":"8f4d0fd6e9f5df23307b122f7b6f5a9e0b5196ea","modified":1628311490341},{"_id":"public/2021/07/12/webpack/work-flow/index.html","hash":"418318764460cd11fe9c183d19555f10ae79daba","modified":1628311490341},{"_id":"public/2021/07/08/think/a-hard-experience/index.html","hash":"5179fd982972db48ac716986261fe162c096cfc4","modified":1628311490341},{"_id":"public/2021/07/07/css/white-space/index.html","hash":"309a80f560f697102f8fc151164065743e3d3094","modified":1628311490341},{"_id":"public/2021/07/07/tools/code-statistics/index.html","hash":"7409395acd362212c47591085fd00e915224bb98","modified":1628311490341},{"_id":"public/2021/06/30/weixin-mp/scan-code/index.html","hash":"422f54c4010257a98762b50b3d9585d5dd7209b1","modified":1628311490341},{"_id":"public/2021/06/29/uni-app/fix-bug/index.html","hash":"3236f4dcbc29ab10a3c3f4418e3118e87c3ad3b9","modified":1628311490341},{"_id":"public/2021/06/29/uni-app/rpx/index.html","hash":"285df765c7a8717fb4724c5e61c533df5479b7fb","modified":1628311490341},{"_id":"public/2021/06/29/uni-app/subPackages/index.html","hash":"7f9c5754584088535d5bb08ea7379584d1015913","modified":1628311490341},{"_id":"public/2021/06/27/uni-app/thread-loader/index.html","hash":"e6cc325d7051d92e90d0f7bbe7fd2d568bfb4fd8","modified":1628311490341},{"_id":"public/2021/06/22/architecture/qiankun/index.html","hash":"e3b0e517ac968b3799228fb07af1c77fb694f56a","modified":1628311490341},{"_id":"public/2021/06/22/vue/global-style-file/index.html","hash":"301a240a08358620910f0da74bace58a0d325138","modified":1628311490341},{"_id":"public/2021/06/20/blogs/base64/index.html","hash":"5297a6cd851a6e513a4781c9e0d59ecf30bf3227","modified":1628311490341},{"_id":"public/2021/06/20/webpack/sourcemap/index.html","hash":"56f20c0b0191137558f67cc9a64891d17193f717","modified":1628311490341},{"_id":"public/2021/06/17/weixin-mp/scroll-view/index.html","hash":"a3fc0d6dc0fed4421fefea031e315b0b9a37c9ea","modified":1628311490341},{"_id":"public/2021/06/15/vue/define-unreactive/index.html","hash":"68895b8a08b05714ba167b1d6d008f57d8d7d650","modified":1628311490341},{"_id":"public/2021/06/12/weixin-mp/devtool-tips/index.html","hash":"65d8b3679a8a198c7004f7d1a91bf5b2d2fb8dc3","modified":1628311490341},{"_id":"public/2021/06/08/uni-app/bundle-path/index.html","hash":"4d2f81ff19fe6331446c29b597b4707925eba763","modified":1628311490341},{"_id":"public/2021/06/07/uni-app/attentions/index.html","hash":"61044b121896ab8631da46a93d5420e52c6c28ff","modified":1628311490341},{"_id":"public/2021/06/07/weixin-mp/webview/index.html","hash":"0a57ada86f4762281c2d6388144278271e240764","modified":1628311490341},{"_id":"public/2021/06/04/blogs/prototype/index.html","hash":"01738fec87abed9380d3037d0b81a9474fa99c92","modified":1628311490341},{"_id":"public/2021/06/04/uni-app/error-catch/index.html","hash":"1a97dff53ad19104cf04b76ca77bf67a42a1eede","modified":1628311490341},{"_id":"public/2021/06/03/blogs/deep-clone/index.html","hash":"b1e548764698138c576b662f73f9547a0c54df4c","modified":1628311490341},{"_id":"public/2021/06/02/css/curved-radius/index.html","hash":"01daba821dbde775e6664f1641c8e6043bc8105f","modified":1628311490341},{"_id":"public/2021/06/02/webpack/chunk-bundle/index.html","hash":"9fde64d1bdfef0d18684514d4927dfbbea4b031a","modified":1628311490341},{"_id":"public/2021/05/31/blogs/throttle-debounce/index.html","hash":"a51cb84a675cbf0475a90059a875dec33b2c740a","modified":1628311490341},{"_id":"public/2021/05/27/webpack/cdn-switch/index.html","hash":"d58e8b57e284fb3680a829c62b6f9d9d650f0563","modified":1628311490341},{"_id":"public/2021/05/20/tools/npm-learn/index.html","hash":"09f73890f2a48d0483b5240bddb2c7de6f5194ac","modified":1628311490341},{"_id":"public/2021/05/10/think/fanganfenxi/index.html","hash":"735c21fcd4ed29f6a2cc9550f1cbd23998ddfdc7","modified":1628311490341},{"_id":"public/2021/05/10/uni-app/h5-tree-shaking/index.html","hash":"26c018dedd2b66e7998541bdbaee6298372cb04d","modified":1628311490341},{"_id":"public/2021/04/30/tools/pipeline-groovy/index.html","hash":"1a3c84ff1cdc1e86d425347d31c0ffaab470a9ca","modified":1628311490341},{"_id":"public/2021/04/07/uni-app/custom-if/index.html","hash":"2abfccf69997e8dbef3dc8f8113454a654a65d2c","modified":1628311490341},{"_id":"public/2020/11/20/uni-app/com-icons/index.html","hash":"1f822641947b578780c483cc67082a7cb676cee0","modified":1628311490341},{"_id":"public/2020/11/20/uni-app/com-nav-bar/index.html","hash":"dcda994db6a8a3d98e01abc3845313c870d9a8b2","modified":1628311490341},{"_id":"public/2020/11/20/uni-app/com-status-bar/index.html","hash":"4c093d7692cc92ae57cc3982b5e251d50ee19d75","modified":1628311490341},{"_id":"public/2020/10/02/blogs/https/index.html","hash":"5a388b6e478c134fb47c4f79691cad60c76c7917","modified":1628311490341},{"_id":"public/2020/10/01/tools/https-through-fiddler/index.html","hash":"da03001ece4807a216a00dc37955844cd876db64","modified":1628311490341},{"_id":"public/2020/08/01/vue/vue-runtime-compile/index.html","hash":"03c6c392e145ae8d902e166df2be3e68efedc891","modified":1628311490341},{"_id":"public/2020/07/09/vue/vue-error/index.html","hash":"c05c27a1de6933bb954e9e71bc65ab5fc27ad177","modified":1628311490341},{"_id":"public/2020/06/18/css/inline-tag/index.html","hash":"022ca0a1d5e27dd66fdd32d4c1c2803cd1b4c99d","modified":1628311490341},{"_id":"public/2020/05/08/blogs/save-base64/index.html","hash":"d304651c408f77966876b94a594cdb7453ea84a0","modified":1628311490341},{"_id":"public/2020/05/03/css/css-coupon/index.html","hash":"6d6302f73bef2b182654cbbdb0f5fe0a146325e7","modified":1628311490341},{"_id":"public/2020/04/02/vue/mount-flow/index.html","hash":"1412865597d93aed24b51f4dfe5c141ac0c375ad","modified":1628311490341},{"_id":"public/2020/03/20/blogs/in-operator/index.html","hash":"33839c5141142179b1e959ac2a847f5abe337536","modified":1628311490341},{"_id":"public/2020/03/17/blogs/proxy/index.html","hash":"2ab7f10d420c8c7b0ae881b478cbdde5dde56ff1","modified":1628311490341},{"_id":"public/2020/03/15/blogs/proxy-reflect/index.html","hash":"314f30fc7f8bfef12453f7e99346bc1ef8e49eb5","modified":1628311490341},{"_id":"public/2020/02/02/tools/fiddler-debug-online/index.html","hash":"fbb0e1de9e49c68c3cfda3bf6ccb7dcb9d75c5c7","modified":1628311490341},{"_id":"public/2020/02/01/tools/charles-rewrite-header/index.html","hash":"463de4eb9f31a8f1ccdb6f114f9b2e40683f486b","modified":1628311490341},{"_id":"public/2020/01/20/nuxt/navigator/index.html","hash":"8f148c6ce6c5aabab2e42dc60b1aec154ed33e2e","modified":1628311490341},{"_id":"public/2019/12/06/blogs/linux-command/index.html","hash":"7be81042118e70758d163f6f449498e16b74e9ec","modified":1628311490341},{"_id":"public/2019/12/06/vue/learn-node-reuse/index.html","hash":"2eb7e99ac170df4c7c6bb702868e4e90de817b80","modified":1628311490341},{"_id":"public/2019/12/01/tools/git/index.html","hash":"caf08d2355492c916103544fbf11ded9a182ec75","modified":1628311490341},{"_id":"public/2019/11/03/vue/define-property/index.html","hash":"e5dee439c9fbe3b60c891dfd51ce2d3771aeeb46","modified":1628311490341},{"_id":"public/2019/11/03/vue/define-reactive/index.html","hash":"758636fab1e04624c7029596da8286be44ff097a","modified":1628311490341},{"_id":"public/2019/08/20/blogs/print/index.html","hash":"31404b5cba3cd7b95998f3acc26266098fc6f5b1","modified":1628311490341},{"_id":"public/2019/05/29/blogs/meta/index.html","hash":"2bee99f6381dba3dc942cafd5098d4f0f96f3d5e","modified":1628311490341},{"_id":"public/2019/05/10/blogs/flex-layout/index.html","hash":"315f30577ae962940d1d31ba680414fedd4a6950","modified":1628311490341},{"_id":"public/2019/04/16/blogs/regexpression/index.html","hash":"1cd857a0808eb1808e944ab6ca9a019396941d08","modified":1628311490341},{"_id":"public/2019/04/09/think/manage-time/index.html","hash":"a0f82492ebfd17504fac51cabf309ec47db4cf9f","modified":1628311490341},{"_id":"public/2019/03/07/blogs/incognito-mode/index.html","hash":"3f7fb98063da64b6ad0a374271b7e89294acce1a","modified":1628311490341},{"_id":"public/2019/03/02/blogs/role-auth-design/index.html","hash":"66d3dab4ecb82d2ac7f25643499ef6bc82266813","modified":1628311490341},{"_id":"public/2019/02/04/blogs/code-clean/index.html","hash":"1abb1e426414cce4fd6a8426fb1cd9cc2c8757b8","modified":1628311490341},{"_id":"public/2018/11/05/blogs/baidu-map-mark/index.html","hash":"84a2e7de2d2c7d40d6b277a2f8efce3dda665d07","modified":1628311490341},{"_id":"public/2018/08/20/vue/vue-router/index.html","hash":"5d565a6aff93af6ac2781be3063b266dc4b7ee83","modified":1628311490341},{"_id":"public/2018/07/03/blogs/property-attribute/index.html","hash":"8bb1a245548ceef0db44399b7dac447a85f93ee9","modified":1628311490341},{"_id":"public/archives/index.html","hash":"dc3ed5c8cb348c1b80ff0056159e70ff48acf7cd","modified":1628311490341},{"_id":"public/archives/page/2/index.html","hash":"6e297d355724ce84b404dffec8a73539d16886a0","modified":1628311490341},{"_id":"public/archives/page/3/index.html","hash":"0a246e1911fe52a0e8d54eec6fae3c959f36ab1b","modified":1628311490341},{"_id":"public/archives/page/4/index.html","hash":"2c87ef506ed4736d7b7727b9d8073c7ed5d1c0d8","modified":1628311490341},{"_id":"public/archives/page/5/index.html","hash":"86d3b7e28c306b02fd5f51f230bc37ea576a8a8d","modified":1628311490341},{"_id":"public/archives/page/6/index.html","hash":"e97383370afeb4e6ccc03f38f0bdab5d9f9f8ec2","modified":1628311490341},{"_id":"public/archives/page/7/index.html","hash":"af08b38ad16e5cada904d9621cc58c23df57ace8","modified":1628311490341},{"_id":"public/archives/page/8/index.html","hash":"d7c23346be5cbdd3e1142fa0e5e16efb3b8fe520","modified":1628311490341},{"_id":"public/archives/2018/index.html","hash":"325d184da05ae04ecc4696ed487400abed6bf4b9","modified":1628311490341},{"_id":"public/archives/2018/07/index.html","hash":"ca3c983b038ef698b87465c93c2f3d086d4e8b37","modified":1628311490341},{"_id":"public/archives/2018/08/index.html","hash":"ad89f0561ce138c92dda72240794c021749188cb","modified":1628311490341},{"_id":"public/archives/2018/11/index.html","hash":"6d7b150ffb63a66b74d83165307ba06b8a0b7746","modified":1628311490341},{"_id":"public/archives/2019/index.html","hash":"990ee6c080c1ed43527b1cb0d9e7c4eafd663f2a","modified":1628311490341},{"_id":"public/archives/2019/page/2/index.html","hash":"0f86fc6fbea08c28cb54ef086cbadc56d3b114f5","modified":1628311490341},{"_id":"public/archives/2019/02/index.html","hash":"dcaa0570db2fa10a45199dca7b8f4485167ebd13","modified":1628311490341},{"_id":"public/archives/2019/03/index.html","hash":"be4bcf25745c7079b965c20443c8c7711448454b","modified":1628311490341},{"_id":"public/archives/2019/04/index.html","hash":"22421b88fffb3b8cd4ec965c61acb2625fe0c21d","modified":1628311490341},{"_id":"public/archives/2019/05/index.html","hash":"ceb32ac1646c4991f6bb2af485afd829292fe64a","modified":1628311490341},{"_id":"public/archives/2019/08/index.html","hash":"c50260ee1420f35067964420a53c2e6965bcb7fe","modified":1628311490341},{"_id":"public/archives/2019/11/index.html","hash":"62d8921037e73fda5849a0f41bef6fc671556ddb","modified":1628311490341},{"_id":"public/archives/2019/12/index.html","hash":"cb841138d27123b159dd25071cb006394ed98609","modified":1628311490341},{"_id":"public/archives/2020/index.html","hash":"9c3e8561d1e016d8a09cfe35bfae441c195884ba","modified":1628311490341},{"_id":"public/archives/2020/page/2/index.html","hash":"f90a710a2e9260906691a0b4c796b47f40868387","modified":1628311490341},{"_id":"public/archives/2020/01/index.html","hash":"045631cbb735d9fdc59e4e5a3f7f3cd253ea5c92","modified":1628311490341},{"_id":"public/archives/2020/02/index.html","hash":"5f09edd9f59d624cfb5bcf93b1b935acaee21c9e","modified":1628311490341},{"_id":"public/archives/2020/03/index.html","hash":"5b72c807c58fb019beeabdde812f0b87ba40ad3b","modified":1628311490341},{"_id":"public/archives/2020/04/index.html","hash":"b91e56625d227b9f0faf8705fd6fac1817dbaa13","modified":1628311490341},{"_id":"public/archives/2020/05/index.html","hash":"81c3b0e2c5b23f1a9b1ddda5f11b6e93fd109d9d","modified":1628311490341},{"_id":"public/archives/2020/06/index.html","hash":"b1c7e441cddef13eaeaf5e560a308933dafc55a7","modified":1628311490341},{"_id":"public/archives/2020/07/index.html","hash":"8357b3bfa134c15ef6ef479c215c9fc6f3a821f6","modified":1628311490341},{"_id":"public/archives/2020/08/index.html","hash":"412120cf6943217bd26a1062d0a337b0eb3ba348","modified":1628311490341},{"_id":"public/archives/2020/10/index.html","hash":"ca57b387661195284f1e9c4350550f7c3dbcb2a8","modified":1628311490341},{"_id":"public/archives/2020/11/index.html","hash":"a2873bd7bad8cff8a023c9c980b454a9e734117f","modified":1628311490341},{"_id":"public/archives/2021/index.html","hash":"12e1da268ddd31970b5cbcbceb08fed640ff128a","modified":1628311490341},{"_id":"public/archives/2021/page/2/index.html","hash":"3fcea433bfe1c5eccf99962fbc8e4160fd46df23","modified":1628311490341},{"_id":"public/archives/2021/page/3/index.html","hash":"c635ca017804193395baf4f865125091c516fb5f","modified":1628311490341},{"_id":"public/archives/2021/page/4/index.html","hash":"3825d62fb2aac0d0952ea404b6bc99f29d637f98","modified":1628311490341},{"_id":"public/archives/2021/04/index.html","hash":"bd2bad53611bd1af88b6abfb1289c230018b70ff","modified":1628311490341},{"_id":"public/archives/2021/05/index.html","hash":"b960b4f5b5a1d2545fe9853d297725a18d1562ed","modified":1628311490341},{"_id":"public/archives/2021/06/index.html","hash":"12b4a56ea66ac3bbe36b34cb972243226733aa79","modified":1628311490341},{"_id":"public/archives/2021/06/page/2/index.html","hash":"b7356aa6a8df031910ca82b00aa251767f288fc0","modified":1628311490341},{"_id":"public/archives/2021/07/index.html","hash":"e6e4ebc3636035119fb458c2734c61c084159ec4","modified":1628311490341},{"_id":"public/archives/2021/08/index.html","hash":"f6c92185655533adc700c94c0fa8172d16096d2f","modified":1628311490341},{"_id":"public/categories/工程化/index.html","hash":"6d4012391fccec57a9cfe30e314b282f9e8f3696","modified":1628311490341},{"_id":"public/categories/其它/index.html","hash":"5e61c8e5a7eee74d4809eb6d6377eaaa832ee401","modified":1628311490341},{"_id":"public/categories/web安全/index.html","hash":"8aa2221eff323417d2cc829e13bab13dacd8944a","modified":1628311490341},{"_id":"public/categories/js/index.html","hash":"436dac84de8adc0adecd705f8280f842abbd7236","modified":1628311490341},{"_id":"public/categories/css/index.html","hash":"be3b905e78508020fccc3df62a776cb119aab5f5","modified":1628311490341},{"_id":"public/categories/网络/index.html","hash":"e43d7f76ec21f3cb97a8b3c3afebeaea10f8f320","modified":1628311490341},{"_id":"public/categories/工具/index.html","hash":"2362f6d9b6b063559a489c8f89fdeea9fe42c891","modified":1628311490341},{"_id":"public/categories/工具/page/2/index.html","hash":"63ee6a5f7ead9d02e866732bd6b6d546e7c4a1e2","modified":1628311490341},{"_id":"public/categories/javascript/index.html","hash":"a9d222362c5eb957e8940fce028a6b6b869a4efb","modified":1628311490341},{"_id":"public/categories/H5/index.html","hash":"d322f46d2fe1b34d53eb2fe2b647fb7862e12443","modified":1628311490341},{"_id":"public/categories/html/index.html","hash":"263c4f7353a990a4cffb636515d66f473ebf8702","modified":1628311490341},{"_id":"public/categories/nuxt/index.html","hash":"e7d9a987467de13a311a21d11a6a5869775eb675","modified":1628311490341},{"_id":"public/categories/思考/index.html","hash":"323c6d054dd93b16ef4b17f8c0fd4789001d6066","modified":1628311490341},{"_id":"public/categories/uni-app/index.html","hash":"1261235cfe548a31d7196436507884d91a2905ec","modified":1628311490341},{"_id":"public/categories/uni-app/page/2/index.html","hash":"77dde1b22c152489d9b671fadb9394b043ba515c","modified":1628311490341},{"_id":"public/categories/vue/index.html","hash":"b5fbcf3f88eaf1831769457cfaebcb3fc26d0294","modified":1628311490341},{"_id":"public/categories/小程序/index.html","hash":"9ff1e3f5bbd492f8f4635c5651859ae98a1d427b","modified":1628311490341},{"_id":"public/index.html","hash":"f55155039ae4f9babbd1cab484662797081b55cb","modified":1628311490341},{"_id":"public/page/2/index.html","hash":"bee4b9e4087d401fa80ef30ba3413dca61895b2a","modified":1628311490341},{"_id":"public/page/3/index.html","hash":"a660d7fcfe3fca2b4107382a5e67d52cb5918893","modified":1628311490341},{"_id":"public/page/4/index.html","hash":"c8e60842d9d286aca1670f9d2d117bead68b21b3","modified":1628311490341},{"_id":"public/page/5/index.html","hash":"6d29f1e6988578b96aff412504b576f81d495216","modified":1628311490341},{"_id":"public/page/6/index.html","hash":"b7f973ea11f980c2825523cfea8de3d78de35b9e","modified":1628311490341},{"_id":"public/page/7/index.html","hash":"f32bced15667e0ee16f407fd3ffed5e25ac8a1bc","modified":1628311490341},{"_id":"public/page/8/index.html","hash":"c497cfd50356efd5b4a94a75fbfff148cac3223b","modified":1628311490341},{"_id":"public/tags/微前端/index.html","hash":"28162fbd3e55afbc76a57ac143b4d772d42b87d0","modified":1628311490341},{"_id":"public/tags/qiankun/index.html","hash":"3638b1755a064d7932b0c2ece72db046158ebf96","modified":1628311490341},{"_id":"public/tags/百度地图sdk/index.html","hash":"22da42373ceecf8033ce877591bcf1cabd3b4892","modified":1628311490341},{"_id":"public/tags/base64/index.html","hash":"24b5eb3f8163c1cdcde06263f607ecfbad061df6","modified":1628311490341},{"_id":"public/tags/CSP/index.html","hash":"6fd381ce528ab4bf6e27027852b48abccf35a450","modified":1628311490341},{"_id":"public/tags/js/index.html","hash":"893f2f8380efc34b07ada619790dd44cdcb0dcf0","modified":1628311490341},{"_id":"public/tags/布局/index.html","hash":"ec90a00295443fd677b0c48150d7fb1d13b7b799","modified":1628311490341},{"_id":"public/tags/https/index.html","hash":"83dcce4812afa93518310e631eca8c22f3fc0611","modified":1628311490341},{"_id":"public/tags/javascript/index.html","hash":"3f32682675f68326796c49c02326df8c7767bf8c","modified":1628311490341},{"_id":"public/tags/linux/index.html","hash":"286351b31a635258bb03532b83b162c2072bcea2","modified":1628311490341},{"_id":"public/tags/H5/index.html","hash":"06ca799e13c231397a396a113a5a87b9db400a09","modified":1628311490341},{"_id":"public/tags/html/index.html","hash":"ea727919eebaf304165fdb87b1c7c43902f7ab4a","modified":1628311490341},{"_id":"public/tags/原型链/index.html","hash":"3a7a9b710f935f44a4d38859a6d5165561cf392b","modified":1628311490341},{"_id":"public/tags/代理/index.html","hash":"f3d3d0a29e94af9ad461cad773446601aebe3a9d","modified":1628311490341},{"_id":"public/tags/正则/index.html","hash":"7f06cac2e43b74f3ee63239fa8ccf87c873cf396","modified":1628311490341},{"_id":"public/tags/权限/index.html","hash":"aaa1fd09f927568d3cefb165fe88815151e742dc","modified":1628311490341},{"_id":"public/tags/运营后台/index.html","hash":"dc0770fef86784b754d0de18f47e0aeb84d063e6","modified":1628311490341},{"_id":"public/tags/防抖节流/index.html","hash":"0d3737a96d98f78a18e9fdaeb4a338bec397dea5","modified":1628311490341},{"_id":"public/tags/css/index.html","hash":"012f7ffc2d33ce8118e77f0317fab9ce4d003549","modified":1628311490341},{"_id":"public/tags/nuxt/index.html","hash":"572152af6df6e8c9396b6a9e085cb6c7fa24bdbf","modified":1628311490341},{"_id":"public/tags/charles/index.html","hash":"1a4ac724e12b5ae9fbb1186c1f65d0e372c939cb","modified":1628311490341},{"_id":"public/tags/debug/index.html","hash":"fb16c33bf059327f43bf830096096c56dfbf37d0","modified":1628311490341},{"_id":"public/tags/git/index.html","hash":"62e6cd2d4bba59a0a7f6b0f34a0b7ab43a04187a","modified":1628311490341},{"_id":"public/tags/fiddler/index.html","hash":"30f340544c3ff54a58a73eeef6ee12e79a32a1e9","modified":1628311490341},{"_id":"public/tags/npm/index.html","hash":"405851d9198a996f01953ebf0e6dad60bf776708","modified":1628311490341},{"_id":"public/tags/Jenkins/index.html","hash":"3b8c8d87a3394de68d8d6dbeda2c1aedfb4802a5","modified":1628311490341},{"_id":"public/tags/vscode/index.html","hash":"c4b777e8c24068d0d9a6b88cf65ae2eae423435f","modified":1628311490341},{"_id":"public/tags/学习/index.html","hash":"2a2d7ece6623046cf51d8603c6ec607b2a445bf8","modified":1628311490341},{"_id":"public/tags/uni-app/index.html","hash":"ca158636d445ffb781fa4bec76ce69fc899d3e25","modified":1628311490341},{"_id":"public/tags/uni-app/page/2/index.html","hash":"0e36477d4da06d907dfe7609c8022e066782a706","modified":1628311490341},{"_id":"public/tags/打包路径/index.html","hash":"d1b17262188f943e08736fd56ace4e6883d41e60","modified":1628311490341},{"_id":"public/tags/组件/index.html","hash":"1517d576d92e004cd68d08bc7d2eb0f8539c7777","modified":1628311490341},{"_id":"public/tags/条件编译/index.html","hash":"9ea22d36a7f362749a9a8ab614314e8453535458","modified":1628311490341},{"_id":"public/tags/环境变量/index.html","hash":"ba7c33b0fa2bd54638108a2ef97aa485e705c2c6","modified":1628311490341},{"_id":"public/tags/错误捕获/index.html","hash":"afe5742de45db5339df8fc52fcc87001ea05f40f","modified":1628311490341},{"_id":"public/tags/rpx/index.html","hash":"a2a34686eee593bc26e6a77bea932c6c356286f0","modified":1628311490341},{"_id":"public/tags/treeShaking/index.html","hash":"8e7bdeb273618db2a37aa595d460b3f424d5ed11","modified":1628311490341},{"_id":"public/tags/长按复制/index.html","hash":"01dc93b8ab0db3b763e6cff0cfdf30a75d47b703","modified":1628311490341},{"_id":"public/tags/分包优化/index.html","hash":"f21620161e386a26aabc518eb4f1056b613b30cd","modified":1628311490341},{"_id":"public/tags/thread-loader/index.html","hash":"68853df4c0f96312d670e9e4f0cd4190a8bd969f","modified":1628311490341},{"_id":"public/tags/vue/index.html","hash":"1156cf9aeac0a41b8b014e2e79561cc087b8f69b","modified":1628311490341},{"_id":"public/tags/全局样式/index.html","hash":"e805214893fc0931369264195e3767ffe6a84ea7","modified":1628311490341},{"_id":"public/tags/vue-cli/index.html","hash":"b849023fda587a8ca70d6f8901de0752336af610","modified":1628311490341},{"_id":"public/tags/node-reuse/index.html","hash":"e19527a0c8400719eaeebbd9b9da4a52adbed945","modified":1628311490341},{"_id":"public/tags/vue-router/index.html","hash":"c0d88c53228b81d326a49652275dc228b2a6b450","modified":1628311490341},{"_id":"public/tags/webpack/index.html","hash":"66849f40d86be2051b6c423b114e896422f81ce8","modified":1628311490341},{"_id":"public/tags/cdn/index.html","hash":"f1730a52bb1f1d5cffd45bf9ba21c0ca8aba7c11","modified":1628311490341},{"_id":"public/tags/chunk/index.html","hash":"fa9ac143aa1b6e2c5da866224ed12b7ac279430d","modified":1628311490341},{"_id":"public/tags/tapable/index.html","hash":"31e04e91763c3345b70eb1b17d59f95a8e07033d","modified":1628311490341},{"_id":"public/tags/sourcemap/index.html","hash":"1daed0cec3c2f932a92c6c8b8dcfbc0bbd80558d","modified":1628311490341},{"_id":"public/tags/微信开发者工具/index.html","hash":"a70d454db487e6036243d56d4d2b65d40ea26dfc","modified":1628311490341},{"_id":"public/tags/mp-weixin/index.html","hash":"17982e5fa2e563cf0bb8c34d467e3e1a450dec2e","modified":1628311490341},{"_id":"public/tags/微信/index.html","hash":"ba02b4bfe4171b5e027a083a9781e99d31075389","modified":1628311490341},{"_id":"public/tags/小程序/index.html","hash":"1da8dea50831d99b4483524ccad7ef75464ca2dc","modified":1628311490341},{"_id":"public/tags/index.html","hash":"058719f55030d707799c4bbbd6bd9c3b443bd5c2","modified":1628311490341},{"_id":"public/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1628311490341},{"_id":"public/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1628311490341},{"_id":"public/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1628311490341},{"_id":"public/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1628311490341},{"_id":"public/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1628311490341},{"_id":"public/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1628311490341},{"_id":"public/images/2019021401.png","hash":"2d49d70b32443293192bd4987d5d5b2b9e06b043","modified":1628311490341},{"_id":"public/images/2019051301.svg","hash":"1b7c84ae93ff0179d88cb714ac95992a856c4164","modified":1628311490341},{"_id":"public/images/2019021402.png","hash":"02093e5fdf9d650688ea9daad9f781e781771a38","modified":1628311490341},{"_id":"public/images/2019060503.png","hash":"fdcc2af5b03d9afeac00a41a6a3271cf38eab097","modified":1628311490341},{"_id":"public/images/2019060502.png","hash":"f7350efafb3b4b2fc73c42eb0567a1afd0322efc","modified":1628311490341},{"_id":"public/images/2019060501.png","hash":"cdeebe77a3b3f1a52f9662d8cb4e5a757fd17bd1","modified":1628311490341},{"_id":"public/images/2019061303.png","hash":"0c7681ed464f7b9e479ab58004fbc0b5d878bb30","modified":1628311490341},{"_id":"public/images/2019061304.png","hash":"9af557806916e71fb4b232a909067218ca2a56e3","modified":1628311490341},{"_id":"public/images/2019071701.jpeg","hash":"5db3461acfde212aec32a8a17c9160539069fe47","modified":1628311490341},{"_id":"public/images/2019072202.jpeg","hash":"86bb28cc80dac8d3e5e099b7871366d07e135ddb","modified":1628311490341},{"_id":"public/images/2019072201.jpeg","hash":"2e2fcc7a3561d97ff664ed10e0d3f3ed29d9ee1d","modified":1628311490341},{"_id":"public/images/avator.jpg","hash":"8e0f9e026833643b9fa048580ec6008f692ec148","modified":1628311490341},{"_id":"public/images/logo.favicon.big.png","hash":"e15bdedba379bd1746757c6bf611b4a68fd5b445","modified":1628311490341},{"_id":"public/images/logo.favicon.png","hash":"bdfa37cdbecd6a29fb07322aedd02a9c0aedadcb","modified":1628311490341},{"_id":"public/images/logo.png","hash":"6c1283a23bc7bdb99e57c0a0c3a57a1f776a6bb0","modified":1628311490341},{"_id":"public/images/2019060103.png","hash":"e006aaa9b84ca083eb0883bf1da2094868e3a800","modified":1628311490341},{"_id":"public/images/2019060301.png","hash":"13c2ba79869461361cfb2a70e6efbaee2a32f481","modified":1628311490341},{"_id":"public/images/2019061302.png","hash":"c8e390dad0e76b1fc5eff332a77456d0e8eee094","modified":1628311490341},{"_id":"public/images/2019061301.png","hash":"5709f5d12881cb9ee269361b36f4968c7d070cf3","modified":1628311490341},{"_id":"public/images/2019060102.png","hash":"ac4f710f8e2e4d4316edace2bf9032260c2a3e6b","modified":1628311490341},{"_id":"public/images/2019090102.png","hash":"bbfe3d9b0ed59bc6f69c7cbd21bf01a11f465ba4","modified":1628311490341},{"_id":"public/css/default.css","hash":"d1be246b56d96525ef38324dd769a4d70b932124","modified":1628311490341},{"_id":"public/css/style.css","hash":"d1be246b56d96525ef38324dd769a4d70b932124","modified":1628311490341},{"_id":"public/css/cyberpunk.css","hash":"33cb6e6c54af1717a2447f527d0ccf1a06502cb1","modified":1628311490341},{"_id":"public/js/animation.js","hash":"12cedd5caaf9109eed97e50eeab8f883f6e49be3","modified":1628311490341},{"_id":"public/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1628311490341},{"_id":"public/js/main.js","hash":"13e4b1c4fa287f3db61aae329ad093a81992f23d","modified":1628311490341},{"_id":"public/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1628311490341},{"_id":"public/images/2019060101.jpeg","hash":"8558932f2c9130299004f8ce3885a6ce2dd39dc7","modified":1628311490341},{"_id":"public/images/2021061401.gif","hash":"c22634143a7ec86b3f4c367a623ca802b478f1e8","modified":1628311490341},{"_id":"public/images/2021061402.svg","hash":"8a0bf1dd0d73133b136672dffb5de6759a225364","modified":1628311490341},{"_id":"public/images/2019090101.jpg","hash":"782afcf2bf962bbfd93e36ff29f123274bdab3e3","modified":1628311490341}],"Category":[{"name":"工程化","_id":"cks1amc7j0021ecq8cxkj9wkw"},{"name":"其它","_id":"cks1amc7w0023ecq8avpe9ydo"},{"name":"web安全","_id":"cks1amc820029ecq8bq4v7sh4"},{"name":"js","_id":"cks1amc82002becq8h7om9e2c"},{"name":"css","_id":"cks1amc83002decq88hadh55a"},{"name":"网络","_id":"cks1amc84002fecq8e26acebs"},{"name":"工具","_id":"cks1amc84002hecq8d5gq3nmr"},{"name":"javascript","_id":"cks1amc85002jecq88mni010q"},{"name":"H5","_id":"cks1amc87002necq8d6xb2fe9"},{"name":"html","_id":"cks1amc88002recq8e5ikbkdn"},{"name":"nuxt","_id":"cks1amc8m003gecq8ck5l9vyw"},{"name":"思考","_id":"cks1amc8u003yecq8grpc7h9h"},{"name":"uni-app","_id":"cks1amc8w0044ecq82zejblt1"},{"name":"vue","_id":"cks1amc97004vecq8bkgv658z"},{"name":"小程序","_id":"cks1amc9j005pecq80giecy4l"}],"Data":[],"Page":[{"title":"分类","type":"categories","date":"2021-05-30T06:55:14.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ntype: \"categories\"\ndate: 2021-05-30 14:55:14\n---\n","updated":"2021-05-30T06:55:46.380Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cks1amc660000ecq8gpcpcvws","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"qiankun","date":"2021-06-21T16:00:00.000Z","_content":"\n看到了一篇很不错的文章，很详细的描述了qiankun的设计思想，有缺点。\n\n[如何设计实现微前端框架-qiankun](https://mp.weixin.qq.com/s/XnE5zvYRhCdckdM2hclaLA)","source":"_posts/architecture/qiankun.md","raw":"\n---\ntitle: qiankun\ncategories: 工程化\ntags: [微前端, qiankun]\ndate: 2021-6-22\n---\n\n看到了一篇很不错的文章，很详细的描述了qiankun的设计思想，有缺点。\n\n[如何设计实现微前端框架-qiankun](https://mp.weixin.qq.com/s/XnE5zvYRhCdckdM2hclaLA)","slug":"architecture/qiankun","published":1,"updated":"2021-08-07T03:45:48.515Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc690001ecq84p474ck2","content":"<p>看到了一篇很不错的文章，很详细的描述了qiankun的设计思想，有缺点。</p>\n<p><a href=\"https://mp.weixin.qq.com/s/XnE5zvYRhCdckdM2hclaLA\">如何设计实现微前端框架-qiankun</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>看到了一篇很不错的文章，很详细的描述了qiankun的设计思想，有缺点。</p>\n<p><a href=\"https://mp.weixin.qq.com/s/XnE5zvYRhCdckdM2hclaLA\">如何设计实现微前端框架-qiankun</a></p>\n"},{"title":"百度地图自定义标记","date":"2018-11-04T16:00:00.000Z","_content":"\n最近有个业务要用到百度地图以及自定义自定义图标功能。具体浏览地址：[锦江酒店-分销通](http://travel.bestwehotel.com/)需要实现的效果如下：\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-6/1622977029489-image.png)\n\n需要满足的交互：\n* 左侧列表滚动时，右侧地图中心位置的标记变为左侧鼠标所在的商品上\n* 鼠标放置在地图标记上时，显示这个标记对应的酒店名称，点击这个标记跳转到酒店详情页\n\n这个需求的核心任务是：\n* 地图SDK选择\n* 实现地图的自定义标记\n* 自定义标记的状态变化\n* 自定义标记的点击事件监听\n\n## 地图SDK选择\n\n可以选择的地图有：\n* 腾讯\n* 高德\n* 百度\n* 谷歌\n\n我们的酒店有海外数据，由于目前（2018-11）腾讯和高德地图均未很完美的支持海外位置服务。剩下只有百度和谷歌。谷歌地图经使用发现有一些外部资源依赖被防火墙阻挡。因此最终选择了百度地图。\n\n## 异步加载地图\n```js\nclass BaiduMap {\n  constructor(eleId, clickCallback, coordinate) {\n    this.mapConfig = {}\n    this.mapContainer = eleId\n    this.map = null\n    this.markers = null\n    this.hotelList = ''\n    this.hotel = ''\n    this.clickCallback = clickCallback\n    this.coordinate = coordinate\n    if (!window.BMap) {\n      BMapSource = this.loadMap()\n      BMapSource.then(this.initMap)\n    }\n  }\n\n  // 1.加载地图\n  loadMap() {\n    const AK = 'ySDvqVVO3wnmQS49H355c5dhl6ewk469'\n    const BMap_URL =\n      'https://api.map.baidu.com/api?v=2.0&amp;ak=' +\n      AK +\n      '&s=1&callback=BMapCallback'\n    return new Promise((resolve, reject) => {\n      // 插入script脚本\n      let scriptNode = document.createElement('script')\n      scriptNode.setAttribute('type', 'text/javascript')\n      scriptNode.setAttribute('src', BMap_URL)\n      document.body.appendChild(scriptNode)\n\n      // 百度地图异步加载回调处理\n      window.BMapCallback = function () {\n        resolve(window.BMap)\n      }\n    })\n  }\n\n  // 2. 初始化地图\n  initMap(BMap) {\n    // ...\n  }\n}\n```\n\n## 实现地图的自定义标记\n使用Marker类实现自定义标记。\n* label.addEventListener监听mouseout,mouseover事件，改变mark样式，实现标记状态变化。\n* Icon类添加标记图标\n* Label类添加文本标记\n* addOverlay方法将marker添加到地图上\n* panTo方法将某个坐标移动到地图中心位置\n* label.addEventListener监听click事件，实现点击跳转交互\n\n```js\n// 3. 批量添加标记\nsetBatchMarker() {\n  // 为每个酒店添加一个标记\n  this.markers = this.hotelList.map((hotel, index) => {\n    let new_point = new BMap.Point(hotel.longitude, hotel.latitude)\n    let marker = new BMap.Marker(new_point)\n    // 设置标注图标\n    let icon = new BMap.Icon(defaultIcon, new BMap.Size(30, 30))\n    marker.setIcon(icon)\n\n    // 创建marker默认的标记\n    let content = `<div><span class=\"markerIndex\">${index +\n      1}</span><span class=\"markerLabel\">${hotel.translatedName ||\n      hotel.hotelName}</span></div>`\n    let label = new BMap.Label(content, { position: new_point })\n    label.setStyle({\n      padding: 0,\n      width: '30px',\n      height: '30px',\n      lineHeight: '30px',\n      backgroundColor: 'transparent',\n      border: 'none',\n      color: '#fff',\n      textAlign: 'center',\n      overflow: 'hidden'\n    })\n    marker.setLabel(label)\n    this.map.addOverlay(marker) // 将标注添加到地图中\n\n    // 设置marker的鼠标事件（鼠标进入和离开的样式差异）\n    // 鼠标经过时\n    label.addEventListener('mouseover', function () {\n      // 修改样式\n    })\n    // 鼠标离开时\n    label.addEventListener('mouseout', function (e) {\n      // 修改样式\n    })\n    // 点击\n    label.addEventListener('click', function (e) {\n      // 跳转\n    })\n    return marker\n  })\n  // 以列表的第一个为地图的中心点\n  let new_point = new BMap.Point(\n    this.hotelList[0].longitude,\n    this.hotelList[0].latitude\n  )\n  // 将地图的中心点更改为给定的点，跳转到指定中心点进行渲染。如果该点在当前的地图视图中已经可见，则会以平滑动画的方式移动到中心点位置。\n  this.map.panTo(new_point)\n}\n```\n","source":"_posts/blogs/baidu-map-mark.md","raw":"---\ntitle: 百度地图自定义标记\ncategories: 其它\ntags: [百度地图sdk]\ndate: 2018-11-5\n---\n\n最近有个业务要用到百度地图以及自定义自定义图标功能。具体浏览地址：[锦江酒店-分销通](http://travel.bestwehotel.com/)需要实现的效果如下：\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-6/1622977029489-image.png)\n\n需要满足的交互：\n* 左侧列表滚动时，右侧地图中心位置的标记变为左侧鼠标所在的商品上\n* 鼠标放置在地图标记上时，显示这个标记对应的酒店名称，点击这个标记跳转到酒店详情页\n\n这个需求的核心任务是：\n* 地图SDK选择\n* 实现地图的自定义标记\n* 自定义标记的状态变化\n* 自定义标记的点击事件监听\n\n## 地图SDK选择\n\n可以选择的地图有：\n* 腾讯\n* 高德\n* 百度\n* 谷歌\n\n我们的酒店有海外数据，由于目前（2018-11）腾讯和高德地图均未很完美的支持海外位置服务。剩下只有百度和谷歌。谷歌地图经使用发现有一些外部资源依赖被防火墙阻挡。因此最终选择了百度地图。\n\n## 异步加载地图\n```js\nclass BaiduMap {\n  constructor(eleId, clickCallback, coordinate) {\n    this.mapConfig = {}\n    this.mapContainer = eleId\n    this.map = null\n    this.markers = null\n    this.hotelList = ''\n    this.hotel = ''\n    this.clickCallback = clickCallback\n    this.coordinate = coordinate\n    if (!window.BMap) {\n      BMapSource = this.loadMap()\n      BMapSource.then(this.initMap)\n    }\n  }\n\n  // 1.加载地图\n  loadMap() {\n    const AK = 'ySDvqVVO3wnmQS49H355c5dhl6ewk469'\n    const BMap_URL =\n      'https://api.map.baidu.com/api?v=2.0&amp;ak=' +\n      AK +\n      '&s=1&callback=BMapCallback'\n    return new Promise((resolve, reject) => {\n      // 插入script脚本\n      let scriptNode = document.createElement('script')\n      scriptNode.setAttribute('type', 'text/javascript')\n      scriptNode.setAttribute('src', BMap_URL)\n      document.body.appendChild(scriptNode)\n\n      // 百度地图异步加载回调处理\n      window.BMapCallback = function () {\n        resolve(window.BMap)\n      }\n    })\n  }\n\n  // 2. 初始化地图\n  initMap(BMap) {\n    // ...\n  }\n}\n```\n\n## 实现地图的自定义标记\n使用Marker类实现自定义标记。\n* label.addEventListener监听mouseout,mouseover事件，改变mark样式，实现标记状态变化。\n* Icon类添加标记图标\n* Label类添加文本标记\n* addOverlay方法将marker添加到地图上\n* panTo方法将某个坐标移动到地图中心位置\n* label.addEventListener监听click事件，实现点击跳转交互\n\n```js\n// 3. 批量添加标记\nsetBatchMarker() {\n  // 为每个酒店添加一个标记\n  this.markers = this.hotelList.map((hotel, index) => {\n    let new_point = new BMap.Point(hotel.longitude, hotel.latitude)\n    let marker = new BMap.Marker(new_point)\n    // 设置标注图标\n    let icon = new BMap.Icon(defaultIcon, new BMap.Size(30, 30))\n    marker.setIcon(icon)\n\n    // 创建marker默认的标记\n    let content = `<div><span class=\"markerIndex\">${index +\n      1}</span><span class=\"markerLabel\">${hotel.translatedName ||\n      hotel.hotelName}</span></div>`\n    let label = new BMap.Label(content, { position: new_point })\n    label.setStyle({\n      padding: 0,\n      width: '30px',\n      height: '30px',\n      lineHeight: '30px',\n      backgroundColor: 'transparent',\n      border: 'none',\n      color: '#fff',\n      textAlign: 'center',\n      overflow: 'hidden'\n    })\n    marker.setLabel(label)\n    this.map.addOverlay(marker) // 将标注添加到地图中\n\n    // 设置marker的鼠标事件（鼠标进入和离开的样式差异）\n    // 鼠标经过时\n    label.addEventListener('mouseover', function () {\n      // 修改样式\n    })\n    // 鼠标离开时\n    label.addEventListener('mouseout', function (e) {\n      // 修改样式\n    })\n    // 点击\n    label.addEventListener('click', function (e) {\n      // 跳转\n    })\n    return marker\n  })\n  // 以列表的第一个为地图的中心点\n  let new_point = new BMap.Point(\n    this.hotelList[0].longitude,\n    this.hotelList[0].latitude\n  )\n  // 将地图的中心点更改为给定的点，跳转到指定中心点进行渲染。如果该点在当前的地图视图中已经可见，则会以平滑动画的方式移动到中心点位置。\n  this.map.panTo(new_point)\n}\n```\n","slug":"blogs/baidu-map-mark","published":1,"updated":"2021-06-14T02:02:15.239Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6c0002ecq88pd39qyx","content":"<p>最近有个业务要用到百度地图以及自定义自定义图标功能。具体浏览地址：<a href=\"http://travel.bestwehotel.com/\">锦江酒店-分销通</a>需要实现的效果如下：</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-6/1622977029489-image.png\"></p>\n<p>需要满足的交互：</p>\n<ul>\n<li>左侧列表滚动时，右侧地图中心位置的标记变为左侧鼠标所在的商品上</li>\n<li>鼠标放置在地图标记上时，显示这个标记对应的酒店名称，点击这个标记跳转到酒店详情页</li>\n</ul>\n<p>这个需求的核心任务是：</p>\n<ul>\n<li>地图SDK选择</li>\n<li>实现地图的自定义标记</li>\n<li>自定义标记的状态变化</li>\n<li>自定义标记的点击事件监听</li>\n</ul>\n<h2 id=\"地图SDK选择\"><a href=\"#地图SDK选择\" class=\"headerlink\" title=\"地图SDK选择\"></a>地图SDK选择</h2><p>可以选择的地图有：</p>\n<ul>\n<li>腾讯</li>\n<li>高德</li>\n<li>百度</li>\n<li>谷歌</li>\n</ul>\n<p>我们的酒店有海外数据，由于目前（2018-11）腾讯和高德地图均未很完美的支持海外位置服务。剩下只有百度和谷歌。谷歌地图经使用发现有一些外部资源依赖被防火墙阻挡。因此最终选择了百度地图。</p>\n<h2 id=\"异步加载地图\"><a href=\"#异步加载地图\" class=\"headerlink\" title=\"异步加载地图\"></a>异步加载地图</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaiduMap</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">eleId, clickCallback, coordinate</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.mapConfig = &#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.mapContainer = eleId</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.map = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.markers = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.hotelList = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.hotel = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.clickCallback = clickCallback</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.coordinate = coordinate</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">window</span>.BMap) &#123;</span><br><span class=\"line\">      BMapSource = <span class=\"built_in\">this</span>.loadMap()</span><br><span class=\"line\">      BMapSource.then(<span class=\"built_in\">this</span>.initMap)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 1.加载地图</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">loadMap</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> AK = <span class=\"string\">&#x27;ySDvqVVO3wnmQS49H355c5dhl6ewk469&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> BMap_URL =</span><br><span class=\"line\">      <span class=\"string\">&#x27;https://api.map.baidu.com/api?v=2.0&amp;amp;ak=&#x27;</span> +</span><br><span class=\"line\">      AK +</span><br><span class=\"line\">      <span class=\"string\">&#x27;&amp;s=1&amp;callback=BMapCallback&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 插入script脚本</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> scriptNode = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;script&#x27;</span>)</span><br><span class=\"line\">      scriptNode.setAttribute(<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;text/javascript&#x27;</span>)</span><br><span class=\"line\">      scriptNode.setAttribute(<span class=\"string\">&#x27;src&#x27;</span>, BMap_URL)</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.body.appendChild(scriptNode)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 百度地图异步加载回调处理</span></span><br><span class=\"line\">      <span class=\"built_in\">window</span>.BMapCallback = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        resolve(<span class=\"built_in\">window</span>.BMap)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 2. 初始化地图</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">initMap</span>(<span class=\"params\">BMap</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实现地图的自定义标记\"><a href=\"#实现地图的自定义标记\" class=\"headerlink\" title=\"实现地图的自定义标记\"></a>实现地图的自定义标记</h2><p>使用Marker类实现自定义标记。</p>\n<ul>\n<li>label.addEventListener监听mouseout,mouseover事件，改变mark样式，实现标记状态变化。</li>\n<li>Icon类添加标记图标</li>\n<li>Label类添加文本标记</li>\n<li>addOverlay方法将marker添加到地图上</li>\n<li>panTo方法将某个坐标移动到地图中心位置</li>\n<li>label.addEventListener监听click事件，实现点击跳转交互</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 3. 批量添加标记</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">setBatchMarker</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 为每个酒店添加一个标记</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.markers = <span class=\"built_in\">this</span>.hotelList.map(<span class=\"function\">(<span class=\"params\">hotel, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> new_point = <span class=\"keyword\">new</span> BMap.Point(hotel.longitude, hotel.latitude)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> marker = <span class=\"keyword\">new</span> BMap.Marker(new_point)</span><br><span class=\"line\">    <span class=\"comment\">// 设置标注图标</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> icon = <span class=\"keyword\">new</span> BMap.Icon(defaultIcon, <span class=\"keyword\">new</span> BMap.Size(<span class=\"number\">30</span>, <span class=\"number\">30</span>))</span><br><span class=\"line\">    marker.setIcon(icon)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建marker默认的标记</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> content = <span class=\"string\">`&lt;div&gt;&lt;span class=&quot;markerIndex&quot;&gt;<span class=\"subst\">$&#123;index +</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">      <span class=\"number\">1</span>&#125;</span>&lt;/span&gt;&lt;span class=&quot;markerLabel&quot;&gt;<span class=\"subst\">$&#123;hotel.translatedName ||</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">      hotel.hotelName&#125;</span>&lt;/span&gt;&lt;/div&gt;`</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> label = <span class=\"keyword\">new</span> BMap.Label(content, &#123; <span class=\"attr\">position</span>: new_point &#125;)</span><br><span class=\"line\">    label.setStyle(&#123;</span><br><span class=\"line\">      <span class=\"attr\">padding</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"attr\">width</span>: <span class=\"string\">&#x27;30px&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">height</span>: <span class=\"string\">&#x27;30px&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">lineHeight</span>: <span class=\"string\">&#x27;30px&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">backgroundColor</span>: <span class=\"string\">&#x27;transparent&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">border</span>: <span class=\"string\">&#x27;none&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">color</span>: <span class=\"string\">&#x27;#fff&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">textAlign</span>: <span class=\"string\">&#x27;center&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">overflow</span>: <span class=\"string\">&#x27;hidden&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    marker.setLabel(label)</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.map.addOverlay(marker) <span class=\"comment\">// 将标注添加到地图中</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置marker的鼠标事件（鼠标进入和离开的样式差异）</span></span><br><span class=\"line\">    <span class=\"comment\">// 鼠标经过时</span></span><br><span class=\"line\">    label.addEventListener(<span class=\"string\">&#x27;mouseover&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 修改样式</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 鼠标离开时</span></span><br><span class=\"line\">    label.addEventListener(<span class=\"string\">&#x27;mouseout&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 修改样式</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 点击</span></span><br><span class=\"line\">    label.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 跳转</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> marker</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"comment\">// 以列表的第一个为地图的中心点</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> new_point = <span class=\"keyword\">new</span> BMap.Point(</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.hotelList[<span class=\"number\">0</span>].longitude,</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.hotelList[<span class=\"number\">0</span>].latitude</span><br><span class=\"line\">  )</span><br><span class=\"line\">  <span class=\"comment\">// 将地图的中心点更改为给定的点，跳转到指定中心点进行渲染。如果该点在当前的地图视图中已经可见，则会以平滑动画的方式移动到中心点位置。</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.map.panTo(new_point)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>最近有个业务要用到百度地图以及自定义自定义图标功能。具体浏览地址：<a href=\"http://travel.bestwehotel.com/\">锦江酒店-分销通</a>需要实现的效果如下：</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-6/1622977029489-image.png\"></p>\n<p>需要满足的交互：</p>\n<ul>\n<li>左侧列表滚动时，右侧地图中心位置的标记变为左侧鼠标所在的商品上</li>\n<li>鼠标放置在地图标记上时，显示这个标记对应的酒店名称，点击这个标记跳转到酒店详情页</li>\n</ul>\n<p>这个需求的核心任务是：</p>\n<ul>\n<li>地图SDK选择</li>\n<li>实现地图的自定义标记</li>\n<li>自定义标记的状态变化</li>\n<li>自定义标记的点击事件监听</li>\n</ul>\n<h2 id=\"地图SDK选择\"><a href=\"#地图SDK选择\" class=\"headerlink\" title=\"地图SDK选择\"></a>地图SDK选择</h2><p>可以选择的地图有：</p>\n<ul>\n<li>腾讯</li>\n<li>高德</li>\n<li>百度</li>\n<li>谷歌</li>\n</ul>\n<p>我们的酒店有海外数据，由于目前（2018-11）腾讯和高德地图均未很完美的支持海外位置服务。剩下只有百度和谷歌。谷歌地图经使用发现有一些外部资源依赖被防火墙阻挡。因此最终选择了百度地图。</p>\n<h2 id=\"异步加载地图\"><a href=\"#异步加载地图\" class=\"headerlink\" title=\"异步加载地图\"></a>异步加载地图</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaiduMap</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">eleId, clickCallback, coordinate</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.mapConfig = &#123;&#125;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.mapContainer = eleId</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.map = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.markers = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.hotelList = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.hotel = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.clickCallback = clickCallback</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.coordinate = coordinate</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">window</span>.BMap) &#123;</span><br><span class=\"line\">      BMapSource = <span class=\"built_in\">this</span>.loadMap()</span><br><span class=\"line\">      BMapSource.then(<span class=\"built_in\">this</span>.initMap)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 1.加载地图</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">loadMap</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> AK = <span class=\"string\">&#x27;ySDvqVVO3wnmQS49H355c5dhl6ewk469&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> BMap_URL =</span><br><span class=\"line\">      <span class=\"string\">&#x27;https://api.map.baidu.com/api?v=2.0&amp;amp;ak=&#x27;</span> +</span><br><span class=\"line\">      AK +</span><br><span class=\"line\">      <span class=\"string\">&#x27;&amp;s=1&amp;callback=BMapCallback&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 插入script脚本</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> scriptNode = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;script&#x27;</span>)</span><br><span class=\"line\">      scriptNode.setAttribute(<span class=\"string\">&#x27;type&#x27;</span>, <span class=\"string\">&#x27;text/javascript&#x27;</span>)</span><br><span class=\"line\">      scriptNode.setAttribute(<span class=\"string\">&#x27;src&#x27;</span>, BMap_URL)</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.body.appendChild(scriptNode)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 百度地图异步加载回调处理</span></span><br><span class=\"line\">      <span class=\"built_in\">window</span>.BMapCallback = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        resolve(<span class=\"built_in\">window</span>.BMap)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 2. 初始化地图</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">initMap</span>(<span class=\"params\">BMap</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实现地图的自定义标记\"><a href=\"#实现地图的自定义标记\" class=\"headerlink\" title=\"实现地图的自定义标记\"></a>实现地图的自定义标记</h2><p>使用Marker类实现自定义标记。</p>\n<ul>\n<li>label.addEventListener监听mouseout,mouseover事件，改变mark样式，实现标记状态变化。</li>\n<li>Icon类添加标记图标</li>\n<li>Label类添加文本标记</li>\n<li>addOverlay方法将marker添加到地图上</li>\n<li>panTo方法将某个坐标移动到地图中心位置</li>\n<li>label.addEventListener监听click事件，实现点击跳转交互</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 3. 批量添加标记</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">setBatchMarker</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 为每个酒店添加一个标记</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.markers = <span class=\"built_in\">this</span>.hotelList.map(<span class=\"function\">(<span class=\"params\">hotel, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> new_point = <span class=\"keyword\">new</span> BMap.Point(hotel.longitude, hotel.latitude)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> marker = <span class=\"keyword\">new</span> BMap.Marker(new_point)</span><br><span class=\"line\">    <span class=\"comment\">// 设置标注图标</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> icon = <span class=\"keyword\">new</span> BMap.Icon(defaultIcon, <span class=\"keyword\">new</span> BMap.Size(<span class=\"number\">30</span>, <span class=\"number\">30</span>))</span><br><span class=\"line\">    marker.setIcon(icon)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建marker默认的标记</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> content = <span class=\"string\">`&lt;div&gt;&lt;span class=&quot;markerIndex&quot;&gt;<span class=\"subst\">$&#123;index +</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">      <span class=\"number\">1</span>&#125;</span>&lt;/span&gt;&lt;span class=&quot;markerLabel&quot;&gt;<span class=\"subst\">$&#123;hotel.translatedName ||</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">      hotel.hotelName&#125;</span>&lt;/span&gt;&lt;/div&gt;`</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> label = <span class=\"keyword\">new</span> BMap.Label(content, &#123; <span class=\"attr\">position</span>: new_point &#125;)</span><br><span class=\"line\">    label.setStyle(&#123;</span><br><span class=\"line\">      <span class=\"attr\">padding</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"attr\">width</span>: <span class=\"string\">&#x27;30px&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">height</span>: <span class=\"string\">&#x27;30px&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">lineHeight</span>: <span class=\"string\">&#x27;30px&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">backgroundColor</span>: <span class=\"string\">&#x27;transparent&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">border</span>: <span class=\"string\">&#x27;none&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">color</span>: <span class=\"string\">&#x27;#fff&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">textAlign</span>: <span class=\"string\">&#x27;center&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">overflow</span>: <span class=\"string\">&#x27;hidden&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    marker.setLabel(label)</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.map.addOverlay(marker) <span class=\"comment\">// 将标注添加到地图中</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 设置marker的鼠标事件（鼠标进入和离开的样式差异）</span></span><br><span class=\"line\">    <span class=\"comment\">// 鼠标经过时</span></span><br><span class=\"line\">    label.addEventListener(<span class=\"string\">&#x27;mouseover&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 修改样式</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 鼠标离开时</span></span><br><span class=\"line\">    label.addEventListener(<span class=\"string\">&#x27;mouseout&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 修改样式</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 点击</span></span><br><span class=\"line\">    label.addEventListener(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 跳转</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> marker</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"comment\">// 以列表的第一个为地图的中心点</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> new_point = <span class=\"keyword\">new</span> BMap.Point(</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.hotelList[<span class=\"number\">0</span>].longitude,</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.hotelList[<span class=\"number\">0</span>].latitude</span><br><span class=\"line\">  )</span><br><span class=\"line\">  <span class=\"comment\">// 将地图的中心点更改为给定的点，跳转到指定中心点进行渲染。如果该点在当前的地图视图中已经可见，则会以平滑动画的方式移动到中心点位置。</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.map.panTo(new_point)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"base64学习笔记","date":"2021-06-19T16:00:00.000Z","_content":"\n## 学习背景\nwebpack打包经常将图片内联进js代码中，内联格式就是base64。image标签本身支持base64格式。base64更像是二进制格式的马甲，由于所有字符都是可见字符，因此可以安全的运行在各个平台上而不会丢失数据。\n\n参考资料：\n- http://www.ruanyifeng.com/blog/2008/06/base64.html\n- https://www.zhihu.com/question/36306744\n\n## 编码原理\n\nbase64，包含64个可见字符：\n- 小写字母a-z\n- 大写字母A-Z\n- 数字0-9\n- 符号\"+\"、\"/\"\n- 再加上作为垫字的\"=\"（实际上是65个字符）\n\n编码步骤：\n1. 每三个字节作为一组，一共是24个二进制位。不足3个字节的分组在结尾补0。空出来的全0字节最终编码为`=`\n2. 将这24个二进制位分为四组，每个组有6个二进制位\n3. 在每组前面加两个00，扩展成32个二进制位，即四个字节\n4. 新的二进制串，每个字节对应base64基本字符中的某个字符\n\n\n### base64 字节值->字符映射表\n\n```\n0　A　　17　R　　　34　i　　　51　z\n\n　　1　B　　18　S　　　35　j　　　52　0\n\n　　2　C　　19　T　　　36　k　　　53　1\n\n　　3　D　　20　U　　　37　l　　　54　2\n\n　　4　E　　21　V　　　38　m　　　55　3\n\n　　5　F　　22　W　　　39　n　　　56　4\n\n　　6　G　　23　X　　　40　o　　　57　5\n\n　　7　H　　24　Y　　　41　p　　　58　6\n\n　　8　I　　　25　Z　　　42　q　　　59　7\n\n　　9　J　　26　a　　　43　r　　　60　8\n\n　　10　K　　27　b　　　44　s　　　61　9\n\n　　11　L　　28　c　　　45　t　　　62　+\n\n　　12　M　　29　d　　　46　u　　　63　/\n\n　　13　N　　30　e　　　47　v\n\n　　14　O　　31　f　　　48　w　　　\n\n　　15　P　　32　g　　　49　x\n\n　　16　Q　　33　h　　　50　y\n```\n\n## 编码率\n\n24个字符扩展成32个字符，编码后的文本比原文本大三分之一。","source":"_posts/blogs/base64.md","raw":"---\ntitle: base64学习笔记\ncategories: 其它\ntags: [base64]\ndate: 2021-6-20\n---\n\n## 学习背景\nwebpack打包经常将图片内联进js代码中，内联格式就是base64。image标签本身支持base64格式。base64更像是二进制格式的马甲，由于所有字符都是可见字符，因此可以安全的运行在各个平台上而不会丢失数据。\n\n参考资料：\n- http://www.ruanyifeng.com/blog/2008/06/base64.html\n- https://www.zhihu.com/question/36306744\n\n## 编码原理\n\nbase64，包含64个可见字符：\n- 小写字母a-z\n- 大写字母A-Z\n- 数字0-9\n- 符号\"+\"、\"/\"\n- 再加上作为垫字的\"=\"（实际上是65个字符）\n\n编码步骤：\n1. 每三个字节作为一组，一共是24个二进制位。不足3个字节的分组在结尾补0。空出来的全0字节最终编码为`=`\n2. 将这24个二进制位分为四组，每个组有6个二进制位\n3. 在每组前面加两个00，扩展成32个二进制位，即四个字节\n4. 新的二进制串，每个字节对应base64基本字符中的某个字符\n\n\n### base64 字节值->字符映射表\n\n```\n0　A　　17　R　　　34　i　　　51　z\n\n　　1　B　　18　S　　　35　j　　　52　0\n\n　　2　C　　19　T　　　36　k　　　53　1\n\n　　3　D　　20　U　　　37　l　　　54　2\n\n　　4　E　　21　V　　　38　m　　　55　3\n\n　　5　F　　22　W　　　39　n　　　56　4\n\n　　6　G　　23　X　　　40　o　　　57　5\n\n　　7　H　　24　Y　　　41　p　　　58　6\n\n　　8　I　　　25　Z　　　42　q　　　59　7\n\n　　9　J　　26　a　　　43　r　　　60　8\n\n　　10　K　　27　b　　　44　s　　　61　9\n\n　　11　L　　28　c　　　45　t　　　62　+\n\n　　12　M　　29　d　　　46　u　　　63　/\n\n　　13　N　　30　e　　　47　v\n\n　　14　O　　31　f　　　48　w　　　\n\n　　15　P　　32　g　　　49　x\n\n　　16　Q　　33　h　　　50　y\n```\n\n## 编码率\n\n24个字符扩展成32个字符，编码后的文本比原文本大三分之一。","slug":"blogs/base64","published":1,"updated":"2021-08-07T03:13:20.133Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6c0003ecq84xit3eno","content":"<h2 id=\"学习背景\"><a href=\"#学习背景\" class=\"headerlink\" title=\"学习背景\"></a>学习背景</h2><p>webpack打包经常将图片内联进js代码中，内联格式就是base64。image标签本身支持base64格式。base64更像是二进制格式的马甲，由于所有字符都是可见字符，因此可以安全的运行在各个平台上而不会丢失数据。</p>\n<p>参考资料：</p>\n<ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2008/06/base64.html\">http://www.ruanyifeng.com/blog/2008/06/base64.html</a></li>\n<li><a href=\"https://www.zhihu.com/question/36306744\">https://www.zhihu.com/question/36306744</a></li>\n</ul>\n<h2 id=\"编码原理\"><a href=\"#编码原理\" class=\"headerlink\" title=\"编码原理\"></a>编码原理</h2><p>base64，包含64个可见字符：</p>\n<ul>\n<li>小写字母a-z</li>\n<li>大写字母A-Z</li>\n<li>数字0-9</li>\n<li>符号”+”、”/“</li>\n<li>再加上作为垫字的”=”（实际上是65个字符）</li>\n</ul>\n<p>编码步骤：</p>\n<ol>\n<li>每三个字节作为一组，一共是24个二进制位。不足3个字节的分组在结尾补0。空出来的全0字节最终编码为<code>=</code></li>\n<li>将这24个二进制位分为四组，每个组有6个二进制位</li>\n<li>在每组前面加两个00，扩展成32个二进制位，即四个字节</li>\n<li>新的二进制串，每个字节对应base64基本字符中的某个字符</li>\n</ol>\n<h3 id=\"base64-字节值-gt-字符映射表\"><a href=\"#base64-字节值-gt-字符映射表\" class=\"headerlink\" title=\"base64 字节值-&gt;字符映射表\"></a>base64 字节值-&gt;字符映射表</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0　A　　17　R　　　34　i　　　51　z</span><br><span class=\"line\"></span><br><span class=\"line\">　　1　B　　18　S　　　35　j　　　52　0</span><br><span class=\"line\"></span><br><span class=\"line\">　　2　C　　19　T　　　36　k　　　53　1</span><br><span class=\"line\"></span><br><span class=\"line\">　　3　D　　20　U　　　37　l　　　54　2</span><br><span class=\"line\"></span><br><span class=\"line\">　　4　E　　21　V　　　38　m　　　55　3</span><br><span class=\"line\"></span><br><span class=\"line\">　　5　F　　22　W　　　39　n　　　56　4</span><br><span class=\"line\"></span><br><span class=\"line\">　　6　G　　23　X　　　40　o　　　57　5</span><br><span class=\"line\"></span><br><span class=\"line\">　　7　H　　24　Y　　　41　p　　　58　6</span><br><span class=\"line\"></span><br><span class=\"line\">　　8　I　　　25　Z　　　42　q　　　59　7</span><br><span class=\"line\"></span><br><span class=\"line\">　　9　J　　26　a　　　43　r　　　60　8</span><br><span class=\"line\"></span><br><span class=\"line\">　　10　K　　27　b　　　44　s　　　61　9</span><br><span class=\"line\"></span><br><span class=\"line\">　　11　L　　28　c　　　45　t　　　62　+</span><br><span class=\"line\"></span><br><span class=\"line\">　　12　M　　29　d　　　46　u　　　63　/</span><br><span class=\"line\"></span><br><span class=\"line\">　　13　N　　30　e　　　47　v</span><br><span class=\"line\"></span><br><span class=\"line\">　　14　O　　31　f　　　48　w　　　</span><br><span class=\"line\"></span><br><span class=\"line\">　　15　P　　32　g　　　49　x</span><br><span class=\"line\"></span><br><span class=\"line\">　　16　Q　　33　h　　　50　y</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编码率\"><a href=\"#编码率\" class=\"headerlink\" title=\"编码率\"></a>编码率</h2><p>24个字符扩展成32个字符，编码后的文本比原文本大三分之一。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"学习背景\"><a href=\"#学习背景\" class=\"headerlink\" title=\"学习背景\"></a>学习背景</h2><p>webpack打包经常将图片内联进js代码中，内联格式就是base64。image标签本身支持base64格式。base64更像是二进制格式的马甲，由于所有字符都是可见字符，因此可以安全的运行在各个平台上而不会丢失数据。</p>\n<p>参考资料：</p>\n<ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2008/06/base64.html\">http://www.ruanyifeng.com/blog/2008/06/base64.html</a></li>\n<li><a href=\"https://www.zhihu.com/question/36306744\">https://www.zhihu.com/question/36306744</a></li>\n</ul>\n<h2 id=\"编码原理\"><a href=\"#编码原理\" class=\"headerlink\" title=\"编码原理\"></a>编码原理</h2><p>base64，包含64个可见字符：</p>\n<ul>\n<li>小写字母a-z</li>\n<li>大写字母A-Z</li>\n<li>数字0-9</li>\n<li>符号”+”、”/“</li>\n<li>再加上作为垫字的”=”（实际上是65个字符）</li>\n</ul>\n<p>编码步骤：</p>\n<ol>\n<li>每三个字节作为一组，一共是24个二进制位。不足3个字节的分组在结尾补0。空出来的全0字节最终编码为<code>=</code></li>\n<li>将这24个二进制位分为四组，每个组有6个二进制位</li>\n<li>在每组前面加两个00，扩展成32个二进制位，即四个字节</li>\n<li>新的二进制串，每个字节对应base64基本字符中的某个字符</li>\n</ol>\n<h3 id=\"base64-字节值-gt-字符映射表\"><a href=\"#base64-字节值-gt-字符映射表\" class=\"headerlink\" title=\"base64 字节值-&gt;字符映射表\"></a>base64 字节值-&gt;字符映射表</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0　A　　17　R　　　34　i　　　51　z</span><br><span class=\"line\"></span><br><span class=\"line\">　　1　B　　18　S　　　35　j　　　52　0</span><br><span class=\"line\"></span><br><span class=\"line\">　　2　C　　19　T　　　36　k　　　53　1</span><br><span class=\"line\"></span><br><span class=\"line\">　　3　D　　20　U　　　37　l　　　54　2</span><br><span class=\"line\"></span><br><span class=\"line\">　　4　E　　21　V　　　38　m　　　55　3</span><br><span class=\"line\"></span><br><span class=\"line\">　　5　F　　22　W　　　39　n　　　56　4</span><br><span class=\"line\"></span><br><span class=\"line\">　　6　G　　23　X　　　40　o　　　57　5</span><br><span class=\"line\"></span><br><span class=\"line\">　　7　H　　24　Y　　　41　p　　　58　6</span><br><span class=\"line\"></span><br><span class=\"line\">　　8　I　　　25　Z　　　42　q　　　59　7</span><br><span class=\"line\"></span><br><span class=\"line\">　　9　J　　26　a　　　43　r　　　60　8</span><br><span class=\"line\"></span><br><span class=\"line\">　　10　K　　27　b　　　44　s　　　61　9</span><br><span class=\"line\"></span><br><span class=\"line\">　　11　L　　28　c　　　45　t　　　62　+</span><br><span class=\"line\"></span><br><span class=\"line\">　　12　M　　29　d　　　46　u　　　63　/</span><br><span class=\"line\"></span><br><span class=\"line\">　　13　N　　30　e　　　47　v</span><br><span class=\"line\"></span><br><span class=\"line\">　　14　O　　31　f　　　48　w　　　</span><br><span class=\"line\"></span><br><span class=\"line\">　　15　P　　32　g　　　49　x</span><br><span class=\"line\"></span><br><span class=\"line\">　　16　Q　　33　h　　　50　y</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编码率\"><a href=\"#编码率\" class=\"headerlink\" title=\"编码率\"></a>编码率</h2><p>24个字符扩展成32个字符，编码后的文本比原文本大三分之一。</p>\n"},{"title":"代码简洁之道","date":"2019-02-03T16:00:00.000Z","_content":"# 代码简洁之道\n\n这篇文章是从掘金上看到的，整理的很不错，故收藏，有比较大的参考价值\n[传送门](https://juejin.im/post/5c24b7a851882509a76875e8)\n","source":"_posts/blogs/code-clean.md","raw":"---\ntitle: 代码简洁之道\ncategories: 其它\ndate: 2019-2-4\n---\n# 代码简洁之道\n\n这篇文章是从掘金上看到的，整理的很不错，故收藏，有比较大的参考价值\n[传送门](https://juejin.im/post/5c24b7a851882509a76875e8)\n","slug":"blogs/code-clean","published":1,"updated":"2021-06-14T02:02:26.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6d0004ecq88oxr0cq5","content":"<h1 id=\"代码简洁之道\"><a href=\"#代码简洁之道\" class=\"headerlink\" title=\"代码简洁之道\"></a>代码简洁之道</h1><p>这篇文章是从掘金上看到的，整理的很不错，故收藏，有比较大的参考价值<br><a href=\"https://juejin.im/post/5c24b7a851882509a76875e8\">传送门</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"代码简洁之道\"><a href=\"#代码简洁之道\" class=\"headerlink\" title=\"代码简洁之道\"></a>代码简洁之道</h1><p>这篇文章是从掘金上看到的，整理的很不错，故收藏，有比较大的参考价值<br><a href=\"https://juejin.im/post/5c24b7a851882509a76875e8\">传送门</a></p>\n"},{"title":"关于浏览器的CSP（Content-Security-Policy）","date":"2021-08-02T16:00:00.000Z","_content":"\n在浏览器命令行执行eval函数时，发现在有些网页的devTools中执行时报错：\n\n```\nVM132:1 Uncaught EvalError: Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of script in the following Content Security Policy directive: \"script-src github.githubassets.com\".\n\n    at new Function (<anonymous>)\n    at <anonymous>:1:15\n(anonymous) @ VM132:1\n```\n而在其它大部分网页的devTools中执行是正常的。\n\n根据报错信息大致明白：该网站设置了`Content Security Policy`，且该安全策略不允许执行`unsafe-eval`类型的脚本。\n\n拿github的为例，其html的response header有这个字段`content-security-policy`，其值格式化之后如下：\n\n```\ndefault-src 'none';\nbase-uri 'self';\nblock-all-mixed-content;\nconnect-src 'self' uploads.github.com www.githubstatus.com collector.githubapp.com api.github.com github-cloud.s3.amazonaws.com github-production-repository-file-5c1aeb.s3.amazonaws.com github-production-upload-manifest-file-7fdce7.s3.amazonaws.com github-production-user-asset-6210df.s3.amazonaws.com cdn.optimizely.com logx.optimizely.com/v1/events translator.github.com wss://alive.github.com github.githubassets.com;\nfont-src github.githubassets.com;\nform-action 'self' github.com gist.github.com;\nframe-ancestors 'none';\nframe-src render.githubusercontent.com render-temp.githubusercontent.com viewscreen.githubusercontent.com;\nimg-src 'self' data: github.githubassets.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com secured-user-images.githubusercontent.com/ *.githubusercontent.com customer-stories-feed.github.com spotlights-feed.github.com;\nmanifest-src 'self';\nmedia-src github.githubassets.com;\nscript-src github.githubassets.com;\nstyle-src 'unsafe-inline' github.githubassets.com;\nworker-src github.com/socket-worker-3f088aa2.js gist.github.com/socket-worker-3f088aa2.js\n```\n关于这些字段的意义参考文末的资料。大致明白浏览器的安全策略主要涉及到script、img、font、xhr、style、媒体文件等资源的来源域名，防止页面被第三方恶意插入不信任域名的代码。\n\n我们的项目目前都是裸奔，至于这些设置能达到哪些程度上的安全，由于目前对web安全研究甚少，这块完全是盲点，打算认真啃下《Web前端黑客技术揭秘》这本书。\n\n### 参考资料\nhttps://www.ruanyifeng.com/blog/2016/09/csp.html\n","source":"_posts/blogs/csp.md","raw":"---\ntitle: 关于浏览器的CSP（Content-Security-Policy）\ncategories: web安全\ntags: [CSP]\ndate: 2021-8-3\n---\n\n在浏览器命令行执行eval函数时，发现在有些网页的devTools中执行时报错：\n\n```\nVM132:1 Uncaught EvalError: Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of script in the following Content Security Policy directive: \"script-src github.githubassets.com\".\n\n    at new Function (<anonymous>)\n    at <anonymous>:1:15\n(anonymous) @ VM132:1\n```\n而在其它大部分网页的devTools中执行是正常的。\n\n根据报错信息大致明白：该网站设置了`Content Security Policy`，且该安全策略不允许执行`unsafe-eval`类型的脚本。\n\n拿github的为例，其html的response header有这个字段`content-security-policy`，其值格式化之后如下：\n\n```\ndefault-src 'none';\nbase-uri 'self';\nblock-all-mixed-content;\nconnect-src 'self' uploads.github.com www.githubstatus.com collector.githubapp.com api.github.com github-cloud.s3.amazonaws.com github-production-repository-file-5c1aeb.s3.amazonaws.com github-production-upload-manifest-file-7fdce7.s3.amazonaws.com github-production-user-asset-6210df.s3.amazonaws.com cdn.optimizely.com logx.optimizely.com/v1/events translator.github.com wss://alive.github.com github.githubassets.com;\nfont-src github.githubassets.com;\nform-action 'self' github.com gist.github.com;\nframe-ancestors 'none';\nframe-src render.githubusercontent.com render-temp.githubusercontent.com viewscreen.githubusercontent.com;\nimg-src 'self' data: github.githubassets.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com secured-user-images.githubusercontent.com/ *.githubusercontent.com customer-stories-feed.github.com spotlights-feed.github.com;\nmanifest-src 'self';\nmedia-src github.githubassets.com;\nscript-src github.githubassets.com;\nstyle-src 'unsafe-inline' github.githubassets.com;\nworker-src github.com/socket-worker-3f088aa2.js gist.github.com/socket-worker-3f088aa2.js\n```\n关于这些字段的意义参考文末的资料。大致明白浏览器的安全策略主要涉及到script、img、font、xhr、style、媒体文件等资源的来源域名，防止页面被第三方恶意插入不信任域名的代码。\n\n我们的项目目前都是裸奔，至于这些设置能达到哪些程度上的安全，由于目前对web安全研究甚少，这块完全是盲点，打算认真啃下《Web前端黑客技术揭秘》这本书。\n\n### 参考资料\nhttps://www.ruanyifeng.com/blog/2016/09/csp.html\n","slug":"blogs/csp","published":1,"updated":"2021-08-05T00:31:56.846Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6e0005ecq86jp299vz","content":"<p>在浏览器命令行执行eval函数时，发现在有些网页的devTools中执行时报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VM132:1 Uncaught EvalError: Refused to evaluate a string as JavaScript because &#x27;unsafe-eval&#x27; is not an allowed source of script in the following Content Security Policy directive: &quot;script-src github.githubassets.com&quot;.</span><br><span class=\"line\"></span><br><span class=\"line\">    at new Function (&lt;anonymous&gt;)</span><br><span class=\"line\">    at &lt;anonymous&gt;:1:15</span><br><span class=\"line\">(anonymous) @ VM132:1</span><br></pre></td></tr></table></figure>\n<p>而在其它大部分网页的devTools中执行是正常的。</p>\n<p>根据报错信息大致明白：该网站设置了<code>Content Security Policy</code>，且该安全策略不允许执行<code>unsafe-eval</code>类型的脚本。</p>\n<p>拿github的为例，其html的response header有这个字段<code>content-security-policy</code>，其值格式化之后如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">default-src &#x27;none&#x27;;</span><br><span class=\"line\">base-uri &#x27;self&#x27;;</span><br><span class=\"line\">block-all-mixed-content;</span><br><span class=\"line\">connect-src &#x27;self&#x27; uploads.github.com www.githubstatus.com collector.githubapp.com api.github.com github-cloud.s3.amazonaws.com github-production-repository-file-5c1aeb.s3.amazonaws.com github-production-upload-manifest-file-7fdce7.s3.amazonaws.com github-production-user-asset-6210df.s3.amazonaws.com cdn.optimizely.com logx.optimizely.com/v1/events translator.github.com wss://alive.github.com github.githubassets.com;</span><br><span class=\"line\">font-src github.githubassets.com;</span><br><span class=\"line\">form-action &#x27;self&#x27; github.com gist.github.com;</span><br><span class=\"line\">frame-ancestors &#x27;none&#x27;;</span><br><span class=\"line\">frame-src render.githubusercontent.com render-temp.githubusercontent.com viewscreen.githubusercontent.com;</span><br><span class=\"line\">img-src &#x27;self&#x27; data: github.githubassets.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com secured-user-images.githubusercontent.com/ *.githubusercontent.com customer-stories-feed.github.com spotlights-feed.github.com;</span><br><span class=\"line\">manifest-src &#x27;self&#x27;;</span><br><span class=\"line\">media-src github.githubassets.com;</span><br><span class=\"line\">script-src github.githubassets.com;</span><br><span class=\"line\">style-src &#x27;unsafe-inline&#x27; github.githubassets.com;</span><br><span class=\"line\">worker-src github.com/socket-worker-3f088aa2.js gist.github.com/socket-worker-3f088aa2.js</span><br></pre></td></tr></table></figure>\n<p>关于这些字段的意义参考文末的资料。大致明白浏览器的安全策略主要涉及到script、img、font、xhr、style、媒体文件等资源的来源域名，防止页面被第三方恶意插入不信任域名的代码。</p>\n<p>我们的项目目前都是裸奔，至于这些设置能达到哪些程度上的安全，由于目前对web安全研究甚少，这块完全是盲点，打算认真啃下《Web前端黑客技术揭秘》这本书。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://www.ruanyifeng.com/blog/2016/09/csp.html\">https://www.ruanyifeng.com/blog/2016/09/csp.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在浏览器命令行执行eval函数时，发现在有些网页的devTools中执行时报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VM132:1 Uncaught EvalError: Refused to evaluate a string as JavaScript because &#x27;unsafe-eval&#x27; is not an allowed source of script in the following Content Security Policy directive: &quot;script-src github.githubassets.com&quot;.</span><br><span class=\"line\"></span><br><span class=\"line\">    at new Function (&lt;anonymous&gt;)</span><br><span class=\"line\">    at &lt;anonymous&gt;:1:15</span><br><span class=\"line\">(anonymous) @ VM132:1</span><br></pre></td></tr></table></figure>\n<p>而在其它大部分网页的devTools中执行是正常的。</p>\n<p>根据报错信息大致明白：该网站设置了<code>Content Security Policy</code>，且该安全策略不允许执行<code>unsafe-eval</code>类型的脚本。</p>\n<p>拿github的为例，其html的response header有这个字段<code>content-security-policy</code>，其值格式化之后如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">default-src &#x27;none&#x27;;</span><br><span class=\"line\">base-uri &#x27;self&#x27;;</span><br><span class=\"line\">block-all-mixed-content;</span><br><span class=\"line\">connect-src &#x27;self&#x27; uploads.github.com www.githubstatus.com collector.githubapp.com api.github.com github-cloud.s3.amazonaws.com github-production-repository-file-5c1aeb.s3.amazonaws.com github-production-upload-manifest-file-7fdce7.s3.amazonaws.com github-production-user-asset-6210df.s3.amazonaws.com cdn.optimizely.com logx.optimizely.com/v1/events translator.github.com wss://alive.github.com github.githubassets.com;</span><br><span class=\"line\">font-src github.githubassets.com;</span><br><span class=\"line\">form-action &#x27;self&#x27; github.com gist.github.com;</span><br><span class=\"line\">frame-ancestors &#x27;none&#x27;;</span><br><span class=\"line\">frame-src render.githubusercontent.com render-temp.githubusercontent.com viewscreen.githubusercontent.com;</span><br><span class=\"line\">img-src &#x27;self&#x27; data: github.githubassets.com identicons.github.com collector.githubapp.com github-cloud.s3.amazonaws.com secured-user-images.githubusercontent.com/ *.githubusercontent.com customer-stories-feed.github.com spotlights-feed.github.com;</span><br><span class=\"line\">manifest-src &#x27;self&#x27;;</span><br><span class=\"line\">media-src github.githubassets.com;</span><br><span class=\"line\">script-src github.githubassets.com;</span><br><span class=\"line\">style-src &#x27;unsafe-inline&#x27; github.githubassets.com;</span><br><span class=\"line\">worker-src github.com/socket-worker-3f088aa2.js gist.github.com/socket-worker-3f088aa2.js</span><br></pre></td></tr></table></figure>\n<p>关于这些字段的意义参考文末的资料。大致明白浏览器的安全策略主要涉及到script、img、font、xhr、style、媒体文件等资源的来源域名，防止页面被第三方恶意插入不信任域名的代码。</p>\n<p>我们的项目目前都是裸奔，至于这些设置能达到哪些程度上的安全，由于目前对web安全研究甚少，这块完全是盲点，打算认真啃下《Web前端黑客技术揭秘》这本书。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><p><a href=\"https://www.ruanyifeng.com/blog/2016/09/csp.html\">https://www.ruanyifeng.com/blog/2016/09/csp.html</a></p>\n"},{"title":"手写deepClone","date":"2021-06-02T16:00:00.000Z","_content":"\n通过Object.prototype.toString判断\n```\nlet mapObj = new Map();\nmapObj['key1'] = 1;\nmapObj['key2'] = 2;\nlet obj = {\n  a: 100,\n  b: [10, 20, 30],\n  c: {\n    x: 10\n  },\n  d: /^\\d+$/,\n  e: mapObj\n};\nlet arr = [10, [100, 200], {\n  x: 10,\n  y: 20\n}];\n\nfunction deepClone(obj) {\n  let newObj = {};\n  let type = Object.prototype.toString.call(obj).match(/\\[object\\s(\\w+)\\]/)[1];\n\n  if (type == 'Array' || type == 'Set') {\n    newObj = [];\n\n    for (const val of obj) {\n      newObj.push(deepClone(val));\n    }\n  } else if (type == 'Set') {\n    newObj = new Set()\n    for (const key of obj) {\n      newObj.add(deepClone(obj[key]));\n    }\n  } else if (type == 'Object' || type == 'Map') {\n    if(type == 'Map') newObj = new Map()\n\n    for (const key in obj) {\n      if (Object.hasOwnProperty.call(obj, key)) {\n        newObj[key] = deepClone(obj[key]);\n      }\n    }\n  } else {\n    return obj;\n  }\n\n  return newObj;\n}\n\nlet obj2 = deepClone(obj);\nlet arr2 = deepClone(arr); // console.log(obj2)\nconsole.log(arr2)\nconsole.log(obj2)\nconsole.log('-----------')\nobj.e.key1 = 3\nconsole.log(obj2)\nconsole.log('-----------')\narr[1][0] = 999\nconsole.log(arr2)\n```\n\n以上写法有个缺点是，\n1. 针对所有引用类型都要做判断，考虑的越周到，代码就越长\n2. 自定义类型\n\n\n通过typeof判断\n```\nfunction deepClone(obj) {\n  // typeOf针对null值结果也是object，需要特殊处理\n  if (typeof obj != 'object') return obj\n  if (obj == null) return obj\n  if (obj instanceof RegExp) return new RegExp(obj)\n  if (obj instanceof Date) return new Date(obj)\n  \n  let newObj = new obj.constructor;\n  for (const key in obj) {\n    if (Object.hasOwnProperty.call(obj, key)) {\n      newObj[key] = deepClone(obj[key]);\n    }\n  }\n  return newObj;\n}\n```\n\n以上方法需要注意:\n- typeof针对null值结果也是object，需要特殊处理\n- typeof针对所有的引用类型结果都是object，需要特殊处理\n\n偶然看到一个写的很全面的深拷贝方法：\nhttps://javascript.plainenglish.io/write-a-better-deep-clone-function-in-javascript-d0e798e5f550","source":"_posts/blogs/deep-clone.md","raw":"---\ntitle: 手写deepClone\ncategories: js\ntags: [js]\ndate: 2021-6-3\n---\n\n通过Object.prototype.toString判断\n```\nlet mapObj = new Map();\nmapObj['key1'] = 1;\nmapObj['key2'] = 2;\nlet obj = {\n  a: 100,\n  b: [10, 20, 30],\n  c: {\n    x: 10\n  },\n  d: /^\\d+$/,\n  e: mapObj\n};\nlet arr = [10, [100, 200], {\n  x: 10,\n  y: 20\n}];\n\nfunction deepClone(obj) {\n  let newObj = {};\n  let type = Object.prototype.toString.call(obj).match(/\\[object\\s(\\w+)\\]/)[1];\n\n  if (type == 'Array' || type == 'Set') {\n    newObj = [];\n\n    for (const val of obj) {\n      newObj.push(deepClone(val));\n    }\n  } else if (type == 'Set') {\n    newObj = new Set()\n    for (const key of obj) {\n      newObj.add(deepClone(obj[key]));\n    }\n  } else if (type == 'Object' || type == 'Map') {\n    if(type == 'Map') newObj = new Map()\n\n    for (const key in obj) {\n      if (Object.hasOwnProperty.call(obj, key)) {\n        newObj[key] = deepClone(obj[key]);\n      }\n    }\n  } else {\n    return obj;\n  }\n\n  return newObj;\n}\n\nlet obj2 = deepClone(obj);\nlet arr2 = deepClone(arr); // console.log(obj2)\nconsole.log(arr2)\nconsole.log(obj2)\nconsole.log('-----------')\nobj.e.key1 = 3\nconsole.log(obj2)\nconsole.log('-----------')\narr[1][0] = 999\nconsole.log(arr2)\n```\n\n以上写法有个缺点是，\n1. 针对所有引用类型都要做判断，考虑的越周到，代码就越长\n2. 自定义类型\n\n\n通过typeof判断\n```\nfunction deepClone(obj) {\n  // typeOf针对null值结果也是object，需要特殊处理\n  if (typeof obj != 'object') return obj\n  if (obj == null) return obj\n  if (obj instanceof RegExp) return new RegExp(obj)\n  if (obj instanceof Date) return new Date(obj)\n  \n  let newObj = new obj.constructor;\n  for (const key in obj) {\n    if (Object.hasOwnProperty.call(obj, key)) {\n      newObj[key] = deepClone(obj[key]);\n    }\n  }\n  return newObj;\n}\n```\n\n以上方法需要注意:\n- typeof针对null值结果也是object，需要特殊处理\n- typeof针对所有的引用类型结果都是object，需要特殊处理\n\n偶然看到一个写的很全面的深拷贝方法：\nhttps://javascript.plainenglish.io/write-a-better-deep-clone-function-in-javascript-d0e798e5f550","slug":"blogs/deep-clone","published":1,"updated":"2021-08-07T04:21:44.091Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6e0006ecq8842vg0rx","content":"<p>通过Object.prototype.toString判断</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let mapObj = new Map();</span><br><span class=\"line\">mapObj[&#x27;key1&#x27;] = 1;</span><br><span class=\"line\">mapObj[&#x27;key2&#x27;] = 2;</span><br><span class=\"line\">let obj = &#123;</span><br><span class=\"line\">  a: 100,</span><br><span class=\"line\">  b: [10, 20, 30],</span><br><span class=\"line\">  c: &#123;</span><br><span class=\"line\">    x: 10</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  d: /^\\d+$/,</span><br><span class=\"line\">  e: mapObj</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">let arr = [10, [100, 200], &#123;</span><br><span class=\"line\">  x: 10,</span><br><span class=\"line\">  y: 20</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">function deepClone(obj) &#123;</span><br><span class=\"line\">  let newObj = &#123;&#125;;</span><br><span class=\"line\">  let type = Object.prototype.toString.call(obj).match(/\\[object\\s(\\w+)\\]/)[1];</span><br><span class=\"line\"></span><br><span class=\"line\">  if (type == &#x27;Array&#x27; || type == &#x27;Set&#x27;) &#123;</span><br><span class=\"line\">    newObj = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    for (const val of obj) &#123;</span><br><span class=\"line\">      newObj.push(deepClone(val));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; else if (type == &#x27;Set&#x27;) &#123;</span><br><span class=\"line\">    newObj = new Set()</span><br><span class=\"line\">    for (const key of obj) &#123;</span><br><span class=\"line\">      newObj.add(deepClone(obj[key]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; else if (type == &#x27;Object&#x27; || type == &#x27;Map&#x27;) &#123;</span><br><span class=\"line\">    if(type == &#x27;Map&#x27;) newObj = new Map()</span><br><span class=\"line\"></span><br><span class=\"line\">    for (const key in obj) &#123;</span><br><span class=\"line\">      if (Object.hasOwnProperty.call(obj, key)) &#123;</span><br><span class=\"line\">        newObj[key] = deepClone(obj[key]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    return obj;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return newObj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let obj2 = deepClone(obj);</span><br><span class=\"line\">let arr2 = deepClone(arr); // console.log(obj2)</span><br><span class=\"line\">console.log(arr2)</span><br><span class=\"line\">console.log(obj2)</span><br><span class=\"line\">console.log(&#x27;-----------&#x27;)</span><br><span class=\"line\">obj.e.key1 = 3</span><br><span class=\"line\">console.log(obj2)</span><br><span class=\"line\">console.log(&#x27;-----------&#x27;)</span><br><span class=\"line\">arr[1][0] = 999</span><br><span class=\"line\">console.log(arr2)</span><br></pre></td></tr></table></figure>\n\n<p>以上写法有个缺点是，</p>\n<ol>\n<li>针对所有引用类型都要做判断，考虑的越周到，代码就越长</li>\n<li>自定义类型</li>\n</ol>\n<p>通过typeof判断</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function deepClone(obj) &#123;</span><br><span class=\"line\">  // typeOf针对null值结果也是object，需要特殊处理</span><br><span class=\"line\">  if (typeof obj != &#x27;object&#x27;) return obj</span><br><span class=\"line\">  if (obj == null) return obj</span><br><span class=\"line\">  if (obj instanceof RegExp) return new RegExp(obj)</span><br><span class=\"line\">  if (obj instanceof Date) return new Date(obj)</span><br><span class=\"line\">  </span><br><span class=\"line\">  let newObj = new obj.constructor;</span><br><span class=\"line\">  for (const key in obj) &#123;</span><br><span class=\"line\">    if (Object.hasOwnProperty.call(obj, key)) &#123;</span><br><span class=\"line\">      newObj[key] = deepClone(obj[key]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return newObj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上方法需要注意:</p>\n<ul>\n<li>typeof针对null值结果也是object，需要特殊处理</li>\n<li>typeof针对所有的引用类型结果都是object，需要特殊处理</li>\n</ul>\n<p>偶然看到一个写的很全面的深拷贝方法：<br><a href=\"https://javascript.plainenglish.io/write-a-better-deep-clone-function-in-javascript-d0e798e5f550\">https://javascript.plainenglish.io/write-a-better-deep-clone-function-in-javascript-d0e798e5f550</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>通过Object.prototype.toString判断</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let mapObj = new Map();</span><br><span class=\"line\">mapObj[&#x27;key1&#x27;] = 1;</span><br><span class=\"line\">mapObj[&#x27;key2&#x27;] = 2;</span><br><span class=\"line\">let obj = &#123;</span><br><span class=\"line\">  a: 100,</span><br><span class=\"line\">  b: [10, 20, 30],</span><br><span class=\"line\">  c: &#123;</span><br><span class=\"line\">    x: 10</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  d: /^\\d+$/,</span><br><span class=\"line\">  e: mapObj</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">let arr = [10, [100, 200], &#123;</span><br><span class=\"line\">  x: 10,</span><br><span class=\"line\">  y: 20</span><br><span class=\"line\">&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">function deepClone(obj) &#123;</span><br><span class=\"line\">  let newObj = &#123;&#125;;</span><br><span class=\"line\">  let type = Object.prototype.toString.call(obj).match(/\\[object\\s(\\w+)\\]/)[1];</span><br><span class=\"line\"></span><br><span class=\"line\">  if (type == &#x27;Array&#x27; || type == &#x27;Set&#x27;) &#123;</span><br><span class=\"line\">    newObj = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    for (const val of obj) &#123;</span><br><span class=\"line\">      newObj.push(deepClone(val));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; else if (type == &#x27;Set&#x27;) &#123;</span><br><span class=\"line\">    newObj = new Set()</span><br><span class=\"line\">    for (const key of obj) &#123;</span><br><span class=\"line\">      newObj.add(deepClone(obj[key]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; else if (type == &#x27;Object&#x27; || type == &#x27;Map&#x27;) &#123;</span><br><span class=\"line\">    if(type == &#x27;Map&#x27;) newObj = new Map()</span><br><span class=\"line\"></span><br><span class=\"line\">    for (const key in obj) &#123;</span><br><span class=\"line\">      if (Object.hasOwnProperty.call(obj, key)) &#123;</span><br><span class=\"line\">        newObj[key] = deepClone(obj[key]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    return obj;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return newObj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let obj2 = deepClone(obj);</span><br><span class=\"line\">let arr2 = deepClone(arr); // console.log(obj2)</span><br><span class=\"line\">console.log(arr2)</span><br><span class=\"line\">console.log(obj2)</span><br><span class=\"line\">console.log(&#x27;-----------&#x27;)</span><br><span class=\"line\">obj.e.key1 = 3</span><br><span class=\"line\">console.log(obj2)</span><br><span class=\"line\">console.log(&#x27;-----------&#x27;)</span><br><span class=\"line\">arr[1][0] = 999</span><br><span class=\"line\">console.log(arr2)</span><br></pre></td></tr></table></figure>\n\n<p>以上写法有个缺点是，</p>\n<ol>\n<li>针对所有引用类型都要做判断，考虑的越周到，代码就越长</li>\n<li>自定义类型</li>\n</ol>\n<p>通过typeof判断</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function deepClone(obj) &#123;</span><br><span class=\"line\">  // typeOf针对null值结果也是object，需要特殊处理</span><br><span class=\"line\">  if (typeof obj != &#x27;object&#x27;) return obj</span><br><span class=\"line\">  if (obj == null) return obj</span><br><span class=\"line\">  if (obj instanceof RegExp) return new RegExp(obj)</span><br><span class=\"line\">  if (obj instanceof Date) return new Date(obj)</span><br><span class=\"line\">  </span><br><span class=\"line\">  let newObj = new obj.constructor;</span><br><span class=\"line\">  for (const key in obj) &#123;</span><br><span class=\"line\">    if (Object.hasOwnProperty.call(obj, key)) &#123;</span><br><span class=\"line\">      newObj[key] = deepClone(obj[key]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return newObj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上方法需要注意:</p>\n<ul>\n<li>typeof针对null值结果也是object，需要特殊处理</li>\n<li>typeof针对所有的引用类型结果都是object，需要特殊处理</li>\n</ul>\n<p>偶然看到一个写的很全面的深拷贝方法：<br><a href=\"https://javascript.plainenglish.io/write-a-better-deep-clone-function-in-javascript-d0e798e5f550\">https://javascript.plainenglish.io/write-a-better-deep-clone-function-in-javascript-d0e798e5f550</a></p>\n"},{"title":"flex上中下布局","date":"2019-05-09T16:00:00.000Z","_content":"\n此文档只是说明如何实现，采用最新的弹性盒子布局规范，对旧写法不做考虑。\n\n## 盒子组成\n\n```\n<body class=\"flex-ver\">\n    <div class=\"header red\">header</div>\n    <div class=\"container flex-auto orange\">\n        <div>content</div>\n        <div>content</div>\n        <div>content</div>\n        <div>content</div>\n    </div>\n    <div class=\"footer blue\">footer</div>\n</body>\n```\n## 步骤\n\n### 步骤一：body元素设置为flex容器，纵向主轴\n\n\n```\n.flex-ver {\n    display: flex;\n    flex-direction: column;\n}\n```\n\n### 步骤二：header和footer固定高度\n\n```\n.header {\n    height: 150px;\n}\n.footer {\n    height: 100px;\n}\n```\n\n\n### 步骤三：主体区域container设置为占用剩余高度\n\n\n```\n.flex-auto {\n  flex-grow: 1;\n  flex-basis: 0%;\n}\n```\n## 完整代码\n\n```\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n    <link rel=\"stylesheet\" href=\"./flex.css\">\n</head>\n<body class=\"flex-ver\">\n    <div class=\"header red\">header</div>\n    <div class=\"container flex-auto orange\">\n        <div>content</div>\n        <div>content</div>\n        <div>content</div>\n        <div>content</div>\n    </div>\n    <div class=\"footer blue\">footer</div>\n</body>\n<style>\n    .header {\n        height: 150px;\n    }\n    .footer {\n        height: 100px;\n    }\n    .flex-item {\n        height: auto;\n    }\n    .flex {\n        display: flex;\n        flex-direction: row;\n    }\n    .flex-ver {\n        display: flex;\n        flex-direction: column;\n    }\n    .red {\n        background: red;\n    }\n    .blue {\n        background: blue;\n    }\n    .black {\n        background: black;\n    }\n    .orange {\n        background: orange;\n    }\n</style>\n</html>\n\n```\n\n## 整体效果\n\n1. 主体内容高度自适应\n2. 底部footer位于文档最底部，即使主体区域高度不足以占满视口，footer依旧贴在底部。\n\n## 兼容性\n\n火狐浏览器未能实现该效果，主体内容的高度根据内容自适应的，body的整体高度有可能低于视口高度。\n\n## 解决火狐浏览器兼容性问题\n\n注意，html不要设置为overflow: hidden，要设置为overflow:visible。\n\n```\nhtml, body , div {\n    padding: 0;\n    margin: 0;\n}\nhtml {\n    height: 100%;\n}\nbody {\n    min-height: 100%\n}\n```\n\n\n","source":"_posts/blogs/flex-layout.md","raw":"---\ntitle: flex上中下布局\ncategories: css\ntags: [布局]\ndate: 2019-5-10\n---\n\n此文档只是说明如何实现，采用最新的弹性盒子布局规范，对旧写法不做考虑。\n\n## 盒子组成\n\n```\n<body class=\"flex-ver\">\n    <div class=\"header red\">header</div>\n    <div class=\"container flex-auto orange\">\n        <div>content</div>\n        <div>content</div>\n        <div>content</div>\n        <div>content</div>\n    </div>\n    <div class=\"footer blue\">footer</div>\n</body>\n```\n## 步骤\n\n### 步骤一：body元素设置为flex容器，纵向主轴\n\n\n```\n.flex-ver {\n    display: flex;\n    flex-direction: column;\n}\n```\n\n### 步骤二：header和footer固定高度\n\n```\n.header {\n    height: 150px;\n}\n.footer {\n    height: 100px;\n}\n```\n\n\n### 步骤三：主体区域container设置为占用剩余高度\n\n\n```\n.flex-auto {\n  flex-grow: 1;\n  flex-basis: 0%;\n}\n```\n## 完整代码\n\n```\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n    <link rel=\"stylesheet\" href=\"./flex.css\">\n</head>\n<body class=\"flex-ver\">\n    <div class=\"header red\">header</div>\n    <div class=\"container flex-auto orange\">\n        <div>content</div>\n        <div>content</div>\n        <div>content</div>\n        <div>content</div>\n    </div>\n    <div class=\"footer blue\">footer</div>\n</body>\n<style>\n    .header {\n        height: 150px;\n    }\n    .footer {\n        height: 100px;\n    }\n    .flex-item {\n        height: auto;\n    }\n    .flex {\n        display: flex;\n        flex-direction: row;\n    }\n    .flex-ver {\n        display: flex;\n        flex-direction: column;\n    }\n    .red {\n        background: red;\n    }\n    .blue {\n        background: blue;\n    }\n    .black {\n        background: black;\n    }\n    .orange {\n        background: orange;\n    }\n</style>\n</html>\n\n```\n\n## 整体效果\n\n1. 主体内容高度自适应\n2. 底部footer位于文档最底部，即使主体区域高度不足以占满视口，footer依旧贴在底部。\n\n## 兼容性\n\n火狐浏览器未能实现该效果，主体内容的高度根据内容自适应的，body的整体高度有可能低于视口高度。\n\n## 解决火狐浏览器兼容性问题\n\n注意，html不要设置为overflow: hidden，要设置为overflow:visible。\n\n```\nhtml, body , div {\n    padding: 0;\n    margin: 0;\n}\nhtml {\n    height: 100%;\n}\nbody {\n    min-height: 100%\n}\n```\n\n\n","slug":"blogs/flex-layout","published":1,"updated":"2021-06-14T02:02:39.414Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6f0007ecq8c21i9jwi","content":"<p>此文档只是说明如何实现，采用最新的弹性盒子布局规范，对旧写法不做考虑。</p>\n<h2 id=\"盒子组成\"><a href=\"#盒子组成\" class=\"headerlink\" title=\"盒子组成\"></a>盒子组成</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body class=&quot;flex-ver&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;header red&quot;&gt;header&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;container flex-auto orange&quot;&gt;</span><br><span class=\"line\">        &lt;div&gt;content&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;content&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;content&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;content&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;footer blue&quot;&gt;footer&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"步骤一：body元素设置为flex容器，纵向主轴\"><a href=\"#步骤一：body元素设置为flex容器，纵向主轴\" class=\"headerlink\" title=\"步骤一：body元素设置为flex容器，纵向主轴\"></a>步骤一：body元素设置为flex容器，纵向主轴</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.flex-ver &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    flex-direction: column;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤二：header和footer固定高度\"><a href=\"#步骤二：header和footer固定高度\" class=\"headerlink\" title=\"步骤二：header和footer固定高度\"></a>步骤二：header和footer固定高度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.header &#123;</span><br><span class=\"line\">    height: 150px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.footer &#123;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"步骤三：主体区域container设置为占用剩余高度\"><a href=\"#步骤三：主体区域container设置为占用剩余高度\" class=\"headerlink\" title=\"步骤三：主体区域container设置为占用剩余高度\"></a>步骤三：主体区域container设置为占用剩余高度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.flex-auto &#123;</span><br><span class=\"line\">  flex-grow: 1;</span><br><span class=\"line\">  flex-basis: 0%;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;./flex.css&quot;&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body class=&quot;flex-ver&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;header red&quot;&gt;header&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;container flex-auto orange&quot;&gt;</span><br><span class=\"line\">        &lt;div&gt;content&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;content&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;content&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;content&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;footer blue&quot;&gt;footer&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    .header &#123;</span><br><span class=\"line\">        height: 150px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .footer &#123;</span><br><span class=\"line\">        height: 100px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .flex-item &#123;</span><br><span class=\"line\">        height: auto;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .flex &#123;</span><br><span class=\"line\">        display: flex;</span><br><span class=\"line\">        flex-direction: row;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .flex-ver &#123;</span><br><span class=\"line\">        display: flex;</span><br><span class=\"line\">        flex-direction: column;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .red &#123;</span><br><span class=\"line\">        background: red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .blue &#123;</span><br><span class=\"line\">        background: blue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .black &#123;</span><br><span class=\"line\">        background: black;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .orange &#123;</span><br><span class=\"line\">        background: orange;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"整体效果\"><a href=\"#整体效果\" class=\"headerlink\" title=\"整体效果\"></a>整体效果</h2><ol>\n<li>主体内容高度自适应</li>\n<li>底部footer位于文档最底部，即使主体区域高度不足以占满视口，footer依旧贴在底部。</li>\n</ol>\n<h2 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h2><p>火狐浏览器未能实现该效果，主体内容的高度根据内容自适应的，body的整体高度有可能低于视口高度。</p>\n<h2 id=\"解决火狐浏览器兼容性问题\"><a href=\"#解决火狐浏览器兼容性问题\" class=\"headerlink\" title=\"解决火狐浏览器兼容性问题\"></a>解决火狐浏览器兼容性问题</h2><p>注意，html不要设置为overflow: hidden，要设置为overflow:visible。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html, body , div &#123;</span><br><span class=\"line\">    padding: 0;</span><br><span class=\"line\">    margin: 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">html &#123;</span><br><span class=\"line\">    height: 100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">body &#123;</span><br><span class=\"line\">    min-height: 100%</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<p>此文档只是说明如何实现，采用最新的弹性盒子布局规范，对旧写法不做考虑。</p>\n<h2 id=\"盒子组成\"><a href=\"#盒子组成\" class=\"headerlink\" title=\"盒子组成\"></a>盒子组成</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body class=&quot;flex-ver&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;header red&quot;&gt;header&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;container flex-auto orange&quot;&gt;</span><br><span class=\"line\">        &lt;div&gt;content&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;content&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;content&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;content&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;footer blue&quot;&gt;footer&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"步骤一：body元素设置为flex容器，纵向主轴\"><a href=\"#步骤一：body元素设置为flex容器，纵向主轴\" class=\"headerlink\" title=\"步骤一：body元素设置为flex容器，纵向主轴\"></a>步骤一：body元素设置为flex容器，纵向主轴</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.flex-ver &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    flex-direction: column;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤二：header和footer固定高度\"><a href=\"#步骤二：header和footer固定高度\" class=\"headerlink\" title=\"步骤二：header和footer固定高度\"></a>步骤二：header和footer固定高度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.header &#123;</span><br><span class=\"line\">    height: 150px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.footer &#123;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"步骤三：主体区域container设置为占用剩余高度\"><a href=\"#步骤三：主体区域container设置为占用剩余高度\" class=\"headerlink\" title=\"步骤三：主体区域container设置为占用剩余高度\"></a>步骤三：主体区域container设置为占用剩余高度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.flex-auto &#123;</span><br><span class=\"line\">  flex-grow: 1;</span><br><span class=\"line\">  flex-basis: 0%;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;./flex.css&quot;&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body class=&quot;flex-ver&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;header red&quot;&gt;header&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;container flex-auto orange&quot;&gt;</span><br><span class=\"line\">        &lt;div&gt;content&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;content&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;content&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;content&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;footer blue&quot;&gt;footer&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">    .header &#123;</span><br><span class=\"line\">        height: 150px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .footer &#123;</span><br><span class=\"line\">        height: 100px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .flex-item &#123;</span><br><span class=\"line\">        height: auto;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .flex &#123;</span><br><span class=\"line\">        display: flex;</span><br><span class=\"line\">        flex-direction: row;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .flex-ver &#123;</span><br><span class=\"line\">        display: flex;</span><br><span class=\"line\">        flex-direction: column;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .red &#123;</span><br><span class=\"line\">        background: red;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .blue &#123;</span><br><span class=\"line\">        background: blue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .black &#123;</span><br><span class=\"line\">        background: black;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .orange &#123;</span><br><span class=\"line\">        background: orange;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"整体效果\"><a href=\"#整体效果\" class=\"headerlink\" title=\"整体效果\"></a>整体效果</h2><ol>\n<li>主体内容高度自适应</li>\n<li>底部footer位于文档最底部，即使主体区域高度不足以占满视口，footer依旧贴在底部。</li>\n</ol>\n<h2 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h2><p>火狐浏览器未能实现该效果，主体内容的高度根据内容自适应的，body的整体高度有可能低于视口高度。</p>\n<h2 id=\"解决火狐浏览器兼容性问题\"><a href=\"#解决火狐浏览器兼容性问题\" class=\"headerlink\" title=\"解决火狐浏览器兼容性问题\"></a>解决火狐浏览器兼容性问题</h2><p>注意，html不要设置为overflow: hidden，要设置为overflow:visible。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html, body , div &#123;</span><br><span class=\"line\">    padding: 0;</span><br><span class=\"line\">    margin: 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">html &#123;</span><br><span class=\"line\">    height: 100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">body &#123;</span><br><span class=\"line\">    min-height: 100%</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"https密钥交换与数据传输","date":"2020-10-01T16:00:00.000Z","_content":"\n> https协议需要同事保证数据的私密性，也要保证完整性。也就是书，既要防止被解密，也要防止被篡改。\n\n## 保证私密性\n私密性通过对称密钥加密来实现。所以，关键是要双方共享对称密钥（即下文的k），同时防止第三方拿到这个密钥。\n\n双方共享对称密钥的过程即下图的“交换密钥”。\n\n![密钥交换与数据传输图解](/images/2019090101.jpg)\n\n## 保证完整性\n虽然第三方没有办法解密截获的内容，但是它却可以对截获的内容进行篡改再发出去。https是如何做到识别篡改的呢？\n\nhttps的加密算法含有消息认证机制。\n数字摘要是采用单项Hash函数将需要加密的明文“摘要”成一串固定长度（128位）的密文，这一串密文又称为数字指纹(fingerprint)，它有固定的长度，而且不同的明文摘要成密文，其结果总是不同的，而同样的明文其摘要必定一致。“数字摘要“是https能确保数据完整性和防篡改的根本原因。\n\n所以只要对内容稍有改动，算出来的指纹就和原来的指纹不一样了，这样就可以知道内容已经被篡改过，不可信了。\n\n所以，综上，双方是约定来一套机制验证数据的完整性，但是不能恢复被篡改的数据。","source":"_posts/blogs/https.md","raw":"---\ntitle: https密钥交换与数据传输\ncategories: 网络\ntags: [https]\ndate: 2020-10-2\n---\n\n> https协议需要同事保证数据的私密性，也要保证完整性。也就是书，既要防止被解密，也要防止被篡改。\n\n## 保证私密性\n私密性通过对称密钥加密来实现。所以，关键是要双方共享对称密钥（即下文的k），同时防止第三方拿到这个密钥。\n\n双方共享对称密钥的过程即下图的“交换密钥”。\n\n![密钥交换与数据传输图解](/images/2019090101.jpg)\n\n## 保证完整性\n虽然第三方没有办法解密截获的内容，但是它却可以对截获的内容进行篡改再发出去。https是如何做到识别篡改的呢？\n\nhttps的加密算法含有消息认证机制。\n数字摘要是采用单项Hash函数将需要加密的明文“摘要”成一串固定长度（128位）的密文，这一串密文又称为数字指纹(fingerprint)，它有固定的长度，而且不同的明文摘要成密文，其结果总是不同的，而同样的明文其摘要必定一致。“数字摘要“是https能确保数据完整性和防篡改的根本原因。\n\n所以只要对内容稍有改动，算出来的指纹就和原来的指纹不一样了，这样就可以知道内容已经被篡改过，不可信了。\n\n所以，综上，双方是约定来一套机制验证数据的完整性，但是不能恢复被篡改的数据。","slug":"blogs/https","published":1,"updated":"2021-06-14T02:02:51.793Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6f0008ecq84ej0b8a2","content":"<blockquote>\n<p>https协议需要同事保证数据的私密性，也要保证完整性。也就是书，既要防止被解密，也要防止被篡改。</p>\n</blockquote>\n<h2 id=\"保证私密性\"><a href=\"#保证私密性\" class=\"headerlink\" title=\"保证私密性\"></a>保证私密性</h2><p>私密性通过对称密钥加密来实现。所以，关键是要双方共享对称密钥（即下文的k），同时防止第三方拿到这个密钥。</p>\n<p>双方共享对称密钥的过程即下图的“交换密钥”。</p>\n<p><img src=\"/images/2019090101.jpg\" alt=\"密钥交换与数据传输图解\"></p>\n<h2 id=\"保证完整性\"><a href=\"#保证完整性\" class=\"headerlink\" title=\"保证完整性\"></a>保证完整性</h2><p>虽然第三方没有办法解密截获的内容，但是它却可以对截获的内容进行篡改再发出去。https是如何做到识别篡改的呢？</p>\n<p>https的加密算法含有消息认证机制。<br>数字摘要是采用单项Hash函数将需要加密的明文“摘要”成一串固定长度（128位）的密文，这一串密文又称为数字指纹(fingerprint)，它有固定的长度，而且不同的明文摘要成密文，其结果总是不同的，而同样的明文其摘要必定一致。“数字摘要“是https能确保数据完整性和防篡改的根本原因。</p>\n<p>所以只要对内容稍有改动，算出来的指纹就和原来的指纹不一样了，这样就可以知道内容已经被篡改过，不可信了。</p>\n<p>所以，综上，双方是约定来一套机制验证数据的完整性，但是不能恢复被篡改的数据。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>https协议需要同事保证数据的私密性，也要保证完整性。也就是书，既要防止被解密，也要防止被篡改。</p>\n</blockquote>\n<h2 id=\"保证私密性\"><a href=\"#保证私密性\" class=\"headerlink\" title=\"保证私密性\"></a>保证私密性</h2><p>私密性通过对称密钥加密来实现。所以，关键是要双方共享对称密钥（即下文的k），同时防止第三方拿到这个密钥。</p>\n<p>双方共享对称密钥的过程即下图的“交换密钥”。</p>\n<p><img src=\"/images/2019090101.jpg\" alt=\"密钥交换与数据传输图解\"></p>\n<h2 id=\"保证完整性\"><a href=\"#保证完整性\" class=\"headerlink\" title=\"保证完整性\"></a>保证完整性</h2><p>虽然第三方没有办法解密截获的内容，但是它却可以对截获的内容进行篡改再发出去。https是如何做到识别篡改的呢？</p>\n<p>https的加密算法含有消息认证机制。<br>数字摘要是采用单项Hash函数将需要加密的明文“摘要”成一串固定长度（128位）的密文，这一串密文又称为数字指纹(fingerprint)，它有固定的长度，而且不同的明文摘要成密文，其结果总是不同的，而同样的明文其摘要必定一致。“数字摘要“是https能确保数据完整性和防篡改的根本原因。</p>\n<p>所以只要对内容稍有改动，算出来的指纹就和原来的指纹不一样了，这样就可以知道内容已经被篡改过，不可信了。</p>\n<p>所以，综上，双方是约定来一套机制验证数据的完整性，但是不能恢复被篡改的数据。</p>\n"},{"title":"in 操作符","date":"2020-03-19T16:00:00.000Z","_content":"\n用来判断对象中是否拥有某个属性。\n\n## 使用场景\n\n### for 循环\n```js\nlet obj = {a: 1, b:2, c:3}\n\nfor(let key in obj) {\n  console.log(obj[key])\n}\n```\n\n### 判断是否有某个属性\n```js\nlet obj = {a: 1, b:2, c:3}\nif('a' in obj) {\n  console.log('obj has property \"a\"')\n}\n```\n\n## 和 hasOwnProperty的区别\n```\nin操作符可以判断所有可以通过点操作符访问到的属性，即可以访问对象本身以及原型链上的属性。hasOwnProperty只能判断实例拥有 的属性，不能判断原型链上的属性。\n```\n\n由于原型链上的属性是只读的，所以delete操作符只能删除属于对象本身的属性。","source":"_posts/blogs/in-operator.md","raw":"---\ntitle: in 操作符\ncategories: 工具\ntags: [javascript]\ndate: 2020-3-20\n---\n\n用来判断对象中是否拥有某个属性。\n\n## 使用场景\n\n### for 循环\n```js\nlet obj = {a: 1, b:2, c:3}\n\nfor(let key in obj) {\n  console.log(obj[key])\n}\n```\n\n### 判断是否有某个属性\n```js\nlet obj = {a: 1, b:2, c:3}\nif('a' in obj) {\n  console.log('obj has property \"a\"')\n}\n```\n\n## 和 hasOwnProperty的区别\n```\nin操作符可以判断所有可以通过点操作符访问到的属性，即可以访问对象本身以及原型链上的属性。hasOwnProperty只能判断实例拥有 的属性，不能判断原型链上的属性。\n```\n\n由于原型链上的属性是只读的，所以delete操作符只能删除属于对象本身的属性。","slug":"blogs/in-operator","published":1,"updated":"2021-06-14T02:03:49.324Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6g0009ecq8c4049ghs","content":"<p>用来判断对象中是否拥有某个属性。</p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><h3 id=\"for-循环\"><a href=\"#for-循环\" class=\"headerlink\" title=\"for 循环\"></a>for 循环</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>:<span class=\"number\">2</span>, <span class=\"attr\">c</span>:<span class=\"number\">3</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(obj[key])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"判断是否有某个属性\"><a href=\"#判断是否有某个属性\" class=\"headerlink\" title=\"判断是否有某个属性\"></a>判断是否有某个属性</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>:<span class=\"number\">2</span>, <span class=\"attr\">c</span>:<span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"string\">&#x27;a&#x27;</span> <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;obj has property &quot;a&quot;&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"和-hasOwnProperty的区别\"><a href=\"#和-hasOwnProperty的区别\" class=\"headerlink\" title=\"和 hasOwnProperty的区别\"></a>和 hasOwnProperty的区别</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">in操作符可以判断所有可以通过点操作符访问到的属性，即可以访问对象本身以及原型链上的属性。hasOwnProperty只能判断实例拥有 的属性，不能判断原型链上的属性。</span><br></pre></td></tr></table></figure>\n\n<p>由于原型链上的属性是只读的，所以delete操作符只能删除属于对象本身的属性。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>用来判断对象中是否拥有某个属性。</p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><h3 id=\"for-循环\"><a href=\"#for-循环\" class=\"headerlink\" title=\"for 循环\"></a>for 循环</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>:<span class=\"number\">2</span>, <span class=\"attr\">c</span>:<span class=\"number\">3</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(obj[key])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"判断是否有某个属性\"><a href=\"#判断是否有某个属性\" class=\"headerlink\" title=\"判断是否有某个属性\"></a>判断是否有某个属性</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>:<span class=\"number\">2</span>, <span class=\"attr\">c</span>:<span class=\"number\">3</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"string\">&#x27;a&#x27;</span> <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;obj has property &quot;a&quot;&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"和-hasOwnProperty的区别\"><a href=\"#和-hasOwnProperty的区别\" class=\"headerlink\" title=\"和 hasOwnProperty的区别\"></a>和 hasOwnProperty的区别</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">in操作符可以判断所有可以通过点操作符访问到的属性，即可以访问对象本身以及原型链上的属性。hasOwnProperty只能判断实例拥有 的属性，不能判断原型链上的属性。</span><br></pre></td></tr></table></figure>\n\n<p>由于原型链上的属性是只读的，所以delete操作符只能删除属于对象本身的属性。</p>\n"},{"title":"判断浏览器是否是隐私模式","date":"2019-03-06T16:00:00.000Z","_content":"\n### 很旧的版本\n\n较旧的版本，无痕模式禁用了FileSystem API。\n```js\nvar fs = window.RequestFileSystem || window.webkitRequestFileSystem;\nif (!fs) {\n  console.log(\"check failed?\");\n} else {\n  fs(window.TEMPORARY,\n      100,\n      console.log.bind(console, \"not in incognito mode\"),\n      console.log.bind(console, \"incognito mode\"));\n}\n```\n\n但是据说现在不能用了。\n\n### 新一点的\n无痕模式下，TEMPORARY 存储配额较低。[参考文章](https://mishravikas.com/articles/2019-07/bypassing-anti-incognito-detection-google-chrome.html)\n\n```js\nif ('storage' in navigator && 'estimate' in navigator.storage) {\n    const {usage, quota} = await navigator.storage.estimate();\n    console.log(`Using ${usage} out of ${quota} bytes.`);\n\n    if(quota < 120000000){\n        console.log('Incognito')\n    } else {\n        console.log('Not Incognito')\n    }   \n} else {\n    console.log('Can not detect')\n}\n```\n但是个人使用chrome实践之后发现这个方法其实也不行，隐私模式下输出结果为：\n```\nUsing 0 out of 536504813 bytes.\n```\n\n### 现在的无痕模式\n\n看到stackoverflow的一个[回答](https://stackoverflow.com/questions/2860879/detecting-if-a-browser-is-using-private-browsing-mode)解释说，chrome76+的版本都不允许任何方式检测无痕模式。\n\n看看现在chrome对无痕模式对解释：\n\n> 在无痕模式下，您的浏览记录、Cookie、网站数据以及您在表单中输入的信息都不会保存到您的设备中。也就是说，您的活动不会显示在 Chrome 浏览器的历史记录中，因此与您共用设备的人不会看到您的活动。网站会将您视为新用户；只要您不登录，网站就无法确定您的身份。\n\nlocalstorage和sessionStorage还是可以用的，只不过cookie不会保存。等下，cookie不会保存是什么概念，我们再看看：\n\n> 每次您关闭所有无痕式窗口时，Chrome 都会舍弃与此浏览会话相关的所有网站数据和 Cookie。\n\n也就是说，cookie用是可以用，但是窗口关闭的话不会保存。如果我们cookie的有效期不是session类型的，会受到影响。本来你的cookie设定7天后过期，结果今天用完关闭窗口cookie就没了。这样做也正是无痕模式的初衷，而且不影响使用。\n\n### 总结\n\n现在的浏览器已经没有必要判断无痕模式了。目前的无痕模式的重点在于使用后不留下记录，不影响使用过程。\n\n\n\n","source":"_posts/blogs/incognito-mode.md","raw":"---\ntitle: 判断浏览器是否是隐私模式\ncategories: javascript\ntags: [javascript]\ndate: 2019-3-7\n---\n\n### 很旧的版本\n\n较旧的版本，无痕模式禁用了FileSystem API。\n```js\nvar fs = window.RequestFileSystem || window.webkitRequestFileSystem;\nif (!fs) {\n  console.log(\"check failed?\");\n} else {\n  fs(window.TEMPORARY,\n      100,\n      console.log.bind(console, \"not in incognito mode\"),\n      console.log.bind(console, \"incognito mode\"));\n}\n```\n\n但是据说现在不能用了。\n\n### 新一点的\n无痕模式下，TEMPORARY 存储配额较低。[参考文章](https://mishravikas.com/articles/2019-07/bypassing-anti-incognito-detection-google-chrome.html)\n\n```js\nif ('storage' in navigator && 'estimate' in navigator.storage) {\n    const {usage, quota} = await navigator.storage.estimate();\n    console.log(`Using ${usage} out of ${quota} bytes.`);\n\n    if(quota < 120000000){\n        console.log('Incognito')\n    } else {\n        console.log('Not Incognito')\n    }   \n} else {\n    console.log('Can not detect')\n}\n```\n但是个人使用chrome实践之后发现这个方法其实也不行，隐私模式下输出结果为：\n```\nUsing 0 out of 536504813 bytes.\n```\n\n### 现在的无痕模式\n\n看到stackoverflow的一个[回答](https://stackoverflow.com/questions/2860879/detecting-if-a-browser-is-using-private-browsing-mode)解释说，chrome76+的版本都不允许任何方式检测无痕模式。\n\n看看现在chrome对无痕模式对解释：\n\n> 在无痕模式下，您的浏览记录、Cookie、网站数据以及您在表单中输入的信息都不会保存到您的设备中。也就是说，您的活动不会显示在 Chrome 浏览器的历史记录中，因此与您共用设备的人不会看到您的活动。网站会将您视为新用户；只要您不登录，网站就无法确定您的身份。\n\nlocalstorage和sessionStorage还是可以用的，只不过cookie不会保存。等下，cookie不会保存是什么概念，我们再看看：\n\n> 每次您关闭所有无痕式窗口时，Chrome 都会舍弃与此浏览会话相关的所有网站数据和 Cookie。\n\n也就是说，cookie用是可以用，但是窗口关闭的话不会保存。如果我们cookie的有效期不是session类型的，会受到影响。本来你的cookie设定7天后过期，结果今天用完关闭窗口cookie就没了。这样做也正是无痕模式的初衷，而且不影响使用。\n\n### 总结\n\n现在的浏览器已经没有必要判断无痕模式了。目前的无痕模式的重点在于使用后不留下记录，不影响使用过程。\n\n\n\n","slug":"blogs/incognito-mode","published":1,"updated":"2021-06-14T02:04:47.220Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6h000aecq868xg4gmm","content":"<h3 id=\"很旧的版本\"><a href=\"#很旧的版本\" class=\"headerlink\" title=\"很旧的版本\"></a>很旧的版本</h3><p>较旧的版本，无痕模式禁用了FileSystem API。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">window</span>.RequestFileSystem || <span class=\"built_in\">window</span>.webkitRequestFileSystem;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!fs) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;check failed?&quot;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  fs(<span class=\"built_in\">window</span>.TEMPORARY,</span><br><span class=\"line\">      <span class=\"number\">100</span>,</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log.bind(<span class=\"built_in\">console</span>, <span class=\"string\">&quot;not in incognito mode&quot;</span>),</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log.bind(<span class=\"built_in\">console</span>, <span class=\"string\">&quot;incognito mode&quot;</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是据说现在不能用了。</p>\n<h3 id=\"新一点的\"><a href=\"#新一点的\" class=\"headerlink\" title=\"新一点的\"></a>新一点的</h3><p>无痕模式下，TEMPORARY 存储配额较低。<a href=\"https://mishravikas.com/articles/2019-07/bypassing-anti-incognito-detection-google-chrome.html\">参考文章</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">&#x27;storage&#x27;</span> <span class=\"keyword\">in</span> navigator &amp;&amp; <span class=\"string\">&#x27;estimate&#x27;</span> <span class=\"keyword\">in</span> navigator.storage) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;usage, quota&#125; = <span class=\"keyword\">await</span> navigator.storage.estimate();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`Using <span class=\"subst\">$&#123;usage&#125;</span> out of <span class=\"subst\">$&#123;quota&#125;</span> bytes.`</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(quota &lt; <span class=\"number\">120000000</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Incognito&#x27;</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Not Incognito&#x27;</span>)</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Can not detect&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是个人使用chrome实践之后发现这个方法其实也不行，隐私模式下输出结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Using 0 out of 536504813 bytes.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"现在的无痕模式\"><a href=\"#现在的无痕模式\" class=\"headerlink\" title=\"现在的无痕模式\"></a>现在的无痕模式</h3><p>看到stackoverflow的一个<a href=\"https://stackoverflow.com/questions/2860879/detecting-if-a-browser-is-using-private-browsing-mode\">回答</a>解释说，chrome76+的版本都不允许任何方式检测无痕模式。</p>\n<p>看看现在chrome对无痕模式对解释：</p>\n<blockquote>\n<p>在无痕模式下，您的浏览记录、Cookie、网站数据以及您在表单中输入的信息都不会保存到您的设备中。也就是说，您的活动不会显示在 Chrome 浏览器的历史记录中，因此与您共用设备的人不会看到您的活动。网站会将您视为新用户；只要您不登录，网站就无法确定您的身份。</p>\n</blockquote>\n<p>localstorage和sessionStorage还是可以用的，只不过cookie不会保存。等下，cookie不会保存是什么概念，我们再看看：</p>\n<blockquote>\n<p>每次您关闭所有无痕式窗口时，Chrome 都会舍弃与此浏览会话相关的所有网站数据和 Cookie。</p>\n</blockquote>\n<p>也就是说，cookie用是可以用，但是窗口关闭的话不会保存。如果我们cookie的有效期不是session类型的，会受到影响。本来你的cookie设定7天后过期，结果今天用完关闭窗口cookie就没了。这样做也正是无痕模式的初衷，而且不影响使用。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>现在的浏览器已经没有必要判断无痕模式了。目前的无痕模式的重点在于使用后不留下记录，不影响使用过程。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"很旧的版本\"><a href=\"#很旧的版本\" class=\"headerlink\" title=\"很旧的版本\"></a>很旧的版本</h3><p>较旧的版本，无痕模式禁用了FileSystem API。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">window</span>.RequestFileSystem || <span class=\"built_in\">window</span>.webkitRequestFileSystem;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!fs) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;check failed?&quot;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  fs(<span class=\"built_in\">window</span>.TEMPORARY,</span><br><span class=\"line\">      <span class=\"number\">100</span>,</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log.bind(<span class=\"built_in\">console</span>, <span class=\"string\">&quot;not in incognito mode&quot;</span>),</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log.bind(<span class=\"built_in\">console</span>, <span class=\"string\">&quot;incognito mode&quot;</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是据说现在不能用了。</p>\n<h3 id=\"新一点的\"><a href=\"#新一点的\" class=\"headerlink\" title=\"新一点的\"></a>新一点的</h3><p>无痕模式下，TEMPORARY 存储配额较低。<a href=\"https://mishravikas.com/articles/2019-07/bypassing-anti-incognito-detection-google-chrome.html\">参考文章</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">&#x27;storage&#x27;</span> <span class=\"keyword\">in</span> navigator &amp;&amp; <span class=\"string\">&#x27;estimate&#x27;</span> <span class=\"keyword\">in</span> navigator.storage) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;usage, quota&#125; = <span class=\"keyword\">await</span> navigator.storage.estimate();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`Using <span class=\"subst\">$&#123;usage&#125;</span> out of <span class=\"subst\">$&#123;quota&#125;</span> bytes.`</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(quota &lt; <span class=\"number\">120000000</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Incognito&#x27;</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Not Incognito&#x27;</span>)</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Can not detect&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是个人使用chrome实践之后发现这个方法其实也不行，隐私模式下输出结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Using 0 out of 536504813 bytes.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"现在的无痕模式\"><a href=\"#现在的无痕模式\" class=\"headerlink\" title=\"现在的无痕模式\"></a>现在的无痕模式</h3><p>看到stackoverflow的一个<a href=\"https://stackoverflow.com/questions/2860879/detecting-if-a-browser-is-using-private-browsing-mode\">回答</a>解释说，chrome76+的版本都不允许任何方式检测无痕模式。</p>\n<p>看看现在chrome对无痕模式对解释：</p>\n<blockquote>\n<p>在无痕模式下，您的浏览记录、Cookie、网站数据以及您在表单中输入的信息都不会保存到您的设备中。也就是说，您的活动不会显示在 Chrome 浏览器的历史记录中，因此与您共用设备的人不会看到您的活动。网站会将您视为新用户；只要您不登录，网站就无法确定您的身份。</p>\n</blockquote>\n<p>localstorage和sessionStorage还是可以用的，只不过cookie不会保存。等下，cookie不会保存是什么概念，我们再看看：</p>\n<blockquote>\n<p>每次您关闭所有无痕式窗口时，Chrome 都会舍弃与此浏览会话相关的所有网站数据和 Cookie。</p>\n</blockquote>\n<p>也就是说，cookie用是可以用，但是窗口关闭的话不会保存。如果我们cookie的有效期不是session类型的，会受到影响。本来你的cookie设定7天后过期，结果今天用完关闭窗口cookie就没了。这样做也正是无痕模式的初衷，而且不影响使用。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>现在的浏览器已经没有必要判断无痕模式了。目前的无痕模式的重点在于使用后不留下记录，不影响使用过程。</p>\n"},{"title":"linux常见命令","date":"2019-12-05T16:00:00.000Z","_content":" \n\n## 查看端口占用情况\n\n> sudo netstat -apn | grep 80\n\n![](/images/2019060301.png)\n\n最后一列可以看到进程号\n\n## 查看ngin端口启用状态：\n> ps -ef | grep nginx\n\n## 查看端口进程\n\n上一步的进程号可以查出是哪个应用占用了端口\n\n> ps -ef | grep 3345\n\n## 杀掉进程\n\n> sudo kill -9 3345\n\n-9只是一个信号，表示强制终止，不管正在终止的进程在做什么\n\n## 查看或编辑nginx配置\n```\n vi /usr/local/nginx/conf/nginx.conf\n vi nginx.conf\n```\n\n## 重启服务器：\n> /usr/local/nginx/sbin/nginx -s reload\n\n## 连接远程服务器:\nssh root@192.168.1.1\n\n## 上传文件夹到远程目录：\nscp -r /usr/xxx root@192.168.1.1:/opt/project\n这个命令执行的结果是，xxx目录会存在于服务器project目录下\n\n## 删除文件夹：\n> rm -rf dist\n## 移动所有文件到上一个目录：\n> mv * ../\n## 查看当前目录：\n> pwd\n\n## 查看用户：\n> cat /etc/passwd\n\n## 查看用户组：\n> cat /etc/group\n\n## 查看用户属于哪个组：\n> id root","source":"_posts/blogs/linux-command.md","raw":"---\ntitle: linux常见命令\ncategories: 工具\ntags: [linux]\ndate: 2019-12-6\n--- \n\n## 查看端口占用情况\n\n> sudo netstat -apn | grep 80\n\n![](/images/2019060301.png)\n\n最后一列可以看到进程号\n\n## 查看ngin端口启用状态：\n> ps -ef | grep nginx\n\n## 查看端口进程\n\n上一步的进程号可以查出是哪个应用占用了端口\n\n> ps -ef | grep 3345\n\n## 杀掉进程\n\n> sudo kill -9 3345\n\n-9只是一个信号，表示强制终止，不管正在终止的进程在做什么\n\n## 查看或编辑nginx配置\n```\n vi /usr/local/nginx/conf/nginx.conf\n vi nginx.conf\n```\n\n## 重启服务器：\n> /usr/local/nginx/sbin/nginx -s reload\n\n## 连接远程服务器:\nssh root@192.168.1.1\n\n## 上传文件夹到远程目录：\nscp -r /usr/xxx root@192.168.1.1:/opt/project\n这个命令执行的结果是，xxx目录会存在于服务器project目录下\n\n## 删除文件夹：\n> rm -rf dist\n## 移动所有文件到上一个目录：\n> mv * ../\n## 查看当前目录：\n> pwd\n\n## 查看用户：\n> cat /etc/passwd\n\n## 查看用户组：\n> cat /etc/group\n\n## 查看用户属于哪个组：\n> id root","slug":"blogs/linux-command","published":1,"updated":"2021-06-14T02:05:06.217Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6h000becq8cs4410rt","content":"<h2 id=\"查看端口占用情况\"><a href=\"#查看端口占用情况\" class=\"headerlink\" title=\"查看端口占用情况\"></a>查看端口占用情况</h2><blockquote>\n<p>sudo netstat -apn | grep 80</p>\n</blockquote>\n<p><img src=\"/images/2019060301.png\"></p>\n<p>最后一列可以看到进程号</p>\n<h2 id=\"查看ngin端口启用状态：\"><a href=\"#查看ngin端口启用状态：\" class=\"headerlink\" title=\"查看ngin端口启用状态：\"></a>查看ngin端口启用状态：</h2><blockquote>\n<p>ps -ef | grep nginx</p>\n</blockquote>\n<h2 id=\"查看端口进程\"><a href=\"#查看端口进程\" class=\"headerlink\" title=\"查看端口进程\"></a>查看端口进程</h2><p>上一步的进程号可以查出是哪个应用占用了端口</p>\n<blockquote>\n<p>ps -ef | grep 3345</p>\n</blockquote>\n<h2 id=\"杀掉进程\"><a href=\"#杀掉进程\" class=\"headerlink\" title=\"杀掉进程\"></a>杀掉进程</h2><blockquote>\n<p>sudo kill -9 3345</p>\n</blockquote>\n<p>-9只是一个信号，表示强制终止，不管正在终止的进程在做什么</p>\n<h2 id=\"查看或编辑nginx配置\"><a href=\"#查看或编辑nginx配置\" class=\"headerlink\" title=\"查看或编辑nginx配置\"></a>查看或编辑nginx配置</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /usr/local/nginx/conf/nginx.conf</span><br><span class=\"line\">vi nginx.conf</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重启服务器：\"><a href=\"#重启服务器：\" class=\"headerlink\" title=\"重启服务器：\"></a>重启服务器：</h2><blockquote>\n<p>/usr/local/nginx/sbin/nginx -s reload</p>\n</blockquote>\n<h2 id=\"连接远程服务器\"><a href=\"#连接远程服务器\" class=\"headerlink\" title=\"连接远程服务器:\"></a>连接远程服务器:</h2><p>ssh <a href=\"mailto:&#114;&#x6f;&#111;&#x74;&#x40;&#49;&#57;&#x32;&#46;&#x31;&#54;&#56;&#46;&#x31;&#x2e;&#49;\">&#114;&#x6f;&#111;&#x74;&#x40;&#49;&#57;&#x32;&#46;&#x31;&#54;&#56;&#46;&#x31;&#x2e;&#49;</a></p>\n<h2 id=\"上传文件夹到远程目录：\"><a href=\"#上传文件夹到远程目录：\" class=\"headerlink\" title=\"上传文件夹到远程目录：\"></a>上传文件夹到远程目录：</h2><p>scp -r /usr/xxx <a href=\"mailto:&#114;&#x6f;&#x6f;&#116;&#x40;&#49;&#57;&#x32;&#46;&#x31;&#54;&#56;&#46;&#x31;&#46;&#x31;\">&#114;&#x6f;&#x6f;&#116;&#x40;&#49;&#57;&#x32;&#46;&#x31;&#54;&#56;&#46;&#x31;&#46;&#x31;</a>:/opt/project<br>这个命令执行的结果是，xxx目录会存在于服务器project目录下</p>\n<h2 id=\"删除文件夹：\"><a href=\"#删除文件夹：\" class=\"headerlink\" title=\"删除文件夹：\"></a>删除文件夹：</h2><blockquote>\n<p>rm -rf dist</p>\n</blockquote>\n<h2 id=\"移动所有文件到上一个目录：\"><a href=\"#移动所有文件到上一个目录：\" class=\"headerlink\" title=\"移动所有文件到上一个目录：\"></a>移动所有文件到上一个目录：</h2><blockquote>\n<p>mv * ../</p>\n</blockquote>\n<h2 id=\"查看当前目录：\"><a href=\"#查看当前目录：\" class=\"headerlink\" title=\"查看当前目录：\"></a>查看当前目录：</h2><blockquote>\n<p>pwd</p>\n</blockquote>\n<h2 id=\"查看用户：\"><a href=\"#查看用户：\" class=\"headerlink\" title=\"查看用户：\"></a>查看用户：</h2><blockquote>\n<p>cat /etc/passwd</p>\n</blockquote>\n<h2 id=\"查看用户组：\"><a href=\"#查看用户组：\" class=\"headerlink\" title=\"查看用户组：\"></a>查看用户组：</h2><blockquote>\n<p>cat /etc/group</p>\n</blockquote>\n<h2 id=\"查看用户属于哪个组：\"><a href=\"#查看用户属于哪个组：\" class=\"headerlink\" title=\"查看用户属于哪个组：\"></a>查看用户属于哪个组：</h2><blockquote>\n<p>id root</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"查看端口占用情况\"><a href=\"#查看端口占用情况\" class=\"headerlink\" title=\"查看端口占用情况\"></a>查看端口占用情况</h2><blockquote>\n<p>sudo netstat -apn | grep 80</p>\n</blockquote>\n<p><img src=\"/images/2019060301.png\"></p>\n<p>最后一列可以看到进程号</p>\n<h2 id=\"查看ngin端口启用状态：\"><a href=\"#查看ngin端口启用状态：\" class=\"headerlink\" title=\"查看ngin端口启用状态：\"></a>查看ngin端口启用状态：</h2><blockquote>\n<p>ps -ef | grep nginx</p>\n</blockquote>\n<h2 id=\"查看端口进程\"><a href=\"#查看端口进程\" class=\"headerlink\" title=\"查看端口进程\"></a>查看端口进程</h2><p>上一步的进程号可以查出是哪个应用占用了端口</p>\n<blockquote>\n<p>ps -ef | grep 3345</p>\n</blockquote>\n<h2 id=\"杀掉进程\"><a href=\"#杀掉进程\" class=\"headerlink\" title=\"杀掉进程\"></a>杀掉进程</h2><blockquote>\n<p>sudo kill -9 3345</p>\n</blockquote>\n<p>-9只是一个信号，表示强制终止，不管正在终止的进程在做什么</p>\n<h2 id=\"查看或编辑nginx配置\"><a href=\"#查看或编辑nginx配置\" class=\"headerlink\" title=\"查看或编辑nginx配置\"></a>查看或编辑nginx配置</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /usr/local/nginx/conf/nginx.conf</span><br><span class=\"line\">vi nginx.conf</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重启服务器：\"><a href=\"#重启服务器：\" class=\"headerlink\" title=\"重启服务器：\"></a>重启服务器：</h2><blockquote>\n<p>/usr/local/nginx/sbin/nginx -s reload</p>\n</blockquote>\n<h2 id=\"连接远程服务器\"><a href=\"#连接远程服务器\" class=\"headerlink\" title=\"连接远程服务器:\"></a>连接远程服务器:</h2><p>ssh <a href=\"mailto:&#114;&#x6f;&#111;&#x74;&#x40;&#49;&#57;&#x32;&#46;&#x31;&#54;&#56;&#46;&#x31;&#x2e;&#49;\">&#114;&#x6f;&#111;&#x74;&#x40;&#49;&#57;&#x32;&#46;&#x31;&#54;&#56;&#46;&#x31;&#x2e;&#49;</a></p>\n<h2 id=\"上传文件夹到远程目录：\"><a href=\"#上传文件夹到远程目录：\" class=\"headerlink\" title=\"上传文件夹到远程目录：\"></a>上传文件夹到远程目录：</h2><p>scp -r /usr/xxx <a href=\"mailto:&#114;&#x6f;&#x6f;&#116;&#x40;&#49;&#57;&#x32;&#46;&#x31;&#54;&#56;&#46;&#x31;&#46;&#x31;\">&#114;&#x6f;&#x6f;&#116;&#x40;&#49;&#57;&#x32;&#46;&#x31;&#54;&#56;&#46;&#x31;&#46;&#x31;</a>:/opt/project<br>这个命令执行的结果是，xxx目录会存在于服务器project目录下</p>\n<h2 id=\"删除文件夹：\"><a href=\"#删除文件夹：\" class=\"headerlink\" title=\"删除文件夹：\"></a>删除文件夹：</h2><blockquote>\n<p>rm -rf dist</p>\n</blockquote>\n<h2 id=\"移动所有文件到上一个目录：\"><a href=\"#移动所有文件到上一个目录：\" class=\"headerlink\" title=\"移动所有文件到上一个目录：\"></a>移动所有文件到上一个目录：</h2><blockquote>\n<p>mv * ../</p>\n</blockquote>\n<h2 id=\"查看当前目录：\"><a href=\"#查看当前目录：\" class=\"headerlink\" title=\"查看当前目录：\"></a>查看当前目录：</h2><blockquote>\n<p>pwd</p>\n</blockquote>\n<h2 id=\"查看用户：\"><a href=\"#查看用户：\" class=\"headerlink\" title=\"查看用户：\"></a>查看用户：</h2><blockquote>\n<p>cat /etc/passwd</p>\n</blockquote>\n<h2 id=\"查看用户组：\"><a href=\"#查看用户组：\" class=\"headerlink\" title=\"查看用户组：\"></a>查看用户组：</h2><blockquote>\n<p>cat /etc/group</p>\n</blockquote>\n<h2 id=\"查看用户属于哪个组：\"><a href=\"#查看用户属于哪个组：\" class=\"headerlink\" title=\"查看用户属于哪个组：\"></a>查看用户属于哪个组：</h2><blockquote>\n<p>id root</p>\n</blockquote>\n"},{"title":"移动端meta","date":"2019-05-28T16:00:00.000Z","_content":" \n\n## viewport\n\n```\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=yes,minimal-ui\">\n```\n\n## MobileOptimized\n\n告诉浏览器页面为某个宽度特殊优化 (微软系)\n\n```\n<meta name=\"MobileOptimized\" content=\"320\" />\n```\n\n## HandheldFriendly\n\n告诉浏览器页面是否为手持设备优化，会被MobileOptimized覆盖 (旧浏览器和功能机上某些浏览器识别)\n\n\n```\n<meta name=\"HandheldFriendly\" content=\"true\" />\n```\n\n## Apple私有\n\n\n```\n<!-- iOS 设备 begin -->\n    <meta name=\"apple-mobile-web-app-title\" content=\"标题\">\n    <!-- 添加到主屏后的标题（iOS 6 新增） -->\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\"/>\n    <!-- 是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏 -->\n\n    <meta name=\"apple-itunes-app\" content=\"app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL\">\n    <!-- 添加智能 App 广告条 Smart App Banner（iOS 6+ Safari） -->\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\"/>\n    <!-- 设置苹果工具栏颜色 -->\n    <meta name=\"format-detection\" content=\"telphone=no, email=no\"/>\n    <!-- 忽略页面中的数字识别为电话，忽略email识别 -->\n    <!-- 启用360浏览器的极速模式(webkit) -->\n    <meta name=\"renderer\" content=\"webkit\">\n    <!-- 避免IE使用兼容模式 -->\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 -->\n    <meta name=\"HandheldFriendly\" content=\"true\">\n    <!-- 微软的老式浏览器 -->\n    <meta name=\"MobileOptimized\" content=\"320\">\n    <!-- uc强制竖屏 -->\n    <meta name=\"screen-orientation\" content=\"portrait\">\n    <!-- QQ强制竖屏 -->\n    <meta name=\"x5-orientation\" content=\"portrait\">\n    <!-- UC强制全屏 -->\n    <meta name=\"full-screen\" content=\"yes\">\n    <!-- QQ强制全屏 -->\n    <meta name=\"x5-fullscreen\" content=\"true\">\n    <!-- UC应用模式 -->\n    <meta name=\"browsermode\" content=\"application\">\n    <!-- QQ应用模式 -->\n    <meta name=\"x5-page-mode\" content=\"app\">\n    <!-- windows phone 点击无高光 -->\n    <meta name=\"msapplication-tap-highlight\" content=\"no\">\n    <!-- iOS 图标 begin -->\n    <link rel=\"apple-touch-icon-precomposed\" href=\"/apple-touch-icon-57x57-precomposed.png\"/>\n    <!-- iPhone 和 iTouch，默认 57x57 像素，必须有 -->\n    <link rel=\"apple-touch-icon-precomposed\" sizes=\"114x114\" href=\"/apple-touch-icon-114x114-precomposed.png\"/>\n    <!-- Retina iPhone 和 Retina iTouch，114x114 像素，可以没有，但推荐有 -->\n    <link rel=\"apple-touch-icon-precomposed\" sizes=\"144x144\" href=\"/apple-touch-icon-144x144-precomposed.png\"/>\n    <!-- Retina iPad，144x144 像素，可以没有，但推荐有 -->\n    <!-- iOS 图标 end -->\n    <!-- iOS 启动画面 begin -->\n    <link rel=\"apple-touch-startup-image\" sizes=\"768x1004\" href=\"/splash-screen-768x1004.png\"/>\n    <!-- iPad 竖屏 768 x 1004（标准分辨率） -->\n    <link rel=\"apple-touch-startup-image\" sizes=\"1536x2008\" href=\"/splash-screen-1536x2008.png\"/>\n    <!-- iPad 竖屏 1536x2008（Retina） -->\n    <link rel=\"apple-touch-startup-image\" sizes=\"1024x748\" href=\"/Default-Portrait-1024x748.png\"/>\n    <!-- iPad 横屏 1024x748（标准分辨率） -->\n    <link rel=\"apple-touch-startup-image\" sizes=\"2048x1496\" href=\"/splash-screen-2048x1496.png\"/>\n    <!-- iPad 横屏 2048x1496（Retina） -->\n\n    <link rel=\"apple-touch-startup-image\" href=\"/splash-screen-320x480.png\"/>\n    <!-- iPhone/iPod Touch 竖屏 320x480 (标准分辨率) -->\n    <link rel=\"apple-touch-startup-image\" sizes=\"640x960\" href=\"/splash-screen-640x960.png\"/>\n    <!-- iPhone/iPod Touch 竖屏 640x960 (Retina) -->\n    <link rel=\"apple-touch-startup-image\" sizes=\"640x1136\" href=\"/splash-screen-640x1136.png\"/>\n    <!-- iPhone 5/iPod Touch 5 竖屏 640x1136 (Retina) -->\n    <!-- iOS 启动画面 end -->\n\n    <!-- iOS 设备 end -->\n```\n\n\n## format-detection\n\n禁用电话号码和邮箱识别\n\n```\n<meta name=\"format-detection\" content=\"telphone=no, email=no\" />\n```\n\n\n参考资料：\n[移动端头部meta大全](https://gist.github.com/overtrue/f540fbea3c33e3da53fd)\n","source":"_posts/blogs/meta.md","raw":"---\ntitle: 移动端meta\ncategories: H5\ntags: [H5]\ndate: 2019-5-29\n--- \n\n## viewport\n\n```\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=yes,minimal-ui\">\n```\n\n## MobileOptimized\n\n告诉浏览器页面为某个宽度特殊优化 (微软系)\n\n```\n<meta name=\"MobileOptimized\" content=\"320\" />\n```\n\n## HandheldFriendly\n\n告诉浏览器页面是否为手持设备优化，会被MobileOptimized覆盖 (旧浏览器和功能机上某些浏览器识别)\n\n\n```\n<meta name=\"HandheldFriendly\" content=\"true\" />\n```\n\n## Apple私有\n\n\n```\n<!-- iOS 设备 begin -->\n    <meta name=\"apple-mobile-web-app-title\" content=\"标题\">\n    <!-- 添加到主屏后的标题（iOS 6 新增） -->\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\"/>\n    <!-- 是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏 -->\n\n    <meta name=\"apple-itunes-app\" content=\"app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL\">\n    <!-- 添加智能 App 广告条 Smart App Banner（iOS 6+ Safari） -->\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\"/>\n    <!-- 设置苹果工具栏颜色 -->\n    <meta name=\"format-detection\" content=\"telphone=no, email=no\"/>\n    <!-- 忽略页面中的数字识别为电话，忽略email识别 -->\n    <!-- 启用360浏览器的极速模式(webkit) -->\n    <meta name=\"renderer\" content=\"webkit\">\n    <!-- 避免IE使用兼容模式 -->\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 -->\n    <meta name=\"HandheldFriendly\" content=\"true\">\n    <!-- 微软的老式浏览器 -->\n    <meta name=\"MobileOptimized\" content=\"320\">\n    <!-- uc强制竖屏 -->\n    <meta name=\"screen-orientation\" content=\"portrait\">\n    <!-- QQ强制竖屏 -->\n    <meta name=\"x5-orientation\" content=\"portrait\">\n    <!-- UC强制全屏 -->\n    <meta name=\"full-screen\" content=\"yes\">\n    <!-- QQ强制全屏 -->\n    <meta name=\"x5-fullscreen\" content=\"true\">\n    <!-- UC应用模式 -->\n    <meta name=\"browsermode\" content=\"application\">\n    <!-- QQ应用模式 -->\n    <meta name=\"x5-page-mode\" content=\"app\">\n    <!-- windows phone 点击无高光 -->\n    <meta name=\"msapplication-tap-highlight\" content=\"no\">\n    <!-- iOS 图标 begin -->\n    <link rel=\"apple-touch-icon-precomposed\" href=\"/apple-touch-icon-57x57-precomposed.png\"/>\n    <!-- iPhone 和 iTouch，默认 57x57 像素，必须有 -->\n    <link rel=\"apple-touch-icon-precomposed\" sizes=\"114x114\" href=\"/apple-touch-icon-114x114-precomposed.png\"/>\n    <!-- Retina iPhone 和 Retina iTouch，114x114 像素，可以没有，但推荐有 -->\n    <link rel=\"apple-touch-icon-precomposed\" sizes=\"144x144\" href=\"/apple-touch-icon-144x144-precomposed.png\"/>\n    <!-- Retina iPad，144x144 像素，可以没有，但推荐有 -->\n    <!-- iOS 图标 end -->\n    <!-- iOS 启动画面 begin -->\n    <link rel=\"apple-touch-startup-image\" sizes=\"768x1004\" href=\"/splash-screen-768x1004.png\"/>\n    <!-- iPad 竖屏 768 x 1004（标准分辨率） -->\n    <link rel=\"apple-touch-startup-image\" sizes=\"1536x2008\" href=\"/splash-screen-1536x2008.png\"/>\n    <!-- iPad 竖屏 1536x2008（Retina） -->\n    <link rel=\"apple-touch-startup-image\" sizes=\"1024x748\" href=\"/Default-Portrait-1024x748.png\"/>\n    <!-- iPad 横屏 1024x748（标准分辨率） -->\n    <link rel=\"apple-touch-startup-image\" sizes=\"2048x1496\" href=\"/splash-screen-2048x1496.png\"/>\n    <!-- iPad 横屏 2048x1496（Retina） -->\n\n    <link rel=\"apple-touch-startup-image\" href=\"/splash-screen-320x480.png\"/>\n    <!-- iPhone/iPod Touch 竖屏 320x480 (标准分辨率) -->\n    <link rel=\"apple-touch-startup-image\" sizes=\"640x960\" href=\"/splash-screen-640x960.png\"/>\n    <!-- iPhone/iPod Touch 竖屏 640x960 (Retina) -->\n    <link rel=\"apple-touch-startup-image\" sizes=\"640x1136\" href=\"/splash-screen-640x1136.png\"/>\n    <!-- iPhone 5/iPod Touch 5 竖屏 640x1136 (Retina) -->\n    <!-- iOS 启动画面 end -->\n\n    <!-- iOS 设备 end -->\n```\n\n\n## format-detection\n\n禁用电话号码和邮箱识别\n\n```\n<meta name=\"format-detection\" content=\"telphone=no, email=no\" />\n```\n\n\n参考资料：\n[移动端头部meta大全](https://gist.github.com/overtrue/f540fbea3c33e3da53fd)\n","slug":"blogs/meta","published":1,"updated":"2021-06-14T02:05:21.595Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6i000cecq84w9ahtln","content":"<h2 id=\"viewport\"><a href=\"#viewport\" class=\"headerlink\" title=\"viewport\"></a>viewport</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=yes,minimal-ui&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MobileOptimized\"><a href=\"#MobileOptimized\" class=\"headerlink\" title=\"MobileOptimized\"></a>MobileOptimized</h2><p>告诉浏览器页面为某个宽度特殊优化 (微软系)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;MobileOptimized&quot; content=&quot;320&quot; /&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"HandheldFriendly\"><a href=\"#HandheldFriendly\" class=\"headerlink\" title=\"HandheldFriendly\"></a>HandheldFriendly</h2><p>告诉浏览器页面是否为手持设备优化，会被MobileOptimized覆盖 (旧浏览器和功能机上某些浏览器识别)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;HandheldFriendly&quot; content=&quot;true&quot; /&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Apple私有\"><a href=\"#Apple私有\" class=\"headerlink\" title=\"Apple私有\"></a>Apple私有</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- iOS 设备 begin --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;apple-mobile-web-app-title&quot; content=&quot;标题&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 添加到主屏后的标题（iOS 6 新增） --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- 是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏 --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;meta name=&quot;apple-itunes-app&quot; content=&quot;app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 添加智能 App 广告条 Smart App Banner（iOS 6+ Safari） --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- 设置苹果工具栏颜色 --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;format-detection&quot; content=&quot;telphone=no, email=no&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- 忽略页面中的数字识别为电话，忽略email识别 --&gt;</span><br><span class=\"line\">    &lt;!-- 启用360浏览器的极速模式(webkit) --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 避免IE使用兼容模式 --&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;HandheldFriendly&quot; content=&quot;true&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 微软的老式浏览器 --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;MobileOptimized&quot; content=&quot;320&quot;&gt;</span><br><span class=\"line\">    &lt;!-- uc强制竖屏 --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;screen-orientation&quot; content=&quot;portrait&quot;&gt;</span><br><span class=\"line\">    &lt;!-- QQ强制竖屏 --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;x5-orientation&quot; content=&quot;portrait&quot;&gt;</span><br><span class=\"line\">    &lt;!-- UC强制全屏 --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;full-screen&quot; content=&quot;yes&quot;&gt;</span><br><span class=\"line\">    &lt;!-- QQ强制全屏 --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;x5-fullscreen&quot; content=&quot;true&quot;&gt;</span><br><span class=\"line\">    &lt;!-- UC应用模式 --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;browsermode&quot; content=&quot;application&quot;&gt;</span><br><span class=\"line\">    &lt;!-- QQ应用模式 --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;x5-page-mode&quot; content=&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;!-- windows phone 点击无高光 --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;msapplication-tap-highlight&quot; content=&quot;no&quot;&gt;</span><br><span class=\"line\">    &lt;!-- iOS 图标 begin --&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;apple-touch-icon-precomposed&quot; href=&quot;/apple-touch-icon-57x57-precomposed.png&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- iPhone 和 iTouch，默认 57x57 像素，必须有 --&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;114x114&quot; href=&quot;/apple-touch-icon-114x114-precomposed.png&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- Retina iPhone 和 Retina iTouch，114x114 像素，可以没有，但推荐有 --&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;144x144&quot; href=&quot;/apple-touch-icon-144x144-precomposed.png&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- Retina iPad，144x144 像素，可以没有，但推荐有 --&gt;</span><br><span class=\"line\">    &lt;!-- iOS 图标 end --&gt;</span><br><span class=\"line\">    &lt;!-- iOS 启动画面 begin --&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;768x1004&quot; href=&quot;/splash-screen-768x1004.png&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- iPad 竖屏 768 x 1004（标准分辨率） --&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;1536x2008&quot; href=&quot;/splash-screen-1536x2008.png&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- iPad 竖屏 1536x2008（Retina） --&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;1024x748&quot; href=&quot;/Default-Portrait-1024x748.png&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- iPad 横屏 1024x748（标准分辨率） --&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;2048x1496&quot; href=&quot;/splash-screen-2048x1496.png&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- iPad 横屏 2048x1496（Retina） --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;link rel=&quot;apple-touch-startup-image&quot; href=&quot;/splash-screen-320x480.png&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- iPhone/iPod Touch 竖屏 320x480 (标准分辨率) --&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;640x960&quot; href=&quot;/splash-screen-640x960.png&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- iPhone/iPod Touch 竖屏 640x960 (Retina) --&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;640x1136&quot; href=&quot;/splash-screen-640x1136.png&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- iPhone 5/iPod Touch 5 竖屏 640x1136 (Retina) --&gt;</span><br><span class=\"line\">    &lt;!-- iOS 启动画面 end --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- iOS 设备 end --&gt;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"format-detection\"><a href=\"#format-detection\" class=\"headerlink\" title=\"format-detection\"></a>format-detection</h2><p>禁用电话号码和邮箱识别</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;format-detection&quot; content=&quot;telphone=no, email=no&quot; /&gt;</span><br></pre></td></tr></table></figure>\n\n\n<p>参考资料：<br><a href=\"https://gist.github.com/overtrue/f540fbea3c33e3da53fd\">移动端头部meta大全</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"viewport\"><a href=\"#viewport\" class=\"headerlink\" title=\"viewport\"></a>viewport</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=yes,minimal-ui&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MobileOptimized\"><a href=\"#MobileOptimized\" class=\"headerlink\" title=\"MobileOptimized\"></a>MobileOptimized</h2><p>告诉浏览器页面为某个宽度特殊优化 (微软系)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;MobileOptimized&quot; content=&quot;320&quot; /&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"HandheldFriendly\"><a href=\"#HandheldFriendly\" class=\"headerlink\" title=\"HandheldFriendly\"></a>HandheldFriendly</h2><p>告诉浏览器页面是否为手持设备优化，会被MobileOptimized覆盖 (旧浏览器和功能机上某些浏览器识别)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;HandheldFriendly&quot; content=&quot;true&quot; /&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Apple私有\"><a href=\"#Apple私有\" class=\"headerlink\" title=\"Apple私有\"></a>Apple私有</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- iOS 设备 begin --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;apple-mobile-web-app-title&quot; content=&quot;标题&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 添加到主屏后的标题（iOS 6 新增） --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- 是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏 --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;meta name=&quot;apple-itunes-app&quot; content=&quot;app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 添加智能 App 广告条 Smart App Banner（iOS 6+ Safari） --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- 设置苹果工具栏颜色 --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;format-detection&quot; content=&quot;telphone=no, email=no&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- 忽略页面中的数字识别为电话，忽略email识别 --&gt;</span><br><span class=\"line\">    &lt;!-- 启用360浏览器的极速模式(webkit) --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 避免IE使用兼容模式 --&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;HandheldFriendly&quot; content=&quot;true&quot;&gt;</span><br><span class=\"line\">    &lt;!-- 微软的老式浏览器 --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;MobileOptimized&quot; content=&quot;320&quot;&gt;</span><br><span class=\"line\">    &lt;!-- uc强制竖屏 --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;screen-orientation&quot; content=&quot;portrait&quot;&gt;</span><br><span class=\"line\">    &lt;!-- QQ强制竖屏 --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;x5-orientation&quot; content=&quot;portrait&quot;&gt;</span><br><span class=\"line\">    &lt;!-- UC强制全屏 --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;full-screen&quot; content=&quot;yes&quot;&gt;</span><br><span class=\"line\">    &lt;!-- QQ强制全屏 --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;x5-fullscreen&quot; content=&quot;true&quot;&gt;</span><br><span class=\"line\">    &lt;!-- UC应用模式 --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;browsermode&quot; content=&quot;application&quot;&gt;</span><br><span class=\"line\">    &lt;!-- QQ应用模式 --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;x5-page-mode&quot; content=&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;!-- windows phone 点击无高光 --&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;msapplication-tap-highlight&quot; content=&quot;no&quot;&gt;</span><br><span class=\"line\">    &lt;!-- iOS 图标 begin --&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;apple-touch-icon-precomposed&quot; href=&quot;/apple-touch-icon-57x57-precomposed.png&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- iPhone 和 iTouch，默认 57x57 像素，必须有 --&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;114x114&quot; href=&quot;/apple-touch-icon-114x114-precomposed.png&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- Retina iPhone 和 Retina iTouch，114x114 像素，可以没有，但推荐有 --&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;144x144&quot; href=&quot;/apple-touch-icon-144x144-precomposed.png&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- Retina iPad，144x144 像素，可以没有，但推荐有 --&gt;</span><br><span class=\"line\">    &lt;!-- iOS 图标 end --&gt;</span><br><span class=\"line\">    &lt;!-- iOS 启动画面 begin --&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;768x1004&quot; href=&quot;/splash-screen-768x1004.png&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- iPad 竖屏 768 x 1004（标准分辨率） --&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;1536x2008&quot; href=&quot;/splash-screen-1536x2008.png&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- iPad 竖屏 1536x2008（Retina） --&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;1024x748&quot; href=&quot;/Default-Portrait-1024x748.png&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- iPad 横屏 1024x748（标准分辨率） --&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;2048x1496&quot; href=&quot;/splash-screen-2048x1496.png&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- iPad 横屏 2048x1496（Retina） --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;link rel=&quot;apple-touch-startup-image&quot; href=&quot;/splash-screen-320x480.png&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- iPhone/iPod Touch 竖屏 320x480 (标准分辨率) --&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;640x960&quot; href=&quot;/splash-screen-640x960.png&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- iPhone/iPod Touch 竖屏 640x960 (Retina) --&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;apple-touch-startup-image&quot; sizes=&quot;640x1136&quot; href=&quot;/splash-screen-640x1136.png&quot;/&gt;</span><br><span class=\"line\">    &lt;!-- iPhone 5/iPod Touch 5 竖屏 640x1136 (Retina) --&gt;</span><br><span class=\"line\">    &lt;!-- iOS 启动画面 end --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- iOS 设备 end --&gt;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"format-detection\"><a href=\"#format-detection\" class=\"headerlink\" title=\"format-detection\"></a>format-detection</h2><p>禁用电话号码和邮箱识别</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;format-detection&quot; content=&quot;telphone=no, email=no&quot; /&gt;</span><br></pre></td></tr></table></figure>\n\n\n<p>参考资料：<br><a href=\"https://gist.github.com/overtrue/f540fbea3c33e3da53fd\">移动端头部meta大全</a></p>\n"},{"title":"纯js实现打印功能","date":"2019-08-19T16:00:00.000Z","_content":" \n\n打印其实最终都是调用window.print方法实现打印。只不过，我们通常不是打印整个页面，所以，诞生了各种各样的方法实现部分打印。适配vue框架的打印组件有vuePlugs_printjs和vue-print-nb。这两者实现的方式是一样的，都是使用iframe插入打印区域和对应样式。区别只是使用方式的区别。\n\n那么，我也实现了一个原生js实现的打印功能。\n\n## 一、新建iframe窗口\n为了打印出想要的部分，我们需要新建一个窗口，把需要的dom装进去。为了避免部分浏览器阻止窗口弹出导致无法打印，建议使用iframe。\n\n打印的时候，我们需要防止iframe的显示影响页面布局，只需要在父页面设置iframe的样式为display: none即可。如下：\n\n```javascript\nconst frame = document.createElement('iframe')\nframe.style.display = 'none'\ndocument.body.appendChild(frame)\n```\n\n## 二、选择需要打印的部分dom\n\n从当前dom选择需要打印的dom元素，插入iframe。\n\n```javascript\nlet target = document.getElementById('print-target')\nif (target) {\n  frame.contentDocument.body.innerHTML = target.outerHTML\n}\n```\n\n## 三、插入样式\n\n一般情况下，你可以直接将父页面的style和link全部拷贝到iframe中，这样打印到样式和原本样式是一样的，除非打印部分的样式受未打印部分的父元素控制导致样式脱节，所以，打印部分的样式尽量和父元素解耦。\n\n我们知道，浏览器打印的时候你可能需要不一样的样式，只需要加多一个style标签引入打印样式即可。比较典型的就是，打印的时候你想要按照需要打印的纸张尺寸打印，这时候可以在@media print中将容器的宽度改为打印尺寸（如A4是210mm，css支持mm单位的尺寸）。\n\n## 四、特殊元素处理\n\n由于我们将打印区域拷贝到ifame中采用对的是将targetElement.outerHTML赋值给iframe的body的。这样赋值的情况下，部分表单组件会失去值，所以，我们需要在赋值之前将值固定，如下：\n\n```javascript\n// https://github.com/Power-kxLee/vue-print-nb/blob/master/src/packages/printarea.js\nlet copy = ele.cloneNode(true);\nlet copiedInputs = copy.querySelectorAll('input,select,textarea');\nlet selectCount = -1;\nfor (let i = 0; i < copiedInputs.length; i++) {\n    let item = copiedInputs[i];\n    let typeInput = item.getAttribute('type');\n    let copiedInput = copiedInputs[i];\n    // 获取select标签\n    if (!typeInput) {\n        typeInput = item.tagName === 'SELECT' ? 'select' : item.tagName === 'TEXTAREA' ? 'textarea' : '';\n    }\n    // 处理input框\n    if (item.tagName === 'INPUT') {\n        // 除了单选框 多选框比较特别\n        if (typeInput === 'radio' || typeInput === 'checkbox') {\n            copiedInput.setAttribute('checked', item.checked);\n        // \n        } else {\n            copiedInput.value = item.value;\n            copiedInput.setAttribute('value', item.value);\n        } \n    // 处理select\n    } else if (typeInput === 'select') {\n        \n        selectCount ++;\n        for (let b = 0; b < ele.querySelectorAll('select').length; b++) {\n            let select = ele.querySelectorAll('select')[b]; // 获取原始层每一个select\n            !select.getAttribute('newbs') && select.setAttribute('newbs', b) // 添加标识\n            if (select.getAttribute('newbs') == selectCount) {\n                let opSelectedIndex = ele.querySelectorAll('select')[selectCount].selectedIndex;\n                item.options[opSelectedIndex].setAttribute('selected', true);\n\n            }\n        }\n    // 处理textarea\n    } else{\n        copiedInput.innerHTML = item.value;\n        copiedInput.setAttribute('html', item.value);\n    }\n}\n```\n","source":"_posts/blogs/print.md","raw":"---\ntitle: 纯js实现打印功能\ncategories: javascript\ntags: [javascript]\ndate: 2019-8-20\n--- \n\n打印其实最终都是调用window.print方法实现打印。只不过，我们通常不是打印整个页面，所以，诞生了各种各样的方法实现部分打印。适配vue框架的打印组件有vuePlugs_printjs和vue-print-nb。这两者实现的方式是一样的，都是使用iframe插入打印区域和对应样式。区别只是使用方式的区别。\n\n那么，我也实现了一个原生js实现的打印功能。\n\n## 一、新建iframe窗口\n为了打印出想要的部分，我们需要新建一个窗口，把需要的dom装进去。为了避免部分浏览器阻止窗口弹出导致无法打印，建议使用iframe。\n\n打印的时候，我们需要防止iframe的显示影响页面布局，只需要在父页面设置iframe的样式为display: none即可。如下：\n\n```javascript\nconst frame = document.createElement('iframe')\nframe.style.display = 'none'\ndocument.body.appendChild(frame)\n```\n\n## 二、选择需要打印的部分dom\n\n从当前dom选择需要打印的dom元素，插入iframe。\n\n```javascript\nlet target = document.getElementById('print-target')\nif (target) {\n  frame.contentDocument.body.innerHTML = target.outerHTML\n}\n```\n\n## 三、插入样式\n\n一般情况下，你可以直接将父页面的style和link全部拷贝到iframe中，这样打印到样式和原本样式是一样的，除非打印部分的样式受未打印部分的父元素控制导致样式脱节，所以，打印部分的样式尽量和父元素解耦。\n\n我们知道，浏览器打印的时候你可能需要不一样的样式，只需要加多一个style标签引入打印样式即可。比较典型的就是，打印的时候你想要按照需要打印的纸张尺寸打印，这时候可以在@media print中将容器的宽度改为打印尺寸（如A4是210mm，css支持mm单位的尺寸）。\n\n## 四、特殊元素处理\n\n由于我们将打印区域拷贝到ifame中采用对的是将targetElement.outerHTML赋值给iframe的body的。这样赋值的情况下，部分表单组件会失去值，所以，我们需要在赋值之前将值固定，如下：\n\n```javascript\n// https://github.com/Power-kxLee/vue-print-nb/blob/master/src/packages/printarea.js\nlet copy = ele.cloneNode(true);\nlet copiedInputs = copy.querySelectorAll('input,select,textarea');\nlet selectCount = -1;\nfor (let i = 0; i < copiedInputs.length; i++) {\n    let item = copiedInputs[i];\n    let typeInput = item.getAttribute('type');\n    let copiedInput = copiedInputs[i];\n    // 获取select标签\n    if (!typeInput) {\n        typeInput = item.tagName === 'SELECT' ? 'select' : item.tagName === 'TEXTAREA' ? 'textarea' : '';\n    }\n    // 处理input框\n    if (item.tagName === 'INPUT') {\n        // 除了单选框 多选框比较特别\n        if (typeInput === 'radio' || typeInput === 'checkbox') {\n            copiedInput.setAttribute('checked', item.checked);\n        // \n        } else {\n            copiedInput.value = item.value;\n            copiedInput.setAttribute('value', item.value);\n        } \n    // 处理select\n    } else if (typeInput === 'select') {\n        \n        selectCount ++;\n        for (let b = 0; b < ele.querySelectorAll('select').length; b++) {\n            let select = ele.querySelectorAll('select')[b]; // 获取原始层每一个select\n            !select.getAttribute('newbs') && select.setAttribute('newbs', b) // 添加标识\n            if (select.getAttribute('newbs') == selectCount) {\n                let opSelectedIndex = ele.querySelectorAll('select')[selectCount].selectedIndex;\n                item.options[opSelectedIndex].setAttribute('selected', true);\n\n            }\n        }\n    // 处理textarea\n    } else{\n        copiedInput.innerHTML = item.value;\n        copiedInput.setAttribute('html', item.value);\n    }\n}\n```\n","slug":"blogs/print","published":1,"updated":"2021-06-14T02:05:35.429Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6i000decq81njsc73x","content":"<p>打印其实最终都是调用window.print方法实现打印。只不过，我们通常不是打印整个页面，所以，诞生了各种各样的方法实现部分打印。适配vue框架的打印组件有vuePlugs_printjs和vue-print-nb。这两者实现的方式是一样的，都是使用iframe插入打印区域和对应样式。区别只是使用方式的区别。</p>\n<p>那么，我也实现了一个原生js实现的打印功能。</p>\n<h2 id=\"一、新建iframe窗口\"><a href=\"#一、新建iframe窗口\" class=\"headerlink\" title=\"一、新建iframe窗口\"></a>一、新建iframe窗口</h2><p>为了打印出想要的部分，我们需要新建一个窗口，把需要的dom装进去。为了避免部分浏览器阻止窗口弹出导致无法打印，建议使用iframe。</p>\n<p>打印的时候，我们需要防止iframe的显示影响页面布局，只需要在父页面设置iframe的样式为display: none即可。如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> frame = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;iframe&#x27;</span>)</span><br><span class=\"line\">frame.style.display = <span class=\"string\">&#x27;none&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(frame)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、选择需要打印的部分dom\"><a href=\"#二、选择需要打印的部分dom\" class=\"headerlink\" title=\"二、选择需要打印的部分dom\"></a>二、选择需要打印的部分dom</h2><p>从当前dom选择需要打印的dom元素，插入iframe。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> target = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;print-target&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (target) &#123;</span><br><span class=\"line\">  frame.contentDocument.body.innerHTML = target.outerHTML</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、插入样式\"><a href=\"#三、插入样式\" class=\"headerlink\" title=\"三、插入样式\"></a>三、插入样式</h2><p>一般情况下，你可以直接将父页面的style和link全部拷贝到iframe中，这样打印到样式和原本样式是一样的，除非打印部分的样式受未打印部分的父元素控制导致样式脱节，所以，打印部分的样式尽量和父元素解耦。</p>\n<p>我们知道，浏览器打印的时候你可能需要不一样的样式，只需要加多一个style标签引入打印样式即可。比较典型的就是，打印的时候你想要按照需要打印的纸张尺寸打印，这时候可以在@media print中将容器的宽度改为打印尺寸（如A4是210mm，css支持mm单位的尺寸）。</p>\n<h2 id=\"四、特殊元素处理\"><a href=\"#四、特殊元素处理\" class=\"headerlink\" title=\"四、特殊元素处理\"></a>四、特殊元素处理</h2><p>由于我们将打印区域拷贝到ifame中采用对的是将targetElement.outerHTML赋值给iframe的body的。这样赋值的情况下，部分表单组件会失去值，所以，我们需要在赋值之前将值固定，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// https://github.com/Power-kxLee/vue-print-nb/blob/master/src/packages/printarea.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> copy = ele.cloneNode(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> copiedInputs = copy.querySelectorAll(<span class=\"string\">&#x27;input,select,textarea&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> selectCount = -<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; copiedInputs.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> item = copiedInputs[i];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> typeInput = item.getAttribute(<span class=\"string\">&#x27;type&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> copiedInput = copiedInputs[i];</span><br><span class=\"line\">    <span class=\"comment\">// 获取select标签</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!typeInput) &#123;</span><br><span class=\"line\">        typeInput = item.tagName === <span class=\"string\">&#x27;SELECT&#x27;</span> ? <span class=\"string\">&#x27;select&#x27;</span> : item.tagName === <span class=\"string\">&#x27;TEXTAREA&#x27;</span> ? <span class=\"string\">&#x27;textarea&#x27;</span> : <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 处理input框</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item.tagName === <span class=\"string\">&#x27;INPUT&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 除了单选框 多选框比较特别</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (typeInput === <span class=\"string\">&#x27;radio&#x27;</span> || typeInput === <span class=\"string\">&#x27;checkbox&#x27;</span>) &#123;</span><br><span class=\"line\">            copiedInput.setAttribute(<span class=\"string\">&#x27;checked&#x27;</span>, item.checked);</span><br><span class=\"line\">        <span class=\"comment\">// </span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            copiedInput.value = item.value;</span><br><span class=\"line\">            copiedInput.setAttribute(<span class=\"string\">&#x27;value&#x27;</span>, item.value);</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    <span class=\"comment\">// 处理select</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (typeInput === <span class=\"string\">&#x27;select&#x27;</span>) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        selectCount ++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> b = <span class=\"number\">0</span>; b &lt; ele.querySelectorAll(<span class=\"string\">&#x27;select&#x27;</span>).length; b++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> select = ele.querySelectorAll(<span class=\"string\">&#x27;select&#x27;</span>)[b]; <span class=\"comment\">// 获取原始层每一个select</span></span><br><span class=\"line\">            !select.getAttribute(<span class=\"string\">&#x27;newbs&#x27;</span>) &amp;&amp; select.setAttribute(<span class=\"string\">&#x27;newbs&#x27;</span>, b) <span class=\"comment\">// 添加标识</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (select.getAttribute(<span class=\"string\">&#x27;newbs&#x27;</span>) == selectCount) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> opSelectedIndex = ele.querySelectorAll(<span class=\"string\">&#x27;select&#x27;</span>)[selectCount].selectedIndex;</span><br><span class=\"line\">                item.options[opSelectedIndex].setAttribute(<span class=\"string\">&#x27;selected&#x27;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 处理textarea</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        copiedInput.innerHTML = item.value;</span><br><span class=\"line\">        copiedInput.setAttribute(<span class=\"string\">&#x27;html&#x27;</span>, item.value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>打印其实最终都是调用window.print方法实现打印。只不过，我们通常不是打印整个页面，所以，诞生了各种各样的方法实现部分打印。适配vue框架的打印组件有vuePlugs_printjs和vue-print-nb。这两者实现的方式是一样的，都是使用iframe插入打印区域和对应样式。区别只是使用方式的区别。</p>\n<p>那么，我也实现了一个原生js实现的打印功能。</p>\n<h2 id=\"一、新建iframe窗口\"><a href=\"#一、新建iframe窗口\" class=\"headerlink\" title=\"一、新建iframe窗口\"></a>一、新建iframe窗口</h2><p>为了打印出想要的部分，我们需要新建一个窗口，把需要的dom装进去。为了避免部分浏览器阻止窗口弹出导致无法打印，建议使用iframe。</p>\n<p>打印的时候，我们需要防止iframe的显示影响页面布局，只需要在父页面设置iframe的样式为display: none即可。如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> frame = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;iframe&#x27;</span>)</span><br><span class=\"line\">frame.style.display = <span class=\"string\">&#x27;none&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(frame)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、选择需要打印的部分dom\"><a href=\"#二、选择需要打印的部分dom\" class=\"headerlink\" title=\"二、选择需要打印的部分dom\"></a>二、选择需要打印的部分dom</h2><p>从当前dom选择需要打印的dom元素，插入iframe。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> target = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;print-target&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (target) &#123;</span><br><span class=\"line\">  frame.contentDocument.body.innerHTML = target.outerHTML</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、插入样式\"><a href=\"#三、插入样式\" class=\"headerlink\" title=\"三、插入样式\"></a>三、插入样式</h2><p>一般情况下，你可以直接将父页面的style和link全部拷贝到iframe中，这样打印到样式和原本样式是一样的，除非打印部分的样式受未打印部分的父元素控制导致样式脱节，所以，打印部分的样式尽量和父元素解耦。</p>\n<p>我们知道，浏览器打印的时候你可能需要不一样的样式，只需要加多一个style标签引入打印样式即可。比较典型的就是，打印的时候你想要按照需要打印的纸张尺寸打印，这时候可以在@media print中将容器的宽度改为打印尺寸（如A4是210mm，css支持mm单位的尺寸）。</p>\n<h2 id=\"四、特殊元素处理\"><a href=\"#四、特殊元素处理\" class=\"headerlink\" title=\"四、特殊元素处理\"></a>四、特殊元素处理</h2><p>由于我们将打印区域拷贝到ifame中采用对的是将targetElement.outerHTML赋值给iframe的body的。这样赋值的情况下，部分表单组件会失去值，所以，我们需要在赋值之前将值固定，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// https://github.com/Power-kxLee/vue-print-nb/blob/master/src/packages/printarea.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> copy = ele.cloneNode(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> copiedInputs = copy.querySelectorAll(<span class=\"string\">&#x27;input,select,textarea&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> selectCount = -<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; copiedInputs.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> item = copiedInputs[i];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> typeInput = item.getAttribute(<span class=\"string\">&#x27;type&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> copiedInput = copiedInputs[i];</span><br><span class=\"line\">    <span class=\"comment\">// 获取select标签</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!typeInput) &#123;</span><br><span class=\"line\">        typeInput = item.tagName === <span class=\"string\">&#x27;SELECT&#x27;</span> ? <span class=\"string\">&#x27;select&#x27;</span> : item.tagName === <span class=\"string\">&#x27;TEXTAREA&#x27;</span> ? <span class=\"string\">&#x27;textarea&#x27;</span> : <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 处理input框</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item.tagName === <span class=\"string\">&#x27;INPUT&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 除了单选框 多选框比较特别</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (typeInput === <span class=\"string\">&#x27;radio&#x27;</span> || typeInput === <span class=\"string\">&#x27;checkbox&#x27;</span>) &#123;</span><br><span class=\"line\">            copiedInput.setAttribute(<span class=\"string\">&#x27;checked&#x27;</span>, item.checked);</span><br><span class=\"line\">        <span class=\"comment\">// </span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            copiedInput.value = item.value;</span><br><span class=\"line\">            copiedInput.setAttribute(<span class=\"string\">&#x27;value&#x27;</span>, item.value);</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    <span class=\"comment\">// 处理select</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (typeInput === <span class=\"string\">&#x27;select&#x27;</span>) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        selectCount ++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> b = <span class=\"number\">0</span>; b &lt; ele.querySelectorAll(<span class=\"string\">&#x27;select&#x27;</span>).length; b++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> select = ele.querySelectorAll(<span class=\"string\">&#x27;select&#x27;</span>)[b]; <span class=\"comment\">// 获取原始层每一个select</span></span><br><span class=\"line\">            !select.getAttribute(<span class=\"string\">&#x27;newbs&#x27;</span>) &amp;&amp; select.setAttribute(<span class=\"string\">&#x27;newbs&#x27;</span>, b) <span class=\"comment\">// 添加标识</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (select.getAttribute(<span class=\"string\">&#x27;newbs&#x27;</span>) == selectCount) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> opSelectedIndex = ele.querySelectorAll(<span class=\"string\">&#x27;select&#x27;</span>)[selectCount].selectedIndex;</span><br><span class=\"line\">                item.options[opSelectedIndex].setAttribute(<span class=\"string\">&#x27;selected&#x27;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 处理textarea</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        copiedInput.innerHTML = item.value;</span><br><span class=\"line\">        copiedInput.setAttribute(<span class=\"string\">&#x27;html&#x27;</span>, item.value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"html property & attribute","date":"2018-07-02T16:00:00.000Z","_content":" \n## property\n\nDOM元素的属性，如selectedIndex, tagName, nodeName, nodeType, ownerDocument, defaultChecked, defaultSelected\n\nDOM是提供给js访问页面元素的对象\n\n## attribute\n\nHTML标签上绑定的属性，包括id, value, name, type，除了value之外，其它属性基本都是字符串类型的\n\n### JQuery的attr()和prop()方法的区别\n\n#### prop()就是获取property属性的值，attr()是获取attribute的值\n\n#### 如果要改变DOM的值，获取会发生变化的属性值，需要调用prop()方法，比如checked, selected, or disabled\n\n\n```\n<input type=\"checkbox\" checked=\"checked\" />\n```\n\n对于以上标签，获取值对应关系如下：\n\n```\nelem.checked\ttrue (Boolean) Will change with checkbox state\n$( elem ).prop( \"checked\" )\ttrue (Boolean) Will change with checkbox state\nelem.getAttribute( \"checked\" )\t\"checked\" (String) Initial state of the checkbox; does not change\n$( elem ).attr( \"checked\" ) (1.6)\t\"checked\" (String) Initial state of the checkbox; does not change\n$( elem ).attr( \"checked\" ) (1.6.1+)\t\"checked\" (String) Will change with checkbox state\n$( elem ).attr( \"checked\" ) (pre-1.6)\ttrue (Boolean) Changed with checkbox state\n```\n","source":"_posts/blogs/property-attribute.md","raw":"---\ntitle: html property & attribute\ncategories: html\ntags: [html]\ndate: 2018-7-3\n--- \n## property\n\nDOM元素的属性，如selectedIndex, tagName, nodeName, nodeType, ownerDocument, defaultChecked, defaultSelected\n\nDOM是提供给js访问页面元素的对象\n\n## attribute\n\nHTML标签上绑定的属性，包括id, value, name, type，除了value之外，其它属性基本都是字符串类型的\n\n### JQuery的attr()和prop()方法的区别\n\n#### prop()就是获取property属性的值，attr()是获取attribute的值\n\n#### 如果要改变DOM的值，获取会发生变化的属性值，需要调用prop()方法，比如checked, selected, or disabled\n\n\n```\n<input type=\"checkbox\" checked=\"checked\" />\n```\n\n对于以上标签，获取值对应关系如下：\n\n```\nelem.checked\ttrue (Boolean) Will change with checkbox state\n$( elem ).prop( \"checked\" )\ttrue (Boolean) Will change with checkbox state\nelem.getAttribute( \"checked\" )\t\"checked\" (String) Initial state of the checkbox; does not change\n$( elem ).attr( \"checked\" ) (1.6)\t\"checked\" (String) Initial state of the checkbox; does not change\n$( elem ).attr( \"checked\" ) (1.6.1+)\t\"checked\" (String) Will change with checkbox state\n$( elem ).attr( \"checked\" ) (pre-1.6)\ttrue (Boolean) Changed with checkbox state\n```\n","slug":"blogs/property-attribute","published":1,"updated":"2021-06-14T02:06:07.454Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6j000eecq857qua4jb","content":"<h2 id=\"property\"><a href=\"#property\" class=\"headerlink\" title=\"property\"></a>property</h2><p>DOM元素的属性，如selectedIndex, tagName, nodeName, nodeType, ownerDocument, defaultChecked, defaultSelected</p>\n<p>DOM是提供给js访问页面元素的对象</p>\n<h2 id=\"attribute\"><a href=\"#attribute\" class=\"headerlink\" title=\"attribute\"></a>attribute</h2><p>HTML标签上绑定的属性，包括id, value, name, type，除了value之外，其它属性基本都是字符串类型的</p>\n<h3 id=\"JQuery的attr-和prop-方法的区别\"><a href=\"#JQuery的attr-和prop-方法的区别\" class=\"headerlink\" title=\"JQuery的attr()和prop()方法的区别\"></a>JQuery的attr()和prop()方法的区别</h3><h4 id=\"prop-就是获取property属性的值，attr-是获取attribute的值\"><a href=\"#prop-就是获取property属性的值，attr-是获取attribute的值\" class=\"headerlink\" title=\"prop()就是获取property属性的值，attr()是获取attribute的值\"></a>prop()就是获取property属性的值，attr()是获取attribute的值</h4><h4 id=\"如果要改变DOM的值，获取会发生变化的属性值，需要调用prop-方法，比如checked-selected-or-disabled\"><a href=\"#如果要改变DOM的值，获取会发生变化的属性值，需要调用prop-方法，比如checked-selected-or-disabled\" class=\"headerlink\" title=\"如果要改变DOM的值，获取会发生变化的属性值，需要调用prop()方法，比如checked, selected, or disabled\"></a>如果要改变DOM的值，获取会发生变化的属性值，需要调用prop()方法，比如checked, selected, or disabled</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;checkbox&quot; checked=&quot;checked&quot; /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>对于以上标签，获取值对应关系如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elem.checked\ttrue (Boolean) Will change with checkbox state</span><br><span class=\"line\">$( elem ).prop( &quot;checked&quot; )\ttrue (Boolean) Will change with checkbox state</span><br><span class=\"line\">elem.getAttribute( &quot;checked&quot; )\t&quot;checked&quot; (String) Initial state of the checkbox; does not change</span><br><span class=\"line\">$( elem ).attr( &quot;checked&quot; ) (1.6)\t&quot;checked&quot; (String) Initial state of the checkbox; does not change</span><br><span class=\"line\">$( elem ).attr( &quot;checked&quot; ) (1.6.1+)\t&quot;checked&quot; (String) Will change with checkbox state</span><br><span class=\"line\">$( elem ).attr( &quot;checked&quot; ) (pre-1.6)\ttrue (Boolean) Changed with checkbox state</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"property\"><a href=\"#property\" class=\"headerlink\" title=\"property\"></a>property</h2><p>DOM元素的属性，如selectedIndex, tagName, nodeName, nodeType, ownerDocument, defaultChecked, defaultSelected</p>\n<p>DOM是提供给js访问页面元素的对象</p>\n<h2 id=\"attribute\"><a href=\"#attribute\" class=\"headerlink\" title=\"attribute\"></a>attribute</h2><p>HTML标签上绑定的属性，包括id, value, name, type，除了value之外，其它属性基本都是字符串类型的</p>\n<h3 id=\"JQuery的attr-和prop-方法的区别\"><a href=\"#JQuery的attr-和prop-方法的区别\" class=\"headerlink\" title=\"JQuery的attr()和prop()方法的区别\"></a>JQuery的attr()和prop()方法的区别</h3><h4 id=\"prop-就是获取property属性的值，attr-是获取attribute的值\"><a href=\"#prop-就是获取property属性的值，attr-是获取attribute的值\" class=\"headerlink\" title=\"prop()就是获取property属性的值，attr()是获取attribute的值\"></a>prop()就是获取property属性的值，attr()是获取attribute的值</h4><h4 id=\"如果要改变DOM的值，获取会发生变化的属性值，需要调用prop-方法，比如checked-selected-or-disabled\"><a href=\"#如果要改变DOM的值，获取会发生变化的属性值，需要调用prop-方法，比如checked-selected-or-disabled\" class=\"headerlink\" title=\"如果要改变DOM的值，获取会发生变化的属性值，需要调用prop()方法，比如checked, selected, or disabled\"></a>如果要改变DOM的值，获取会发生变化的属性值，需要调用prop()方法，比如checked, selected, or disabled</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;checkbox&quot; checked=&quot;checked&quot; /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>对于以上标签，获取值对应关系如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elem.checked\ttrue (Boolean) Will change with checkbox state</span><br><span class=\"line\">$( elem ).prop( &quot;checked&quot; )\ttrue (Boolean) Will change with checkbox state</span><br><span class=\"line\">elem.getAttribute( &quot;checked&quot; )\t&quot;checked&quot; (String) Initial state of the checkbox; does not change</span><br><span class=\"line\">$( elem ).attr( &quot;checked&quot; ) (1.6)\t&quot;checked&quot; (String) Initial state of the checkbox; does not change</span><br><span class=\"line\">$( elem ).attr( &quot;checked&quot; ) (1.6.1+)\t&quot;checked&quot; (String) Will change with checkbox state</span><br><span class=\"line\">$( elem ).attr( &quot;checked&quot; ) (pre-1.6)\ttrue (Boolean) Changed with checkbox state</span><br></pre></td></tr></table></figure>\n"},{"title":"第99次学习原型链","date":"2021-06-03T16:00:00.000Z","_content":" \n\n变量有基于类（构造函数）创建的，也有基于实例创建的。\n\n简单类型有Number，Boolean，Null，Undefined，String，Symbol，RegExp\n引用类型：Array，Object，Function，Set，Map\n\n## 字面量创建的变量\n```\nlet a = [1,2,3]\nlet b = {}\n```\n\n通过字面量创建的变量，底层会调用对应的构造函数，可以输出constructor属性看看：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628309631324-image.png)\n字面量生成的变量原型是是这些内置类型的构造函数。\n\n## 构造函数创建的变量\n通过new创建的变量，调用构造函数本身，所以原型的constructor就是这个构造函数。\n```\nfunction MyClass(name) {\n    this.foo = name\n}\n\nlet myObj = new MyClass('bar')\n```\nmyObj格式如下：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628309653718-image.png)\nmyObj.constructor取的是__proto__.constructor\n\nObject.create\n该方法比较特殊，会通过现有的对象实例创建新对象，新对象的原型是旧实例，而不是类或者构造函数。\n```\nlet obj = {foo: 'bar'}\nlet obj2 = Object.create(obj)\n```\n\n打印obj2\n\n可见，obj2.__proto__没有constructor属性，所以obj2.constructor会继续往上级寻找该属性，所以，obj2.constructor的值为Object函数\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628309680961-image.png)\n\n\n## js类继承\n\n### 一、改变this指向\n  1. call实现构造函数继承\n```\nfunction Parent(name,age) {\n  this.name = name\n  this.age = age\n}\nParent.prototype.say = function () {}\n\nfunction Child (name,age) {\n  Parent.call(this, ...arguments)\n}\n\nvar c = new Child('joe', 12)\n\nc.name = 'joe'\nconsole.log(c.name);\nconsole.log(c.say);\n```\n\n该方法只是通过将子类的this指向父类的构造函数并调用。仅仅是继承了父类的既有属性，并没有继承原型对象。\n \n2. 实现call\n```\nvar a = 1\nfunction fn () {\n  console.log(this.a)\n}\nfn() // 非严格模式：1 严格模式 ：Uncaught TypeError: Cannot read property 'a' of undefined\nvar obj = {\n  a: 11\n}\nFunction.prototype.myCall = function (context = window, ...args) {\n  context.fn = this\n  let res = context.fn(...args)\n  delete context.fn\n  return res\n}\n\nfn.myCall(obj) // 1\n```\n\n  call方法做的事情很简单，就是将函数挂到传入的对象上，这样通过属性调用执行函数时this自然就会指向对象。\n\n3. this为什么是实例\n老生常谈this的指向\n* 函数中的this，不会像变量一样从父级作用域查找。函数中this直接指向window，严格模式下为undefined，除非有通过call或者apply重新绑定this。\n* 函数作为对象属性时，this指向的是对象\n* new后面的构造函数、实例方法调用，this指向都是实例\n* 直接调用构造函数的原型方法，this指向当然是原型对象啦（这个函数是哪个对象调用的，this指的就是这个对象）\n  \n4. 实现myNew\n```\nfunction Parent(name,age) {\n  this.name = name\n  this.age = age\n}\nParent.prototype.say = function () {}\n\nfunction Child (name,age) {\n  Parent.call(this, ...arguments)\n}\nfunction myNew (fn, ...args) {\n  var obj = {\n    __proto__: fn.prototype\n  }\n  var res = fn.apply(obj, ...args)\n  return typeof res === 'object' ? res : obj\n}\n\nmyNew(Child, 'joe')\n```\n\n  \n### 二、原型链也要继承\n先把基本代码写上：\n```\nfunction Parent(name,age) {\n  this.name = name\n  this.age = age\n}\nParent.prototype.say = function () {\n  console.log('say hello');\n}\n\nfunction Child (name, age, classNumber) {\n  Parent.apply(this, arguments)\n  this.classNumber = classNumber\n}\n```\n\n\n下面说一下Child如何继承Parent 原型链。\n1. Child.prototype = new Parent()\n```\nChild.prototype = new Parent()\n\nvar c = new Child('joe', 12, 3)\nconsole.log(c.name); // joe\nc.say()\n```\n\n这个方法，有个缺点，就是Parent函数执行了2次，一次是给Child.prototype赋值，一次是Child实例化。而且Child.prototype上会挂上多余的name和age属性。\n\n2. Child.prototype = Parent.prototype\n```\nChild.prototype = Parent.prototype\nvar c = new Child('joe', 12, 3)\nconsole.log(c.name); // joe\nc.say()\n```\n\n\n这个方法，Child和Parent共用了原型对象，当我们想给Child的原型对象上增加Child专属的方法（如study）时，会导致Parent.prototype也会被同时修改。\n\n3. Child.prototype = Object.create(Parent.prototype)\n```\nChild.prototype = Object.create(Parent.prototype)\nChild.prototype.study = function(){\n    console.log('go school')\n}\n```\n\nObject.create通过拷贝一份prototype可以解决第二种方法的问题。\n\nprototype.constructor属性现在指向Parent函数。但是new Child语法会自动执行Child函数，而不是直接执行Parent。而且instanceof也能通过验证\n```\nvar c = new Child('joe', 12)\nc instanceof Child // true\n```\n\n这一点超出预料，尽管从浏览器的输出结果，并没有找到Child的影子：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628309822567-image.png)\n看来，Child.prototype.constructor = Child似乎不是很有必要。\n\n4. 加上constructor\n我还是要说，加上这句话：\n```\nChild.prototype.constructor = Child\n```\n\n  \nwhy? 如果原型对象使用了this.constructor之类的语法，那它拿到的就是Parent:\n```\n// define the Person Class  \nfunction Parent(name) {\n    this.name = name;\n}  \n\nParent.prototype.copy = function() {  \n    return new this.constructor(this.name);\n};  \n\n// define the Student class  \nfunction Child(name) {  \n    Parent.call(this, name);\n}  \n\n// inherit Person  \nChild.prototype = Object.create(Parent.prototype);\nvar child1 = new Child(\"trinth\");  \nconsole.log(child1 instanceof Child); // => true\nconsole.log(child1.copy() instanceof Child); // => false\n\n```\n\n总之构造函数要像上面那张**构造函数-原型对象-实例**关系图一样完完整整。\n\n## 类型判断\n\n判断变量类型有多种方法，下表列出了这些方法的完整功能范围：\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628309920093-image.png)\n\n","source":"_posts/blogs/prototype.md","raw":"---\ntitle: 第99次学习原型链\ncategories: js\ntags: [js, 原型链]\ndate: 2021-6-4\n--- \n\n变量有基于类（构造函数）创建的，也有基于实例创建的。\n\n简单类型有Number，Boolean，Null，Undefined，String，Symbol，RegExp\n引用类型：Array，Object，Function，Set，Map\n\n## 字面量创建的变量\n```\nlet a = [1,2,3]\nlet b = {}\n```\n\n通过字面量创建的变量，底层会调用对应的构造函数，可以输出constructor属性看看：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628309631324-image.png)\n字面量生成的变量原型是是这些内置类型的构造函数。\n\n## 构造函数创建的变量\n通过new创建的变量，调用构造函数本身，所以原型的constructor就是这个构造函数。\n```\nfunction MyClass(name) {\n    this.foo = name\n}\n\nlet myObj = new MyClass('bar')\n```\nmyObj格式如下：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628309653718-image.png)\nmyObj.constructor取的是__proto__.constructor\n\nObject.create\n该方法比较特殊，会通过现有的对象实例创建新对象，新对象的原型是旧实例，而不是类或者构造函数。\n```\nlet obj = {foo: 'bar'}\nlet obj2 = Object.create(obj)\n```\n\n打印obj2\n\n可见，obj2.__proto__没有constructor属性，所以obj2.constructor会继续往上级寻找该属性，所以，obj2.constructor的值为Object函数\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628309680961-image.png)\n\n\n## js类继承\n\n### 一、改变this指向\n  1. call实现构造函数继承\n```\nfunction Parent(name,age) {\n  this.name = name\n  this.age = age\n}\nParent.prototype.say = function () {}\n\nfunction Child (name,age) {\n  Parent.call(this, ...arguments)\n}\n\nvar c = new Child('joe', 12)\n\nc.name = 'joe'\nconsole.log(c.name);\nconsole.log(c.say);\n```\n\n该方法只是通过将子类的this指向父类的构造函数并调用。仅仅是继承了父类的既有属性，并没有继承原型对象。\n \n2. 实现call\n```\nvar a = 1\nfunction fn () {\n  console.log(this.a)\n}\nfn() // 非严格模式：1 严格模式 ：Uncaught TypeError: Cannot read property 'a' of undefined\nvar obj = {\n  a: 11\n}\nFunction.prototype.myCall = function (context = window, ...args) {\n  context.fn = this\n  let res = context.fn(...args)\n  delete context.fn\n  return res\n}\n\nfn.myCall(obj) // 1\n```\n\n  call方法做的事情很简单，就是将函数挂到传入的对象上，这样通过属性调用执行函数时this自然就会指向对象。\n\n3. this为什么是实例\n老生常谈this的指向\n* 函数中的this，不会像变量一样从父级作用域查找。函数中this直接指向window，严格模式下为undefined，除非有通过call或者apply重新绑定this。\n* 函数作为对象属性时，this指向的是对象\n* new后面的构造函数、实例方法调用，this指向都是实例\n* 直接调用构造函数的原型方法，this指向当然是原型对象啦（这个函数是哪个对象调用的，this指的就是这个对象）\n  \n4. 实现myNew\n```\nfunction Parent(name,age) {\n  this.name = name\n  this.age = age\n}\nParent.prototype.say = function () {}\n\nfunction Child (name,age) {\n  Parent.call(this, ...arguments)\n}\nfunction myNew (fn, ...args) {\n  var obj = {\n    __proto__: fn.prototype\n  }\n  var res = fn.apply(obj, ...args)\n  return typeof res === 'object' ? res : obj\n}\n\nmyNew(Child, 'joe')\n```\n\n  \n### 二、原型链也要继承\n先把基本代码写上：\n```\nfunction Parent(name,age) {\n  this.name = name\n  this.age = age\n}\nParent.prototype.say = function () {\n  console.log('say hello');\n}\n\nfunction Child (name, age, classNumber) {\n  Parent.apply(this, arguments)\n  this.classNumber = classNumber\n}\n```\n\n\n下面说一下Child如何继承Parent 原型链。\n1. Child.prototype = new Parent()\n```\nChild.prototype = new Parent()\n\nvar c = new Child('joe', 12, 3)\nconsole.log(c.name); // joe\nc.say()\n```\n\n这个方法，有个缺点，就是Parent函数执行了2次，一次是给Child.prototype赋值，一次是Child实例化。而且Child.prototype上会挂上多余的name和age属性。\n\n2. Child.prototype = Parent.prototype\n```\nChild.prototype = Parent.prototype\nvar c = new Child('joe', 12, 3)\nconsole.log(c.name); // joe\nc.say()\n```\n\n\n这个方法，Child和Parent共用了原型对象，当我们想给Child的原型对象上增加Child专属的方法（如study）时，会导致Parent.prototype也会被同时修改。\n\n3. Child.prototype = Object.create(Parent.prototype)\n```\nChild.prototype = Object.create(Parent.prototype)\nChild.prototype.study = function(){\n    console.log('go school')\n}\n```\n\nObject.create通过拷贝一份prototype可以解决第二种方法的问题。\n\nprototype.constructor属性现在指向Parent函数。但是new Child语法会自动执行Child函数，而不是直接执行Parent。而且instanceof也能通过验证\n```\nvar c = new Child('joe', 12)\nc instanceof Child // true\n```\n\n这一点超出预料，尽管从浏览器的输出结果，并没有找到Child的影子：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628309822567-image.png)\n看来，Child.prototype.constructor = Child似乎不是很有必要。\n\n4. 加上constructor\n我还是要说，加上这句话：\n```\nChild.prototype.constructor = Child\n```\n\n  \nwhy? 如果原型对象使用了this.constructor之类的语法，那它拿到的就是Parent:\n```\n// define the Person Class  \nfunction Parent(name) {\n    this.name = name;\n}  \n\nParent.prototype.copy = function() {  \n    return new this.constructor(this.name);\n};  \n\n// define the Student class  \nfunction Child(name) {  \n    Parent.call(this, name);\n}  \n\n// inherit Person  \nChild.prototype = Object.create(Parent.prototype);\nvar child1 = new Child(\"trinth\");  \nconsole.log(child1 instanceof Child); // => true\nconsole.log(child1.copy() instanceof Child); // => false\n\n```\n\n总之构造函数要像上面那张**构造函数-原型对象-实例**关系图一样完完整整。\n\n## 类型判断\n\n判断变量类型有多种方法，下表列出了这些方法的完整功能范围：\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628309920093-image.png)\n\n","slug":"blogs/prototype","published":1,"updated":"2021-08-07T04:19:12.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6k000fecq8ao9wbh0k","content":"<p>变量有基于类（构造函数）创建的，也有基于实例创建的。</p>\n<p>简单类型有Number，Boolean，Null，Undefined，String，Symbol，RegExp<br>引用类型：Array，Object，Function，Set，Map</p>\n<h2 id=\"字面量创建的变量\"><a href=\"#字面量创建的变量\" class=\"headerlink\" title=\"字面量创建的变量\"></a>字面量创建的变量</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = [1,2,3]</span><br><span class=\"line\">let b = &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过字面量创建的变量，底层会调用对应的构造函数，可以输出constructor属性看看：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628309631324-image.png\"><br>字面量生成的变量原型是是这些内置类型的构造函数。</p>\n<h2 id=\"构造函数创建的变量\"><a href=\"#构造函数创建的变量\" class=\"headerlink\" title=\"构造函数创建的变量\"></a>构造函数创建的变量</h2><p>通过new创建的变量，调用构造函数本身，所以原型的constructor就是这个构造函数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function MyClass(name) &#123;</span><br><span class=\"line\">    this.foo = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let myObj = new MyClass(&#x27;bar&#x27;)</span><br></pre></td></tr></table></figure>\n<p>myObj格式如下：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628309653718-image.png\"><br>myObj.constructor取的是__proto__.constructor</p>\n<p>Object.create<br>该方法比较特殊，会通过现有的对象实例创建新对象，新对象的原型是旧实例，而不是类或者构造函数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;foo: &#x27;bar&#x27;&#125;</span><br><span class=\"line\">let obj2 = Object.create(obj)</span><br></pre></td></tr></table></figure>\n\n<p>打印obj2</p>\n<p>可见，obj2.__proto__没有constructor属性，所以obj2.constructor会继续往上级寻找该属性，所以，obj2.constructor的值为Object函数</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628309680961-image.png\"></p>\n<h2 id=\"js类继承\"><a href=\"#js类继承\" class=\"headerlink\" title=\"js类继承\"></a>js类继承</h2><h3 id=\"一、改变this指向\"><a href=\"#一、改变this指向\" class=\"headerlink\" title=\"一、改变this指向\"></a>一、改变this指向</h3><ol>\n<li>call实现构造函数继承<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Parent(name,age) &#123;</span><br><span class=\"line\">  this.name = name</span><br><span class=\"line\">  this.age = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Parent.prototype.say = function () &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function Child (name,age) &#123;</span><br><span class=\"line\">  Parent.call(this, ...arguments)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var c = new Child(&#x27;joe&#x27;, 12)</span><br><span class=\"line\"></span><br><span class=\"line\">c.name = &#x27;joe&#x27;</span><br><span class=\"line\">console.log(c.name);</span><br><span class=\"line\">console.log(c.say);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>该方法只是通过将子类的this指向父类的构造函数并调用。仅仅是继承了父类的既有属性，并没有继承原型对象。</p>\n<ol start=\"2\">\n<li>实现call<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 1</span><br><span class=\"line\">function fn () &#123;</span><br><span class=\"line\">  console.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn() // 非严格模式：1 严格模式 ：Uncaught TypeError: Cannot read property &#x27;a&#x27; of undefined</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  a: 11</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Function.prototype.myCall = function (context = window, ...args) &#123;</span><br><span class=\"line\">  context.fn = this</span><br><span class=\"line\">  let res = context.fn(...args)</span><br><span class=\"line\">  delete context.fn</span><br><span class=\"line\">  return res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn.myCall(obj) // 1</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>  call方法做的事情很简单，就是将函数挂到传入的对象上，这样通过属性调用执行函数时this自然就会指向对象。</p>\n<ol start=\"3\">\n<li>this为什么是实例<br>老生常谈this的指向</li>\n</ol>\n<ul>\n<li>函数中的this，不会像变量一样从父级作用域查找。函数中this直接指向window，严格模式下为undefined，除非有通过call或者apply重新绑定this。</li>\n<li>函数作为对象属性时，this指向的是对象</li>\n<li>new后面的构造函数、实例方法调用，this指向都是实例</li>\n<li>直接调用构造函数的原型方法，this指向当然是原型对象啦（这个函数是哪个对象调用的，this指的就是这个对象）</li>\n</ul>\n<ol start=\"4\">\n<li>实现myNew<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Parent(name,age) &#123;</span><br><span class=\"line\">  this.name = name</span><br><span class=\"line\">  this.age = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Parent.prototype.say = function () &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function Child (name,age) &#123;</span><br><span class=\"line\">  Parent.call(this, ...arguments)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function myNew (fn, ...args) &#123;</span><br><span class=\"line\">  var obj = &#123;</span><br><span class=\"line\">    __proto__: fn.prototype</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  var res = fn.apply(obj, ...args)</span><br><span class=\"line\">  return typeof res === &#x27;object&#x27; ? res : obj</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">myNew(Child, &#x27;joe&#x27;)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"二、原型链也要继承\"><a href=\"#二、原型链也要继承\" class=\"headerlink\" title=\"二、原型链也要继承\"></a>二、原型链也要继承</h3><p>先把基本代码写上：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Parent(name,age) &#123;</span><br><span class=\"line\">  this.name = name</span><br><span class=\"line\">  this.age = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Parent.prototype.say = function () &#123;</span><br><span class=\"line\">  console.log(&#x27;say hello&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function Child (name, age, classNumber) &#123;</span><br><span class=\"line\">  Parent.apply(this, arguments)</span><br><span class=\"line\">  this.classNumber = classNumber</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>下面说一下Child如何继承Parent 原型链。</p>\n<ol>\n<li>Child.prototype = new Parent()<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Child.prototype = new Parent()</span><br><span class=\"line\"></span><br><span class=\"line\">var c = new Child(&#x27;joe&#x27;, 12, 3)</span><br><span class=\"line\">console.log(c.name); // joe</span><br><span class=\"line\">c.say()</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>这个方法，有个缺点，就是Parent函数执行了2次，一次是给Child.prototype赋值，一次是Child实例化。而且Child.prototype上会挂上多余的name和age属性。</p>\n<ol start=\"2\">\n<li>Child.prototype = Parent.prototype<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Child.prototype = Parent.prototype</span><br><span class=\"line\">var c = new Child(&#x27;joe&#x27;, 12, 3)</span><br><span class=\"line\">console.log(c.name); // joe</span><br><span class=\"line\">c.say()</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>这个方法，Child和Parent共用了原型对象，当我们想给Child的原型对象上增加Child专属的方法（如study）时，会导致Parent.prototype也会被同时修改。</p>\n<ol start=\"3\">\n<li>Child.prototype = Object.create(Parent.prototype)<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Child.prototype = Object.create(Parent.prototype)</span><br><span class=\"line\">Child.prototype.study = function()&#123;</span><br><span class=\"line\">    console.log(&#x27;go school&#x27;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>Object.create通过拷贝一份prototype可以解决第二种方法的问题。</p>\n<p>prototype.constructor属性现在指向Parent函数。但是new Child语法会自动执行Child函数，而不是直接执行Parent。而且instanceof也能通过验证</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var c = new Child(&#x27;joe&#x27;, 12)</span><br><span class=\"line\">c instanceof Child // true</span><br></pre></td></tr></table></figure>\n\n<p>这一点超出预料，尽管从浏览器的输出结果，并没有找到Child的影子：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628309822567-image.png\"><br>看来，Child.prototype.constructor = Child似乎不是很有必要。</p>\n<ol start=\"4\">\n<li>加上constructor<br>我还是要说，加上这句话：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Child.prototype.constructor = Child</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>why? 如果原型对象使用了this.constructor之类的语法，那它拿到的就是Parent:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// define the Person Class  </span><br><span class=\"line\">function Parent(name) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">Parent.prototype.copy = function() &#123;  </span><br><span class=\"line\">    return new this.constructor(this.name);</span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\"></span><br><span class=\"line\">// define the Student class  </span><br><span class=\"line\">function Child(name) &#123;  </span><br><span class=\"line\">    Parent.call(this, name);</span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">// inherit Person  </span><br><span class=\"line\">Child.prototype = Object.create(Parent.prototype);</span><br><span class=\"line\">var child1 = new Child(&quot;trinth&quot;);  </span><br><span class=\"line\">console.log(child1 instanceof Child); // =&gt; true</span><br><span class=\"line\">console.log(child1.copy() instanceof Child); // =&gt; false</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>总之构造函数要像上面那张<strong>构造函数-原型对象-实例</strong>关系图一样完完整整。</p>\n<h2 id=\"类型判断\"><a href=\"#类型判断\" class=\"headerlink\" title=\"类型判断\"></a>类型判断</h2><p>判断变量类型有多种方法，下表列出了这些方法的完整功能范围：</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628309920093-image.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>变量有基于类（构造函数）创建的，也有基于实例创建的。</p>\n<p>简单类型有Number，Boolean，Null，Undefined，String，Symbol，RegExp<br>引用类型：Array，Object，Function，Set，Map</p>\n<h2 id=\"字面量创建的变量\"><a href=\"#字面量创建的变量\" class=\"headerlink\" title=\"字面量创建的变量\"></a>字面量创建的变量</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let a = [1,2,3]</span><br><span class=\"line\">let b = &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过字面量创建的变量，底层会调用对应的构造函数，可以输出constructor属性看看：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628309631324-image.png\"><br>字面量生成的变量原型是是这些内置类型的构造函数。</p>\n<h2 id=\"构造函数创建的变量\"><a href=\"#构造函数创建的变量\" class=\"headerlink\" title=\"构造函数创建的变量\"></a>构造函数创建的变量</h2><p>通过new创建的变量，调用构造函数本身，所以原型的constructor就是这个构造函数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function MyClass(name) &#123;</span><br><span class=\"line\">    this.foo = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let myObj = new MyClass(&#x27;bar&#x27;)</span><br></pre></td></tr></table></figure>\n<p>myObj格式如下：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628309653718-image.png\"><br>myObj.constructor取的是__proto__.constructor</p>\n<p>Object.create<br>该方法比较特殊，会通过现有的对象实例创建新对象，新对象的原型是旧实例，而不是类或者构造函数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;foo: &#x27;bar&#x27;&#125;</span><br><span class=\"line\">let obj2 = Object.create(obj)</span><br></pre></td></tr></table></figure>\n\n<p>打印obj2</p>\n<p>可见，obj2.__proto__没有constructor属性，所以obj2.constructor会继续往上级寻找该属性，所以，obj2.constructor的值为Object函数</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628309680961-image.png\"></p>\n<h2 id=\"js类继承\"><a href=\"#js类继承\" class=\"headerlink\" title=\"js类继承\"></a>js类继承</h2><h3 id=\"一、改变this指向\"><a href=\"#一、改变this指向\" class=\"headerlink\" title=\"一、改变this指向\"></a>一、改变this指向</h3><ol>\n<li>call实现构造函数继承<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Parent(name,age) &#123;</span><br><span class=\"line\">  this.name = name</span><br><span class=\"line\">  this.age = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Parent.prototype.say = function () &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function Child (name,age) &#123;</span><br><span class=\"line\">  Parent.call(this, ...arguments)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var c = new Child(&#x27;joe&#x27;, 12)</span><br><span class=\"line\"></span><br><span class=\"line\">c.name = &#x27;joe&#x27;</span><br><span class=\"line\">console.log(c.name);</span><br><span class=\"line\">console.log(c.say);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>该方法只是通过将子类的this指向父类的构造函数并调用。仅仅是继承了父类的既有属性，并没有继承原型对象。</p>\n<ol start=\"2\">\n<li>实现call<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 1</span><br><span class=\"line\">function fn () &#123;</span><br><span class=\"line\">  console.log(this.a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn() // 非严格模式：1 严格模式 ：Uncaught TypeError: Cannot read property &#x27;a&#x27; of undefined</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  a: 11</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Function.prototype.myCall = function (context = window, ...args) &#123;</span><br><span class=\"line\">  context.fn = this</span><br><span class=\"line\">  let res = context.fn(...args)</span><br><span class=\"line\">  delete context.fn</span><br><span class=\"line\">  return res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fn.myCall(obj) // 1</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>  call方法做的事情很简单，就是将函数挂到传入的对象上，这样通过属性调用执行函数时this自然就会指向对象。</p>\n<ol start=\"3\">\n<li>this为什么是实例<br>老生常谈this的指向</li>\n</ol>\n<ul>\n<li>函数中的this，不会像变量一样从父级作用域查找。函数中this直接指向window，严格模式下为undefined，除非有通过call或者apply重新绑定this。</li>\n<li>函数作为对象属性时，this指向的是对象</li>\n<li>new后面的构造函数、实例方法调用，this指向都是实例</li>\n<li>直接调用构造函数的原型方法，this指向当然是原型对象啦（这个函数是哪个对象调用的，this指的就是这个对象）</li>\n</ul>\n<ol start=\"4\">\n<li>实现myNew<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Parent(name,age) &#123;</span><br><span class=\"line\">  this.name = name</span><br><span class=\"line\">  this.age = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Parent.prototype.say = function () &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function Child (name,age) &#123;</span><br><span class=\"line\">  Parent.call(this, ...arguments)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function myNew (fn, ...args) &#123;</span><br><span class=\"line\">  var obj = &#123;</span><br><span class=\"line\">    __proto__: fn.prototype</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  var res = fn.apply(obj, ...args)</span><br><span class=\"line\">  return typeof res === &#x27;object&#x27; ? res : obj</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">myNew(Child, &#x27;joe&#x27;)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"二、原型链也要继承\"><a href=\"#二、原型链也要继承\" class=\"headerlink\" title=\"二、原型链也要继承\"></a>二、原型链也要继承</h3><p>先把基本代码写上：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Parent(name,age) &#123;</span><br><span class=\"line\">  this.name = name</span><br><span class=\"line\">  this.age = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Parent.prototype.say = function () &#123;</span><br><span class=\"line\">  console.log(&#x27;say hello&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function Child (name, age, classNumber) &#123;</span><br><span class=\"line\">  Parent.apply(this, arguments)</span><br><span class=\"line\">  this.classNumber = classNumber</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>下面说一下Child如何继承Parent 原型链。</p>\n<ol>\n<li>Child.prototype = new Parent()<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Child.prototype = new Parent()</span><br><span class=\"line\"></span><br><span class=\"line\">var c = new Child(&#x27;joe&#x27;, 12, 3)</span><br><span class=\"line\">console.log(c.name); // joe</span><br><span class=\"line\">c.say()</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>这个方法，有个缺点，就是Parent函数执行了2次，一次是给Child.prototype赋值，一次是Child实例化。而且Child.prototype上会挂上多余的name和age属性。</p>\n<ol start=\"2\">\n<li>Child.prototype = Parent.prototype<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Child.prototype = Parent.prototype</span><br><span class=\"line\">var c = new Child(&#x27;joe&#x27;, 12, 3)</span><br><span class=\"line\">console.log(c.name); // joe</span><br><span class=\"line\">c.say()</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>这个方法，Child和Parent共用了原型对象，当我们想给Child的原型对象上增加Child专属的方法（如study）时，会导致Parent.prototype也会被同时修改。</p>\n<ol start=\"3\">\n<li>Child.prototype = Object.create(Parent.prototype)<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Child.prototype = Object.create(Parent.prototype)</span><br><span class=\"line\">Child.prototype.study = function()&#123;</span><br><span class=\"line\">    console.log(&#x27;go school&#x27;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>Object.create通过拷贝一份prototype可以解决第二种方法的问题。</p>\n<p>prototype.constructor属性现在指向Parent函数。但是new Child语法会自动执行Child函数，而不是直接执行Parent。而且instanceof也能通过验证</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var c = new Child(&#x27;joe&#x27;, 12)</span><br><span class=\"line\">c instanceof Child // true</span><br></pre></td></tr></table></figure>\n\n<p>这一点超出预料，尽管从浏览器的输出结果，并没有找到Child的影子：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628309822567-image.png\"><br>看来，Child.prototype.constructor = Child似乎不是很有必要。</p>\n<ol start=\"4\">\n<li>加上constructor<br>我还是要说，加上这句话：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Child.prototype.constructor = Child</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>why? 如果原型对象使用了this.constructor之类的语法，那它拿到的就是Parent:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// define the Person Class  </span><br><span class=\"line\">function Parent(name) &#123;</span><br><span class=\"line\">    this.name = name;</span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">Parent.prototype.copy = function() &#123;  </span><br><span class=\"line\">    return new this.constructor(this.name);</span><br><span class=\"line\">&#125;;  </span><br><span class=\"line\"></span><br><span class=\"line\">// define the Student class  </span><br><span class=\"line\">function Child(name) &#123;  </span><br><span class=\"line\">    Parent.call(this, name);</span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">// inherit Person  </span><br><span class=\"line\">Child.prototype = Object.create(Parent.prototype);</span><br><span class=\"line\">var child1 = new Child(&quot;trinth&quot;);  </span><br><span class=\"line\">console.log(child1 instanceof Child); // =&gt; true</span><br><span class=\"line\">console.log(child1.copy() instanceof Child); // =&gt; false</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>总之构造函数要像上面那张<strong>构造函数-原型对象-实例</strong>关系图一样完完整整。</p>\n<h2 id=\"类型判断\"><a href=\"#类型判断\" class=\"headerlink\" title=\"类型判断\"></a>类型判断</h2><p>判断变量类型有多种方法，下表列出了这些方法的完整功能范围：</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628309920093-image.png\"></p>\n"},{"title":"proxy 与 reflect","date":"2020-03-14T16:00:00.000Z","_content":" \n## Proxy\n\n### 定义\n> 在目标`对象`上架设一个`拦截`层， `外界`对该对象的`访问`先经过这一个`拦截`层，这个拦截层可以对外界对访问进行`过滤`和`改写`。翻译为`代理器`。\n\n举个`拦截`和`改写`例子：\n\n```javascript\nlet proxy = new Proxy({}, {\n  get: function() {\n    return 35\n  }\n})\n\nproxy.time // 35\nproxy.name // 35\n```\n\n上面对代码拦截了一个空对象的属性getter。只要是需要访问到对象的属性，都会触发getter。\n\n### Proxy 能拦截哪些`访问`行为呢？\n\n拦截行为 | 触发条件 | 返回值说明 \n-|-|-\nget(target, propKey, receiver)| 读取对象属性，proxy.foo，proxy['foo'] | 返回属性值 \nset(target, propKey, value, receiver) | 设置对象属性，proxy.foo = v，proxy['foo'] = v | 返回一个布尔值，表示是否设置成功\nhas(target, propKey) | propKey in proxy的操作 | 返回一个布尔值，表示是否包含此属性\ndeleteProperty(target, propKey) | delete proxy[propKey] | 返回一个布尔值，表示是否删除成功\nownKeys(target) | Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for...in循环 | 返回目标对象所有自身的属性的属性名\ngetOwnPropertyDescriptor(target, propKey) | Object.getOwnPropertyDescriptor(proxy, propKey) | 返回属性的描述对象\ndefineProperty(target, propKey, propDesc) | Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs) | 返回一个布尔值表示是否定义成功\npreventExtensions(target) | Object.preventExtensions(proxy) | 返回一个布尔值表示是否定义成功\ngetPrototypeOf(target) | Object.getPrototypeOf(proxy) | 返回一个对象（对象原型）\nisExtensible(target) | Object.isExtensible(proxy) | 返回一个布尔值\nsetPrototypeOf(target, proto) | Object.setPrototypeOf(proxy, proto) | 返回一个布尔值\napply(target, object, args) | 拦截 Proxy 实例作为函数调用的操作，比如proxy(...args)、proxy.call(object, ...args)、proxy.apply(...) | 无限制\nconstruct(target, args) | 拦截 Proxy 实例作为构造函数调用的操作，比如new proxy(...args) | 返回实例对象\n\n## Reflect\n\n### 定义\n\n1. 将Proxy支持的代理方法一一对应到Reflect，方便在Proxy中使用原对象的默认行为。\n```javascript\nlet proxy = new Proxy(target, {\n  set: function(target, name, value, receiver) {\n    var success = Reflect.set(target, name, value, receiver);\n    if (success) {\n      console.log('property ' + name + ' on ' + target + ' set to ' + value);\n    }\n    return success;\n  }\n});\nproxy.a = 1\n```\n\n2. 某些方法和Object原型方法行为高度一致，所以，除了在Proxy中使用，还可以单独使用。\n```javascript\n// 老写法\ntry {\n  Object.defineProperty(target, property, attributes);\n  // success\n} catch (e) {\n  // failure\n}\n\n// 新写法\nif (Reflect.defineProperty(target, property, attributes)) {\n  // success\n} else {\n  // failure\n}\n```\n\n\n## 谁在用\n\n### Vue\n\n#### 设置内置属性只读\n设置内置keyCode为只读：\n```javascript\nconst hasProxy =\n    typeof Proxy !== 'undefined' &&\n    Proxy.toString().match(/native code/)\n\n  if (hasProxy) {\n    const isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact')\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn(`Avoid overwriting built-in modifier in config.keyCodes: .${key}`)\n          return false\n        } else {\n          target[key] = value\n          return true\n        }\n      }\n    })\n  }\n```\n\n```javascript\nVue.config.keyCodes.ctrl = 86\n```\n以上代码会报错：\n![](/images/2019071701.jpeg)\n\n### 测试框架\n\n### 和defineProperty什么关系？\n\n## 什么时候适合用？","source":"_posts/blogs/proxy-reflect.md","raw":"---\ntitle: proxy 与 reflect\ncategories: javascript\ntags: [javascript]\ndate: 2020-3-15\n--- \n## Proxy\n\n### 定义\n> 在目标`对象`上架设一个`拦截`层， `外界`对该对象的`访问`先经过这一个`拦截`层，这个拦截层可以对外界对访问进行`过滤`和`改写`。翻译为`代理器`。\n\n举个`拦截`和`改写`例子：\n\n```javascript\nlet proxy = new Proxy({}, {\n  get: function() {\n    return 35\n  }\n})\n\nproxy.time // 35\nproxy.name // 35\n```\n\n上面对代码拦截了一个空对象的属性getter。只要是需要访问到对象的属性，都会触发getter。\n\n### Proxy 能拦截哪些`访问`行为呢？\n\n拦截行为 | 触发条件 | 返回值说明 \n-|-|-\nget(target, propKey, receiver)| 读取对象属性，proxy.foo，proxy['foo'] | 返回属性值 \nset(target, propKey, value, receiver) | 设置对象属性，proxy.foo = v，proxy['foo'] = v | 返回一个布尔值，表示是否设置成功\nhas(target, propKey) | propKey in proxy的操作 | 返回一个布尔值，表示是否包含此属性\ndeleteProperty(target, propKey) | delete proxy[propKey] | 返回一个布尔值，表示是否删除成功\nownKeys(target) | Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for...in循环 | 返回目标对象所有自身的属性的属性名\ngetOwnPropertyDescriptor(target, propKey) | Object.getOwnPropertyDescriptor(proxy, propKey) | 返回属性的描述对象\ndefineProperty(target, propKey, propDesc) | Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs) | 返回一个布尔值表示是否定义成功\npreventExtensions(target) | Object.preventExtensions(proxy) | 返回一个布尔值表示是否定义成功\ngetPrototypeOf(target) | Object.getPrototypeOf(proxy) | 返回一个对象（对象原型）\nisExtensible(target) | Object.isExtensible(proxy) | 返回一个布尔值\nsetPrototypeOf(target, proto) | Object.setPrototypeOf(proxy, proto) | 返回一个布尔值\napply(target, object, args) | 拦截 Proxy 实例作为函数调用的操作，比如proxy(...args)、proxy.call(object, ...args)、proxy.apply(...) | 无限制\nconstruct(target, args) | 拦截 Proxy 实例作为构造函数调用的操作，比如new proxy(...args) | 返回实例对象\n\n## Reflect\n\n### 定义\n\n1. 将Proxy支持的代理方法一一对应到Reflect，方便在Proxy中使用原对象的默认行为。\n```javascript\nlet proxy = new Proxy(target, {\n  set: function(target, name, value, receiver) {\n    var success = Reflect.set(target, name, value, receiver);\n    if (success) {\n      console.log('property ' + name + ' on ' + target + ' set to ' + value);\n    }\n    return success;\n  }\n});\nproxy.a = 1\n```\n\n2. 某些方法和Object原型方法行为高度一致，所以，除了在Proxy中使用，还可以单独使用。\n```javascript\n// 老写法\ntry {\n  Object.defineProperty(target, property, attributes);\n  // success\n} catch (e) {\n  // failure\n}\n\n// 新写法\nif (Reflect.defineProperty(target, property, attributes)) {\n  // success\n} else {\n  // failure\n}\n```\n\n\n## 谁在用\n\n### Vue\n\n#### 设置内置属性只读\n设置内置keyCode为只读：\n```javascript\nconst hasProxy =\n    typeof Proxy !== 'undefined' &&\n    Proxy.toString().match(/native code/)\n\n  if (hasProxy) {\n    const isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact')\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn(`Avoid overwriting built-in modifier in config.keyCodes: .${key}`)\n          return false\n        } else {\n          target[key] = value\n          return true\n        }\n      }\n    })\n  }\n```\n\n```javascript\nVue.config.keyCodes.ctrl = 86\n```\n以上代码会报错：\n![](/images/2019071701.jpeg)\n\n### 测试框架\n\n### 和defineProperty什么关系？\n\n## 什么时候适合用？","slug":"blogs/proxy-reflect","published":1,"updated":"2021-06-14T02:06:24.913Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6k000gecq8fk4ldaj8","content":"<h2 id=\"Proxy\"><a href=\"#Proxy\" class=\"headerlink\" title=\"Proxy\"></a>Proxy</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><blockquote>\n<p>在目标<code>对象</code>上架设一个<code>拦截</code>层， <code>外界</code>对该对象的<code>访问</code>先经过这一个<code>拦截</code>层，这个拦截层可以对外界对访问进行<code>过滤</code>和<code>改写</code>。翻译为<code>代理器</code>。</p>\n</blockquote>\n<p>举个<code>拦截</code>和<code>改写</code>例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">  <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">35</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">proxy.time <span class=\"comment\">// 35</span></span><br><span class=\"line\">proxy.name <span class=\"comment\">// 35</span></span><br></pre></td></tr></table></figure>\n\n<p>上面对代码拦截了一个空对象的属性getter。只要是需要访问到对象的属性，都会触发getter。</p>\n<h3 id=\"Proxy-能拦截哪些访问行为呢？\"><a href=\"#Proxy-能拦截哪些访问行为呢？\" class=\"headerlink\" title=\"Proxy 能拦截哪些访问行为呢？\"></a>Proxy 能拦截哪些<code>访问</code>行为呢？</h3><table>\n<thead>\n<tr>\n<th>拦截行为</th>\n<th>触发条件</th>\n<th>返回值说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>get(target, propKey, receiver)</td>\n<td>读取对象属性，proxy.foo，proxy[‘foo’]</td>\n<td>返回属性值</td>\n</tr>\n<tr>\n<td>set(target, propKey, value, receiver)</td>\n<td>设置对象属性，proxy.foo = v，proxy[‘foo’] = v</td>\n<td>返回一个布尔值，表示是否设置成功</td>\n</tr>\n<tr>\n<td>has(target, propKey)</td>\n<td>propKey in proxy的操作</td>\n<td>返回一个布尔值，表示是否包含此属性</td>\n</tr>\n<tr>\n<td>deleteProperty(target, propKey)</td>\n<td>delete proxy[propKey]</td>\n<td>返回一个布尔值，表示是否删除成功</td>\n</tr>\n<tr>\n<td>ownKeys(target)</td>\n<td>Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for…in循环</td>\n<td>返回目标对象所有自身的属性的属性名</td>\n</tr>\n<tr>\n<td>getOwnPropertyDescriptor(target, propKey)</td>\n<td>Object.getOwnPropertyDescriptor(proxy, propKey)</td>\n<td>返回属性的描述对象</td>\n</tr>\n<tr>\n<td>defineProperty(target, propKey, propDesc)</td>\n<td>Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs)</td>\n<td>返回一个布尔值表示是否定义成功</td>\n</tr>\n<tr>\n<td>preventExtensions(target)</td>\n<td>Object.preventExtensions(proxy)</td>\n<td>返回一个布尔值表示是否定义成功</td>\n</tr>\n<tr>\n<td>getPrototypeOf(target)</td>\n<td>Object.getPrototypeOf(proxy)</td>\n<td>返回一个对象（对象原型）</td>\n</tr>\n<tr>\n<td>isExtensible(target)</td>\n<td>Object.isExtensible(proxy)</td>\n<td>返回一个布尔值</td>\n</tr>\n<tr>\n<td>setPrototypeOf(target, proto)</td>\n<td>Object.setPrototypeOf(proxy, proto)</td>\n<td>返回一个布尔值</td>\n</tr>\n<tr>\n<td>apply(target, object, args)</td>\n<td>拦截 Proxy 实例作为函数调用的操作，比如proxy(…args)、proxy.call(object, …args)、proxy.apply(…)</td>\n<td>无限制</td>\n</tr>\n<tr>\n<td>construct(target, args)</td>\n<td>拦截 Proxy 实例作为构造函数调用的操作，比如new proxy(…args)</td>\n<td>返回实例对象</td>\n</tr>\n</tbody></table>\n<h2 id=\"Reflect\"><a href=\"#Reflect\" class=\"headerlink\" title=\"Reflect\"></a>Reflect</h2><h3 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h3><ol>\n<li><p>将Proxy支持的代理方法一一对应到Reflect，方便在Proxy中使用原对象的默认行为。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, &#123;</span><br><span class=\"line\">  <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, name, value, receiver</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> success = <span class=\"built_in\">Reflect</span>.set(target, name, value, receiver);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (success) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;property &#x27;</span> + name + <span class=\"string\">&#x27; on &#x27;</span> + target + <span class=\"string\">&#x27; set to &#x27;</span> + value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> success;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">proxy.a = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure></li>\n<li><p>某些方法和Object原型方法行为高度一致，所以，除了在Proxy中使用，还可以单独使用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 老写法</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(target, property, attributes);</span><br><span class=\"line\">  <span class=\"comment\">// success</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// failure</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新写法</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">Reflect</span>.defineProperty(target, property, attributes)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// success</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// failure</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"谁在用\"><a href=\"#谁在用\" class=\"headerlink\" title=\"谁在用\"></a>谁在用</h2><h3 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h3><h4 id=\"设置内置属性只读\"><a href=\"#设置内置属性只读\" class=\"headerlink\" title=\"设置内置属性只读\"></a>设置内置属性只读</h4><p>设置内置keyCode为只读：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> hasProxy =</span><br><span class=\"line\">    <span class=\"keyword\">typeof</span> <span class=\"built_in\">Proxy</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp;</span><br><span class=\"line\">    <span class=\"built_in\">Proxy</span>.toString().match(<span class=\"regexp\">/native code/</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (hasProxy) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> isBuiltInModifier = makeMap(<span class=\"string\">&#x27;stop,prevent,self,ctrl,shift,alt,meta,exact&#x27;</span>)</span><br><span class=\"line\">    config.keyCodes = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(config.keyCodes, &#123;</span><br><span class=\"line\">      set (target, key, value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isBuiltInModifier(key)) &#123;</span><br><span class=\"line\">          warn(<span class=\"string\">`Avoid overwriting built-in modifier in config.keyCodes: .<span class=\"subst\">$&#123;key&#125;</span>`</span>)</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          target[key] = value</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.config.keyCodes.ctrl = <span class=\"number\">86</span></span><br></pre></td></tr></table></figure>\n<p>以上代码会报错：<br><img src=\"/images/2019071701.jpeg\"></p>\n<h3 id=\"测试框架\"><a href=\"#测试框架\" class=\"headerlink\" title=\"测试框架\"></a>测试框架</h3><h3 id=\"和defineProperty什么关系？\"><a href=\"#和defineProperty什么关系？\" class=\"headerlink\" title=\"和defineProperty什么关系？\"></a>和defineProperty什么关系？</h3><h2 id=\"什么时候适合用？\"><a href=\"#什么时候适合用？\" class=\"headerlink\" title=\"什么时候适合用？\"></a>什么时候适合用？</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Proxy\"><a href=\"#Proxy\" class=\"headerlink\" title=\"Proxy\"></a>Proxy</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><blockquote>\n<p>在目标<code>对象</code>上架设一个<code>拦截</code>层， <code>外界</code>对该对象的<code>访问</code>先经过这一个<code>拦截</code>层，这个拦截层可以对外界对访问进行<code>过滤</code>和<code>改写</code>。翻译为<code>代理器</code>。</p>\n</blockquote>\n<p>举个<code>拦截</code>和<code>改写</code>例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(&#123;&#125;, &#123;</span><br><span class=\"line\">  <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">35</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">proxy.time <span class=\"comment\">// 35</span></span><br><span class=\"line\">proxy.name <span class=\"comment\">// 35</span></span><br></pre></td></tr></table></figure>\n\n<p>上面对代码拦截了一个空对象的属性getter。只要是需要访问到对象的属性，都会触发getter。</p>\n<h3 id=\"Proxy-能拦截哪些访问行为呢？\"><a href=\"#Proxy-能拦截哪些访问行为呢？\" class=\"headerlink\" title=\"Proxy 能拦截哪些访问行为呢？\"></a>Proxy 能拦截哪些<code>访问</code>行为呢？</h3><table>\n<thead>\n<tr>\n<th>拦截行为</th>\n<th>触发条件</th>\n<th>返回值说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>get(target, propKey, receiver)</td>\n<td>读取对象属性，proxy.foo，proxy[‘foo’]</td>\n<td>返回属性值</td>\n</tr>\n<tr>\n<td>set(target, propKey, value, receiver)</td>\n<td>设置对象属性，proxy.foo = v，proxy[‘foo’] = v</td>\n<td>返回一个布尔值，表示是否设置成功</td>\n</tr>\n<tr>\n<td>has(target, propKey)</td>\n<td>propKey in proxy的操作</td>\n<td>返回一个布尔值，表示是否包含此属性</td>\n</tr>\n<tr>\n<td>deleteProperty(target, propKey)</td>\n<td>delete proxy[propKey]</td>\n<td>返回一个布尔值，表示是否删除成功</td>\n</tr>\n<tr>\n<td>ownKeys(target)</td>\n<td>Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for…in循环</td>\n<td>返回目标对象所有自身的属性的属性名</td>\n</tr>\n<tr>\n<td>getOwnPropertyDescriptor(target, propKey)</td>\n<td>Object.getOwnPropertyDescriptor(proxy, propKey)</td>\n<td>返回属性的描述对象</td>\n</tr>\n<tr>\n<td>defineProperty(target, propKey, propDesc)</td>\n<td>Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs)</td>\n<td>返回一个布尔值表示是否定义成功</td>\n</tr>\n<tr>\n<td>preventExtensions(target)</td>\n<td>Object.preventExtensions(proxy)</td>\n<td>返回一个布尔值表示是否定义成功</td>\n</tr>\n<tr>\n<td>getPrototypeOf(target)</td>\n<td>Object.getPrototypeOf(proxy)</td>\n<td>返回一个对象（对象原型）</td>\n</tr>\n<tr>\n<td>isExtensible(target)</td>\n<td>Object.isExtensible(proxy)</td>\n<td>返回一个布尔值</td>\n</tr>\n<tr>\n<td>setPrototypeOf(target, proto)</td>\n<td>Object.setPrototypeOf(proxy, proto)</td>\n<td>返回一个布尔值</td>\n</tr>\n<tr>\n<td>apply(target, object, args)</td>\n<td>拦截 Proxy 实例作为函数调用的操作，比如proxy(…args)、proxy.call(object, …args)、proxy.apply(…)</td>\n<td>无限制</td>\n</tr>\n<tr>\n<td>construct(target, args)</td>\n<td>拦截 Proxy 实例作为构造函数调用的操作，比如new proxy(…args)</td>\n<td>返回实例对象</td>\n</tr>\n</tbody></table>\n<h2 id=\"Reflect\"><a href=\"#Reflect\" class=\"headerlink\" title=\"Reflect\"></a>Reflect</h2><h3 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h3><ol>\n<li><p>将Proxy支持的代理方法一一对应到Reflect，方便在Proxy中使用原对象的默认行为。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, &#123;</span><br><span class=\"line\">  <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target, name, value, receiver</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> success = <span class=\"built_in\">Reflect</span>.set(target, name, value, receiver);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (success) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;property &#x27;</span> + name + <span class=\"string\">&#x27; on &#x27;</span> + target + <span class=\"string\">&#x27; set to &#x27;</span> + value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> success;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">proxy.a = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure></li>\n<li><p>某些方法和Object原型方法行为高度一致，所以，除了在Proxy中使用，还可以单独使用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 老写法</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(target, property, attributes);</span><br><span class=\"line\">  <span class=\"comment\">// success</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// failure</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新写法</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">Reflect</span>.defineProperty(target, property, attributes)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// success</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// failure</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"谁在用\"><a href=\"#谁在用\" class=\"headerlink\" title=\"谁在用\"></a>谁在用</h2><h3 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h3><h4 id=\"设置内置属性只读\"><a href=\"#设置内置属性只读\" class=\"headerlink\" title=\"设置内置属性只读\"></a>设置内置属性只读</h4><p>设置内置keyCode为只读：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> hasProxy =</span><br><span class=\"line\">    <span class=\"keyword\">typeof</span> <span class=\"built_in\">Proxy</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp;</span><br><span class=\"line\">    <span class=\"built_in\">Proxy</span>.toString().match(<span class=\"regexp\">/native code/</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (hasProxy) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> isBuiltInModifier = makeMap(<span class=\"string\">&#x27;stop,prevent,self,ctrl,shift,alt,meta,exact&#x27;</span>)</span><br><span class=\"line\">    config.keyCodes = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(config.keyCodes, &#123;</span><br><span class=\"line\">      set (target, key, value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isBuiltInModifier(key)) &#123;</span><br><span class=\"line\">          warn(<span class=\"string\">`Avoid overwriting built-in modifier in config.keyCodes: .<span class=\"subst\">$&#123;key&#125;</span>`</span>)</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          target[key] = value</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.config.keyCodes.ctrl = <span class=\"number\">86</span></span><br></pre></td></tr></table></figure>\n<p>以上代码会报错：<br><img src=\"/images/2019071701.jpeg\"></p>\n<h3 id=\"测试框架\"><a href=\"#测试框架\" class=\"headerlink\" title=\"测试框架\"></a>测试框架</h3><h3 id=\"和defineProperty什么关系？\"><a href=\"#和defineProperty什么关系？\" class=\"headerlink\" title=\"和defineProperty什么关系？\"></a>和defineProperty什么关系？</h3><h2 id=\"什么时候适合用？\"><a href=\"#什么时候适合用？\" class=\"headerlink\" title=\"什么时候适合用？\"></a>什么时候适合用？</h2>"},{"title":"正向代理和反向代理的区别","date":"2020-03-16T16:00:00.000Z","_content":" \n## 正向代理\n\n位于客户端和服务器之间的代理服务器，对服务器不可见。\n\n![](/images/2019021401.png)\n\n客户端可以访问该代理服务器，但是客户端不直接访问代理背后的服务器，或者客户端根本没办法访问代理背后的服务器。\n\n客户端需要明确指定代理服务器的地址。以及可能需要身份认证来限制其它客户端随意访问。\n\n正向代理比较常见的使用场景是翻墙，局域网抓包。\n\n## 反向代理\n\n隐藏于服务器背后，对客户端不可见\n\n![](/images/2019021402.png)\n\n客户端访问的服务器本身就是反向代理服务器，只是客户端不知情。反向代理服务器将客户端的请求代发给其背后的服务器，拿到结果并传回给客户端。\n\n反向代理比较常见的场景是本地代码调试线上接口，表面访问本地接口，但是由本地反向代理服务器将接口转发到线上地址以解决接口跨域问题。\n另外一个常用的场景是服务器负载均衡，以及外网灰度发布。\n\n外网灰度发布举个例子，反向代理负责将请求转发给3个服务器，这3个服务器上的代码有一个是旧版本，另外2个是新版本。代理服务器将某些ip段客户端的请求转发给旧版本，其它的转发给新版本。这样就可以达到灰度发布的效果。\n","source":"_posts/blogs/proxy.md","raw":"---\ntitle: 正向代理和反向代理的区别\ncategories: 工具\ntags: [代理]\ndate: 2020-3-17\n--- \n## 正向代理\n\n位于客户端和服务器之间的代理服务器，对服务器不可见。\n\n![](/images/2019021401.png)\n\n客户端可以访问该代理服务器，但是客户端不直接访问代理背后的服务器，或者客户端根本没办法访问代理背后的服务器。\n\n客户端需要明确指定代理服务器的地址。以及可能需要身份认证来限制其它客户端随意访问。\n\n正向代理比较常见的使用场景是翻墙，局域网抓包。\n\n## 反向代理\n\n隐藏于服务器背后，对客户端不可见\n\n![](/images/2019021402.png)\n\n客户端访问的服务器本身就是反向代理服务器，只是客户端不知情。反向代理服务器将客户端的请求代发给其背后的服务器，拿到结果并传回给客户端。\n\n反向代理比较常见的场景是本地代码调试线上接口，表面访问本地接口，但是由本地反向代理服务器将接口转发到线上地址以解决接口跨域问题。\n另外一个常用的场景是服务器负载均衡，以及外网灰度发布。\n\n外网灰度发布举个例子，反向代理负责将请求转发给3个服务器，这3个服务器上的代码有一个是旧版本，另外2个是新版本。代理服务器将某些ip段客户端的请求转发给旧版本，其它的转发给新版本。这样就可以达到灰度发布的效果。\n","slug":"blogs/proxy","published":1,"updated":"2021-06-14T02:06:36.377Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6l000hecq82gieghy2","content":"<h2 id=\"正向代理\"><a href=\"#正向代理\" class=\"headerlink\" title=\"正向代理\"></a>正向代理</h2><p>位于客户端和服务器之间的代理服务器，对服务器不可见。</p>\n<p><img src=\"/images/2019021401.png\"></p>\n<p>客户端可以访问该代理服务器，但是客户端不直接访问代理背后的服务器，或者客户端根本没办法访问代理背后的服务器。</p>\n<p>客户端需要明确指定代理服务器的地址。以及可能需要身份认证来限制其它客户端随意访问。</p>\n<p>正向代理比较常见的使用场景是翻墙，局域网抓包。</p>\n<h2 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h2><p>隐藏于服务器背后，对客户端不可见</p>\n<p><img src=\"/images/2019021402.png\"></p>\n<p>客户端访问的服务器本身就是反向代理服务器，只是客户端不知情。反向代理服务器将客户端的请求代发给其背后的服务器，拿到结果并传回给客户端。</p>\n<p>反向代理比较常见的场景是本地代码调试线上接口，表面访问本地接口，但是由本地反向代理服务器将接口转发到线上地址以解决接口跨域问题。<br>另外一个常用的场景是服务器负载均衡，以及外网灰度发布。</p>\n<p>外网灰度发布举个例子，反向代理负责将请求转发给3个服务器，这3个服务器上的代码有一个是旧版本，另外2个是新版本。代理服务器将某些ip段客户端的请求转发给旧版本，其它的转发给新版本。这样就可以达到灰度发布的效果。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"正向代理\"><a href=\"#正向代理\" class=\"headerlink\" title=\"正向代理\"></a>正向代理</h2><p>位于客户端和服务器之间的代理服务器，对服务器不可见。</p>\n<p><img src=\"/images/2019021401.png\"></p>\n<p>客户端可以访问该代理服务器，但是客户端不直接访问代理背后的服务器，或者客户端根本没办法访问代理背后的服务器。</p>\n<p>客户端需要明确指定代理服务器的地址。以及可能需要身份认证来限制其它客户端随意访问。</p>\n<p>正向代理比较常见的使用场景是翻墙，局域网抓包。</p>\n<h2 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h2><p>隐藏于服务器背后，对客户端不可见</p>\n<p><img src=\"/images/2019021402.png\"></p>\n<p>客户端访问的服务器本身就是反向代理服务器，只是客户端不知情。反向代理服务器将客户端的请求代发给其背后的服务器，拿到结果并传回给客户端。</p>\n<p>反向代理比较常见的场景是本地代码调试线上接口，表面访问本地接口，但是由本地反向代理服务器将接口转发到线上地址以解决接口跨域问题。<br>另外一个常用的场景是服务器负载均衡，以及外网灰度发布。</p>\n<p>外网灰度发布举个例子，反向代理负责将请求转发给3个服务器，这3个服务器上的代码有一个是旧版本，另外2个是新版本。代理服务器将某些ip段客户端的请求转发给旧版本，其它的转发给新版本。这样就可以达到灰度发布的效果。</p>\n"},{"title":"有趣的正则表达式","date":"2019-04-15T16:00:00.000Z","_content":" \n\n## 字符串拼接\n\n假设有这样一种场景：\n\n有三个字符串类型的变量，姓名(name)，性别(sex)，年龄(age)。想把这三个变量值用逗号拼接成1个字符串userInfo。\n\n常规的方法可能就是类似这样：\n```\nlet userInfo = `${name}，${sex}，${age}`\n```\n问题是，这三个变量可能都为空。你肯定不希望userInfo是\"，，10\"或者\"小明，，10\"或者\"，，\"\n\n简单的思考后你可能会这样做：\n```\nlet userInfo = ''\nname ? userInfo += name + '，' :\nsex ? userInfo += sex + '，':\nage ? userInfo += age + '，':\n```\n本着足够懒的想法，仔细考虑了一番之后，我总结出的规律就是：\n1. 开头结尾的连接符删除\n2. 中间有2个或以上的连接符都要删减至1个\n\n所以可以这样写：\n```\nlet userInfo = `${name}，${sex}，${age}`.replace(/(^，)|(，$)/g, '').replace(/，{2,}/, '，')\n```\n\n\n\n","source":"_posts/blogs/regexpression.md","raw":"---\ntitle: 有趣的正则表达式\ncategories: javascript\ntags: [正则]\ndate: 2019-4-16\n--- \n\n## 字符串拼接\n\n假设有这样一种场景：\n\n有三个字符串类型的变量，姓名(name)，性别(sex)，年龄(age)。想把这三个变量值用逗号拼接成1个字符串userInfo。\n\n常规的方法可能就是类似这样：\n```\nlet userInfo = `${name}，${sex}，${age}`\n```\n问题是，这三个变量可能都为空。你肯定不希望userInfo是\"，，10\"或者\"小明，，10\"或者\"，，\"\n\n简单的思考后你可能会这样做：\n```\nlet userInfo = ''\nname ? userInfo += name + '，' :\nsex ? userInfo += sex + '，':\nage ? userInfo += age + '，':\n```\n本着足够懒的想法，仔细考虑了一番之后，我总结出的规律就是：\n1. 开头结尾的连接符删除\n2. 中间有2个或以上的连接符都要删减至1个\n\n所以可以这样写：\n```\nlet userInfo = `${name}，${sex}，${age}`.replace(/(^，)|(，$)/g, '').replace(/，{2,}/, '，')\n```\n\n\n\n","slug":"blogs/regexpression","published":1,"updated":"2021-06-14T02:06:49.802Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6l000iecq88b820d25","content":"<h2 id=\"字符串拼接\"><a href=\"#字符串拼接\" class=\"headerlink\" title=\"字符串拼接\"></a>字符串拼接</h2><p>假设有这样一种场景：</p>\n<p>有三个字符串类型的变量，姓名(name)，性别(sex)，年龄(age)。想把这三个变量值用逗号拼接成1个字符串userInfo。</p>\n<p>常规的方法可能就是类似这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let userInfo = `$&#123;name&#125;，$&#123;sex&#125;，$&#123;age&#125;`</span><br></pre></td></tr></table></figure>\n<p>问题是，这三个变量可能都为空。你肯定不希望userInfo是”，，10”或者”小明，，10”或者”，，”</p>\n<p>简单的思考后你可能会这样做：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let userInfo = &#x27;&#x27;</span><br><span class=\"line\">name ? userInfo += name + &#x27;，&#x27; :</span><br><span class=\"line\">sex ? userInfo += sex + &#x27;，&#x27;:</span><br><span class=\"line\">age ? userInfo += age + &#x27;，&#x27;:</span><br></pre></td></tr></table></figure>\n<p>本着足够懒的想法，仔细考虑了一番之后，我总结出的规律就是：</p>\n<ol>\n<li>开头结尾的连接符删除</li>\n<li>中间有2个或以上的连接符都要删减至1个</li>\n</ol>\n<p>所以可以这样写：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let userInfo = `$&#123;name&#125;，$&#123;sex&#125;，$&#123;age&#125;`.replace(/(^，)|(，$)/g, &#x27;&#x27;).replace(/，&#123;2,&#125;/, &#x27;，&#x27;)</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"字符串拼接\"><a href=\"#字符串拼接\" class=\"headerlink\" title=\"字符串拼接\"></a>字符串拼接</h2><p>假设有这样一种场景：</p>\n<p>有三个字符串类型的变量，姓名(name)，性别(sex)，年龄(age)。想把这三个变量值用逗号拼接成1个字符串userInfo。</p>\n<p>常规的方法可能就是类似这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let userInfo = `$&#123;name&#125;，$&#123;sex&#125;，$&#123;age&#125;`</span><br></pre></td></tr></table></figure>\n<p>问题是，这三个变量可能都为空。你肯定不希望userInfo是”，，10”或者”小明，，10”或者”，，”</p>\n<p>简单的思考后你可能会这样做：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let userInfo = &#x27;&#x27;</span><br><span class=\"line\">name ? userInfo += name + &#x27;，&#x27; :</span><br><span class=\"line\">sex ? userInfo += sex + &#x27;，&#x27;:</span><br><span class=\"line\">age ? userInfo += age + &#x27;，&#x27;:</span><br></pre></td></tr></table></figure>\n<p>本着足够懒的想法，仔细考虑了一番之后，我总结出的规律就是：</p>\n<ol>\n<li>开头结尾的连接符删除</li>\n<li>中间有2个或以上的连接符都要删减至1个</li>\n</ol>\n<p>所以可以这样写：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let userInfo = `$&#123;name&#125;，$&#123;sex&#125;，$&#123;age&#125;`.replace(/(^，)|(，$)/g, &#x27;&#x27;).replace(/，&#123;2,&#125;/, &#x27;，&#x27;)</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"说一说自己设计的运营后台权限","date":"2019-03-01T16:00:00.000Z","_content":" \n\n## 权限设计\n\n我们的运营后后台的用户由多个角色组成。不同角色的使用权限区别在于：\n1. 可见的菜单不同\n2. 同一个菜单页面内可见的操作按钮不同，如是否存在编辑按钮\n3. 页面内的操作按钮可能对应着其它不在菜单内显示的路由，如编辑页面\n\n根据以上分析，我们可以提炼出3个关键词：\n* 菜单\n* 路由\n* 权限\n\n\n3者之间的关系我们再捋一捋。\n1. 从顶级菜单开始，每个菜单是树状结构，每个叶子节点对应一个路由，这个路由是由1个或多个权限决定的（如查看或编辑权限任意一个存在就决定这个路由的存在）。\n2. 除了每个菜单的叶子节点对应一个路由之外，有些路由是隐藏在操作中的，和某些操作权限相关。\n3. 有些权限仅控制页面内操作，和任何路由无关。\n\n根据以上分析，可以构思出这3个关键词的结构：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-12/1623467846986-image.png)\n\n根据上图可知，权限可以有2种行为：\n* 控制路由\n* 控制界面\n\n服务端维护一份菜单，菜单的字段如下：\n\n```\n{\n    menu_code: '', // 唯一标识\n    menu_name: '', // 菜单名称\n    p_menu_code: '', // 父级菜单\n}\n```\n以上结构可以维护一份菜单树。\n\n另外维护一份路由，字段如下：\n\n```\n{\n    route_code: '', // 唯一标识\n    route_path: '', // 客户端路由路径\n    menu_code: '', // 关联的菜单（为空表示不显示在菜单栏，通过某操作可以跳转）\n}\n```\n\n另外最重要的是权限，字段如下：\n```\n{\n    auth_code: '', // 唯一标识\n    auth_name: '', // 权限名称\n    route_codes: [], // 关联的路由列表（若为空，表示该权限只影响界面按钮）\n}\n```\n\n如果想要在配置的时候通过菜单分类显示权限，就需要通过菜单反查对应权限，因此需要反向维护关联关系，即\n* 菜单表要关联路由\n* 路由表关联权限\n\n菜单表：\n```\n{\n    menu_code: '', // 唯一标识\n    menu_name: '', // 菜单名称\n    p_menu_code: '', // 父级菜单,\n    relate_route: [] // 关联的路由\n}\n```\n路由表：\n\n```\n{\n    route_code: '', // 唯一标识\n    route_path: '', // 客户端路由路径\n    menu_code: '', // 关联的菜单\n    relate_auth: [] // 关联的权限列表\n}\n```\n\n## 实现\n\n### 权限配置\n以顶级菜单分类显示可配置的路由：\n\n```\n- 用户管理\n    —— 用户查看\n    —— 用户新增/编辑\n- 商品管理\n    —— 商品查看\n    —— 商品添加/编辑基本信息\n    —— 商品价格日历修改\n    —— 商品上下架\n- 订单管理\n    —— 订单查看\n    —— 订单操作退款\n    —— 财务结算\n```\n\n通过菜单的反向的关联关系，可以分类显示所有可配置的权限。\n将选中的权限列表提交后，每个角色有一份自己的权限表。\n\n### C端实现\n\n##### 1. 登录接口返回该用户所属角色对应的权限表、路由表，树结构的菜单\n    \n* 权限表用于界面内操作控制\n* 路由表用于注册有权限的路由\n* 树结构的菜单用来初始化菜单栏\n\n##### 2. 动态注册路由\n\n路由分为3种，默认路由、重定向路由、受权限控制路由。\n\n```\n// 默认路由\nexport const defaultRootes = [\n  {\n    path: '/login',\n    // component: login\n    components: {\n      login: () => import(/* webpackChunkName: \"base\" */'@/views/login')\n    }\n  },\n  {\n    path: '/loading',\n    // component: loading\n    component: () => import(/* webpackChunkName: \"base\" */'@/components/bodyView/components/loading')\n  }\n]\n\n// 重定向路由\nexport const redirectRoutes = [\n  {\n    path: '/',\n    // 默认重定向路由（登录后根据权限修改）\n    redirect: '/login'\n  },\n  {\n    path: '*',\n    // component: notFound\n    component: () => import(/* webpackChunkName: \"base\" */'@/components/bodyView/components/404')\n  }\n]\n\n// 受权限控制路由\nexport const routes = [\n  {\n    path: '/order/list',\n    // component: orderList\n    component: () => import(/* webpackChunkName: \"order\" */'@/views/order')\n  },\n  ...\n]\n\n```\n\n关于重定向，有2个细节需要注意：\n1. 根路由'/'的重定向路由是不固定的。\n    * 在登录前，'/'的重定向路由是'/login'\n    * 成功登录后，需要取出第一个菜单下的第一个路由作为重定向路由。\n2. 已登录用户的\"/login\"路由需要重定向到首页\n\n\n在App.vue中注册默认路由：\n\n```\ncreated() {\n    this.path = this.$route.path\n    // 注册基本路由\n    this.$router.addRoutes([...defaultRootes, ...redirectRoutes])\n    // 检查登录状态\n    this.checkLogin()\n},\nmethods: {\n    checkLogin() {\n      // 通过获取用户信息判断是否已经登录\n      apiGetUserInfo().then((response) => {\n        /* 已登录 */\n        // 1. 保存用户信息 \n        // 2. 初始化菜单\n        this.menus = response.data.menus\n        \n        // 3. 注册路由\n        const routes = response.data.routes\n        // 将根路由'/'的重定向路由改为接口返回的第一个路由：\n        redirectRoutes[0].redirect = routes[0].path\n        \n        const newRouter = new Router({\n            mode: 'history'\n        })\n        // @ATTENTION: 执行到此处时需要重写matcher以覆盖之前注册的路由，因为addRoutes无法覆盖旧的重复路由，且官方不支持deleteRoutes方法\n        this.$router.matcher = newRouter.matcher\n        this.$router.addRoutes(defaultRootes.concat(filteredRoutes, redirectRoutes))\n          \n        // 4. 登录后路由跳转\n        if (this.path.indexOf('/login') >= 0) {\n            // 登录路由跳转到首页\n            this.$router.replace('/')\n        } else {\n            let path = this.$route.fullPath\n            // 需要有路由变化才能重新加载此前未注册的路由\n            this.$router.replace('/loading')\n            this.$router.replace(path)\n        }\n        // 4. 保存权限列表\n        this.auths = response.data.auths\n      }).catch(() => {\n        // 未登录，跳转到登录页面\n        this.goLogin()\n      })\n    }\n}\n```\n##### 3. 登录过期处理\n接口拦截器监测到token失效等鉴权失败等错误时，提示并跳转到登录页：\n```\nVue.prototype\n      .$confirm('登录失效，请重新登录', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        router.push('/login')\n      }).catch(() => {\n        router.push('/login')\n      })\n```\n\n","source":"_posts/blogs/role-auth-design.md","raw":"---\ntitle: 说一说自己设计的运营后台权限\ncategories: 其它\ntags: [权限, 运营后台]\ndate: 2019-3-2\n--- \n\n## 权限设计\n\n我们的运营后后台的用户由多个角色组成。不同角色的使用权限区别在于：\n1. 可见的菜单不同\n2. 同一个菜单页面内可见的操作按钮不同，如是否存在编辑按钮\n3. 页面内的操作按钮可能对应着其它不在菜单内显示的路由，如编辑页面\n\n根据以上分析，我们可以提炼出3个关键词：\n* 菜单\n* 路由\n* 权限\n\n\n3者之间的关系我们再捋一捋。\n1. 从顶级菜单开始，每个菜单是树状结构，每个叶子节点对应一个路由，这个路由是由1个或多个权限决定的（如查看或编辑权限任意一个存在就决定这个路由的存在）。\n2. 除了每个菜单的叶子节点对应一个路由之外，有些路由是隐藏在操作中的，和某些操作权限相关。\n3. 有些权限仅控制页面内操作，和任何路由无关。\n\n根据以上分析，可以构思出这3个关键词的结构：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-12/1623467846986-image.png)\n\n根据上图可知，权限可以有2种行为：\n* 控制路由\n* 控制界面\n\n服务端维护一份菜单，菜单的字段如下：\n\n```\n{\n    menu_code: '', // 唯一标识\n    menu_name: '', // 菜单名称\n    p_menu_code: '', // 父级菜单\n}\n```\n以上结构可以维护一份菜单树。\n\n另外维护一份路由，字段如下：\n\n```\n{\n    route_code: '', // 唯一标识\n    route_path: '', // 客户端路由路径\n    menu_code: '', // 关联的菜单（为空表示不显示在菜单栏，通过某操作可以跳转）\n}\n```\n\n另外最重要的是权限，字段如下：\n```\n{\n    auth_code: '', // 唯一标识\n    auth_name: '', // 权限名称\n    route_codes: [], // 关联的路由列表（若为空，表示该权限只影响界面按钮）\n}\n```\n\n如果想要在配置的时候通过菜单分类显示权限，就需要通过菜单反查对应权限，因此需要反向维护关联关系，即\n* 菜单表要关联路由\n* 路由表关联权限\n\n菜单表：\n```\n{\n    menu_code: '', // 唯一标识\n    menu_name: '', // 菜单名称\n    p_menu_code: '', // 父级菜单,\n    relate_route: [] // 关联的路由\n}\n```\n路由表：\n\n```\n{\n    route_code: '', // 唯一标识\n    route_path: '', // 客户端路由路径\n    menu_code: '', // 关联的菜单\n    relate_auth: [] // 关联的权限列表\n}\n```\n\n## 实现\n\n### 权限配置\n以顶级菜单分类显示可配置的路由：\n\n```\n- 用户管理\n    —— 用户查看\n    —— 用户新增/编辑\n- 商品管理\n    —— 商品查看\n    —— 商品添加/编辑基本信息\n    —— 商品价格日历修改\n    —— 商品上下架\n- 订单管理\n    —— 订单查看\n    —— 订单操作退款\n    —— 财务结算\n```\n\n通过菜单的反向的关联关系，可以分类显示所有可配置的权限。\n将选中的权限列表提交后，每个角色有一份自己的权限表。\n\n### C端实现\n\n##### 1. 登录接口返回该用户所属角色对应的权限表、路由表，树结构的菜单\n    \n* 权限表用于界面内操作控制\n* 路由表用于注册有权限的路由\n* 树结构的菜单用来初始化菜单栏\n\n##### 2. 动态注册路由\n\n路由分为3种，默认路由、重定向路由、受权限控制路由。\n\n```\n// 默认路由\nexport const defaultRootes = [\n  {\n    path: '/login',\n    // component: login\n    components: {\n      login: () => import(/* webpackChunkName: \"base\" */'@/views/login')\n    }\n  },\n  {\n    path: '/loading',\n    // component: loading\n    component: () => import(/* webpackChunkName: \"base\" */'@/components/bodyView/components/loading')\n  }\n]\n\n// 重定向路由\nexport const redirectRoutes = [\n  {\n    path: '/',\n    // 默认重定向路由（登录后根据权限修改）\n    redirect: '/login'\n  },\n  {\n    path: '*',\n    // component: notFound\n    component: () => import(/* webpackChunkName: \"base\" */'@/components/bodyView/components/404')\n  }\n]\n\n// 受权限控制路由\nexport const routes = [\n  {\n    path: '/order/list',\n    // component: orderList\n    component: () => import(/* webpackChunkName: \"order\" */'@/views/order')\n  },\n  ...\n]\n\n```\n\n关于重定向，有2个细节需要注意：\n1. 根路由'/'的重定向路由是不固定的。\n    * 在登录前，'/'的重定向路由是'/login'\n    * 成功登录后，需要取出第一个菜单下的第一个路由作为重定向路由。\n2. 已登录用户的\"/login\"路由需要重定向到首页\n\n\n在App.vue中注册默认路由：\n\n```\ncreated() {\n    this.path = this.$route.path\n    // 注册基本路由\n    this.$router.addRoutes([...defaultRootes, ...redirectRoutes])\n    // 检查登录状态\n    this.checkLogin()\n},\nmethods: {\n    checkLogin() {\n      // 通过获取用户信息判断是否已经登录\n      apiGetUserInfo().then((response) => {\n        /* 已登录 */\n        // 1. 保存用户信息 \n        // 2. 初始化菜单\n        this.menus = response.data.menus\n        \n        // 3. 注册路由\n        const routes = response.data.routes\n        // 将根路由'/'的重定向路由改为接口返回的第一个路由：\n        redirectRoutes[0].redirect = routes[0].path\n        \n        const newRouter = new Router({\n            mode: 'history'\n        })\n        // @ATTENTION: 执行到此处时需要重写matcher以覆盖之前注册的路由，因为addRoutes无法覆盖旧的重复路由，且官方不支持deleteRoutes方法\n        this.$router.matcher = newRouter.matcher\n        this.$router.addRoutes(defaultRootes.concat(filteredRoutes, redirectRoutes))\n          \n        // 4. 登录后路由跳转\n        if (this.path.indexOf('/login') >= 0) {\n            // 登录路由跳转到首页\n            this.$router.replace('/')\n        } else {\n            let path = this.$route.fullPath\n            // 需要有路由变化才能重新加载此前未注册的路由\n            this.$router.replace('/loading')\n            this.$router.replace(path)\n        }\n        // 4. 保存权限列表\n        this.auths = response.data.auths\n      }).catch(() => {\n        // 未登录，跳转到登录页面\n        this.goLogin()\n      })\n    }\n}\n```\n##### 3. 登录过期处理\n接口拦截器监测到token失效等鉴权失败等错误时，提示并跳转到登录页：\n```\nVue.prototype\n      .$confirm('登录失效，请重新登录', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        router.push('/login')\n      }).catch(() => {\n        router.push('/login')\n      })\n```\n\n","slug":"blogs/role-auth-design","published":1,"updated":"2021-06-14T02:07:27.904Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6m000jecq86vq16nq9","content":"<h2 id=\"权限设计\"><a href=\"#权限设计\" class=\"headerlink\" title=\"权限设计\"></a>权限设计</h2><p>我们的运营后后台的用户由多个角色组成。不同角色的使用权限区别在于：</p>\n<ol>\n<li>可见的菜单不同</li>\n<li>同一个菜单页面内可见的操作按钮不同，如是否存在编辑按钮</li>\n<li>页面内的操作按钮可能对应着其它不在菜单内显示的路由，如编辑页面</li>\n</ol>\n<p>根据以上分析，我们可以提炼出3个关键词：</p>\n<ul>\n<li>菜单</li>\n<li>路由</li>\n<li>权限</li>\n</ul>\n<p>3者之间的关系我们再捋一捋。</p>\n<ol>\n<li>从顶级菜单开始，每个菜单是树状结构，每个叶子节点对应一个路由，这个路由是由1个或多个权限决定的（如查看或编辑权限任意一个存在就决定这个路由的存在）。</li>\n<li>除了每个菜单的叶子节点对应一个路由之外，有些路由是隐藏在操作中的，和某些操作权限相关。</li>\n<li>有些权限仅控制页面内操作，和任何路由无关。</li>\n</ol>\n<p>根据以上分析，可以构思出这3个关键词的结构：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-12/1623467846986-image.png\"></p>\n<p>根据上图可知，权限可以有2种行为：</p>\n<ul>\n<li>控制路由</li>\n<li>控制界面</li>\n</ul>\n<p>服务端维护一份菜单，菜单的字段如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    menu_code: &#x27;&#x27;, // 唯一标识</span><br><span class=\"line\">    menu_name: &#x27;&#x27;, // 菜单名称</span><br><span class=\"line\">    p_menu_code: &#x27;&#x27;, // 父级菜单</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上结构可以维护一份菜单树。</p>\n<p>另外维护一份路由，字段如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    route_code: &#x27;&#x27;, // 唯一标识</span><br><span class=\"line\">    route_path: &#x27;&#x27;, // 客户端路由路径</span><br><span class=\"line\">    menu_code: &#x27;&#x27;, // 关联的菜单（为空表示不显示在菜单栏，通过某操作可以跳转）</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另外最重要的是权限，字段如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    auth_code: &#x27;&#x27;, // 唯一标识</span><br><span class=\"line\">    auth_name: &#x27;&#x27;, // 权限名称</span><br><span class=\"line\">    route_codes: [], // 关联的路由列表（若为空，表示该权限只影响界面按钮）</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果想要在配置的时候通过菜单分类显示权限，就需要通过菜单反查对应权限，因此需要反向维护关联关系，即</p>\n<ul>\n<li>菜单表要关联路由</li>\n<li>路由表关联权限</li>\n</ul>\n<p>菜单表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    menu_code: &#x27;&#x27;, // 唯一标识</span><br><span class=\"line\">    menu_name: &#x27;&#x27;, // 菜单名称</span><br><span class=\"line\">    p_menu_code: &#x27;&#x27;, // 父级菜单,</span><br><span class=\"line\">    relate_route: [] // 关联的路由</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>路由表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    route_code: &#x27;&#x27;, // 唯一标识</span><br><span class=\"line\">    route_path: &#x27;&#x27;, // 客户端路由路径</span><br><span class=\"line\">    menu_code: &#x27;&#x27;, // 关联的菜单</span><br><span class=\"line\">    relate_auth: [] // 关联的权限列表</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><h3 id=\"权限配置\"><a href=\"#权限配置\" class=\"headerlink\" title=\"权限配置\"></a>权限配置</h3><p>以顶级菜单分类显示可配置的路由：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 用户管理</span><br><span class=\"line\">    —— 用户查看</span><br><span class=\"line\">    —— 用户新增/编辑</span><br><span class=\"line\">- 商品管理</span><br><span class=\"line\">    —— 商品查看</span><br><span class=\"line\">    —— 商品添加/编辑基本信息</span><br><span class=\"line\">    —— 商品价格日历修改</span><br><span class=\"line\">    —— 商品上下架</span><br><span class=\"line\">- 订单管理</span><br><span class=\"line\">    —— 订单查看</span><br><span class=\"line\">    —— 订单操作退款</span><br><span class=\"line\">    —— 财务结算</span><br></pre></td></tr></table></figure>\n\n<p>通过菜单的反向的关联关系，可以分类显示所有可配置的权限。<br>将选中的权限列表提交后，每个角色有一份自己的权限表。</p>\n<h3 id=\"C端实现\"><a href=\"#C端实现\" class=\"headerlink\" title=\"C端实现\"></a>C端实现</h3><h5 id=\"1-登录接口返回该用户所属角色对应的权限表、路由表，树结构的菜单\"><a href=\"#1-登录接口返回该用户所属角色对应的权限表、路由表，树结构的菜单\" class=\"headerlink\" title=\"1. 登录接口返回该用户所属角色对应的权限表、路由表，树结构的菜单\"></a>1. 登录接口返回该用户所属角色对应的权限表、路由表，树结构的菜单</h5><ul>\n<li>权限表用于界面内操作控制</li>\n<li>路由表用于注册有权限的路由</li>\n<li>树结构的菜单用来初始化菜单栏</li>\n</ul>\n<h5 id=\"2-动态注册路由\"><a href=\"#2-动态注册路由\" class=\"headerlink\" title=\"2. 动态注册路由\"></a>2. 动态注册路由</h5><p>路由分为3种，默认路由、重定向路由、受权限控制路由。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 默认路由</span><br><span class=\"line\">export const defaultRootes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: &#x27;/login&#x27;,</span><br><span class=\"line\">    // component: login</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">      login: () =&gt; import(/* webpackChunkName: &quot;base&quot; */&#x27;@/views/login&#x27;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: &#x27;/loading&#x27;,</span><br><span class=\"line\">    // component: loading</span><br><span class=\"line\">    component: () =&gt; import(/* webpackChunkName: &quot;base&quot; */&#x27;@/components/bodyView/components/loading&#x27;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">// 重定向路由</span><br><span class=\"line\">export const redirectRoutes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: &#x27;/&#x27;,</span><br><span class=\"line\">    // 默认重定向路由（登录后根据权限修改）</span><br><span class=\"line\">    redirect: &#x27;/login&#x27;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: &#x27;*&#x27;,</span><br><span class=\"line\">    // component: notFound</span><br><span class=\"line\">    component: () =&gt; import(/* webpackChunkName: &quot;base&quot; */&#x27;@/components/bodyView/components/404&#x27;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">// 受权限控制路由</span><br><span class=\"line\">export const routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: &#x27;/order/list&#x27;,</span><br><span class=\"line\">    // component: orderList</span><br><span class=\"line\">    component: () =&gt; import(/* webpackChunkName: &quot;order&quot; */&#x27;@/views/order&#x27;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>关于重定向，有2个细节需要注意：</p>\n<ol>\n<li>根路由’/‘的重定向路由是不固定的。<ul>\n<li>在登录前，’/‘的重定向路由是’/login’</li>\n<li>成功登录后，需要取出第一个菜单下的第一个路由作为重定向路由。</li>\n</ul>\n</li>\n<li>已登录用户的”/login”路由需要重定向到首页</li>\n</ol>\n<p>在App.vue中注册默认路由：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">created() &#123;</span><br><span class=\"line\">    this.path = this.$route.path</span><br><span class=\"line\">    // 注册基本路由</span><br><span class=\"line\">    this.$router.addRoutes([...defaultRootes, ...redirectRoutes])</span><br><span class=\"line\">    // 检查登录状态</span><br><span class=\"line\">    this.checkLogin()</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    checkLogin() &#123;</span><br><span class=\"line\">      // 通过获取用户信息判断是否已经登录</span><br><span class=\"line\">      apiGetUserInfo().then((response) =&gt; &#123;</span><br><span class=\"line\">        /* 已登录 */</span><br><span class=\"line\">        // 1. 保存用户信息 </span><br><span class=\"line\">        // 2. 初始化菜单</span><br><span class=\"line\">        this.menus = response.data.menus</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 3. 注册路由</span><br><span class=\"line\">        const routes = response.data.routes</span><br><span class=\"line\">        // 将根路由&#x27;/&#x27;的重定向路由改为接口返回的第一个路由：</span><br><span class=\"line\">        redirectRoutes[0].redirect = routes[0].path</span><br><span class=\"line\">        </span><br><span class=\"line\">        const newRouter = new Router(&#123;</span><br><span class=\"line\">            mode: &#x27;history&#x27;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        // @ATTENTION: 执行到此处时需要重写matcher以覆盖之前注册的路由，因为addRoutes无法覆盖旧的重复路由，且官方不支持deleteRoutes方法</span><br><span class=\"line\">        this.$router.matcher = newRouter.matcher</span><br><span class=\"line\">        this.$router.addRoutes(defaultRootes.concat(filteredRoutes, redirectRoutes))</span><br><span class=\"line\">          </span><br><span class=\"line\">        // 4. 登录后路由跳转</span><br><span class=\"line\">        if (this.path.indexOf(&#x27;/login&#x27;) &gt;= 0) &#123;</span><br><span class=\"line\">            // 登录路由跳转到首页</span><br><span class=\"line\">            this.$router.replace(&#x27;/&#x27;)</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            let path = this.$route.fullPath</span><br><span class=\"line\">            // 需要有路由变化才能重新加载此前未注册的路由</span><br><span class=\"line\">            this.$router.replace(&#x27;/loading&#x27;)</span><br><span class=\"line\">            this.$router.replace(path)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 4. 保存权限列表</span><br><span class=\"line\">        this.auths = response.data.auths</span><br><span class=\"line\">      &#125;).catch(() =&gt; &#123;</span><br><span class=\"line\">        // 未登录，跳转到登录页面</span><br><span class=\"line\">        this.goLogin()</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-登录过期处理\"><a href=\"#3-登录过期处理\" class=\"headerlink\" title=\"3. 登录过期处理\"></a>3. 登录过期处理</h5><p>接口拦截器监测到token失效等鉴权失败等错误时，提示并跳转到登录页：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.prototype</span><br><span class=\"line\">      .$confirm(&#x27;登录失效，请重新登录&#x27;, &#x27;提示&#x27;, &#123;</span><br><span class=\"line\">        confirmButtonText: &#x27;确定&#x27;,</span><br><span class=\"line\">        cancelButtonText: &#x27;取消&#x27;,</span><br><span class=\"line\">        type: &#x27;warning&#x27;</span><br><span class=\"line\">      &#125;).then(() =&gt; &#123;</span><br><span class=\"line\">        router.push(&#x27;/login&#x27;)</span><br><span class=\"line\">      &#125;).catch(() =&gt; &#123;</span><br><span class=\"line\">        router.push(&#x27;/login&#x27;)</span><br><span class=\"line\">      &#125;)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"权限设计\"><a href=\"#权限设计\" class=\"headerlink\" title=\"权限设计\"></a>权限设计</h2><p>我们的运营后后台的用户由多个角色组成。不同角色的使用权限区别在于：</p>\n<ol>\n<li>可见的菜单不同</li>\n<li>同一个菜单页面内可见的操作按钮不同，如是否存在编辑按钮</li>\n<li>页面内的操作按钮可能对应着其它不在菜单内显示的路由，如编辑页面</li>\n</ol>\n<p>根据以上分析，我们可以提炼出3个关键词：</p>\n<ul>\n<li>菜单</li>\n<li>路由</li>\n<li>权限</li>\n</ul>\n<p>3者之间的关系我们再捋一捋。</p>\n<ol>\n<li>从顶级菜单开始，每个菜单是树状结构，每个叶子节点对应一个路由，这个路由是由1个或多个权限决定的（如查看或编辑权限任意一个存在就决定这个路由的存在）。</li>\n<li>除了每个菜单的叶子节点对应一个路由之外，有些路由是隐藏在操作中的，和某些操作权限相关。</li>\n<li>有些权限仅控制页面内操作，和任何路由无关。</li>\n</ol>\n<p>根据以上分析，可以构思出这3个关键词的结构：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-12/1623467846986-image.png\"></p>\n<p>根据上图可知，权限可以有2种行为：</p>\n<ul>\n<li>控制路由</li>\n<li>控制界面</li>\n</ul>\n<p>服务端维护一份菜单，菜单的字段如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    menu_code: &#x27;&#x27;, // 唯一标识</span><br><span class=\"line\">    menu_name: &#x27;&#x27;, // 菜单名称</span><br><span class=\"line\">    p_menu_code: &#x27;&#x27;, // 父级菜单</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上结构可以维护一份菜单树。</p>\n<p>另外维护一份路由，字段如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    route_code: &#x27;&#x27;, // 唯一标识</span><br><span class=\"line\">    route_path: &#x27;&#x27;, // 客户端路由路径</span><br><span class=\"line\">    menu_code: &#x27;&#x27;, // 关联的菜单（为空表示不显示在菜单栏，通过某操作可以跳转）</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另外最重要的是权限，字段如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    auth_code: &#x27;&#x27;, // 唯一标识</span><br><span class=\"line\">    auth_name: &#x27;&#x27;, // 权限名称</span><br><span class=\"line\">    route_codes: [], // 关联的路由列表（若为空，表示该权限只影响界面按钮）</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果想要在配置的时候通过菜单分类显示权限，就需要通过菜单反查对应权限，因此需要反向维护关联关系，即</p>\n<ul>\n<li>菜单表要关联路由</li>\n<li>路由表关联权限</li>\n</ul>\n<p>菜单表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    menu_code: &#x27;&#x27;, // 唯一标识</span><br><span class=\"line\">    menu_name: &#x27;&#x27;, // 菜单名称</span><br><span class=\"line\">    p_menu_code: &#x27;&#x27;, // 父级菜单,</span><br><span class=\"line\">    relate_route: [] // 关联的路由</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>路由表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    route_code: &#x27;&#x27;, // 唯一标识</span><br><span class=\"line\">    route_path: &#x27;&#x27;, // 客户端路由路径</span><br><span class=\"line\">    menu_code: &#x27;&#x27;, // 关联的菜单</span><br><span class=\"line\">    relate_auth: [] // 关联的权限列表</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><h3 id=\"权限配置\"><a href=\"#权限配置\" class=\"headerlink\" title=\"权限配置\"></a>权限配置</h3><p>以顶级菜单分类显示可配置的路由：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 用户管理</span><br><span class=\"line\">    —— 用户查看</span><br><span class=\"line\">    —— 用户新增/编辑</span><br><span class=\"line\">- 商品管理</span><br><span class=\"line\">    —— 商品查看</span><br><span class=\"line\">    —— 商品添加/编辑基本信息</span><br><span class=\"line\">    —— 商品价格日历修改</span><br><span class=\"line\">    —— 商品上下架</span><br><span class=\"line\">- 订单管理</span><br><span class=\"line\">    —— 订单查看</span><br><span class=\"line\">    —— 订单操作退款</span><br><span class=\"line\">    —— 财务结算</span><br></pre></td></tr></table></figure>\n\n<p>通过菜单的反向的关联关系，可以分类显示所有可配置的权限。<br>将选中的权限列表提交后，每个角色有一份自己的权限表。</p>\n<h3 id=\"C端实现\"><a href=\"#C端实现\" class=\"headerlink\" title=\"C端实现\"></a>C端实现</h3><h5 id=\"1-登录接口返回该用户所属角色对应的权限表、路由表，树结构的菜单\"><a href=\"#1-登录接口返回该用户所属角色对应的权限表、路由表，树结构的菜单\" class=\"headerlink\" title=\"1. 登录接口返回该用户所属角色对应的权限表、路由表，树结构的菜单\"></a>1. 登录接口返回该用户所属角色对应的权限表、路由表，树结构的菜单</h5><ul>\n<li>权限表用于界面内操作控制</li>\n<li>路由表用于注册有权限的路由</li>\n<li>树结构的菜单用来初始化菜单栏</li>\n</ul>\n<h5 id=\"2-动态注册路由\"><a href=\"#2-动态注册路由\" class=\"headerlink\" title=\"2. 动态注册路由\"></a>2. 动态注册路由</h5><p>路由分为3种，默认路由、重定向路由、受权限控制路由。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 默认路由</span><br><span class=\"line\">export const defaultRootes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: &#x27;/login&#x27;,</span><br><span class=\"line\">    // component: login</span><br><span class=\"line\">    components: &#123;</span><br><span class=\"line\">      login: () =&gt; import(/* webpackChunkName: &quot;base&quot; */&#x27;@/views/login&#x27;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: &#x27;/loading&#x27;,</span><br><span class=\"line\">    // component: loading</span><br><span class=\"line\">    component: () =&gt; import(/* webpackChunkName: &quot;base&quot; */&#x27;@/components/bodyView/components/loading&#x27;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">// 重定向路由</span><br><span class=\"line\">export const redirectRoutes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: &#x27;/&#x27;,</span><br><span class=\"line\">    // 默认重定向路由（登录后根据权限修改）</span><br><span class=\"line\">    redirect: &#x27;/login&#x27;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: &#x27;*&#x27;,</span><br><span class=\"line\">    // component: notFound</span><br><span class=\"line\">    component: () =&gt; import(/* webpackChunkName: &quot;base&quot; */&#x27;@/components/bodyView/components/404&#x27;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">// 受权限控制路由</span><br><span class=\"line\">export const routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: &#x27;/order/list&#x27;,</span><br><span class=\"line\">    // component: orderList</span><br><span class=\"line\">    component: () =&gt; import(/* webpackChunkName: &quot;order&quot; */&#x27;@/views/order&#x27;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>关于重定向，有2个细节需要注意：</p>\n<ol>\n<li>根路由’/‘的重定向路由是不固定的。<ul>\n<li>在登录前，’/‘的重定向路由是’/login’</li>\n<li>成功登录后，需要取出第一个菜单下的第一个路由作为重定向路由。</li>\n</ul>\n</li>\n<li>已登录用户的”/login”路由需要重定向到首页</li>\n</ol>\n<p>在App.vue中注册默认路由：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">created() &#123;</span><br><span class=\"line\">    this.path = this.$route.path</span><br><span class=\"line\">    // 注册基本路由</span><br><span class=\"line\">    this.$router.addRoutes([...defaultRootes, ...redirectRoutes])</span><br><span class=\"line\">    // 检查登录状态</span><br><span class=\"line\">    this.checkLogin()</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    checkLogin() &#123;</span><br><span class=\"line\">      // 通过获取用户信息判断是否已经登录</span><br><span class=\"line\">      apiGetUserInfo().then((response) =&gt; &#123;</span><br><span class=\"line\">        /* 已登录 */</span><br><span class=\"line\">        // 1. 保存用户信息 </span><br><span class=\"line\">        // 2. 初始化菜单</span><br><span class=\"line\">        this.menus = response.data.menus</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 3. 注册路由</span><br><span class=\"line\">        const routes = response.data.routes</span><br><span class=\"line\">        // 将根路由&#x27;/&#x27;的重定向路由改为接口返回的第一个路由：</span><br><span class=\"line\">        redirectRoutes[0].redirect = routes[0].path</span><br><span class=\"line\">        </span><br><span class=\"line\">        const newRouter = new Router(&#123;</span><br><span class=\"line\">            mode: &#x27;history&#x27;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        // @ATTENTION: 执行到此处时需要重写matcher以覆盖之前注册的路由，因为addRoutes无法覆盖旧的重复路由，且官方不支持deleteRoutes方法</span><br><span class=\"line\">        this.$router.matcher = newRouter.matcher</span><br><span class=\"line\">        this.$router.addRoutes(defaultRootes.concat(filteredRoutes, redirectRoutes))</span><br><span class=\"line\">          </span><br><span class=\"line\">        // 4. 登录后路由跳转</span><br><span class=\"line\">        if (this.path.indexOf(&#x27;/login&#x27;) &gt;= 0) &#123;</span><br><span class=\"line\">            // 登录路由跳转到首页</span><br><span class=\"line\">            this.$router.replace(&#x27;/&#x27;)</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            let path = this.$route.fullPath</span><br><span class=\"line\">            // 需要有路由变化才能重新加载此前未注册的路由</span><br><span class=\"line\">            this.$router.replace(&#x27;/loading&#x27;)</span><br><span class=\"line\">            this.$router.replace(path)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 4. 保存权限列表</span><br><span class=\"line\">        this.auths = response.data.auths</span><br><span class=\"line\">      &#125;).catch(() =&gt; &#123;</span><br><span class=\"line\">        // 未登录，跳转到登录页面</span><br><span class=\"line\">        this.goLogin()</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-登录过期处理\"><a href=\"#3-登录过期处理\" class=\"headerlink\" title=\"3. 登录过期处理\"></a>3. 登录过期处理</h5><p>接口拦截器监测到token失效等鉴权失败等错误时，提示并跳转到登录页：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.prototype</span><br><span class=\"line\">      .$confirm(&#x27;登录失效，请重新登录&#x27;, &#x27;提示&#x27;, &#123;</span><br><span class=\"line\">        confirmButtonText: &#x27;确定&#x27;,</span><br><span class=\"line\">        cancelButtonText: &#x27;取消&#x27;,</span><br><span class=\"line\">        type: &#x27;warning&#x27;</span><br><span class=\"line\">      &#125;).then(() =&gt; &#123;</span><br><span class=\"line\">        router.push(&#x27;/login&#x27;)</span><br><span class=\"line\">      &#125;).catch(() =&gt; &#123;</span><br><span class=\"line\">        router.push(&#x27;/login&#x27;)</span><br><span class=\"line\">      &#125;)</span><br></pre></td></tr></table></figure>\n\n"},{"title":"base64字符串保存","date":"2020-05-07T16:00:00.000Z","_content":" \n\n```html\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>Document</title>\n</head>\n<body>\n\n</body>\n<script>\n//方法1\nfunction saveAsLink(base64Str) {\n  var a = document.createElement('a');   // 转换完成，创建一个a标签用于下载\n  a.download = fileName;\n  a.href = 'data:application/msword;base64,' + base64Str;\n  a.style.display = 'none';\n  document.body.appendChild(a)    // 修复firefox中无法触发click\n  a.click();\n  document.body.removeChild(a)\n}\nsaveAsLink(fileBse64Str)\n//方法2(firefox浏览器不兼容)\nvar blob = new Blob([_base64ToArrayBuffer(fileBse64Str)], {type: 'application/msword'}), fileName = '文件名称.doc'\nfunction _base64ToArrayBuffer(base64) {\n    var binary_string =  window.atob(base64);\n    var len = binary_string.length;\n    var bytes = new Uint8Array( len );\n    for (var i = 0; i < len; i++)        {\n        bytes[i] = binary_string.charCodeAt(i);\n    }\n    return bytes.buffer;\n}\nfunction downFile(blob, fileName) {\n  if (window.navigator.msSaveOrOpenBlob) {\n      navigator.msSaveBlob(blob, fileName);\n  } else {\n      var link = document.createElement('a');\n      debugger\n      link.href = window.URL.createObjectURL(blob);\n      link.download = fileName;\n      link.click();\n      window.URL.revokeObjectURL(link.href);\n  }\n}\ndownFile(blob, fileName)\n</script>\n</html>\n```\n","source":"_posts/blogs/save-base64.md","raw":"---\ntitle: base64字符串保存\ncategories: javascript\ntags: [base64]\ndate: 2020-5-8\n--- \n\n```html\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>Document</title>\n</head>\n<body>\n\n</body>\n<script>\n//方法1\nfunction saveAsLink(base64Str) {\n  var a = document.createElement('a');   // 转换完成，创建一个a标签用于下载\n  a.download = fileName;\n  a.href = 'data:application/msword;base64,' + base64Str;\n  a.style.display = 'none';\n  document.body.appendChild(a)    // 修复firefox中无法触发click\n  a.click();\n  document.body.removeChild(a)\n}\nsaveAsLink(fileBse64Str)\n//方法2(firefox浏览器不兼容)\nvar blob = new Blob([_base64ToArrayBuffer(fileBse64Str)], {type: 'application/msword'}), fileName = '文件名称.doc'\nfunction _base64ToArrayBuffer(base64) {\n    var binary_string =  window.atob(base64);\n    var len = binary_string.length;\n    var bytes = new Uint8Array( len );\n    for (var i = 0; i < len; i++)        {\n        bytes[i] = binary_string.charCodeAt(i);\n    }\n    return bytes.buffer;\n}\nfunction downFile(blob, fileName) {\n  if (window.navigator.msSaveOrOpenBlob) {\n      navigator.msSaveBlob(blob, fileName);\n  } else {\n      var link = document.createElement('a');\n      debugger\n      link.href = window.URL.createObjectURL(blob);\n      link.download = fileName;\n      link.click();\n      window.URL.revokeObjectURL(link.href);\n  }\n}\ndownFile(blob, fileName)\n</script>\n</html>\n```\n","slug":"blogs/save-base64","published":1,"updated":"2021-06-14T02:07:42.802Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6n000kecq8bcp5gtzo","content":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//方法1</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">saveAsLink</span>(<span class=\"params\">base64Str</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> a = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;a&#x27;</span>);   <span class=\"comment\">// 转换完成，创建一个a标签用于下载</span></span></span><br><span class=\"line\"><span class=\"javascript\">  a.download = fileName;</span></span><br><span class=\"line\"><span class=\"javascript\">  a.href = <span class=\"string\">&#x27;data:application/msword;base64,&#x27;</span> + base64Str;</span></span><br><span class=\"line\"><span class=\"javascript\">  a.style.display = <span class=\"string\">&#x27;none&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">document</span>.body.appendChild(a)    <span class=\"comment\">// 修复firefox中无法触发click</span></span></span><br><span class=\"line\"><span class=\"javascript\">  a.click();</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">document</span>.body.removeChild(a)</span></span><br><span class=\"line\"><span class=\"javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">saveAsLink(fileBse64Str)</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//方法2(firefox浏览器不兼容)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> blob = <span class=\"keyword\">new</span> Blob([_base64ToArrayBuffer(fileBse64Str)], &#123;<span class=\"attr\">type</span>: <span class=\"string\">&#x27;application/msword&#x27;</span>&#125;), fileName = <span class=\"string\">&#x27;文件名称.doc&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_base64ToArrayBuffer</span>(<span class=\"params\">base64</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> binary_string =  <span class=\"built_in\">window</span>.atob(base64);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> len = binary_string.length;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> bytes = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>( len );</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len; i++)        &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        bytes[i] = binary_string.charCodeAt(i);</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> bytes.buffer;</span></span><br><span class=\"line\"><span class=\"javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">downFile</span>(<span class=\"params\">blob, fileName</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.navigator.msSaveOrOpenBlob) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      navigator.msSaveBlob(blob, fileName);</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">var</span> link = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;a&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">debugger</span></span></span><br><span class=\"line\"><span class=\"javascript\">      link.href = <span class=\"built_in\">window</span>.URL.createObjectURL(blob);</span></span><br><span class=\"line\"><span class=\"javascript\">      link.download = fileName;</span></span><br><span class=\"line\"><span class=\"javascript\">      link.click();</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">window</span>.URL.revokeObjectURL(link.href);</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">downFile(blob, fileName)</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//方法1</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">saveAsLink</span>(<span class=\"params\">base64Str</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> a = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;a&#x27;</span>);   <span class=\"comment\">// 转换完成，创建一个a标签用于下载</span></span></span><br><span class=\"line\"><span class=\"javascript\">  a.download = fileName;</span></span><br><span class=\"line\"><span class=\"javascript\">  a.href = <span class=\"string\">&#x27;data:application/msword;base64,&#x27;</span> + base64Str;</span></span><br><span class=\"line\"><span class=\"javascript\">  a.style.display = <span class=\"string\">&#x27;none&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">document</span>.body.appendChild(a)    <span class=\"comment\">// 修复firefox中无法触发click</span></span></span><br><span class=\"line\"><span class=\"javascript\">  a.click();</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">document</span>.body.removeChild(a)</span></span><br><span class=\"line\"><span class=\"javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">saveAsLink(fileBse64Str)</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//方法2(firefox浏览器不兼容)</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> blob = <span class=\"keyword\">new</span> Blob([_base64ToArrayBuffer(fileBse64Str)], &#123;<span class=\"attr\">type</span>: <span class=\"string\">&#x27;application/msword&#x27;</span>&#125;), fileName = <span class=\"string\">&#x27;文件名称.doc&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_base64ToArrayBuffer</span>(<span class=\"params\">base64</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> binary_string =  <span class=\"built_in\">window</span>.atob(base64);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> len = binary_string.length;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> bytes = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>( len );</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len; i++)        &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        bytes[i] = binary_string.charCodeAt(i);</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> bytes.buffer;</span></span><br><span class=\"line\"><span class=\"javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">downFile</span>(<span class=\"params\">blob, fileName</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.navigator.msSaveOrOpenBlob) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      navigator.msSaveBlob(blob, fileName);</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">var</span> link = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;a&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">debugger</span></span></span><br><span class=\"line\"><span class=\"javascript\">      link.href = <span class=\"built_in\">window</span>.URL.createObjectURL(blob);</span></span><br><span class=\"line\"><span class=\"javascript\">      link.download = fileName;</span></span><br><span class=\"line\"><span class=\"javascript\">      link.click();</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">window</span>.URL.revokeObjectURL(link.href);</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">downFile(blob, fileName)</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"防抖和节流","date":"2021-05-30T16:00:00.000Z","_content":" \n## 防抖\n\n短时间内连续触发的事件，不执行回调，给定一个冷却时间，这段时间内没有触发则时间结束后执行回调。即，持续触发不执行，不触发一段时间之后再执行。\n\n常见场景：\n* 输入框持续输入，输入内容远程查询\n* 多次触发点击事件\n* 滚动后获取滚动距离\n\n```\nconst debounce = function (func, delay) {\n    let timer = null\n\n    return function() {\n        clearTimeout(timer)\n        timer = setTimeout(() => {\n            func(...arguments)\n        }, delay || 300)\n    }\n}\n```\n\n## 节流\n\n函数一段时间内只执行一次。即，持续触发并不会执行多次，到一定时间再去执行。通过闭包保存开关状态。\n常见场景：\n* 自定义滚动条\n* 页面resize\n\n```\nconst throttle = function (func, delay) {\n  let run = true\n  return function () {\n    if (!run) { // 如果开关关闭了，那就直接不执行下边的代码\n      return\n    }\n    // 持续触发的话，run一直是false，就会停在上边的判断那里\n    run = false \n    func(...arguments)\n\n    // 定时器到时间之后，会把开关打开，我们的函数就会被执行\n    setTimeout(() => { \n      run = true\n    }, delay)\n  }\n}\n```\n\n以上方法使用的时候需要注意，由于返回的是函数，所以throttle或debounce只能调用一次。以Vue为例：\n```javascript\nonPageScroll(e) {\n\tif (!this.$options.throttleFunc) {\n\t\tthis.$options.throttleFunc = throttle((scrollTop) => {\n\t\t\tif(scrollTop > 30) {\n\t\t\t\tthis.scrollStatus = true\n\t\t\t} else {\n\t\t\t\tthis.scrollStatus = false\n\t\t\t}\n\t\t}, 100)\n\t}\n\n\tthis.$options.throttleFunc(e.scrollTop)\n}\n```\n\n参考资料:\n[知乎：函数的防抖和节流是个啥？？？](https://zhuanlan.zhihu.com/p/72923073)","source":"_posts/blogs/throttle-debounce.md","raw":"---\ntitle: 防抖和节流\ncategories: javascript\ntags: [防抖节流]\ndate: 2021-05-31\n--- \n## 防抖\n\n短时间内连续触发的事件，不执行回调，给定一个冷却时间，这段时间内没有触发则时间结束后执行回调。即，持续触发不执行，不触发一段时间之后再执行。\n\n常见场景：\n* 输入框持续输入，输入内容远程查询\n* 多次触发点击事件\n* 滚动后获取滚动距离\n\n```\nconst debounce = function (func, delay) {\n    let timer = null\n\n    return function() {\n        clearTimeout(timer)\n        timer = setTimeout(() => {\n            func(...arguments)\n        }, delay || 300)\n    }\n}\n```\n\n## 节流\n\n函数一段时间内只执行一次。即，持续触发并不会执行多次，到一定时间再去执行。通过闭包保存开关状态。\n常见场景：\n* 自定义滚动条\n* 页面resize\n\n```\nconst throttle = function (func, delay) {\n  let run = true\n  return function () {\n    if (!run) { // 如果开关关闭了，那就直接不执行下边的代码\n      return\n    }\n    // 持续触发的话，run一直是false，就会停在上边的判断那里\n    run = false \n    func(...arguments)\n\n    // 定时器到时间之后，会把开关打开，我们的函数就会被执行\n    setTimeout(() => { \n      run = true\n    }, delay)\n  }\n}\n```\n\n以上方法使用的时候需要注意，由于返回的是函数，所以throttle或debounce只能调用一次。以Vue为例：\n```javascript\nonPageScroll(e) {\n\tif (!this.$options.throttleFunc) {\n\t\tthis.$options.throttleFunc = throttle((scrollTop) => {\n\t\t\tif(scrollTop > 30) {\n\t\t\t\tthis.scrollStatus = true\n\t\t\t} else {\n\t\t\t\tthis.scrollStatus = false\n\t\t\t}\n\t\t}, 100)\n\t}\n\n\tthis.$options.throttleFunc(e.scrollTop)\n}\n```\n\n参考资料:\n[知乎：函数的防抖和节流是个啥？？？](https://zhuanlan.zhihu.com/p/72923073)","slug":"blogs/throttle-debounce","published":1,"updated":"2021-06-14T02:08:04.814Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6n000lecq8abctb1me","content":"<h2 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h2><p>短时间内连续触发的事件，不执行回调，给定一个冷却时间，这段时间内没有触发则时间结束后执行回调。即，持续触发不执行，不触发一段时间之后再执行。</p>\n<p>常见场景：</p>\n<ul>\n<li>输入框持续输入，输入内容远程查询</li>\n<li>多次触发点击事件</li>\n<li>滚动后获取滚动距离</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const debounce = function (func, delay) &#123;</span><br><span class=\"line\">    let timer = null</span><br><span class=\"line\"></span><br><span class=\"line\">    return function() &#123;</span><br><span class=\"line\">        clearTimeout(timer)</span><br><span class=\"line\">        timer = setTimeout(() =&gt; &#123;</span><br><span class=\"line\">            func(...arguments)</span><br><span class=\"line\">        &#125;, delay || 300)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h2><p>函数一段时间内只执行一次。即，持续触发并不会执行多次，到一定时间再去执行。通过闭包保存开关状态。<br>常见场景：</p>\n<ul>\n<li>自定义滚动条</li>\n<li>页面resize</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const throttle = function (func, delay) &#123;</span><br><span class=\"line\">  let run = true</span><br><span class=\"line\">  return function () &#123;</span><br><span class=\"line\">    if (!run) &#123; // 如果开关关闭了，那就直接不执行下边的代码</span><br><span class=\"line\">      return</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 持续触发的话，run一直是false，就会停在上边的判断那里</span><br><span class=\"line\">    run = false </span><br><span class=\"line\">    func(...arguments)</span><br><span class=\"line\"></span><br><span class=\"line\">    // 定时器到时间之后，会把开关打开，我们的函数就会被执行</span><br><span class=\"line\">    setTimeout(() =&gt; &#123; </span><br><span class=\"line\">      run = true</span><br><span class=\"line\">    &#125;, delay)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上方法使用的时候需要注意，由于返回的是函数，所以throttle或debounce只能调用一次。以Vue为例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">onPageScroll</span>(<span class=\"params\">e</span>)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!<span class=\"built_in\">this</span>.$options.throttleFunc) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.$options.throttleFunc = throttle(<span class=\"function\">(<span class=\"params\">scrollTop</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(scrollTop &gt; <span class=\"number\">30</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">this</span>.scrollStatus = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">this</span>.scrollStatus = <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;, <span class=\"number\">100</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.$options.throttleFunc(e.scrollTop)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>参考资料:<br><a href=\"https://zhuanlan.zhihu.com/p/72923073\">知乎：函数的防抖和节流是个啥？？？</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h2><p>短时间内连续触发的事件，不执行回调，给定一个冷却时间，这段时间内没有触发则时间结束后执行回调。即，持续触发不执行，不触发一段时间之后再执行。</p>\n<p>常见场景：</p>\n<ul>\n<li>输入框持续输入，输入内容远程查询</li>\n<li>多次触发点击事件</li>\n<li>滚动后获取滚动距离</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const debounce = function (func, delay) &#123;</span><br><span class=\"line\">    let timer = null</span><br><span class=\"line\"></span><br><span class=\"line\">    return function() &#123;</span><br><span class=\"line\">        clearTimeout(timer)</span><br><span class=\"line\">        timer = setTimeout(() =&gt; &#123;</span><br><span class=\"line\">            func(...arguments)</span><br><span class=\"line\">        &#125;, delay || 300)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h2><p>函数一段时间内只执行一次。即，持续触发并不会执行多次，到一定时间再去执行。通过闭包保存开关状态。<br>常见场景：</p>\n<ul>\n<li>自定义滚动条</li>\n<li>页面resize</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const throttle = function (func, delay) &#123;</span><br><span class=\"line\">  let run = true</span><br><span class=\"line\">  return function () &#123;</span><br><span class=\"line\">    if (!run) &#123; // 如果开关关闭了，那就直接不执行下边的代码</span><br><span class=\"line\">      return</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 持续触发的话，run一直是false，就会停在上边的判断那里</span><br><span class=\"line\">    run = false </span><br><span class=\"line\">    func(...arguments)</span><br><span class=\"line\"></span><br><span class=\"line\">    // 定时器到时间之后，会把开关打开，我们的函数就会被执行</span><br><span class=\"line\">    setTimeout(() =&gt; &#123; </span><br><span class=\"line\">      run = true</span><br><span class=\"line\">    &#125;, delay)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上方法使用的时候需要注意，由于返回的是函数，所以throttle或debounce只能调用一次。以Vue为例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">onPageScroll</span>(<span class=\"params\">e</span>)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!<span class=\"built_in\">this</span>.$options.throttleFunc) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.$options.throttleFunc = throttle(<span class=\"function\">(<span class=\"params\">scrollTop</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(scrollTop &gt; <span class=\"number\">30</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">this</span>.scrollStatus = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">this</span>.scrollStatus = <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;, <span class=\"number\">100</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.$options.throttleFunc(e.scrollTop)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>参考资料:<br><a href=\"https://zhuanlan.zhihu.com/p/72923073\">知乎：函数的防抖和节流是个啥？？？</a></p>\n"},{"title":"纯css实现优惠券样式","date":"2020-05-02T16:00:00.000Z","_content":" \n\n核心知识点：\n* radial-gradient实现优惠券卡片左右2边的缺角\n* background可以叠加多个效果\n\n```html\n<div class=\"ticket\">\n  · 海外留学项目最高立减<span>5000</span>元现金 <br>\n  · 语言培训项目最高立减<span>2000</span>元现金 <br>\n  · 国际部项目最高三年<span>全额奖学金</span>现场发放\n</div>\n```\n\n```css\n.ticket{\n  width: 3.45rem;//内容层的宽度\n  height: 1.14rem;//内容层的高度\n  margin: 0 auto;\n  box-sizing: border-box;\n  padding: 0.25rem 0.3rem;font-size: 0.15rem; \n  line-height: 1.5;\n  color: #fff;\n  background: radial-gradient(circle at 0 0.57rem, transparent 0.15rem, #ffbcbe 0.06rem) top left, linear-gradient(0.25turn, #ffbcbe, #000), radial-gradient(circle at 0.17rem 0.57rem, transparent 0.15rem, #000 0.16rem) bottom right;  background-size: 0.17rem 1.14rem, 2.95rem 1.14rem, 0.17rem 1.14rem;\n  background-size: 0.17rem 1.14rem, 2.95rem 1.14rem, 0.17rem 1.14rem;\n  background-repeat: no-repeat;\n  background-position: 0.1rem 0px,0.26rem 0px,3.2rem 0px;\n}\n.ticket span{\n  color: #eb6877;\n  text-decoration: underline;\n}\n```","source":"_posts/css/css-coupon.md","raw":"---\ntitle: 纯css实现优惠券样式\ncategories: css\ntags: [css]\ndate: 2020-5-3\n--- \n\n核心知识点：\n* radial-gradient实现优惠券卡片左右2边的缺角\n* background可以叠加多个效果\n\n```html\n<div class=\"ticket\">\n  · 海外留学项目最高立减<span>5000</span>元现金 <br>\n  · 语言培训项目最高立减<span>2000</span>元现金 <br>\n  · 国际部项目最高三年<span>全额奖学金</span>现场发放\n</div>\n```\n\n```css\n.ticket{\n  width: 3.45rem;//内容层的宽度\n  height: 1.14rem;//内容层的高度\n  margin: 0 auto;\n  box-sizing: border-box;\n  padding: 0.25rem 0.3rem;font-size: 0.15rem; \n  line-height: 1.5;\n  color: #fff;\n  background: radial-gradient(circle at 0 0.57rem, transparent 0.15rem, #ffbcbe 0.06rem) top left, linear-gradient(0.25turn, #ffbcbe, #000), radial-gradient(circle at 0.17rem 0.57rem, transparent 0.15rem, #000 0.16rem) bottom right;  background-size: 0.17rem 1.14rem, 2.95rem 1.14rem, 0.17rem 1.14rem;\n  background-size: 0.17rem 1.14rem, 2.95rem 1.14rem, 0.17rem 1.14rem;\n  background-repeat: no-repeat;\n  background-position: 0.1rem 0px,0.26rem 0px,3.2rem 0px;\n}\n.ticket span{\n  color: #eb6877;\n  text-decoration: underline;\n}\n```","slug":"css/css-coupon","published":1,"updated":"2021-06-14T02:08:14.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6n000mecq838wghjle","content":"<p>核心知识点：</p>\n<ul>\n<li>radial-gradient实现优惠券卡片左右2边的缺角</li>\n<li>background可以叠加多个效果</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ticket&quot;</span>&gt;</span></span><br><span class=\"line\">  · 海外留学项目最高立减<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>5000<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>元现金 <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  · 语言培训项目最高立减<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>2000<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>元现金 <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  · 国际部项目最高三年<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>全额奖学金<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>现场发放</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.ticket</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">3.45rem</span>;//内容层的宽度</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">1.14rem</span>;//内容层的高度</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0.25rem</span> <span class=\"number\">0.3rem</span>;<span class=\"attribute\">font-size</span>: <span class=\"number\">0.15rem</span>; </span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">1.5</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">radial-gradient</span>(circle at <span class=\"number\">0</span> <span class=\"number\">0.57rem</span>, transparent <span class=\"number\">0.15rem</span>, <span class=\"number\">#ffbcbe</span> <span class=\"number\">0.06rem</span>) top left, <span class=\"built_in\">linear-gradient</span>(<span class=\"number\">0.25turn</span>, <span class=\"number\">#ffbcbe</span>, <span class=\"number\">#000</span>), <span class=\"built_in\">radial-gradient</span>(circle at <span class=\"number\">0.17rem</span> <span class=\"number\">0.57rem</span>, transparent <span class=\"number\">0.15rem</span>, <span class=\"number\">#000</span> <span class=\"number\">0.16rem</span>) bottom right;  <span class=\"attribute\">background-size</span>: <span class=\"number\">0.17rem</span> <span class=\"number\">1.14rem</span>, <span class=\"number\">2.95rem</span> <span class=\"number\">1.14rem</span>, <span class=\"number\">0.17rem</span> <span class=\"number\">1.14rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-size</span>: <span class=\"number\">0.17rem</span> <span class=\"number\">1.14rem</span>, <span class=\"number\">2.95rem</span> <span class=\"number\">1.14rem</span>, <span class=\"number\">0.17rem</span> <span class=\"number\">1.14rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-repeat</span>: no-repeat;</span><br><span class=\"line\">  <span class=\"attribute\">background-position</span>: <span class=\"number\">0.1rem</span> <span class=\"number\">0px</span>,<span class=\"number\">0.26rem</span> <span class=\"number\">0px</span>,<span class=\"number\">3.2rem</span> <span class=\"number\">0px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.ticket</span> <span class=\"selector-tag\">span</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#eb6877</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: underline;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>核心知识点：</p>\n<ul>\n<li>radial-gradient实现优惠券卡片左右2边的缺角</li>\n<li>background可以叠加多个效果</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ticket&quot;</span>&gt;</span></span><br><span class=\"line\">  · 海外留学项目最高立减<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>5000<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>元现金 <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  · 语言培训项目最高立减<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>2000<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>元现金 <span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">  · 国际部项目最高三年<span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>全额奖学金<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>现场发放</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.ticket</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">3.45rem</span>;//内容层的宽度</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">1.14rem</span>;//内容层的高度</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0.25rem</span> <span class=\"number\">0.3rem</span>;<span class=\"attribute\">font-size</span>: <span class=\"number\">0.15rem</span>; </span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">1.5</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">radial-gradient</span>(circle at <span class=\"number\">0</span> <span class=\"number\">0.57rem</span>, transparent <span class=\"number\">0.15rem</span>, <span class=\"number\">#ffbcbe</span> <span class=\"number\">0.06rem</span>) top left, <span class=\"built_in\">linear-gradient</span>(<span class=\"number\">0.25turn</span>, <span class=\"number\">#ffbcbe</span>, <span class=\"number\">#000</span>), <span class=\"built_in\">radial-gradient</span>(circle at <span class=\"number\">0.17rem</span> <span class=\"number\">0.57rem</span>, transparent <span class=\"number\">0.15rem</span>, <span class=\"number\">#000</span> <span class=\"number\">0.16rem</span>) bottom right;  <span class=\"attribute\">background-size</span>: <span class=\"number\">0.17rem</span> <span class=\"number\">1.14rem</span>, <span class=\"number\">2.95rem</span> <span class=\"number\">1.14rem</span>, <span class=\"number\">0.17rem</span> <span class=\"number\">1.14rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-size</span>: <span class=\"number\">0.17rem</span> <span class=\"number\">1.14rem</span>, <span class=\"number\">2.95rem</span> <span class=\"number\">1.14rem</span>, <span class=\"number\">0.17rem</span> <span class=\"number\">1.14rem</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-repeat</span>: no-repeat;</span><br><span class=\"line\">  <span class=\"attribute\">background-position</span>: <span class=\"number\">0.1rem</span> <span class=\"number\">0px</span>,<span class=\"number\">0.26rem</span> <span class=\"number\">0px</span>,<span class=\"number\">3.2rem</span> <span class=\"number\">0px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.ticket</span> <span class=\"selector-tag\">span</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#eb6877</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: underline;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"凹槽样式小结","date":"2021-06-01T16:00:00.000Z","_content":"  \n## border-radius\n\n由于border-radius的最大半径是50%，无法直接实现大弧度。独立一个元素，使其尺寸是容器的1倍以上，再通过平易即可实现视觉上的凹槽效果。\n\n```\n<!--html-->\n<div class=\"container\">\n  <div class=\"curved-bg\"></div>\n</div>\n// css\n.container {\n  width: 300px;\n  height: 300px;\n  overflow: hidden;\n}\n.curved-bg {\n  width: 300%;\n  height: 300%;\n  margin-top: -250%;\n  margin-left: -100%;\n  border-radius: 50%;\n  background-color: rgba(0, 0, 0, 0.3);\n}\n```\n\n以上方法只是对一个简单的背景做圆角处理。试想以下这样的场景：圆弧部分只是一个修饰，图片部分的轮播图可响应点击交互，如下图banner底部的大圆弧。\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-2/1622647130156-image.png)\n\n针对这样的场景，border-radius方法依旧可以用，只不过需要用到`pointer-event:none`实现点击穿透。该属性绝大部分浏览器目前都支持。\n\n## 切图\n\n最简单的办法，就是将有弧度的部分切成一张png图盖在banner下方，由于这一个区域的高度较浅，不影响点击交互。\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-2/1622648935597-image.png)\n\n## curved border-radius\n\n可以通过椭圆圆角实现：\n\n```\n<!--html-->\n<div class=\"container\">\n  <div class=\"curved-bg2\"></div>\n</div>\n// css\n.container {\n  width: 300px;\n  height: 300px;\n  overflow: hidden;\n}\n.curved-bg2 {\n    height: 100%;\n    margin-top: -50%;\n    background-color: rgba(0, 0, 0, 0.3);\n    /* Curved corners */\n    border-bottom-left-radius: 50% 10%;\n    border-bottom-right-radius: 50% 10%;\n}\n```\n\n利用了border-radius的裁剪形状。具体参考[border-top-left-radius](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-top-left-radius)\n\n以上2种方法渲染结果对比：\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-2/1622648619027-image.png)\n\n前者的效果两端较为平缓，而curved border-radius的两端比较陡峭，接近于垂直。视觉上curved border-radius效果一般。\n\n\n## radio-gradient\n用一个mask元素盖在banner上层，使用径向渐变，结合pointer-event:none实现点击穿透。\n```\n.mask {\n  position: absolute;\n  width: 500px;\n  height: 500px;\n  left: 0;\n  top: 0;\n  background: #fff;\n  background: radial-gradient(ellipse closest-side at center, transparent 919rpx, #fff 920rpx);\n  background-size: 100px 500px;\n  background-position: -891rpx -456rpx;\n\n  background-repeat: no-repeat;\n  pointer-events: none;\n}\n\n```\n* ellipse表示形状为椭圆。\n\n* 椭圆怎么定义边界呢？\n    * farthest-corner、closest-side 、closest-corner 、farthest-side。\n        * closest-side表示background-size指定的背景画布的4条边，水平和垂直方向各自距离椭圆圆心最近的边和这个椭圆边界相切。farthest-side同理。\n        * closest-corner首先选择最近的角，作为椭圆和画布边缘的相交点1，然后再在该角的2个邻边分别做相交点1的对称角，称为相交点2和相交点3。有了椭圆圆心，i以及3个交点，可以唯一确定一个椭圆的形状。这一点在很多网站上都没有讲清楚，经过实践总结出来的规律。\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-3/1622731992192-image.png)\n    * 除了farthest/closest、side/corner组成的关键字之外。可以具体定义水平和垂直的半径。\n\n* center表示椭圆的圆心在background-size界定的范围中的相对位置。\n\n在给颜色标注位置时，如果是具体数值而不是百分比，则数值是以椭圆水平方向的半径为最大值，MDN有个专业词`Virtual gradient ray`，翻译为虚拟渐变射线：\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-3/1622730040664-image.png)\n\n```html\n<p><strong>closest-side：</strong></p>\n<div id=\"grad1\"></div>\n```\n```css\n#grad1 {\n  height: 150px;\n  width: 300px;\n  background-color: red; /* 浏览器不支持的时候显示 */\n  background-image: radial-gradient(closest-side at 50% 50%, red 70px, yellow 80px, black 150px); \n}\n```\n\n## 水波纹效果\n\n在寻找方案的时候看到了一个有意思的水波纹。\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-2/1622649326314-image.png)\n\n实现原理就是多个方形容器旋转。\n```\n<div class=\"wave\">\n    水波纹效果\n    <div class=\"wave1\"></div>\n    <div class=\"wave2\"></div>\n    <div class=\"wave3\"></div>\n</div>\n\n.wave{\n    position: relative;\n    border: 1px solid silver;\n    width: 100px;\n    height: 100px;\n    border-radius: 50%;\n    line-height: 50px;\n    margin: 0 auto;\n    font-size: 14px;\n    text-align: center;\n    overflow: hidden;\n    animation: water-wave linear infinite;\n}\n.wave1{\n    position: absolute;\n    top: 40%;\n    left: -25%;\n    background: #33cfff;\n    opacity: .7;\n    width: 200%;\n    height: 200%;\n    border-radius: 40%;\n    animation: inherit;\n    animation-duration: 5s;\n}\n.wave2{\n    position: absolute;\n    top: 40%;\n    left: -35%;\n    background: #0eaffe;\n    opacity: .7;\n    width: 200%;\n    height: 200%;\n    border-radius: 35%;\n    animation: inherit;\n    animation-duration: 7s;\n}\n.wave3{\n    position: absolute;\n    top: 50%;\n    left: -35%;\n    background: #0f7ea4;\n    opacity: .3;\n    width: 200%;\n    height: 200%;\n    border-radius: 33%;\n    animation: inherit;\n    animation-duration: 11s;\n}\n@keyframes  water-wave{\n    0% {transform: rotate(0deg);}\n    100% {transform: rotate(360deg);}\n}\n```\n\n","source":"_posts/css/curved-radius.md","raw":"---\ntitle: 凹槽样式小结\ncategories: css\ntags: [css]\ndate: 2021-6-2\n---  \n## border-radius\n\n由于border-radius的最大半径是50%，无法直接实现大弧度。独立一个元素，使其尺寸是容器的1倍以上，再通过平易即可实现视觉上的凹槽效果。\n\n```\n<!--html-->\n<div class=\"container\">\n  <div class=\"curved-bg\"></div>\n</div>\n// css\n.container {\n  width: 300px;\n  height: 300px;\n  overflow: hidden;\n}\n.curved-bg {\n  width: 300%;\n  height: 300%;\n  margin-top: -250%;\n  margin-left: -100%;\n  border-radius: 50%;\n  background-color: rgba(0, 0, 0, 0.3);\n}\n```\n\n以上方法只是对一个简单的背景做圆角处理。试想以下这样的场景：圆弧部分只是一个修饰，图片部分的轮播图可响应点击交互，如下图banner底部的大圆弧。\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-2/1622647130156-image.png)\n\n针对这样的场景，border-radius方法依旧可以用，只不过需要用到`pointer-event:none`实现点击穿透。该属性绝大部分浏览器目前都支持。\n\n## 切图\n\n最简单的办法，就是将有弧度的部分切成一张png图盖在banner下方，由于这一个区域的高度较浅，不影响点击交互。\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-2/1622648935597-image.png)\n\n## curved border-radius\n\n可以通过椭圆圆角实现：\n\n```\n<!--html-->\n<div class=\"container\">\n  <div class=\"curved-bg2\"></div>\n</div>\n// css\n.container {\n  width: 300px;\n  height: 300px;\n  overflow: hidden;\n}\n.curved-bg2 {\n    height: 100%;\n    margin-top: -50%;\n    background-color: rgba(0, 0, 0, 0.3);\n    /* Curved corners */\n    border-bottom-left-radius: 50% 10%;\n    border-bottom-right-radius: 50% 10%;\n}\n```\n\n利用了border-radius的裁剪形状。具体参考[border-top-left-radius](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-top-left-radius)\n\n以上2种方法渲染结果对比：\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-2/1622648619027-image.png)\n\n前者的效果两端较为平缓，而curved border-radius的两端比较陡峭，接近于垂直。视觉上curved border-radius效果一般。\n\n\n## radio-gradient\n用一个mask元素盖在banner上层，使用径向渐变，结合pointer-event:none实现点击穿透。\n```\n.mask {\n  position: absolute;\n  width: 500px;\n  height: 500px;\n  left: 0;\n  top: 0;\n  background: #fff;\n  background: radial-gradient(ellipse closest-side at center, transparent 919rpx, #fff 920rpx);\n  background-size: 100px 500px;\n  background-position: -891rpx -456rpx;\n\n  background-repeat: no-repeat;\n  pointer-events: none;\n}\n\n```\n* ellipse表示形状为椭圆。\n\n* 椭圆怎么定义边界呢？\n    * farthest-corner、closest-side 、closest-corner 、farthest-side。\n        * closest-side表示background-size指定的背景画布的4条边，水平和垂直方向各自距离椭圆圆心最近的边和这个椭圆边界相切。farthest-side同理。\n        * closest-corner首先选择最近的角，作为椭圆和画布边缘的相交点1，然后再在该角的2个邻边分别做相交点1的对称角，称为相交点2和相交点3。有了椭圆圆心，i以及3个交点，可以唯一确定一个椭圆的形状。这一点在很多网站上都没有讲清楚，经过实践总结出来的规律。\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-3/1622731992192-image.png)\n    * 除了farthest/closest、side/corner组成的关键字之外。可以具体定义水平和垂直的半径。\n\n* center表示椭圆的圆心在background-size界定的范围中的相对位置。\n\n在给颜色标注位置时，如果是具体数值而不是百分比，则数值是以椭圆水平方向的半径为最大值，MDN有个专业词`Virtual gradient ray`，翻译为虚拟渐变射线：\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-3/1622730040664-image.png)\n\n```html\n<p><strong>closest-side：</strong></p>\n<div id=\"grad1\"></div>\n```\n```css\n#grad1 {\n  height: 150px;\n  width: 300px;\n  background-color: red; /* 浏览器不支持的时候显示 */\n  background-image: radial-gradient(closest-side at 50% 50%, red 70px, yellow 80px, black 150px); \n}\n```\n\n## 水波纹效果\n\n在寻找方案的时候看到了一个有意思的水波纹。\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-2/1622649326314-image.png)\n\n实现原理就是多个方形容器旋转。\n```\n<div class=\"wave\">\n    水波纹效果\n    <div class=\"wave1\"></div>\n    <div class=\"wave2\"></div>\n    <div class=\"wave3\"></div>\n</div>\n\n.wave{\n    position: relative;\n    border: 1px solid silver;\n    width: 100px;\n    height: 100px;\n    border-radius: 50%;\n    line-height: 50px;\n    margin: 0 auto;\n    font-size: 14px;\n    text-align: center;\n    overflow: hidden;\n    animation: water-wave linear infinite;\n}\n.wave1{\n    position: absolute;\n    top: 40%;\n    left: -25%;\n    background: #33cfff;\n    opacity: .7;\n    width: 200%;\n    height: 200%;\n    border-radius: 40%;\n    animation: inherit;\n    animation-duration: 5s;\n}\n.wave2{\n    position: absolute;\n    top: 40%;\n    left: -35%;\n    background: #0eaffe;\n    opacity: .7;\n    width: 200%;\n    height: 200%;\n    border-radius: 35%;\n    animation: inherit;\n    animation-duration: 7s;\n}\n.wave3{\n    position: absolute;\n    top: 50%;\n    left: -35%;\n    background: #0f7ea4;\n    opacity: .3;\n    width: 200%;\n    height: 200%;\n    border-radius: 33%;\n    animation: inherit;\n    animation-duration: 11s;\n}\n@keyframes  water-wave{\n    0% {transform: rotate(0deg);}\n    100% {transform: rotate(360deg);}\n}\n```\n\n","slug":"css/curved-radius","published":1,"updated":"2021-06-14T02:08:17.937Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6o000necq81zw03ng1","content":"<h2 id=\"border-radius\"><a href=\"#border-radius\" class=\"headerlink\" title=\"border-radius\"></a>border-radius</h2><p>由于border-radius的最大半径是50%，无法直接实现大弧度。独立一个元素，使其尺寸是容器的1倍以上，再通过平易即可实现视觉上的凹槽效果。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--html--&gt;</span><br><span class=\"line\">&lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;curved-bg&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">// css</span><br><span class=\"line\">.container &#123;</span><br><span class=\"line\">  width: 300px;</span><br><span class=\"line\">  height: 300px;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.curved-bg &#123;</span><br><span class=\"line\">  width: 300%;</span><br><span class=\"line\">  height: 300%;</span><br><span class=\"line\">  margin-top: -250%;</span><br><span class=\"line\">  margin-left: -100%;</span><br><span class=\"line\">  border-radius: 50%;</span><br><span class=\"line\">  background-color: rgba(0, 0, 0, 0.3);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上方法只是对一个简单的背景做圆角处理。试想以下这样的场景：圆弧部分只是一个修饰，图片部分的轮播图可响应点击交互，如下图banner底部的大圆弧。</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-2/1622647130156-image.png\"></p>\n<p>针对这样的场景，border-radius方法依旧可以用，只不过需要用到<code>pointer-event:none</code>实现点击穿透。该属性绝大部分浏览器目前都支持。</p>\n<h2 id=\"切图\"><a href=\"#切图\" class=\"headerlink\" title=\"切图\"></a>切图</h2><p>最简单的办法，就是将有弧度的部分切成一张png图盖在banner下方，由于这一个区域的高度较浅，不影响点击交互。</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-2/1622648935597-image.png\"></p>\n<h2 id=\"curved-border-radius\"><a href=\"#curved-border-radius\" class=\"headerlink\" title=\"curved border-radius\"></a>curved border-radius</h2><p>可以通过椭圆圆角实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--html--&gt;</span><br><span class=\"line\">&lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;curved-bg2&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">// css</span><br><span class=\"line\">.container &#123;</span><br><span class=\"line\">  width: 300px;</span><br><span class=\"line\">  height: 300px;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.curved-bg2 &#123;</span><br><span class=\"line\">    height: 100%;</span><br><span class=\"line\">    margin-top: -50%;</span><br><span class=\"line\">    background-color: rgba(0, 0, 0, 0.3);</span><br><span class=\"line\">    /* Curved corners */</span><br><span class=\"line\">    border-bottom-left-radius: 50% 10%;</span><br><span class=\"line\">    border-bottom-right-radius: 50% 10%;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>利用了border-radius的裁剪形状。具体参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-top-left-radius\">border-top-left-radius</a></p>\n<p>以上2种方法渲染结果对比：</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-2/1622648619027-image.png\"></p>\n<p>前者的效果两端较为平缓，而curved border-radius的两端比较陡峭，接近于垂直。视觉上curved border-radius效果一般。</p>\n<h2 id=\"radio-gradient\"><a href=\"#radio-gradient\" class=\"headerlink\" title=\"radio-gradient\"></a>radio-gradient</h2><p>用一个mask元素盖在banner上层，使用径向渐变，结合pointer-event:none实现点击穿透。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.mask &#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  width: 500px;</span><br><span class=\"line\">  height: 500px;</span><br><span class=\"line\">  left: 0;</span><br><span class=\"line\">  top: 0;</span><br><span class=\"line\">  background: #fff;</span><br><span class=\"line\">  background: radial-gradient(ellipse closest-side at center, transparent 919rpx, #fff 920rpx);</span><br><span class=\"line\">  background-size: 100px 500px;</span><br><span class=\"line\">  background-position: -891rpx -456rpx;</span><br><span class=\"line\"></span><br><span class=\"line\">  background-repeat: no-repeat;</span><br><span class=\"line\">  pointer-events: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>ellipse表示形状为椭圆。</p>\n</li>\n<li><p>椭圆怎么定义边界呢？</p>\n<ul>\n<li>farthest-corner、closest-side 、closest-corner 、farthest-side。<ul>\n<li>closest-side表示background-size指定的背景画布的4条边，水平和垂直方向各自距离椭圆圆心最近的边和这个椭圆边界相切。farthest-side同理。</li>\n<li>closest-corner首先选择最近的角，作为椭圆和画布边缘的相交点1，然后再在该角的2个邻边分别做相交点1的对称角，称为相交点2和相交点3。有了椭圆圆心，i以及3个交点，可以唯一确定一个椭圆的形状。这一点在很多网站上都没有讲清楚，经过实践总结出来的规律。<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-3/1622731992192-image.png\"></li>\n</ul>\n</li>\n<li>除了farthest/closest、side/corner组成的关键字之外。可以具体定义水平和垂直的半径。</li>\n</ul>\n</li>\n<li><p>center表示椭圆的圆心在background-size界定的范围中的相对位置。</p>\n</li>\n</ul>\n<p>在给颜色标注位置时，如果是具体数值而不是百分比，则数值是以椭圆水平方向的半径为最大值，MDN有个专业词<code>Virtual gradient ray</code>，翻译为虚拟渐变射线：</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-3/1622730040664-image.png\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>closest-side：<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;grad1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#grad1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: red; <span class=\"comment\">/* 浏览器不支持的时候显示 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">radial-gradient</span>(closest-side at <span class=\"number\">50%</span> <span class=\"number\">50%</span>, red <span class=\"number\">70px</span>, yellow <span class=\"number\">80px</span>, black <span class=\"number\">150px</span>); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"水波纹效果\"><a href=\"#水波纹效果\" class=\"headerlink\" title=\"水波纹效果\"></a>水波纹效果</h2><p>在寻找方案的时候看到了一个有意思的水波纹。</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-2/1622649326314-image.png\"></p>\n<p>实现原理就是多个方形容器旋转。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wave&quot;&gt;</span><br><span class=\"line\">    水波纹效果</span><br><span class=\"line\">    &lt;div class=&quot;wave1&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;wave2&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;wave3&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">.wave&#123;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">    border: 1px solid silver;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    border-radius: 50%;</span><br><span class=\"line\">    line-height: 50px;</span><br><span class=\"line\">    margin: 0 auto;</span><br><span class=\"line\">    font-size: 14px;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\">    animation: water-wave linear infinite;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.wave1&#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: 40%;</span><br><span class=\"line\">    left: -25%;</span><br><span class=\"line\">    background: #33cfff;</span><br><span class=\"line\">    opacity: .7;</span><br><span class=\"line\">    width: 200%;</span><br><span class=\"line\">    height: 200%;</span><br><span class=\"line\">    border-radius: 40%;</span><br><span class=\"line\">    animation: inherit;</span><br><span class=\"line\">    animation-duration: 5s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.wave2&#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: 40%;</span><br><span class=\"line\">    left: -35%;</span><br><span class=\"line\">    background: #0eaffe;</span><br><span class=\"line\">    opacity: .7;</span><br><span class=\"line\">    width: 200%;</span><br><span class=\"line\">    height: 200%;</span><br><span class=\"line\">    border-radius: 35%;</span><br><span class=\"line\">    animation: inherit;</span><br><span class=\"line\">    animation-duration: 7s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.wave3&#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: 50%;</span><br><span class=\"line\">    left: -35%;</span><br><span class=\"line\">    background: #0f7ea4;</span><br><span class=\"line\">    opacity: .3;</span><br><span class=\"line\">    width: 200%;</span><br><span class=\"line\">    height: 200%;</span><br><span class=\"line\">    border-radius: 33%;</span><br><span class=\"line\">    animation: inherit;</span><br><span class=\"line\">    animation-duration: 11s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@keyframes  water-wave&#123;</span><br><span class=\"line\">    0% &#123;transform: rotate(0deg);&#125;</span><br><span class=\"line\">    100% &#123;transform: rotate(360deg);&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"border-radius\"><a href=\"#border-radius\" class=\"headerlink\" title=\"border-radius\"></a>border-radius</h2><p>由于border-radius的最大半径是50%，无法直接实现大弧度。独立一个元素，使其尺寸是容器的1倍以上，再通过平易即可实现视觉上的凹槽效果。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--html--&gt;</span><br><span class=\"line\">&lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;curved-bg&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">// css</span><br><span class=\"line\">.container &#123;</span><br><span class=\"line\">  width: 300px;</span><br><span class=\"line\">  height: 300px;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.curved-bg &#123;</span><br><span class=\"line\">  width: 300%;</span><br><span class=\"line\">  height: 300%;</span><br><span class=\"line\">  margin-top: -250%;</span><br><span class=\"line\">  margin-left: -100%;</span><br><span class=\"line\">  border-radius: 50%;</span><br><span class=\"line\">  background-color: rgba(0, 0, 0, 0.3);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上方法只是对一个简单的背景做圆角处理。试想以下这样的场景：圆弧部分只是一个修饰，图片部分的轮播图可响应点击交互，如下图banner底部的大圆弧。</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-2/1622647130156-image.png\"></p>\n<p>针对这样的场景，border-radius方法依旧可以用，只不过需要用到<code>pointer-event:none</code>实现点击穿透。该属性绝大部分浏览器目前都支持。</p>\n<h2 id=\"切图\"><a href=\"#切图\" class=\"headerlink\" title=\"切图\"></a>切图</h2><p>最简单的办法，就是将有弧度的部分切成一张png图盖在banner下方，由于这一个区域的高度较浅，不影响点击交互。</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-2/1622648935597-image.png\"></p>\n<h2 id=\"curved-border-radius\"><a href=\"#curved-border-radius\" class=\"headerlink\" title=\"curved border-radius\"></a>curved border-radius</h2><p>可以通过椭圆圆角实现：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--html--&gt;</span><br><span class=\"line\">&lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;curved-bg2&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">// css</span><br><span class=\"line\">.container &#123;</span><br><span class=\"line\">  width: 300px;</span><br><span class=\"line\">  height: 300px;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.curved-bg2 &#123;</span><br><span class=\"line\">    height: 100%;</span><br><span class=\"line\">    margin-top: -50%;</span><br><span class=\"line\">    background-color: rgba(0, 0, 0, 0.3);</span><br><span class=\"line\">    /* Curved corners */</span><br><span class=\"line\">    border-bottom-left-radius: 50% 10%;</span><br><span class=\"line\">    border-bottom-right-radius: 50% 10%;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>利用了border-radius的裁剪形状。具体参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-top-left-radius\">border-top-left-radius</a></p>\n<p>以上2种方法渲染结果对比：</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-2/1622648619027-image.png\"></p>\n<p>前者的效果两端较为平缓，而curved border-radius的两端比较陡峭，接近于垂直。视觉上curved border-radius效果一般。</p>\n<h2 id=\"radio-gradient\"><a href=\"#radio-gradient\" class=\"headerlink\" title=\"radio-gradient\"></a>radio-gradient</h2><p>用一个mask元素盖在banner上层，使用径向渐变，结合pointer-event:none实现点击穿透。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.mask &#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  width: 500px;</span><br><span class=\"line\">  height: 500px;</span><br><span class=\"line\">  left: 0;</span><br><span class=\"line\">  top: 0;</span><br><span class=\"line\">  background: #fff;</span><br><span class=\"line\">  background: radial-gradient(ellipse closest-side at center, transparent 919rpx, #fff 920rpx);</span><br><span class=\"line\">  background-size: 100px 500px;</span><br><span class=\"line\">  background-position: -891rpx -456rpx;</span><br><span class=\"line\"></span><br><span class=\"line\">  background-repeat: no-repeat;</span><br><span class=\"line\">  pointer-events: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>ellipse表示形状为椭圆。</p>\n</li>\n<li><p>椭圆怎么定义边界呢？</p>\n<ul>\n<li>farthest-corner、closest-side 、closest-corner 、farthest-side。<ul>\n<li>closest-side表示background-size指定的背景画布的4条边，水平和垂直方向各自距离椭圆圆心最近的边和这个椭圆边界相切。farthest-side同理。</li>\n<li>closest-corner首先选择最近的角，作为椭圆和画布边缘的相交点1，然后再在该角的2个邻边分别做相交点1的对称角，称为相交点2和相交点3。有了椭圆圆心，i以及3个交点，可以唯一确定一个椭圆的形状。这一点在很多网站上都没有讲清楚，经过实践总结出来的规律。<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-3/1622731992192-image.png\"></li>\n</ul>\n</li>\n<li>除了farthest/closest、side/corner组成的关键字之外。可以具体定义水平和垂直的半径。</li>\n</ul>\n</li>\n<li><p>center表示椭圆的圆心在background-size界定的范围中的相对位置。</p>\n</li>\n</ul>\n<p>在给颜色标注位置时，如果是具体数值而不是百分比，则数值是以椭圆水平方向的半径为最大值，MDN有个专业词<code>Virtual gradient ray</code>，翻译为虚拟渐变射线：</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-3/1622730040664-image.png\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>closest-side：<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;grad1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#grad1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: red; <span class=\"comment\">/* 浏览器不支持的时候显示 */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">radial-gradient</span>(closest-side at <span class=\"number\">50%</span> <span class=\"number\">50%</span>, red <span class=\"number\">70px</span>, yellow <span class=\"number\">80px</span>, black <span class=\"number\">150px</span>); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"水波纹效果\"><a href=\"#水波纹效果\" class=\"headerlink\" title=\"水波纹效果\"></a>水波纹效果</h2><p>在寻找方案的时候看到了一个有意思的水波纹。</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-2/1622649326314-image.png\"></p>\n<p>实现原理就是多个方形容器旋转。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;wave&quot;&gt;</span><br><span class=\"line\">    水波纹效果</span><br><span class=\"line\">    &lt;div class=&quot;wave1&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;wave2&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;wave3&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">.wave&#123;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">    border: 1px solid silver;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    border-radius: 50%;</span><br><span class=\"line\">    line-height: 50px;</span><br><span class=\"line\">    margin: 0 auto;</span><br><span class=\"line\">    font-size: 14px;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\">    animation: water-wave linear infinite;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.wave1&#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: 40%;</span><br><span class=\"line\">    left: -25%;</span><br><span class=\"line\">    background: #33cfff;</span><br><span class=\"line\">    opacity: .7;</span><br><span class=\"line\">    width: 200%;</span><br><span class=\"line\">    height: 200%;</span><br><span class=\"line\">    border-radius: 40%;</span><br><span class=\"line\">    animation: inherit;</span><br><span class=\"line\">    animation-duration: 5s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.wave2&#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: 40%;</span><br><span class=\"line\">    left: -35%;</span><br><span class=\"line\">    background: #0eaffe;</span><br><span class=\"line\">    opacity: .7;</span><br><span class=\"line\">    width: 200%;</span><br><span class=\"line\">    height: 200%;</span><br><span class=\"line\">    border-radius: 35%;</span><br><span class=\"line\">    animation: inherit;</span><br><span class=\"line\">    animation-duration: 7s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.wave3&#123;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    top: 50%;</span><br><span class=\"line\">    left: -35%;</span><br><span class=\"line\">    background: #0f7ea4;</span><br><span class=\"line\">    opacity: .3;</span><br><span class=\"line\">    width: 200%;</span><br><span class=\"line\">    height: 200%;</span><br><span class=\"line\">    border-radius: 33%;</span><br><span class=\"line\">    animation: inherit;</span><br><span class=\"line\">    animation-duration: 11s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@keyframes  water-wave&#123;</span><br><span class=\"line\">    0% &#123;transform: rotate(0deg);&#125;</span><br><span class=\"line\">    100% &#123;transform: rotate(360deg);&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"纯css实现行内标签","date":"2020-06-17T16:00:00.000Z","_content":" \n\n有一个需求要实现下图的布局效果：\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-15/1623756154070-image.png)\n\n商品标签和商品标题融合在一起。\n\n## float元素\n\n一想到文字环绕，一开始想到的就是float。\n* 彩色标签使用float:left\n* 文字使用inline或者block\n\n文字为什么不能用inline-block呢？\n```\n<style>\n   .left {\n       float: left;\n       color: red;\n   }\n   .right {\n       display: inline-block;\n   }\n</style>\n<div class=\"page\">\n    <div class=\"left\">特别长特别长</div>\n    <div class=\"right\">特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长</div>\n</div>\n```\n结果：\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-18/1623999303996-image.png)\n\n可见，float:left和display:inline-block并列时，后者会换行。MDN解释说`float意味着使用块布局`。用这句话解释上面的情况说得过去。\n\n但是，如果把right改成下面这样：\n```\n.right {\n   display: block;\n   <!--或者-->\n   display: inline;\n}\n</style>\n```\n就会变成\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-18/1623999523016-image.png)\n\n看来`float意味着使用块布局`这一点还要结合`float本身是被用来设计文字环绕`的说法结合才能解释的通float的行为。\n\n## 实现文字环绕\n\n关于文字环绕使用inline还是block呢？\n\n如果想用inline，text-align就不生效。有2个选择：\n1. text-align作用到父元素\n2. 使用文字使用block+text-align\n\n```\n<template>\n<div class=\"product-item-title\">\n  <span class=\"category-tag\">{{product.categoryName}}</span>\n  <span class=\"product-name\">{{product.productName}}</span>\n</div>\n</template>\n\n<style lang=\"less\">\n// 方法1\n.product-item-title{\n    text-align: justify;\n\n    .category-tag {\n      float: left;\n      // 高度和位置可能需要微调\n      // ...\n    }\n\n    .product-name {\n      line-height: 40rpx;\n    }\n}\n\n// 方法2\n.product-item-title{\n    .category-tag {\n      float: left;\n      // 高度和位置可能需要微调\n      // ...\n    }\n\n    .product-name {\n      display:block;\n      line-height: 40rpx;\n      text-align: justify;\n    }\n}\n</style>\n```\n\n## 多行省略的文字环绕\n如果需求再升级：\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-18/1623999965411-image.png)\n\n多行省略使用了box布局：\n```\n/*多行溢出显示省略*/\n.muti-line-ellipsis(@row: 2){\n  -webkit-line-clamp: @row;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: -webkit-box;  \n  white-space: pre-wrap!important;\n}\n```\n\n采用前面的方法1，将muti-line-ellipsis作用在product-item-title上，在小程序上有问题，h5没问题。\n\n采用前面的方法2，将muti-line-ellipsis作用在product-name上，在小程序上有问题，h5没问题。\n\n二者均没有文字环绕效果，看来float:left的方法需要弃用了。\n\n## inline\n\n研究了下，发现，其实多个inline元素也是可以实现文字环绕效果的，因此有了接下来的最佳实践：\n\n```\n<template>\n<div class=\"product-item-title\"><span\nclass=\"category-tag\">{{product.categoryName}}</span><span\nclass=\"product-name\">{{product.productName}}</span>\n</div>\n</template>\n\n<style lang=\"less\">\n.product-item-title{\n    text-align: justify;\n    -webkit-line-clamp: 3;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    display: -webkit-box;  \n    white-space: pre-wrap!important;\n\n    .category-tag {\n    }\n\n    .product-name {\n    }\n}\n</style>\n```\n\n需要注意的是，product-item-title内、元素之间不能有换行，否则行内元素就不能在同一行了。效果如下：\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-18/1624008388023-image.png)","source":"_posts/css/inline-tag.md","raw":"---\ntitle: 纯css实现行内标签\ncategories: css\ntags: [css]\ndate: 2020-6-18\n--- \n\n有一个需求要实现下图的布局效果：\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-15/1623756154070-image.png)\n\n商品标签和商品标题融合在一起。\n\n## float元素\n\n一想到文字环绕，一开始想到的就是float。\n* 彩色标签使用float:left\n* 文字使用inline或者block\n\n文字为什么不能用inline-block呢？\n```\n<style>\n   .left {\n       float: left;\n       color: red;\n   }\n   .right {\n       display: inline-block;\n   }\n</style>\n<div class=\"page\">\n    <div class=\"left\">特别长特别长</div>\n    <div class=\"right\">特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长</div>\n</div>\n```\n结果：\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-18/1623999303996-image.png)\n\n可见，float:left和display:inline-block并列时，后者会换行。MDN解释说`float意味着使用块布局`。用这句话解释上面的情况说得过去。\n\n但是，如果把right改成下面这样：\n```\n.right {\n   display: block;\n   <!--或者-->\n   display: inline;\n}\n</style>\n```\n就会变成\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-18/1623999523016-image.png)\n\n看来`float意味着使用块布局`这一点还要结合`float本身是被用来设计文字环绕`的说法结合才能解释的通float的行为。\n\n## 实现文字环绕\n\n关于文字环绕使用inline还是block呢？\n\n如果想用inline，text-align就不生效。有2个选择：\n1. text-align作用到父元素\n2. 使用文字使用block+text-align\n\n```\n<template>\n<div class=\"product-item-title\">\n  <span class=\"category-tag\">{{product.categoryName}}</span>\n  <span class=\"product-name\">{{product.productName}}</span>\n</div>\n</template>\n\n<style lang=\"less\">\n// 方法1\n.product-item-title{\n    text-align: justify;\n\n    .category-tag {\n      float: left;\n      // 高度和位置可能需要微调\n      // ...\n    }\n\n    .product-name {\n      line-height: 40rpx;\n    }\n}\n\n// 方法2\n.product-item-title{\n    .category-tag {\n      float: left;\n      // 高度和位置可能需要微调\n      // ...\n    }\n\n    .product-name {\n      display:block;\n      line-height: 40rpx;\n      text-align: justify;\n    }\n}\n</style>\n```\n\n## 多行省略的文字环绕\n如果需求再升级：\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-18/1623999965411-image.png)\n\n多行省略使用了box布局：\n```\n/*多行溢出显示省略*/\n.muti-line-ellipsis(@row: 2){\n  -webkit-line-clamp: @row;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: -webkit-box;  \n  white-space: pre-wrap!important;\n}\n```\n\n采用前面的方法1，将muti-line-ellipsis作用在product-item-title上，在小程序上有问题，h5没问题。\n\n采用前面的方法2，将muti-line-ellipsis作用在product-name上，在小程序上有问题，h5没问题。\n\n二者均没有文字环绕效果，看来float:left的方法需要弃用了。\n\n## inline\n\n研究了下，发现，其实多个inline元素也是可以实现文字环绕效果的，因此有了接下来的最佳实践：\n\n```\n<template>\n<div class=\"product-item-title\"><span\nclass=\"category-tag\">{{product.categoryName}}</span><span\nclass=\"product-name\">{{product.productName}}</span>\n</div>\n</template>\n\n<style lang=\"less\">\n.product-item-title{\n    text-align: justify;\n    -webkit-line-clamp: 3;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    display: -webkit-box;  \n    white-space: pre-wrap!important;\n\n    .category-tag {\n    }\n\n    .product-name {\n    }\n}\n</style>\n```\n\n需要注意的是，product-item-title内、元素之间不能有换行，否则行内元素就不能在同一行了。效果如下：\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-18/1624008388023-image.png)","slug":"css/inline-tag","published":1,"updated":"2021-08-05T00:40:11.669Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6o000oecq8f8n3fcs1","content":"<p>有一个需求要实现下图的布局效果：</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-15/1623756154070-image.png\"></p>\n<p>商品标签和商品标题融合在一起。</p>\n<h2 id=\"float元素\"><a href=\"#float元素\" class=\"headerlink\" title=\"float元素\"></a>float元素</h2><p>一想到文字环绕，一开始想到的就是float。</p>\n<ul>\n<li>彩色标签使用float:left</li>\n<li>文字使用inline或者block</li>\n</ul>\n<p>文字为什么不能用inline-block呢？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">   .left &#123;</span><br><span class=\"line\">       float: left;</span><br><span class=\"line\">       color: red;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   .right &#123;</span><br><span class=\"line\">       display: inline-block;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;div class=&quot;page&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;left&quot;&gt;特别长特别长&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;right&quot;&gt;特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-18/1623999303996-image.png\"></p>\n<p>可见，float:left和display:inline-block并列时，后者会换行。MDN解释说<code>float意味着使用块布局</code>。用这句话解释上面的情况说得过去。</p>\n<p>但是，如果把right改成下面这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.right &#123;</span><br><span class=\"line\">   display: block;</span><br><span class=\"line\">   &lt;!--或者--&gt;</span><br><span class=\"line\">   display: inline;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>就会变成</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-18/1623999523016-image.png\"></p>\n<p>看来<code>float意味着使用块布局</code>这一点还要结合<code>float本身是被用来设计文字环绕</code>的说法结合才能解释的通float的行为。</p>\n<h2 id=\"实现文字环绕\"><a href=\"#实现文字环绕\" class=\"headerlink\" title=\"实现文字环绕\"></a>实现文字环绕</h2><p>关于文字环绕使用inline还是block呢？</p>\n<p>如果想用inline，text-align就不生效。有2个选择：</p>\n<ol>\n<li>text-align作用到父元素</li>\n<li>使用文字使用block+text-align</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">&lt;div class=&quot;product-item-title&quot;&gt;</span><br><span class=\"line\">  &lt;span class=&quot;category-tag&quot;&gt;&#123;&#123;product.categoryName&#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">  &lt;span class=&quot;product-name&quot;&gt;&#123;&#123;product.productName&#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style lang=&quot;less&quot;&gt;</span><br><span class=\"line\">// 方法1</span><br><span class=\"line\">.product-item-title&#123;</span><br><span class=\"line\">    text-align: justify;</span><br><span class=\"line\"></span><br><span class=\"line\">    .category-tag &#123;</span><br><span class=\"line\">      float: left;</span><br><span class=\"line\">      // 高度和位置可能需要微调</span><br><span class=\"line\">      // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .product-name &#123;</span><br><span class=\"line\">      line-height: 40rpx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 方法2</span><br><span class=\"line\">.product-item-title&#123;</span><br><span class=\"line\">    .category-tag &#123;</span><br><span class=\"line\">      float: left;</span><br><span class=\"line\">      // 高度和位置可能需要微调</span><br><span class=\"line\">      // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .product-name &#123;</span><br><span class=\"line\">      display:block;</span><br><span class=\"line\">      line-height: 40rpx;</span><br><span class=\"line\">      text-align: justify;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多行省略的文字环绕\"><a href=\"#多行省略的文字环绕\" class=\"headerlink\" title=\"多行省略的文字环绕\"></a>多行省略的文字环绕</h2><p>如果需求再升级：</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-18/1623999965411-image.png\"></p>\n<p>多行省略使用了box布局：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*多行溢出显示省略*/</span><br><span class=\"line\">.muti-line-ellipsis(@row: 2)&#123;</span><br><span class=\"line\">  -webkit-line-clamp: @row;</span><br><span class=\"line\">  -webkit-box-orient: vertical;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">  text-overflow: ellipsis;</span><br><span class=\"line\">  display: -webkit-box;  </span><br><span class=\"line\">  white-space: pre-wrap!important;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>采用前面的方法1，将muti-line-ellipsis作用在product-item-title上，在小程序上有问题，h5没问题。</p>\n<p>采用前面的方法2，将muti-line-ellipsis作用在product-name上，在小程序上有问题，h5没问题。</p>\n<p>二者均没有文字环绕效果，看来float:left的方法需要弃用了。</p>\n<h2 id=\"inline\"><a href=\"#inline\" class=\"headerlink\" title=\"inline\"></a>inline</h2><p>研究了下，发现，其实多个inline元素也是可以实现文字环绕效果的，因此有了接下来的最佳实践：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">&lt;div class=&quot;product-item-title&quot;&gt;&lt;span</span><br><span class=\"line\">class=&quot;category-tag&quot;&gt;&#123;&#123;product.categoryName&#125;&#125;&lt;/span&gt;&lt;span</span><br><span class=\"line\">class=&quot;product-name&quot;&gt;&#123;&#123;product.productName&#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style lang=&quot;less&quot;&gt;</span><br><span class=\"line\">.product-item-title&#123;</span><br><span class=\"line\">    text-align: justify;</span><br><span class=\"line\">    -webkit-line-clamp: 3;</span><br><span class=\"line\">    -webkit-box-orient: vertical;</span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\">    text-overflow: ellipsis;</span><br><span class=\"line\">    display: -webkit-box;  </span><br><span class=\"line\">    white-space: pre-wrap!important;</span><br><span class=\"line\"></span><br><span class=\"line\">    .category-tag &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .product-name &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，product-item-title内、元素之间不能有换行，否则行内元素就不能在同一行了。效果如下：</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-18/1624008388023-image.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>有一个需求要实现下图的布局效果：</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-15/1623756154070-image.png\"></p>\n<p>商品标签和商品标题融合在一起。</p>\n<h2 id=\"float元素\"><a href=\"#float元素\" class=\"headerlink\" title=\"float元素\"></a>float元素</h2><p>一想到文字环绕，一开始想到的就是float。</p>\n<ul>\n<li>彩色标签使用float:left</li>\n<li>文字使用inline或者block</li>\n</ul>\n<p>文字为什么不能用inline-block呢？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">   .left &#123;</span><br><span class=\"line\">       float: left;</span><br><span class=\"line\">       color: red;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   .right &#123;</span><br><span class=\"line\">       display: inline-block;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;div class=&quot;page&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;left&quot;&gt;特别长特别长&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;right&quot;&gt;特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长特别长&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-18/1623999303996-image.png\"></p>\n<p>可见，float:left和display:inline-block并列时，后者会换行。MDN解释说<code>float意味着使用块布局</code>。用这句话解释上面的情况说得过去。</p>\n<p>但是，如果把right改成下面这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.right &#123;</span><br><span class=\"line\">   display: block;</span><br><span class=\"line\">   &lt;!--或者--&gt;</span><br><span class=\"line\">   display: inline;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>就会变成</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-18/1623999523016-image.png\"></p>\n<p>看来<code>float意味着使用块布局</code>这一点还要结合<code>float本身是被用来设计文字环绕</code>的说法结合才能解释的通float的行为。</p>\n<h2 id=\"实现文字环绕\"><a href=\"#实现文字环绕\" class=\"headerlink\" title=\"实现文字环绕\"></a>实现文字环绕</h2><p>关于文字环绕使用inline还是block呢？</p>\n<p>如果想用inline，text-align就不生效。有2个选择：</p>\n<ol>\n<li>text-align作用到父元素</li>\n<li>使用文字使用block+text-align</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">&lt;div class=&quot;product-item-title&quot;&gt;</span><br><span class=\"line\">  &lt;span class=&quot;category-tag&quot;&gt;&#123;&#123;product.categoryName&#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">  &lt;span class=&quot;product-name&quot;&gt;&#123;&#123;product.productName&#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style lang=&quot;less&quot;&gt;</span><br><span class=\"line\">// 方法1</span><br><span class=\"line\">.product-item-title&#123;</span><br><span class=\"line\">    text-align: justify;</span><br><span class=\"line\"></span><br><span class=\"line\">    .category-tag &#123;</span><br><span class=\"line\">      float: left;</span><br><span class=\"line\">      // 高度和位置可能需要微调</span><br><span class=\"line\">      // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .product-name &#123;</span><br><span class=\"line\">      line-height: 40rpx;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 方法2</span><br><span class=\"line\">.product-item-title&#123;</span><br><span class=\"line\">    .category-tag &#123;</span><br><span class=\"line\">      float: left;</span><br><span class=\"line\">      // 高度和位置可能需要微调</span><br><span class=\"line\">      // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .product-name &#123;</span><br><span class=\"line\">      display:block;</span><br><span class=\"line\">      line-height: 40rpx;</span><br><span class=\"line\">      text-align: justify;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多行省略的文字环绕\"><a href=\"#多行省略的文字环绕\" class=\"headerlink\" title=\"多行省略的文字环绕\"></a>多行省略的文字环绕</h2><p>如果需求再升级：</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-18/1623999965411-image.png\"></p>\n<p>多行省略使用了box布局：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*多行溢出显示省略*/</span><br><span class=\"line\">.muti-line-ellipsis(@row: 2)&#123;</span><br><span class=\"line\">  -webkit-line-clamp: @row;</span><br><span class=\"line\">  -webkit-box-orient: vertical;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">  text-overflow: ellipsis;</span><br><span class=\"line\">  display: -webkit-box;  </span><br><span class=\"line\">  white-space: pre-wrap!important;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>采用前面的方法1，将muti-line-ellipsis作用在product-item-title上，在小程序上有问题，h5没问题。</p>\n<p>采用前面的方法2，将muti-line-ellipsis作用在product-name上，在小程序上有问题，h5没问题。</p>\n<p>二者均没有文字环绕效果，看来float:left的方法需要弃用了。</p>\n<h2 id=\"inline\"><a href=\"#inline\" class=\"headerlink\" title=\"inline\"></a>inline</h2><p>研究了下，发现，其实多个inline元素也是可以实现文字环绕效果的，因此有了接下来的最佳实践：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">&lt;div class=&quot;product-item-title&quot;&gt;&lt;span</span><br><span class=\"line\">class=&quot;category-tag&quot;&gt;&#123;&#123;product.categoryName&#125;&#125;&lt;/span&gt;&lt;span</span><br><span class=\"line\">class=&quot;product-name&quot;&gt;&#123;&#123;product.productName&#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style lang=&quot;less&quot;&gt;</span><br><span class=\"line\">.product-item-title&#123;</span><br><span class=\"line\">    text-align: justify;</span><br><span class=\"line\">    -webkit-line-clamp: 3;</span><br><span class=\"line\">    -webkit-box-orient: vertical;</span><br><span class=\"line\">    overflow: hidden;</span><br><span class=\"line\">    text-overflow: ellipsis;</span><br><span class=\"line\">    display: -webkit-box;  </span><br><span class=\"line\">    white-space: pre-wrap!important;</span><br><span class=\"line\"></span><br><span class=\"line\">    .category-tag &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .product-name &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，product-item-title内、元素之间不能有换行，否则行内元素就不能在同一行了。效果如下：</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-18/1624008388023-image.png\"></p>\n"},{"title":"margin-bottom在ios设备的失效问题","date":"2021-07-31T16:00:00.000Z","_content":" \n\n以下代码，html和body高度都是100%。子元素son被内容撑开高度。\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Document</title>\n</head>\n<body>\n    <div class=\"son\">\n      The footer is fixed at the bottom and supossed to revealed with the scrolling, so the previous section has a margin-bottom but it doesn't work, only in Safari. Everywhere else is ok, even in I.E. I tried to add overflow: auto in the page-wrapper, but everything gets weird in all browsers with elements dissapear and appear. I also have read that removing height: 100% in the body and html may fix that, but that is not an option for me, because i need the images to fix the browser height.\n      // ...请填充内容至超出一屏高度\n    </div>\n  <style>\n    html, body {\n      height: 100%;\n      margin: 0;\n      padding: 0;\n    }\n    .son {\n      margin-bottom: 100px;\n      background-color: cyan;\n    }\n  </style>\n</body>\n</html>\n```\n\n* 当内容不超过整屏时，通过审查元素可以看到margin存在。\n* 当内容超过整屏时（包含margin）,在ios设备中，页面最底部盒子元素的margin-bottom会失效（safari和chrome浏览器都实效）。\n\n如果把html和body的高度删除：\n\n```\nhtml, body {\n    margin: 0;\n    padding: 0;\n}\n```\n就正常了。\n\n如果改成超出一屏的固定高度，会怎么样呢？\n```\nhtml, body {\n  height: 1000px;\n  margin: 0;\n  padding: 0;\n}\n```\n发现margin还是未生效。\n\n因此，对盒子模型的margin折叠行为在ios设备上的表现作出以下猜测：\n> 当元素属于页面最后一个子元素时，margin-bottom就会一层一层的渗透到祖先元素，直到html为止。当html高度固定时，子孙元素塌陷出来的margin不会影响它的滚动高度。\n\n解决办法：\n* 方案1:不固定html和body的高度，可以只设置min-height:100%。让其被内容自然撑开。\n* 方案2:在body内加一个BFC容器，这样就可以防止margin塌陷到外层：\n\n```\n<body>\n<div class=\"parent\">\n    <div class=\"son\">\n      // ...\n    </div>\n</div>\n</body>\n<style>\nhtml, body {\n  height: 100%;\n  margin: 0;\n  padding: 0;\n}\n.parent {\n  overflow-y: scroll;\n}\n.son {\n  margin-bottom: 100px;\n  background-color: cyan;\n}\n</style>\n```\n理论上可以直接将body变为BFC，或者给body加个padding-bottom，但是实际上并无效果。因此需要在body内加多一层容器使其成为BFC。","source":"_posts/css/margin-bottom-ios.md","raw":"---\ntitle: margin-bottom在ios设备的失效问题\ncategories: css\ntags: [css]\ndate: 2021-8-1\n--- \n\n以下代码，html和body高度都是100%。子元素son被内容撑开高度。\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Document</title>\n</head>\n<body>\n    <div class=\"son\">\n      The footer is fixed at the bottom and supossed to revealed with the scrolling, so the previous section has a margin-bottom but it doesn't work, only in Safari. Everywhere else is ok, even in I.E. I tried to add overflow: auto in the page-wrapper, but everything gets weird in all browsers with elements dissapear and appear. I also have read that removing height: 100% in the body and html may fix that, but that is not an option for me, because i need the images to fix the browser height.\n      // ...请填充内容至超出一屏高度\n    </div>\n  <style>\n    html, body {\n      height: 100%;\n      margin: 0;\n      padding: 0;\n    }\n    .son {\n      margin-bottom: 100px;\n      background-color: cyan;\n    }\n  </style>\n</body>\n</html>\n```\n\n* 当内容不超过整屏时，通过审查元素可以看到margin存在。\n* 当内容超过整屏时（包含margin）,在ios设备中，页面最底部盒子元素的margin-bottom会失效（safari和chrome浏览器都实效）。\n\n如果把html和body的高度删除：\n\n```\nhtml, body {\n    margin: 0;\n    padding: 0;\n}\n```\n就正常了。\n\n如果改成超出一屏的固定高度，会怎么样呢？\n```\nhtml, body {\n  height: 1000px;\n  margin: 0;\n  padding: 0;\n}\n```\n发现margin还是未生效。\n\n因此，对盒子模型的margin折叠行为在ios设备上的表现作出以下猜测：\n> 当元素属于页面最后一个子元素时，margin-bottom就会一层一层的渗透到祖先元素，直到html为止。当html高度固定时，子孙元素塌陷出来的margin不会影响它的滚动高度。\n\n解决办法：\n* 方案1:不固定html和body的高度，可以只设置min-height:100%。让其被内容自然撑开。\n* 方案2:在body内加一个BFC容器，这样就可以防止margin塌陷到外层：\n\n```\n<body>\n<div class=\"parent\">\n    <div class=\"son\">\n      // ...\n    </div>\n</div>\n</body>\n<style>\nhtml, body {\n  height: 100%;\n  margin: 0;\n  padding: 0;\n}\n.parent {\n  overflow-y: scroll;\n}\n.son {\n  margin-bottom: 100px;\n  background-color: cyan;\n}\n</style>\n```\n理论上可以直接将body变为BFC，或者给body加个padding-bottom，但是实际上并无效果。因此需要在body内加多一层容器使其成为BFC。","slug":"css/margin-bottom-ios","published":1,"updated":"2021-08-05T00:38:59.022Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6q000pecq87czu93cy","content":"<p>以下代码，html和body高度都是100%。子元素son被内容撑开高度。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class=\"line\">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div class=&quot;son&quot;&gt;</span><br><span class=\"line\">      The footer is fixed at the bottom and supossed to revealed with the scrolling, so the previous section has a margin-bottom but it doesn&#x27;t work, only in Safari. Everywhere else is ok, even in I.E. I tried to add overflow: auto in the page-wrapper, but everything gets weird in all browsers with elements dissapear and appear. I also have read that removing height: 100% in the body and html may fix that, but that is not an option for me, because i need the images to fix the browser height.</span><br><span class=\"line\">      // ...请填充内容至超出一屏高度</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;style&gt;</span><br><span class=\"line\">    html, body &#123;</span><br><span class=\"line\">      height: 100%;</span><br><span class=\"line\">      margin: 0;</span><br><span class=\"line\">      padding: 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .son &#123;</span><br><span class=\"line\">      margin-bottom: 100px;</span><br><span class=\"line\">      background-color: cyan;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &lt;/style&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>当内容不超过整屏时，通过审查元素可以看到margin存在。</li>\n<li>当内容超过整屏时（包含margin）,在ios设备中，页面最底部盒子元素的margin-bottom会失效（safari和chrome浏览器都实效）。</li>\n</ul>\n<p>如果把html和body的高度删除：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html, body &#123;</span><br><span class=\"line\">    margin: 0;</span><br><span class=\"line\">    padding: 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>就正常了。</p>\n<p>如果改成超出一屏的固定高度，会怎么样呢？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html, body &#123;</span><br><span class=\"line\">  height: 1000px;</span><br><span class=\"line\">  margin: 0;</span><br><span class=\"line\">  padding: 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>发现margin还是未生效。</p>\n<p>因此，对盒子模型的margin折叠行为在ios设备上的表现作出以下猜测：</p>\n<blockquote>\n<p>当元素属于页面最后一个子元素时，margin-bottom就会一层一层的渗透到祖先元素，直到html为止。当html高度固定时，子孙元素塌陷出来的margin不会影响它的滚动高度。</p>\n</blockquote>\n<p>解决办法：</p>\n<ul>\n<li>方案1:不固定html和body的高度，可以只设置min-height:100%。让其被内容自然撑开。</li>\n<li>方案2:在body内加一个BFC容器，这样就可以防止margin塌陷到外层：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;son&quot;&gt;</span><br><span class=\"line\">      // ...</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">html, body &#123;</span><br><span class=\"line\">  height: 100%;</span><br><span class=\"line\">  margin: 0;</span><br><span class=\"line\">  padding: 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  overflow-y: scroll;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.son &#123;</span><br><span class=\"line\">  margin-bottom: 100px;</span><br><span class=\"line\">  background-color: cyan;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>理论上可以直接将body变为BFC，或者给body加个padding-bottom，但是实际上并无效果。因此需要在body内加多一层容器使其成为BFC。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>以下代码，html和body高度都是100%。子元素son被内容撑开高度。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class=\"line\">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div class=&quot;son&quot;&gt;</span><br><span class=\"line\">      The footer is fixed at the bottom and supossed to revealed with the scrolling, so the previous section has a margin-bottom but it doesn&#x27;t work, only in Safari. Everywhere else is ok, even in I.E. I tried to add overflow: auto in the page-wrapper, but everything gets weird in all browsers with elements dissapear and appear. I also have read that removing height: 100% in the body and html may fix that, but that is not an option for me, because i need the images to fix the browser height.</span><br><span class=\"line\">      // ...请填充内容至超出一屏高度</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;style&gt;</span><br><span class=\"line\">    html, body &#123;</span><br><span class=\"line\">      height: 100%;</span><br><span class=\"line\">      margin: 0;</span><br><span class=\"line\">      padding: 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .son &#123;</span><br><span class=\"line\">      margin-bottom: 100px;</span><br><span class=\"line\">      background-color: cyan;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &lt;/style&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>当内容不超过整屏时，通过审查元素可以看到margin存在。</li>\n<li>当内容超过整屏时（包含margin）,在ios设备中，页面最底部盒子元素的margin-bottom会失效（safari和chrome浏览器都实效）。</li>\n</ul>\n<p>如果把html和body的高度删除：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html, body &#123;</span><br><span class=\"line\">    margin: 0;</span><br><span class=\"line\">    padding: 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>就正常了。</p>\n<p>如果改成超出一屏的固定高度，会怎么样呢？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html, body &#123;</span><br><span class=\"line\">  height: 1000px;</span><br><span class=\"line\">  margin: 0;</span><br><span class=\"line\">  padding: 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>发现margin还是未生效。</p>\n<p>因此，对盒子模型的margin折叠行为在ios设备上的表现作出以下猜测：</p>\n<blockquote>\n<p>当元素属于页面最后一个子元素时，margin-bottom就会一层一层的渗透到祖先元素，直到html为止。当html高度固定时，子孙元素塌陷出来的margin不会影响它的滚动高度。</p>\n</blockquote>\n<p>解决办法：</p>\n<ul>\n<li>方案1:不固定html和body的高度，可以只设置min-height:100%。让其被内容自然撑开。</li>\n<li>方案2:在body内加一个BFC容器，这样就可以防止margin塌陷到外层：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div class=&quot;parent&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;son&quot;&gt;</span><br><span class=\"line\">      // ...</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">html, body &#123;</span><br><span class=\"line\">  height: 100%;</span><br><span class=\"line\">  margin: 0;</span><br><span class=\"line\">  padding: 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.parent &#123;</span><br><span class=\"line\">  overflow-y: scroll;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.son &#123;</span><br><span class=\"line\">  margin-bottom: 100px;</span><br><span class=\"line\">  background-color: cyan;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>理论上可以直接将body变为BFC，或者给body加个padding-bottom，但是实际上并无效果。因此需要在body内加多一层容器使其成为BFC。</p>\n"},{"title":"white-space属性值表现","date":"2021-07-06T16:00:00.000Z","_content":" \n\n属性值 | 换行符 | 空格和制表符 | 文字换行 | 行尾空格\n---|---|---|---|---\nnormal | 当作空白符，连续合并 | 连续合并 | 自动换行 | 删除\nnowrap | 当作空白符，连续合并 | 连续合并 | 不自动换行 | 删除\npre | 保留，遇到即换行 | 保留 | 不自动换行 | 保留 \npre-wrap | 保留，遇到即换行 | 保留 | 自动换行 |\t挂起\npre-line | 保留，遇到即换行 | 连续合并 | 自动换行 |\t删除\nbreak-spaces | 保留，遇到即换行 | 保留 | 自动换行 |\t换行\n","source":"_posts/css/white-space.md","raw":"---\ntitle: white-space属性值表现\ncategories: css\ntags: [css]\ndate: 2021-7-7\n--- \n\n属性值 | 换行符 | 空格和制表符 | 文字换行 | 行尾空格\n---|---|---|---|---\nnormal | 当作空白符，连续合并 | 连续合并 | 自动换行 | 删除\nnowrap | 当作空白符，连续合并 | 连续合并 | 不自动换行 | 删除\npre | 保留，遇到即换行 | 保留 | 不自动换行 | 保留 \npre-wrap | 保留，遇到即换行 | 保留 | 自动换行 |\t挂起\npre-line | 保留，遇到即换行 | 连续合并 | 自动换行 |\t删除\nbreak-spaces | 保留，遇到即换行 | 保留 | 自动换行 |\t换行\n","slug":"css/white-space","published":1,"updated":"2021-08-07T02:38:24.041Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6r000qecq8a5lm9udk","content":"<table>\n<thead>\n<tr>\n<th>属性值</th>\n<th>换行符</th>\n<th>空格和制表符</th>\n<th>文字换行</th>\n<th>行尾空格</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>normal</td>\n<td>当作空白符，连续合并</td>\n<td>连续合并</td>\n<td>自动换行</td>\n<td>删除</td>\n</tr>\n<tr>\n<td>nowrap</td>\n<td>当作空白符，连续合并</td>\n<td>连续合并</td>\n<td>不自动换行</td>\n<td>删除</td>\n</tr>\n<tr>\n<td>pre</td>\n<td>保留，遇到即换行</td>\n<td>保留</td>\n<td>不自动换行</td>\n<td>保留</td>\n</tr>\n<tr>\n<td>pre-wrap</td>\n<td>保留，遇到即换行</td>\n<td>保留</td>\n<td>自动换行</td>\n<td>挂起</td>\n</tr>\n<tr>\n<td>pre-line</td>\n<td>保留，遇到即换行</td>\n<td>连续合并</td>\n<td>自动换行</td>\n<td>删除</td>\n</tr>\n<tr>\n<td>break-spaces</td>\n<td>保留，遇到即换行</td>\n<td>保留</td>\n<td>自动换行</td>\n<td>换行</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th>属性值</th>\n<th>换行符</th>\n<th>空格和制表符</th>\n<th>文字换行</th>\n<th>行尾空格</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>normal</td>\n<td>当作空白符，连续合并</td>\n<td>连续合并</td>\n<td>自动换行</td>\n<td>删除</td>\n</tr>\n<tr>\n<td>nowrap</td>\n<td>当作空白符，连续合并</td>\n<td>连续合并</td>\n<td>不自动换行</td>\n<td>删除</td>\n</tr>\n<tr>\n<td>pre</td>\n<td>保留，遇到即换行</td>\n<td>保留</td>\n<td>不自动换行</td>\n<td>保留</td>\n</tr>\n<tr>\n<td>pre-wrap</td>\n<td>保留，遇到即换行</td>\n<td>保留</td>\n<td>自动换行</td>\n<td>挂起</td>\n</tr>\n<tr>\n<td>pre-line</td>\n<td>保留，遇到即换行</td>\n<td>连续合并</td>\n<td>自动换行</td>\n<td>删除</td>\n</tr>\n<tr>\n<td>break-spaces</td>\n<td>保留，遇到即换行</td>\n<td>保留</td>\n<td>自动换行</td>\n<td>换行</td>\n</tr>\n</tbody></table>\n"},{"title":"nuxt导航共用","date":"2020-01-19T16:00:00.000Z","_content":"  \n\n导航作为多个页面之间共用的部分，一般是动态的，即每个页面返回之前需要异步请求。\n\n服务端异步请求的方法有asyncData，fetch。但是这俩方法都只支持页面组件，不支持layout中使用。\n\n所以，我们只能用vuex作为中转站，将页面组件获取的导航信息存储到vuex中。layout再从vuex中获取。\n\nlayout/default\n```javascript\nimport navigator from '@@/navigator/index.vue'\nexport default {\n  name: 'Music163',\n  components: { navigator },\n  data () {\n    return {\n    }\n  },\n  computed: {\n    menus () {\n      return this.$store.state.menu.menus\n    }\n  }\n}\n```\n\npages/index\n```javascript\nexport default {\n  fetch ({ store, params }) {\n    store.dispatch('menu/GET_MENU')\n  }\n}\n```\n\nstore/menu\n```javascript\nexport const state = () => ({\n  menus: []\n})\n\nexport const mutations = {\n  SET_MENU (state, menus) {\n    state.menus = menus\n  }\n}\n\nexport const actions = {\n  GET_MENU (store, menus) {\n    const data = [{\n      title: '发现音乐'\n    }, {\n      title: '我的音乐'\n    }]\n    store.commit('SET_MENU', data)\n  }\n}\n\n```","source":"_posts/nuxt/navigator.md","raw":"---\ntitle: nuxt导航共用\ncategories: nuxt\ntags: [nuxt]\ndate: 2020-1-20\n---  \n\n导航作为多个页面之间共用的部分，一般是动态的，即每个页面返回之前需要异步请求。\n\n服务端异步请求的方法有asyncData，fetch。但是这俩方法都只支持页面组件，不支持layout中使用。\n\n所以，我们只能用vuex作为中转站，将页面组件获取的导航信息存储到vuex中。layout再从vuex中获取。\n\nlayout/default\n```javascript\nimport navigator from '@@/navigator/index.vue'\nexport default {\n  name: 'Music163',\n  components: { navigator },\n  data () {\n    return {\n    }\n  },\n  computed: {\n    menus () {\n      return this.$store.state.menu.menus\n    }\n  }\n}\n```\n\npages/index\n```javascript\nexport default {\n  fetch ({ store, params }) {\n    store.dispatch('menu/GET_MENU')\n  }\n}\n```\n\nstore/menu\n```javascript\nexport const state = () => ({\n  menus: []\n})\n\nexport const mutations = {\n  SET_MENU (state, menus) {\n    state.menus = menus\n  }\n}\n\nexport const actions = {\n  GET_MENU (store, menus) {\n    const data = [{\n      title: '发现音乐'\n    }, {\n      title: '我的音乐'\n    }]\n    store.commit('SET_MENU', data)\n  }\n}\n\n```","slug":"nuxt/navigator","published":1,"updated":"2021-06-14T02:08:24.786Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6r000recq8dcba1eki","content":"<p>导航作为多个页面之间共用的部分，一般是动态的，即每个页面返回之前需要异步请求。</p>\n<p>服务端异步请求的方法有asyncData，fetch。但是这俩方法都只支持页面组件，不支持layout中使用。</p>\n<p>所以，我们只能用vuex作为中转站，将页面组件获取的导航信息存储到vuex中。layout再从vuex中获取。</p>\n<p>layout/default</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> navigator <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@@/navigator/index.vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Music163&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">components</span>: &#123; navigator &#125;,</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    menus () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.$store.state.menu.menus</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>pages/index</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  fetch (&#123; store, params &#125;) &#123;</span><br><span class=\"line\">    store.dispatch(<span class=\"string\">&#x27;menu/GET_MENU&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>store/menu</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> state = <span class=\"function\">() =&gt;</span> (&#123;</span><br><span class=\"line\">  <span class=\"attr\">menus</span>: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">  SET_MENU (state, menus) &#123;</span><br><span class=\"line\">    state.menus = menus</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">  GET_MENU (store, menus) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = [&#123;</span><br><span class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">&#x27;发现音乐&#x27;</span></span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">&#x27;我的音乐&#x27;</span></span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">    store.commit(<span class=\"string\">&#x27;SET_MENU&#x27;</span>, data)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>导航作为多个页面之间共用的部分，一般是动态的，即每个页面返回之前需要异步请求。</p>\n<p>服务端异步请求的方法有asyncData，fetch。但是这俩方法都只支持页面组件，不支持layout中使用。</p>\n<p>所以，我们只能用vuex作为中转站，将页面组件获取的导航信息存储到vuex中。layout再从vuex中获取。</p>\n<p>layout/default</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> navigator <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@@/navigator/index.vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Music163&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">components</span>: &#123; navigator &#125;,</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    menus () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.$store.state.menu.menus</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>pages/index</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  fetch (&#123; store, params &#125;) &#123;</span><br><span class=\"line\">    store.dispatch(<span class=\"string\">&#x27;menu/GET_MENU&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>store/menu</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> state = <span class=\"function\">() =&gt;</span> (&#123;</span><br><span class=\"line\">  <span class=\"attr\">menus</span>: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">  SET_MENU (state, menus) &#123;</span><br><span class=\"line\">    state.menus = menus</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">  GET_MENU (store, menus) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = [&#123;</span><br><span class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">&#x27;发现音乐&#x27;</span></span><br><span class=\"line\">    &#125;, &#123;</span><br><span class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">&#x27;我的音乐&#x27;</span></span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">    store.commit(<span class=\"string\">&#x27;SET_MENU&#x27;</span>, data)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"charles 重写请求","date":"2020-01-31T16:00:00.000Z","_content":"\ncharles 和fiddler既然都可以拦截返回体，没有理由不可以拦截请求是不是？\n\n我这里只说charles吧。\n\n###  配置重写域名\n1. 进入菜单 Tools -> Rewrite 可见如下界面\n\n![](/images/2019061301.png)\n\n2. 点击sets 区域的Add按钮添加重写任务。\n3. 在右侧的Locations区域点击Add按钮添加需要重写的请求的域名\n\n![](/images/2019061302.png)\n\n\n###  配置域名下的重写规则\n\n1. 选中上一个步骤中添加的域名，在Rules区域点击Add按钮\n\n2. 在Type项那里选择重写类型\n\n![](/images/2019061303.png)\n\n有以上几种类型可供选择。\n从上图可以看出来，重写规则可以重写请求头部和请求体，也可以重写返回头部和返回体。\n\n这个功能不仅能调试身份认证信息，还能调试跨域网站，以及接口数据。\n\n3. 在Match和Replace区域配置重写规则\n\n![](/images/2019061304.png)\n\n上图将请求头部uniType的值替换为105，仅当uniType的值为101的时候才替换。","source":"_posts/tools/charles-rewrite-header.md","raw":"---\ntitle: charles 重写请求\ncategories: 工具\ntags: [charles, debug]\ndate: 2020-2-1\n---\n\ncharles 和fiddler既然都可以拦截返回体，没有理由不可以拦截请求是不是？\n\n我这里只说charles吧。\n\n###  配置重写域名\n1. 进入菜单 Tools -> Rewrite 可见如下界面\n\n![](/images/2019061301.png)\n\n2. 点击sets 区域的Add按钮添加重写任务。\n3. 在右侧的Locations区域点击Add按钮添加需要重写的请求的域名\n\n![](/images/2019061302.png)\n\n\n###  配置域名下的重写规则\n\n1. 选中上一个步骤中添加的域名，在Rules区域点击Add按钮\n\n2. 在Type项那里选择重写类型\n\n![](/images/2019061303.png)\n\n有以上几种类型可供选择。\n从上图可以看出来，重写规则可以重写请求头部和请求体，也可以重写返回头部和返回体。\n\n这个功能不仅能调试身份认证信息，还能调试跨域网站，以及接口数据。\n\n3. 在Match和Replace区域配置重写规则\n\n![](/images/2019061304.png)\n\n上图将请求头部uniType的值替换为105，仅当uniType的值为101的时候才替换。","slug":"tools/charles-rewrite-header","published":1,"updated":"2021-06-14T02:09:23.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6s000secq86g2e10do","content":"<p>charles 和fiddler既然都可以拦截返回体，没有理由不可以拦截请求是不是？</p>\n<p>我这里只说charles吧。</p>\n<h3 id=\"配置重写域名\"><a href=\"#配置重写域名\" class=\"headerlink\" title=\"配置重写域名\"></a>配置重写域名</h3><ol>\n<li>进入菜单 Tools -&gt; Rewrite 可见如下界面</li>\n</ol>\n<p><img src=\"/images/2019061301.png\"></p>\n<ol start=\"2\">\n<li>点击sets 区域的Add按钮添加重写任务。</li>\n<li>在右侧的Locations区域点击Add按钮添加需要重写的请求的域名</li>\n</ol>\n<p><img src=\"/images/2019061302.png\"></p>\n<h3 id=\"配置域名下的重写规则\"><a href=\"#配置域名下的重写规则\" class=\"headerlink\" title=\"配置域名下的重写规则\"></a>配置域名下的重写规则</h3><ol>\n<li><p>选中上一个步骤中添加的域名，在Rules区域点击Add按钮</p>\n</li>\n<li><p>在Type项那里选择重写类型</p>\n</li>\n</ol>\n<p><img src=\"/images/2019061303.png\"></p>\n<p>有以上几种类型可供选择。<br>从上图可以看出来，重写规则可以重写请求头部和请求体，也可以重写返回头部和返回体。</p>\n<p>这个功能不仅能调试身份认证信息，还能调试跨域网站，以及接口数据。</p>\n<ol start=\"3\">\n<li>在Match和Replace区域配置重写规则</li>\n</ol>\n<p><img src=\"/images/2019061304.png\"></p>\n<p>上图将请求头部uniType的值替换为105，仅当uniType的值为101的时候才替换。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>charles 和fiddler既然都可以拦截返回体，没有理由不可以拦截请求是不是？</p>\n<p>我这里只说charles吧。</p>\n<h3 id=\"配置重写域名\"><a href=\"#配置重写域名\" class=\"headerlink\" title=\"配置重写域名\"></a>配置重写域名</h3><ol>\n<li>进入菜单 Tools -&gt; Rewrite 可见如下界面</li>\n</ol>\n<p><img src=\"/images/2019061301.png\"></p>\n<ol start=\"2\">\n<li>点击sets 区域的Add按钮添加重写任务。</li>\n<li>在右侧的Locations区域点击Add按钮添加需要重写的请求的域名</li>\n</ol>\n<p><img src=\"/images/2019061302.png\"></p>\n<h3 id=\"配置域名下的重写规则\"><a href=\"#配置域名下的重写规则\" class=\"headerlink\" title=\"配置域名下的重写规则\"></a>配置域名下的重写规则</h3><ol>\n<li><p>选中上一个步骤中添加的域名，在Rules区域点击Add按钮</p>\n</li>\n<li><p>在Type项那里选择重写类型</p>\n</li>\n</ol>\n<p><img src=\"/images/2019061303.png\"></p>\n<p>有以上几种类型可供选择。<br>从上图可以看出来，重写规则可以重写请求头部和请求体，也可以重写返回头部和返回体。</p>\n<p>这个功能不仅能调试身份认证信息，还能调试跨域网站，以及接口数据。</p>\n<ol start=\"3\">\n<li>在Match和Replace区域配置重写规则</li>\n</ol>\n<p><img src=\"/images/2019061304.png\"></p>\n<p>上图将请求头部uniType的值替换为105，仅当uniType的值为101的时候才替换。</p>\n"},{"title":"git 统计代码量","date":"2021-07-06T16:00:00.000Z","_content":" \n\n\n```\ngit log --format='%aN' | sort -u | while read name; do echo -en \"{\\\"name\\\":\\\"$name\\\",\\t\"; git log --author=\"$name\" --since='2021-04-01' --until='2021-06-30' --pretty=tformat: --numstat | awk '{ add += $1; subs += $2; loc += $1 + $2 } END { printf \"\\\"add\\\": %s, \\\"remove\\\": %s, \\\"result\\\": %s}\\n\", add, subs, loc }' -; done\n```\n\n以上方法有缺陷：\n- 只能统计所有人在某个仓库下、特定分支、特定时间段的代码量，通常统计master\n- 如果是多版本并行开发，若存在分支未合并到master的情况则统计不准确\n- 需要统计者先拉取仓库到本地\n\n代码量统计本身就是个比较不人性化的评估标准，先占个坑，如果真有看到有人写出一个完整的统计脚本或者自己有空就再说。\n\n","source":"_posts/tools/code-statistics.md","raw":"---\ntitle: git 统计代码量\ncategories: 工具\ntags: [git]\ndate: 2021-7-7\n--- \n\n\n```\ngit log --format='%aN' | sort -u | while read name; do echo -en \"{\\\"name\\\":\\\"$name\\\",\\t\"; git log --author=\"$name\" --since='2021-04-01' --until='2021-06-30' --pretty=tformat: --numstat | awk '{ add += $1; subs += $2; loc += $1 + $2 } END { printf \"\\\"add\\\": %s, \\\"remove\\\": %s, \\\"result\\\": %s}\\n\", add, subs, loc }' -; done\n```\n\n以上方法有缺陷：\n- 只能统计所有人在某个仓库下、特定分支、特定时间段的代码量，通常统计master\n- 如果是多版本并行开发，若存在分支未合并到master的情况则统计不准确\n- 需要统计者先拉取仓库到本地\n\n代码量统计本身就是个比较不人性化的评估标准，先占个坑，如果真有看到有人写出一个完整的统计脚本或者自己有空就再说。\n\n","slug":"tools/code-statistics","published":1,"updated":"2021-08-06T00:47:23.132Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6s000tecq8dxr4g0q2","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --format=&#x27;%aN&#x27; | sort -u | while read name; do echo -en &quot;&#123;\\&quot;name\\&quot;:\\&quot;$name\\&quot;,\\t&quot;; git log --author=&quot;$name&quot; --since=&#x27;2021-04-01&#x27; --until=&#x27;2021-06-30&#x27; --pretty=tformat: --numstat | awk &#x27;&#123; add += $1; subs += $2; loc += $1 + $2 &#125; END &#123; printf &quot;\\&quot;add\\&quot;: %s, \\&quot;remove\\&quot;: %s, \\&quot;result\\&quot;: %s&#125;\\n&quot;, add, subs, loc &#125;&#x27; -; done</span><br></pre></td></tr></table></figure>\n\n<p>以上方法有缺陷：</p>\n<ul>\n<li>只能统计所有人在某个仓库下、特定分支、特定时间段的代码量，通常统计master</li>\n<li>如果是多版本并行开发，若存在分支未合并到master的情况则统计不准确</li>\n<li>需要统计者先拉取仓库到本地</li>\n</ul>\n<p>代码量统计本身就是个比较不人性化的评估标准，先占个坑，如果真有看到有人写出一个完整的统计脚本或者自己有空就再说。</p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --format=&#x27;%aN&#x27; | sort -u | while read name; do echo -en &quot;&#123;\\&quot;name\\&quot;:\\&quot;$name\\&quot;,\\t&quot;; git log --author=&quot;$name&quot; --since=&#x27;2021-04-01&#x27; --until=&#x27;2021-06-30&#x27; --pretty=tformat: --numstat | awk &#x27;&#123; add += $1; subs += $2; loc += $1 + $2 &#125; END &#123; printf &quot;\\&quot;add\\&quot;: %s, \\&quot;remove\\&quot;: %s, \\&quot;result\\&quot;: %s&#125;\\n&quot;, add, subs, loc &#125;&#x27; -; done</span><br></pre></td></tr></table></figure>\n\n<p>以上方法有缺陷：</p>\n<ul>\n<li>只能统计所有人在某个仓库下、特定分支、特定时间段的代码量，通常统计master</li>\n<li>如果是多版本并行开发，若存在分支未合并到master的情况则统计不准确</li>\n<li>需要统计者先拉取仓库到本地</li>\n</ul>\n<p>代码量统计本身就是个比较不人性化的评估标准，先占个坑，如果真有看到有人写出一个完整的统计脚本或者自己有空就再说。</p>\n"},{"title":"抓包工具调试线上代码","date":"2020-02-01T16:00:00.000Z","_content":"\nweb应用代码混淆和压缩可以一定程度上缩短代码的请求时间，从而提高页面的访问体验，但是却不方便调试。这里教大家使用抓包工具调试线上代码。\n\n以下方法假设你已经成功用fiddler或者charles代理你要调试的线上应用。\n\n## fiddler拦截客户端代码\n\n很久以前遇到一个线上问题，本地不能复现，而且还是手机浏览器环境，而且客户端报错日志找不到相关的问题。当时想到的调试方法就是使用fiddler修改返回的js代码，开启vconsole的debug模式查看页面报错信息。这个方法其实就是拦截返回js并正则匹配内容进行修改。\n### 局部修改\n\n使用fildder可以拦截http返回内容并修改。\n\n#### 1.打开CustomRules.js\n\n点击fiddler的Rules=>Customize Rules，FiddlerScript editor工具就会自动的打开CustomRules.js文件。\n\n#### 2.修改 OnBeforeResponse 函数\n\n假如，我想把http://my.example.com/index.html 资源返回代码中的\"vconsole.debug = false\"改为\"vconsole.debug = true\"，只需要在这个函数中插入一个if语句。可以这样写：\n```\n//判断Url内容中是否包含特定内容，针对这个Url进行下面的操作\nif (oSession.uriContains(\"my.example.com/index.html\")) { \n  oSession.utilDecodeResponse();\n  oSession.utilReplaceInResponse(\"vconsole.debug = false\", \"vconsole.debug = true\");\n} \n```\n  \n这个方法比较难操作，毕竟你需要先找到要修改的代码，确保需要替换的内容是独一无二的，而且，如果想修改替换内容需要重新修改替换逻辑。更加简单粗暴的方法是直接下载代码下来，将这个资源代理到本地，想怎么修改就怎么修改。\n\n###  fiddler将代码代理到本地\n\n#### 1.找到你需要代理的请求\n![](/images/2019060101.jpeg)\n\n标黄的请求就是目标请求，拖拽到右侧的AutoResponse标签中\n\n#### 2.选中代理选项\n\n勾选右侧AutoResponse标签中的\n\n> 1. Enable rules：开启重定向使规则生效，指的是代理到本地这个规则。\n> 2. Umatched requests passthrough:不影响那些没满足我们处理条件的请求通过。\n\n![](/images/2019060102.png)\n\n#### 3.选择需要代理的到的本地文件\n\n上图右侧选中第一步拖进去的请求，并在右下角的Rule Editor中的第二个下拉框选择Find a file。此时会打开本地资源管理器要求你选择文件。\n\n![](/images/2019060103.png)\n\n#### 4.修改代码刷新页面\n\n修改上一步你选中的代码，保存之后刷新你要调试的页面，重新加载的资源就回变成你本地的资源。\n\n## charles拦截客户端代码\n\n### 设置map local\n\n在请求中找到需要调试的代码文件，右键，菜单中选择 Map Local\n![](/images/2019060501.png)\n弹窗中选择需要映射到的本地文件\n![](/images/2019060502.png)\n点OK即可。\n### 重新请求对应的资源\n发现已经是本地的代码文件了。这时候可以随意的修改代理到的本地文件调试。\n\n### 取消map\n在Tools->Map Local菜单下可以删除刚刚添加的map。\n![](/images/2019060503.png)\n\n\n","source":"_posts/tools/fiddler-debug-online.md","raw":"---\ntitle: 抓包工具调试线上代码\ncategories: 工具\ntags: [fiddler, debug]\ndate: 2020-2-2\n---\n\nweb应用代码混淆和压缩可以一定程度上缩短代码的请求时间，从而提高页面的访问体验，但是却不方便调试。这里教大家使用抓包工具调试线上代码。\n\n以下方法假设你已经成功用fiddler或者charles代理你要调试的线上应用。\n\n## fiddler拦截客户端代码\n\n很久以前遇到一个线上问题，本地不能复现，而且还是手机浏览器环境，而且客户端报错日志找不到相关的问题。当时想到的调试方法就是使用fiddler修改返回的js代码，开启vconsole的debug模式查看页面报错信息。这个方法其实就是拦截返回js并正则匹配内容进行修改。\n### 局部修改\n\n使用fildder可以拦截http返回内容并修改。\n\n#### 1.打开CustomRules.js\n\n点击fiddler的Rules=>Customize Rules，FiddlerScript editor工具就会自动的打开CustomRules.js文件。\n\n#### 2.修改 OnBeforeResponse 函数\n\n假如，我想把http://my.example.com/index.html 资源返回代码中的\"vconsole.debug = false\"改为\"vconsole.debug = true\"，只需要在这个函数中插入一个if语句。可以这样写：\n```\n//判断Url内容中是否包含特定内容，针对这个Url进行下面的操作\nif (oSession.uriContains(\"my.example.com/index.html\")) { \n  oSession.utilDecodeResponse();\n  oSession.utilReplaceInResponse(\"vconsole.debug = false\", \"vconsole.debug = true\");\n} \n```\n  \n这个方法比较难操作，毕竟你需要先找到要修改的代码，确保需要替换的内容是独一无二的，而且，如果想修改替换内容需要重新修改替换逻辑。更加简单粗暴的方法是直接下载代码下来，将这个资源代理到本地，想怎么修改就怎么修改。\n\n###  fiddler将代码代理到本地\n\n#### 1.找到你需要代理的请求\n![](/images/2019060101.jpeg)\n\n标黄的请求就是目标请求，拖拽到右侧的AutoResponse标签中\n\n#### 2.选中代理选项\n\n勾选右侧AutoResponse标签中的\n\n> 1. Enable rules：开启重定向使规则生效，指的是代理到本地这个规则。\n> 2. Umatched requests passthrough:不影响那些没满足我们处理条件的请求通过。\n\n![](/images/2019060102.png)\n\n#### 3.选择需要代理的到的本地文件\n\n上图右侧选中第一步拖进去的请求，并在右下角的Rule Editor中的第二个下拉框选择Find a file。此时会打开本地资源管理器要求你选择文件。\n\n![](/images/2019060103.png)\n\n#### 4.修改代码刷新页面\n\n修改上一步你选中的代码，保存之后刷新你要调试的页面，重新加载的资源就回变成你本地的资源。\n\n## charles拦截客户端代码\n\n### 设置map local\n\n在请求中找到需要调试的代码文件，右键，菜单中选择 Map Local\n![](/images/2019060501.png)\n弹窗中选择需要映射到的本地文件\n![](/images/2019060502.png)\n点OK即可。\n### 重新请求对应的资源\n发现已经是本地的代码文件了。这时候可以随意的修改代理到的本地文件调试。\n\n### 取消map\n在Tools->Map Local菜单下可以删除刚刚添加的map。\n![](/images/2019060503.png)\n\n\n","slug":"tools/fiddler-debug-online","published":1,"updated":"2021-06-14T02:09:52.341Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6t000uecq817tteq2c","content":"<p>web应用代码混淆和压缩可以一定程度上缩短代码的请求时间，从而提高页面的访问体验，但是却不方便调试。这里教大家使用抓包工具调试线上代码。</p>\n<p>以下方法假设你已经成功用fiddler或者charles代理你要调试的线上应用。</p>\n<h2 id=\"fiddler拦截客户端代码\"><a href=\"#fiddler拦截客户端代码\" class=\"headerlink\" title=\"fiddler拦截客户端代码\"></a>fiddler拦截客户端代码</h2><p>很久以前遇到一个线上问题，本地不能复现，而且还是手机浏览器环境，而且客户端报错日志找不到相关的问题。当时想到的调试方法就是使用fiddler修改返回的js代码，开启vconsole的debug模式查看页面报错信息。这个方法其实就是拦截返回js并正则匹配内容进行修改。</p>\n<h3 id=\"局部修改\"><a href=\"#局部修改\" class=\"headerlink\" title=\"局部修改\"></a>局部修改</h3><p>使用fildder可以拦截http返回内容并修改。</p>\n<h4 id=\"1-打开CustomRules-js\"><a href=\"#1-打开CustomRules-js\" class=\"headerlink\" title=\"1.打开CustomRules.js\"></a>1.打开CustomRules.js</h4><p>点击fiddler的Rules=&gt;Customize Rules，FiddlerScript editor工具就会自动的打开CustomRules.js文件。</p>\n<h4 id=\"2-修改-OnBeforeResponse-函数\"><a href=\"#2-修改-OnBeforeResponse-函数\" class=\"headerlink\" title=\"2.修改 OnBeforeResponse 函数\"></a>2.修改 OnBeforeResponse 函数</h4><p>假如，我想把<a href=\"http://my.example.com/index.html\">http://my.example.com/index.html</a> 资源返回代码中的”vconsole.debug = false”改为”vconsole.debug = true”，只需要在这个函数中插入一个if语句。可以这样写：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//判断Url内容中是否包含特定内容，针对这个Url进行下面的操作</span><br><span class=\"line\">if (oSession.uriContains(&quot;my.example.com/index.html&quot;)) &#123; </span><br><span class=\"line\">  oSession.utilDecodeResponse();</span><br><span class=\"line\">  oSession.utilReplaceInResponse(&quot;vconsole.debug = false&quot;, &quot;vconsole.debug = true&quot;);</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>这个方法比较难操作，毕竟你需要先找到要修改的代码，确保需要替换的内容是独一无二的，而且，如果想修改替换内容需要重新修改替换逻辑。更加简单粗暴的方法是直接下载代码下来，将这个资源代理到本地，想怎么修改就怎么修改。</p>\n<h3 id=\"fiddler将代码代理到本地\"><a href=\"#fiddler将代码代理到本地\" class=\"headerlink\" title=\"fiddler将代码代理到本地\"></a>fiddler将代码代理到本地</h3><h4 id=\"1-找到你需要代理的请求\"><a href=\"#1-找到你需要代理的请求\" class=\"headerlink\" title=\"1.找到你需要代理的请求\"></a>1.找到你需要代理的请求</h4><p><img src=\"/images/2019060101.jpeg\"></p>\n<p>标黄的请求就是目标请求，拖拽到右侧的AutoResponse标签中</p>\n<h4 id=\"2-选中代理选项\"><a href=\"#2-选中代理选项\" class=\"headerlink\" title=\"2.选中代理选项\"></a>2.选中代理选项</h4><p>勾选右侧AutoResponse标签中的</p>\n<blockquote>\n<ol>\n<li>Enable rules：开启重定向使规则生效，指的是代理到本地这个规则。</li>\n<li>Umatched requests passthrough:不影响那些没满足我们处理条件的请求通过。</li>\n</ol>\n</blockquote>\n<p><img src=\"/images/2019060102.png\"></p>\n<h4 id=\"3-选择需要代理的到的本地文件\"><a href=\"#3-选择需要代理的到的本地文件\" class=\"headerlink\" title=\"3.选择需要代理的到的本地文件\"></a>3.选择需要代理的到的本地文件</h4><p>上图右侧选中第一步拖进去的请求，并在右下角的Rule Editor中的第二个下拉框选择Find a file。此时会打开本地资源管理器要求你选择文件。</p>\n<p><img src=\"/images/2019060103.png\"></p>\n<h4 id=\"4-修改代码刷新页面\"><a href=\"#4-修改代码刷新页面\" class=\"headerlink\" title=\"4.修改代码刷新页面\"></a>4.修改代码刷新页面</h4><p>修改上一步你选中的代码，保存之后刷新你要调试的页面，重新加载的资源就回变成你本地的资源。</p>\n<h2 id=\"charles拦截客户端代码\"><a href=\"#charles拦截客户端代码\" class=\"headerlink\" title=\"charles拦截客户端代码\"></a>charles拦截客户端代码</h2><h3 id=\"设置map-local\"><a href=\"#设置map-local\" class=\"headerlink\" title=\"设置map local\"></a>设置map local</h3><p>在请求中找到需要调试的代码文件，右键，菜单中选择 Map Local<br><img src=\"/images/2019060501.png\"><br>弹窗中选择需要映射到的本地文件<br><img src=\"/images/2019060502.png\"><br>点OK即可。</p>\n<h3 id=\"重新请求对应的资源\"><a href=\"#重新请求对应的资源\" class=\"headerlink\" title=\"重新请求对应的资源\"></a>重新请求对应的资源</h3><p>发现已经是本地的代码文件了。这时候可以随意的修改代理到的本地文件调试。</p>\n<h3 id=\"取消map\"><a href=\"#取消map\" class=\"headerlink\" title=\"取消map\"></a>取消map</h3><p>在Tools-&gt;Map Local菜单下可以删除刚刚添加的map。<br><img src=\"/images/2019060503.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>web应用代码混淆和压缩可以一定程度上缩短代码的请求时间，从而提高页面的访问体验，但是却不方便调试。这里教大家使用抓包工具调试线上代码。</p>\n<p>以下方法假设你已经成功用fiddler或者charles代理你要调试的线上应用。</p>\n<h2 id=\"fiddler拦截客户端代码\"><a href=\"#fiddler拦截客户端代码\" class=\"headerlink\" title=\"fiddler拦截客户端代码\"></a>fiddler拦截客户端代码</h2><p>很久以前遇到一个线上问题，本地不能复现，而且还是手机浏览器环境，而且客户端报错日志找不到相关的问题。当时想到的调试方法就是使用fiddler修改返回的js代码，开启vconsole的debug模式查看页面报错信息。这个方法其实就是拦截返回js并正则匹配内容进行修改。</p>\n<h3 id=\"局部修改\"><a href=\"#局部修改\" class=\"headerlink\" title=\"局部修改\"></a>局部修改</h3><p>使用fildder可以拦截http返回内容并修改。</p>\n<h4 id=\"1-打开CustomRules-js\"><a href=\"#1-打开CustomRules-js\" class=\"headerlink\" title=\"1.打开CustomRules.js\"></a>1.打开CustomRules.js</h4><p>点击fiddler的Rules=&gt;Customize Rules，FiddlerScript editor工具就会自动的打开CustomRules.js文件。</p>\n<h4 id=\"2-修改-OnBeforeResponse-函数\"><a href=\"#2-修改-OnBeforeResponse-函数\" class=\"headerlink\" title=\"2.修改 OnBeforeResponse 函数\"></a>2.修改 OnBeforeResponse 函数</h4><p>假如，我想把<a href=\"http://my.example.com/index.html\">http://my.example.com/index.html</a> 资源返回代码中的”vconsole.debug = false”改为”vconsole.debug = true”，只需要在这个函数中插入一个if语句。可以这样写：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//判断Url内容中是否包含特定内容，针对这个Url进行下面的操作</span><br><span class=\"line\">if (oSession.uriContains(&quot;my.example.com/index.html&quot;)) &#123; </span><br><span class=\"line\">  oSession.utilDecodeResponse();</span><br><span class=\"line\">  oSession.utilReplaceInResponse(&quot;vconsole.debug = false&quot;, &quot;vconsole.debug = true&quot;);</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>这个方法比较难操作，毕竟你需要先找到要修改的代码，确保需要替换的内容是独一无二的，而且，如果想修改替换内容需要重新修改替换逻辑。更加简单粗暴的方法是直接下载代码下来，将这个资源代理到本地，想怎么修改就怎么修改。</p>\n<h3 id=\"fiddler将代码代理到本地\"><a href=\"#fiddler将代码代理到本地\" class=\"headerlink\" title=\"fiddler将代码代理到本地\"></a>fiddler将代码代理到本地</h3><h4 id=\"1-找到你需要代理的请求\"><a href=\"#1-找到你需要代理的请求\" class=\"headerlink\" title=\"1.找到你需要代理的请求\"></a>1.找到你需要代理的请求</h4><p><img src=\"/images/2019060101.jpeg\"></p>\n<p>标黄的请求就是目标请求，拖拽到右侧的AutoResponse标签中</p>\n<h4 id=\"2-选中代理选项\"><a href=\"#2-选中代理选项\" class=\"headerlink\" title=\"2.选中代理选项\"></a>2.选中代理选项</h4><p>勾选右侧AutoResponse标签中的</p>\n<blockquote>\n<ol>\n<li>Enable rules：开启重定向使规则生效，指的是代理到本地这个规则。</li>\n<li>Umatched requests passthrough:不影响那些没满足我们处理条件的请求通过。</li>\n</ol>\n</blockquote>\n<p><img src=\"/images/2019060102.png\"></p>\n<h4 id=\"3-选择需要代理的到的本地文件\"><a href=\"#3-选择需要代理的到的本地文件\" class=\"headerlink\" title=\"3.选择需要代理的到的本地文件\"></a>3.选择需要代理的到的本地文件</h4><p>上图右侧选中第一步拖进去的请求，并在右下角的Rule Editor中的第二个下拉框选择Find a file。此时会打开本地资源管理器要求你选择文件。</p>\n<p><img src=\"/images/2019060103.png\"></p>\n<h4 id=\"4-修改代码刷新页面\"><a href=\"#4-修改代码刷新页面\" class=\"headerlink\" title=\"4.修改代码刷新页面\"></a>4.修改代码刷新页面</h4><p>修改上一步你选中的代码，保存之后刷新你要调试的页面，重新加载的资源就回变成你本地的资源。</p>\n<h2 id=\"charles拦截客户端代码\"><a href=\"#charles拦截客户端代码\" class=\"headerlink\" title=\"charles拦截客户端代码\"></a>charles拦截客户端代码</h2><h3 id=\"设置map-local\"><a href=\"#设置map-local\" class=\"headerlink\" title=\"设置map local\"></a>设置map local</h3><p>在请求中找到需要调试的代码文件，右键，菜单中选择 Map Local<br><img src=\"/images/2019060501.png\"><br>弹窗中选择需要映射到的本地文件<br><img src=\"/images/2019060502.png\"><br>点OK即可。</p>\n<h3 id=\"重新请求对应的资源\"><a href=\"#重新请求对应的资源\" class=\"headerlink\" title=\"重新请求对应的资源\"></a>重新请求对应的资源</h3><p>发现已经是本地的代码文件了。这时候可以随意的修改代理到的本地文件调试。</p>\n<h3 id=\"取消map\"><a href=\"#取消map\" class=\"headerlink\" title=\"取消map\"></a>取消map</h3><p>在Tools-&gt;Map Local菜单下可以删除刚刚添加的map。<br><img src=\"/images/2019060503.png\"></p>\n"},{"title":"git 常用命令","date":"2019-11-30T16:00:00.000Z","_content":"\n## 本地代码新建远程仓库\n\n如果本地配置的ssh 是其它域名下的，比如说公司内网gitlab，但是你此时想要创建的仓库是github上的，那代码推到远程仓库的时候需要使用https协议，而不是ssh，不然的话身份认证会失败的。\n\n```\ngit@github.com: Permission denied (publickey).\n```\n\n##### 远程：\n创建一个仓库， 假如链接为\n```\nhttps://github.com/sharemeans/vue.git/\n```\n\n##### 本地：\n```\ncd my-vue\ngit init\ngit add .\ngit commit -m \"项目初始化\"\ngit remote add origin https://github.com/sharemeans/vue.git/\n// 根据提示输入账号密码，成功之后代码自动上传\n// 代码推送到远程 -u表示推送成功后自动建立本地分支与远程分支的追踪\ngit push -u origin master\n```\n\n## 查看远程仓库地址\n```\ngit remote -v\n```\n\n## 查看本地分支跟踪的远程分支\n```\ngit branch -vv\n```\n## 基于远程分支A创建本地跟踪分支A\n```\ngit checkout -b A origin/A\n```\n\n## 基于本地分支B创建本地分支A\n```\ngit checkout -b A B\n```\n\n## 基于远程分支创建本地同名跟踪分支\n```\ngit checkout --track origin/A\n```\n\n## 合并A 分支到当前分支，且所有冲突都采用A分支\n```\ngit pull -s recursive -X theirs A\n```\n\n## 恢复被删除的stash\n1. 输出最近删除的stash\n```\ngit fsck --lost-found\n/**\n* dangling commit 42c7122df57f326a6e1e0498fb89af06ab521192\n*/\n```\n2. 从输出列表中找出需要恢复的id：\n```\ngit stash apply 42c7122df57f326a6e1e0498fb89af06ab521192\n```\n\n## 重命名当前分支\n\n```\n// 重命名为main\ngit branch -m main\ngit branch -M Main\n```\n\n## 打tag\n1. 切换到要打tag的分支\n2. 基于某个commit打tag\n```\ngit tag -a [tagname] -m [tagmessage]\n```\n3. 提交tag到远程\n```\ngit push origin [tagname]\n```\n4. 提交所有tag到远程\n```\ngit push origin --tags\n// 或者\ngit push --tags\n```\n5. 删除tag\n```\n// 第一步：删除本地tag\ngit tag -d [tagname]\n// 第二步：推到远程\ngit push origin :refs/tags/[tagname]\n```\n\n## vscode git密码重置\nvscode会帮我们记住git账号密码。当git账号变更导致vscode提示身份校验失败时，需要重置密码。\n```\n// 清空密码\ngit config --system --unset credential.helper\n```\n\n重置后，再次提交代码，会弹窗提示输入新的账号密码\n\n## 参考资料\n\nhttp://blog.codingplayboy.com/2017/04/06/git_branch/\nhttp://blog.codingplayboy.com/2017/04/14/git_rebase/#rebase","source":"_posts/tools/git.md","raw":"---\ntitle: git 常用命令\ncategories: 工具\ntags: [git]\ndate: 2019-12-1\n---\n\n## 本地代码新建远程仓库\n\n如果本地配置的ssh 是其它域名下的，比如说公司内网gitlab，但是你此时想要创建的仓库是github上的，那代码推到远程仓库的时候需要使用https协议，而不是ssh，不然的话身份认证会失败的。\n\n```\ngit@github.com: Permission denied (publickey).\n```\n\n##### 远程：\n创建一个仓库， 假如链接为\n```\nhttps://github.com/sharemeans/vue.git/\n```\n\n##### 本地：\n```\ncd my-vue\ngit init\ngit add .\ngit commit -m \"项目初始化\"\ngit remote add origin https://github.com/sharemeans/vue.git/\n// 根据提示输入账号密码，成功之后代码自动上传\n// 代码推送到远程 -u表示推送成功后自动建立本地分支与远程分支的追踪\ngit push -u origin master\n```\n\n## 查看远程仓库地址\n```\ngit remote -v\n```\n\n## 查看本地分支跟踪的远程分支\n```\ngit branch -vv\n```\n## 基于远程分支A创建本地跟踪分支A\n```\ngit checkout -b A origin/A\n```\n\n## 基于本地分支B创建本地分支A\n```\ngit checkout -b A B\n```\n\n## 基于远程分支创建本地同名跟踪分支\n```\ngit checkout --track origin/A\n```\n\n## 合并A 分支到当前分支，且所有冲突都采用A分支\n```\ngit pull -s recursive -X theirs A\n```\n\n## 恢复被删除的stash\n1. 输出最近删除的stash\n```\ngit fsck --lost-found\n/**\n* dangling commit 42c7122df57f326a6e1e0498fb89af06ab521192\n*/\n```\n2. 从输出列表中找出需要恢复的id：\n```\ngit stash apply 42c7122df57f326a6e1e0498fb89af06ab521192\n```\n\n## 重命名当前分支\n\n```\n// 重命名为main\ngit branch -m main\ngit branch -M Main\n```\n\n## 打tag\n1. 切换到要打tag的分支\n2. 基于某个commit打tag\n```\ngit tag -a [tagname] -m [tagmessage]\n```\n3. 提交tag到远程\n```\ngit push origin [tagname]\n```\n4. 提交所有tag到远程\n```\ngit push origin --tags\n// 或者\ngit push --tags\n```\n5. 删除tag\n```\n// 第一步：删除本地tag\ngit tag -d [tagname]\n// 第二步：推到远程\ngit push origin :refs/tags/[tagname]\n```\n\n## vscode git密码重置\nvscode会帮我们记住git账号密码。当git账号变更导致vscode提示身份校验失败时，需要重置密码。\n```\n// 清空密码\ngit config --system --unset credential.helper\n```\n\n重置后，再次提交代码，会弹窗提示输入新的账号密码\n\n## 参考资料\n\nhttp://blog.codingplayboy.com/2017/04/06/git_branch/\nhttp://blog.codingplayboy.com/2017/04/14/git_rebase/#rebase","slug":"tools/git","published":1,"updated":"2021-08-06T00:47:04.925Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6t000vecq8ekuj3yxb","content":"<h2 id=\"本地代码新建远程仓库\"><a href=\"#本地代码新建远程仓库\" class=\"headerlink\" title=\"本地代码新建远程仓库\"></a>本地代码新建远程仓库</h2><p>如果本地配置的ssh 是其它域名下的，比如说公司内网gitlab，但是你此时想要创建的仓库是github上的，那代码推到远程仓库的时候需要使用https协议，而不是ssh，不然的话身份认证会失败的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git@github.com: Permission denied (publickey).</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"远程：\"><a href=\"#远程：\" class=\"headerlink\" title=\"远程：\"></a>远程：</h5><p>创建一个仓库， 假如链接为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/sharemeans/vue.git/</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"本地：\"><a href=\"#本地：\" class=\"headerlink\" title=\"本地：\"></a>本地：</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd my-vue</span><br><span class=\"line\">git init</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;项目初始化&quot;</span><br><span class=\"line\">git remote add origin https://github.com/sharemeans/vue.git/</span><br><span class=\"line\">// 根据提示输入账号密码，成功之后代码自动上传</span><br><span class=\"line\">// 代码推送到远程 -u表示推送成功后自动建立本地分支与远程分支的追踪</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看远程仓库地址\"><a href=\"#查看远程仓库地址\" class=\"headerlink\" title=\"查看远程仓库地址\"></a>查看远程仓库地址</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看本地分支跟踪的远程分支\"><a href=\"#查看本地分支跟踪的远程分支\" class=\"headerlink\" title=\"查看本地分支跟踪的远程分支\"></a>查看本地分支跟踪的远程分支</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -vv</span><br></pre></td></tr></table></figure>\n<h2 id=\"基于远程分支A创建本地跟踪分支A\"><a href=\"#基于远程分支A创建本地跟踪分支A\" class=\"headerlink\" title=\"基于远程分支A创建本地跟踪分支A\"></a>基于远程分支A创建本地跟踪分支A</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b A origin/A</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基于本地分支B创建本地分支A\"><a href=\"#基于本地分支B创建本地分支A\" class=\"headerlink\" title=\"基于本地分支B创建本地分支A\"></a>基于本地分支B创建本地分支A</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b A B</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基于远程分支创建本地同名跟踪分支\"><a href=\"#基于远程分支创建本地同名跟踪分支\" class=\"headerlink\" title=\"基于远程分支创建本地同名跟踪分支\"></a>基于远程分支创建本地同名跟踪分支</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout --track origin/A</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"合并A-分支到当前分支，且所有冲突都采用A分支\"><a href=\"#合并A-分支到当前分支，且所有冲突都采用A分支\" class=\"headerlink\" title=\"合并A 分支到当前分支，且所有冲突都采用A分支\"></a>合并A 分支到当前分支，且所有冲突都采用A分支</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull -s recursive -X theirs A</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"恢复被删除的stash\"><a href=\"#恢复被删除的stash\" class=\"headerlink\" title=\"恢复被删除的stash\"></a>恢复被删除的stash</h2><ol>\n<li>输出最近删除的stash<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fsck --lost-found</span><br><span class=\"line\">/**</span><br><span class=\"line\">* dangling commit 42c7122df57f326a6e1e0498fb89af06ab521192</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure></li>\n<li>从输出列表中找出需要恢复的id：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash apply 42c7122df57f326a6e1e0498fb89af06ab521192</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"重命名当前分支\"><a href=\"#重命名当前分支\" class=\"headerlink\" title=\"重命名当前分支\"></a>重命名当前分支</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 重命名为main</span><br><span class=\"line\">git branch -m main</span><br><span class=\"line\">git branch -M Main</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"打tag\"><a href=\"#打tag\" class=\"headerlink\" title=\"打tag\"></a>打tag</h2><ol>\n<li>切换到要打tag的分支</li>\n<li>基于某个commit打tag<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -a [tagname] -m [tagmessage]</span><br></pre></td></tr></table></figure></li>\n<li>提交tag到远程<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin [tagname]</span><br></pre></td></tr></table></figure></li>\n<li>提交所有tag到远程<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin --tags</span><br><span class=\"line\">// 或者</span><br><span class=\"line\">git push --tags</span><br></pre></td></tr></table></figure></li>\n<li>删除tag<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 第一步：删除本地tag</span><br><span class=\"line\">git tag -d [tagname]</span><br><span class=\"line\">// 第二步：推到远程</span><br><span class=\"line\">git push origin :refs/tags/[tagname]</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"vscode-git密码重置\"><a href=\"#vscode-git密码重置\" class=\"headerlink\" title=\"vscode git密码重置\"></a>vscode git密码重置</h2><p>vscode会帮我们记住git账号密码。当git账号变更导致vscode提示身份校验失败时，需要重置密码。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 清空密码</span><br><span class=\"line\">git config --system --unset credential.helper</span><br></pre></td></tr></table></figure>\n\n<p>重置后，再次提交代码，会弹窗提示输入新的账号密码</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"http://blog.codingplayboy.com/2017/04/06/git_branch/\">http://blog.codingplayboy.com/2017/04/06/git_branch/</a><br><a href=\"http://blog.codingplayboy.com/2017/04/14/git_rebase/#rebase\">http://blog.codingplayboy.com/2017/04/14/git_rebase/#rebase</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"本地代码新建远程仓库\"><a href=\"#本地代码新建远程仓库\" class=\"headerlink\" title=\"本地代码新建远程仓库\"></a>本地代码新建远程仓库</h2><p>如果本地配置的ssh 是其它域名下的，比如说公司内网gitlab，但是你此时想要创建的仓库是github上的，那代码推到远程仓库的时候需要使用https协议，而不是ssh，不然的话身份认证会失败的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git@github.com: Permission denied (publickey).</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"远程：\"><a href=\"#远程：\" class=\"headerlink\" title=\"远程：\"></a>远程：</h5><p>创建一个仓库， 假如链接为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://github.com/sharemeans/vue.git/</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"本地：\"><a href=\"#本地：\" class=\"headerlink\" title=\"本地：\"></a>本地：</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd my-vue</span><br><span class=\"line\">git init</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;项目初始化&quot;</span><br><span class=\"line\">git remote add origin https://github.com/sharemeans/vue.git/</span><br><span class=\"line\">// 根据提示输入账号密码，成功之后代码自动上传</span><br><span class=\"line\">// 代码推送到远程 -u表示推送成功后自动建立本地分支与远程分支的追踪</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看远程仓库地址\"><a href=\"#查看远程仓库地址\" class=\"headerlink\" title=\"查看远程仓库地址\"></a>查看远程仓库地址</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看本地分支跟踪的远程分支\"><a href=\"#查看本地分支跟踪的远程分支\" class=\"headerlink\" title=\"查看本地分支跟踪的远程分支\"></a>查看本地分支跟踪的远程分支</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -vv</span><br></pre></td></tr></table></figure>\n<h2 id=\"基于远程分支A创建本地跟踪分支A\"><a href=\"#基于远程分支A创建本地跟踪分支A\" class=\"headerlink\" title=\"基于远程分支A创建本地跟踪分支A\"></a>基于远程分支A创建本地跟踪分支A</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b A origin/A</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基于本地分支B创建本地分支A\"><a href=\"#基于本地分支B创建本地分支A\" class=\"headerlink\" title=\"基于本地分支B创建本地分支A\"></a>基于本地分支B创建本地分支A</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b A B</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基于远程分支创建本地同名跟踪分支\"><a href=\"#基于远程分支创建本地同名跟踪分支\" class=\"headerlink\" title=\"基于远程分支创建本地同名跟踪分支\"></a>基于远程分支创建本地同名跟踪分支</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout --track origin/A</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"合并A-分支到当前分支，且所有冲突都采用A分支\"><a href=\"#合并A-分支到当前分支，且所有冲突都采用A分支\" class=\"headerlink\" title=\"合并A 分支到当前分支，且所有冲突都采用A分支\"></a>合并A 分支到当前分支，且所有冲突都采用A分支</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull -s recursive -X theirs A</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"恢复被删除的stash\"><a href=\"#恢复被删除的stash\" class=\"headerlink\" title=\"恢复被删除的stash\"></a>恢复被删除的stash</h2><ol>\n<li>输出最近删除的stash<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fsck --lost-found</span><br><span class=\"line\">/**</span><br><span class=\"line\">* dangling commit 42c7122df57f326a6e1e0498fb89af06ab521192</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure></li>\n<li>从输出列表中找出需要恢复的id：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash apply 42c7122df57f326a6e1e0498fb89af06ab521192</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"重命名当前分支\"><a href=\"#重命名当前分支\" class=\"headerlink\" title=\"重命名当前分支\"></a>重命名当前分支</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 重命名为main</span><br><span class=\"line\">git branch -m main</span><br><span class=\"line\">git branch -M Main</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"打tag\"><a href=\"#打tag\" class=\"headerlink\" title=\"打tag\"></a>打tag</h2><ol>\n<li>切换到要打tag的分支</li>\n<li>基于某个commit打tag<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -a [tagname] -m [tagmessage]</span><br></pre></td></tr></table></figure></li>\n<li>提交tag到远程<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin [tagname]</span><br></pre></td></tr></table></figure></li>\n<li>提交所有tag到远程<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin --tags</span><br><span class=\"line\">// 或者</span><br><span class=\"line\">git push --tags</span><br></pre></td></tr></table></figure></li>\n<li>删除tag<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 第一步：删除本地tag</span><br><span class=\"line\">git tag -d [tagname]</span><br><span class=\"line\">// 第二步：推到远程</span><br><span class=\"line\">git push origin :refs/tags/[tagname]</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"vscode-git密码重置\"><a href=\"#vscode-git密码重置\" class=\"headerlink\" title=\"vscode git密码重置\"></a>vscode git密码重置</h2><p>vscode会帮我们记住git账号密码。当git账号变更导致vscode提示身份校验失败时，需要重置密码。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 清空密码</span><br><span class=\"line\">git config --system --unset credential.helper</span><br></pre></td></tr></table></figure>\n\n<p>重置后，再次提交代码，会弹窗提示输入新的账号密码</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"http://blog.codingplayboy.com/2017/04/06/git_branch/\">http://blog.codingplayboy.com/2017/04/06/git_branch/</a><br><a href=\"http://blog.codingplayboy.com/2017/04/14/git_rebase/#rebase\">http://blog.codingplayboy.com/2017/04/14/git_rebase/#rebase</a></p>\n"},{"title":"fiddler捕获https包的原理","date":"2020-09-30T16:00:00.000Z","_content":"\n\nfiddler代理http协议大家都清楚原理，实际上就是正向代理。正向代理是什么呢？简单来说，就是，一方面，fiddler对浏览器客户端伪造成服务器，另一方面对真实的服务器伪造成客户端。\n\n那么，https作为一种双向验证机制的协议，是如何让fiddler实现抓包的呢？\n\nhttps其实就是比http多了个加密和解密的过程。\n\nhttps的作用，其实依赖于证书的信任机制。受信任的证书机构向服务端颁发CA证书，浏览器以及系统默认保存了该机构的根证书。\n\nfiddler其实是自己造了一个证书，如果想抓客户端的流量，就需要客户端手动信任该证书。这也是https抓包的关键。\n\n具体步骤如下图：\n![密钥交换与数据传输过程](/images/2019090102.png)\n\n\n","source":"_posts/tools/https-through-fiddler.md","raw":"---\ntitle: fiddler捕获https包的原理\ncategories: 工具\ntags: [fiddler]\ndate: 2020-10-1\n---\n\n\nfiddler代理http协议大家都清楚原理，实际上就是正向代理。正向代理是什么呢？简单来说，就是，一方面，fiddler对浏览器客户端伪造成服务器，另一方面对真实的服务器伪造成客户端。\n\n那么，https作为一种双向验证机制的协议，是如何让fiddler实现抓包的呢？\n\nhttps其实就是比http多了个加密和解密的过程。\n\nhttps的作用，其实依赖于证书的信任机制。受信任的证书机构向服务端颁发CA证书，浏览器以及系统默认保存了该机构的根证书。\n\nfiddler其实是自己造了一个证书，如果想抓客户端的流量，就需要客户端手动信任该证书。这也是https抓包的关键。\n\n具体步骤如下图：\n![密钥交换与数据传输过程](/images/2019090102.png)\n\n\n","slug":"tools/https-through-fiddler","published":1,"updated":"2021-06-14T02:09:36.976Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6t000wecq8cq7u17i2","content":"<p>fiddler代理http协议大家都清楚原理，实际上就是正向代理。正向代理是什么呢？简单来说，就是，一方面，fiddler对浏览器客户端伪造成服务器，另一方面对真实的服务器伪造成客户端。</p>\n<p>那么，https作为一种双向验证机制的协议，是如何让fiddler实现抓包的呢？</p>\n<p>https其实就是比http多了个加密和解密的过程。</p>\n<p>https的作用，其实依赖于证书的信任机制。受信任的证书机构向服务端颁发CA证书，浏览器以及系统默认保存了该机构的根证书。</p>\n<p>fiddler其实是自己造了一个证书，如果想抓客户端的流量，就需要客户端手动信任该证书。这也是https抓包的关键。</p>\n<p>具体步骤如下图：<br><img src=\"/images/2019090102.png\" alt=\"密钥交换与数据传输过程\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>fiddler代理http协议大家都清楚原理，实际上就是正向代理。正向代理是什么呢？简单来说，就是，一方面，fiddler对浏览器客户端伪造成服务器，另一方面对真实的服务器伪造成客户端。</p>\n<p>那么，https作为一种双向验证机制的协议，是如何让fiddler实现抓包的呢？</p>\n<p>https其实就是比http多了个加密和解密的过程。</p>\n<p>https的作用，其实依赖于证书的信任机制。受信任的证书机构向服务端颁发CA证书，浏览器以及系统默认保存了该机构的根证书。</p>\n<p>fiddler其实是自己造了一个证书，如果想抓客户端的流量，就需要客户端手动信任该证书。这也是https抓包的关键。</p>\n<p>具体步骤如下图：<br><img src=\"/images/2019090102.png\" alt=\"密钥交换与数据传输过程\"></p>\n"},{"title":"npm学习总结","date":"2021-05-19T16:00:00.000Z","_content":" \n\n## dependencies\n\n如果是工具库之类的项目，发布之后，第三方使用时会安装dependencides，优先安装在第三方的目录下。\n\n项目依赖和工具库依赖不冲突，则依赖安装到项目下，否则就会在这个工具库的目录下再安装一份。\n\n## devDependencies\n\n普通业务项目开发时，dependencies和devDependencies区别感知不大。但是如果我们开发的是一个工具库，publish之后生成的package.json中是没有devDependencies的。\n\n## peerDependencies\n\n同等依赖。这个同等的意思是，你想引用我这个库，你最好也一起安装这些依赖，要和我平级安装在你的目录下，而不是像dependencies一样有可能安装在我的库目录下面。\n\n## 命令\n\n## npm install\n\nnpm install的依赖安装处理逻辑如下图：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-8/1623119747450-image.png)\n\n### 项目依赖和工具库依赖冲突\n\n项目依赖和工具库依赖不冲突，则依赖安装到项目下，否则就会在这个工具库的目录下再安装一份。\n\n项目有如下依赖：\n```\n{\n  \"dependencies\": {\n    \"fetch\": \"^1.1.0\",\n    \"biskviit\": \"1.0.1\"\n  }\n}\n```\nfetch@^1.1.0的依赖如下：\n```\n{\n  \"dependencies\": {\n    \"biskviit\": \"2.0.1\"\n  }\n}\n```\n\n由于项目顶级依赖和fetch对biskviit的版本不一致，存在冲突，所以biskviit在项目的node_modules目录下安装一份1.0.1的版本，然后在node_modules/fetch/node_modules目录下安装2.0.1版本。\n\n\n### 工具库之间依赖冲突\n\n假如项目的依赖如下：\n```\n{\n  \"dependencies\": {\n    \"fetch\": \"^1.1.0\",\n    \"biskviit\": \"2.0.0\"\n  }\n}\n```\nfetch@^1.1.0的依赖如下：\n```\n{\n  \"dependencies\": {\n    \"biskviit\": \"1.0.1\"\n  }\n}\n```\n安装fetch时，遇到了biskviit@1.0.1，会先检查项目依赖有没有biskviit。找到了，但是版本不一致，npm会选择较高的版本安装在顶级node_modules目录下，其余版本安装在各自工具库的目录下。\n\n### npm init\n初始化npm管理的项目，结果是一个package.json文件。\n\n也可以通过config命令修改单个字段：\n```\nnpm config set init.author.name \"Lucas\"\nnpm config set init.author.email \"lucasXXXXXX@gmail.com\"\nnpm config set init.author.url \"lucasXXXXX.com\"\nnpm config set init.license \"MIT\"\n```\n\n### npm ls\n\n列出当前目录下npm包列表，以及之间的依赖关系。\n\n### npm config get cache \n获取npm包本地缓存的目录\n\n### 私有npm搭建工具\n\nnexus、verdaccio 以及 cnpm\n\n### npx 命令工具\n```\nnpm install -g npx\n```\n\n假如，npm安装了webpack-cli，package.json有个script为：\n```\n\"scripts\": {\n    \"dev\": \"webpack\"\n}\n```\n我们可以在命令行运行npm run dev执行webpack命令，但是无法在命令行直接执行webpack。只能这样：\n```\n./node_modules/.bin/webpack \n```\n\nnpx的作用就是帮我们找到命令的路径并执行，其实就是个语法糖。\n```\nnpx webpack \n```\n\n## nrm 镜像管理\n设置镜像的命令：\n```\nnpm config set registry http://registry.npm.taobao.org\n```\n我们不免会出现要切换镜像的时候，但是镜像的地址可能忘记了。这时候需要一个镜像管理工具，nrm。\n```\nnpm install -g nrm\nnrm add taobao/*或者其它名字*/ http://registry.npm.taobao.org\nnrm ls // 查看镜像列表，以及当前使用的镜像\nnrm use taobao // 切换镜像\n```\n\n## 参考资料\n* [没想到你是这样的npm install](https://mp.weixin.qq.com/s/LATAribargpMvDa_nrzACQ)\n* [npm 安装机制及企业级部署私服原理](https://www.yuque.com/allenstone/learn/crd8kf)","source":"_posts/tools/npm-learn.md","raw":"---\ntitle: npm学习总结\ncategories: 工具\ntags: [npm]\ndate: 2021-5-20\n--- \n\n## dependencies\n\n如果是工具库之类的项目，发布之后，第三方使用时会安装dependencides，优先安装在第三方的目录下。\n\n项目依赖和工具库依赖不冲突，则依赖安装到项目下，否则就会在这个工具库的目录下再安装一份。\n\n## devDependencies\n\n普通业务项目开发时，dependencies和devDependencies区别感知不大。但是如果我们开发的是一个工具库，publish之后生成的package.json中是没有devDependencies的。\n\n## peerDependencies\n\n同等依赖。这个同等的意思是，你想引用我这个库，你最好也一起安装这些依赖，要和我平级安装在你的目录下，而不是像dependencies一样有可能安装在我的库目录下面。\n\n## 命令\n\n## npm install\n\nnpm install的依赖安装处理逻辑如下图：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-8/1623119747450-image.png)\n\n### 项目依赖和工具库依赖冲突\n\n项目依赖和工具库依赖不冲突，则依赖安装到项目下，否则就会在这个工具库的目录下再安装一份。\n\n项目有如下依赖：\n```\n{\n  \"dependencies\": {\n    \"fetch\": \"^1.1.0\",\n    \"biskviit\": \"1.0.1\"\n  }\n}\n```\nfetch@^1.1.0的依赖如下：\n```\n{\n  \"dependencies\": {\n    \"biskviit\": \"2.0.1\"\n  }\n}\n```\n\n由于项目顶级依赖和fetch对biskviit的版本不一致，存在冲突，所以biskviit在项目的node_modules目录下安装一份1.0.1的版本，然后在node_modules/fetch/node_modules目录下安装2.0.1版本。\n\n\n### 工具库之间依赖冲突\n\n假如项目的依赖如下：\n```\n{\n  \"dependencies\": {\n    \"fetch\": \"^1.1.0\",\n    \"biskviit\": \"2.0.0\"\n  }\n}\n```\nfetch@^1.1.0的依赖如下：\n```\n{\n  \"dependencies\": {\n    \"biskviit\": \"1.0.1\"\n  }\n}\n```\n安装fetch时，遇到了biskviit@1.0.1，会先检查项目依赖有没有biskviit。找到了，但是版本不一致，npm会选择较高的版本安装在顶级node_modules目录下，其余版本安装在各自工具库的目录下。\n\n### npm init\n初始化npm管理的项目，结果是一个package.json文件。\n\n也可以通过config命令修改单个字段：\n```\nnpm config set init.author.name \"Lucas\"\nnpm config set init.author.email \"lucasXXXXXX@gmail.com\"\nnpm config set init.author.url \"lucasXXXXX.com\"\nnpm config set init.license \"MIT\"\n```\n\n### npm ls\n\n列出当前目录下npm包列表，以及之间的依赖关系。\n\n### npm config get cache \n获取npm包本地缓存的目录\n\n### 私有npm搭建工具\n\nnexus、verdaccio 以及 cnpm\n\n### npx 命令工具\n```\nnpm install -g npx\n```\n\n假如，npm安装了webpack-cli，package.json有个script为：\n```\n\"scripts\": {\n    \"dev\": \"webpack\"\n}\n```\n我们可以在命令行运行npm run dev执行webpack命令，但是无法在命令行直接执行webpack。只能这样：\n```\n./node_modules/.bin/webpack \n```\n\nnpx的作用就是帮我们找到命令的路径并执行，其实就是个语法糖。\n```\nnpx webpack \n```\n\n## nrm 镜像管理\n设置镜像的命令：\n```\nnpm config set registry http://registry.npm.taobao.org\n```\n我们不免会出现要切换镜像的时候，但是镜像的地址可能忘记了。这时候需要一个镜像管理工具，nrm。\n```\nnpm install -g nrm\nnrm add taobao/*或者其它名字*/ http://registry.npm.taobao.org\nnrm ls // 查看镜像列表，以及当前使用的镜像\nnrm use taobao // 切换镜像\n```\n\n## 参考资料\n* [没想到你是这样的npm install](https://mp.weixin.qq.com/s/LATAribargpMvDa_nrzACQ)\n* [npm 安装机制及企业级部署私服原理](https://www.yuque.com/allenstone/learn/crd8kf)","slug":"tools/npm-learn","published":1,"updated":"2021-06-14T05:59:07.373Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6u000xecq8enkeb9x1","content":"<h2 id=\"dependencies\"><a href=\"#dependencies\" class=\"headerlink\" title=\"dependencies\"></a>dependencies</h2><p>如果是工具库之类的项目，发布之后，第三方使用时会安装dependencides，优先安装在第三方的目录下。</p>\n<p>项目依赖和工具库依赖不冲突，则依赖安装到项目下，否则就会在这个工具库的目录下再安装一份。</p>\n<h2 id=\"devDependencies\"><a href=\"#devDependencies\" class=\"headerlink\" title=\"devDependencies\"></a>devDependencies</h2><p>普通业务项目开发时，dependencies和devDependencies区别感知不大。但是如果我们开发的是一个工具库，publish之后生成的package.json中是没有devDependencies的。</p>\n<h2 id=\"peerDependencies\"><a href=\"#peerDependencies\" class=\"headerlink\" title=\"peerDependencies\"></a>peerDependencies</h2><p>同等依赖。这个同等的意思是，你想引用我这个库，你最好也一起安装这些依赖，要和我平级安装在你的目录下，而不是像dependencies一样有可能安装在我的库目录下面。</p>\n<h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><h2 id=\"npm-install\"><a href=\"#npm-install\" class=\"headerlink\" title=\"npm install\"></a>npm install</h2><p>npm install的依赖安装处理逻辑如下图：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-8/1623119747450-image.png\"></p>\n<h3 id=\"项目依赖和工具库依赖冲突\"><a href=\"#项目依赖和工具库依赖冲突\" class=\"headerlink\" title=\"项目依赖和工具库依赖冲突\"></a>项目依赖和工具库依赖冲突</h3><p>项目依赖和工具库依赖不冲突，则依赖安装到项目下，否则就会在这个工具库的目录下再安装一份。</p>\n<p>项目有如下依赖：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;dependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;fetch&quot;: &quot;^1.1.0&quot;,</span><br><span class=\"line\">    &quot;biskviit&quot;: &quot;1.0.1&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>fetch@^1.1.0的依赖如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;dependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;biskviit&quot;: &quot;2.0.1&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于项目顶级依赖和fetch对biskviit的版本不一致，存在冲突，所以biskviit在项目的node_modules目录下安装一份1.0.1的版本，然后在node_modules/fetch/node_modules目录下安装2.0.1版本。</p>\n<h3 id=\"工具库之间依赖冲突\"><a href=\"#工具库之间依赖冲突\" class=\"headerlink\" title=\"工具库之间依赖冲突\"></a>工具库之间依赖冲突</h3><p>假如项目的依赖如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;dependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;fetch&quot;: &quot;^1.1.0&quot;,</span><br><span class=\"line\">    &quot;biskviit&quot;: &quot;2.0.0&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>fetch@^1.1.0的依赖如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;dependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;biskviit&quot;: &quot;1.0.1&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>安装fetch时，遇到了<a href=\"mailto:&#98;&#105;&#x73;&#x6b;&#x76;&#x69;&#x69;&#116;&#64;&#49;&#x2e;&#x30;&#x2e;&#49;\">&#98;&#105;&#x73;&#x6b;&#x76;&#x69;&#x69;&#116;&#64;&#49;&#x2e;&#x30;&#x2e;&#49;</a>，会先检查项目依赖有没有biskviit。找到了，但是版本不一致，npm会选择较高的版本安装在顶级node_modules目录下，其余版本安装在各自工具库的目录下。</p>\n<h3 id=\"npm-init\"><a href=\"#npm-init\" class=\"headerlink\" title=\"npm init\"></a>npm init</h3><p>初始化npm管理的项目，结果是一个package.json文件。</p>\n<p>也可以通过config命令修改单个字段：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set init.author.name &quot;Lucas&quot;</span><br><span class=\"line\">npm config set init.author.email &quot;lucasXXXXXX@gmail.com&quot;</span><br><span class=\"line\">npm config set init.author.url &quot;lucasXXXXX.com&quot;</span><br><span class=\"line\">npm config set init.license &quot;MIT&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"npm-ls\"><a href=\"#npm-ls\" class=\"headerlink\" title=\"npm ls\"></a>npm ls</h3><p>列出当前目录下npm包列表，以及之间的依赖关系。</p>\n<h3 id=\"npm-config-get-cache\"><a href=\"#npm-config-get-cache\" class=\"headerlink\" title=\"npm config get cache\"></a>npm config get cache</h3><p>获取npm包本地缓存的目录</p>\n<h3 id=\"私有npm搭建工具\"><a href=\"#私有npm搭建工具\" class=\"headerlink\" title=\"私有npm搭建工具\"></a>私有npm搭建工具</h3><p>nexus、verdaccio 以及 cnpm</p>\n<h3 id=\"npx-命令工具\"><a href=\"#npx-命令工具\" class=\"headerlink\" title=\"npx 命令工具\"></a>npx 命令工具</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g npx</span><br></pre></td></tr></table></figure>\n\n<p>假如，npm安装了webpack-cli，package.json有个script为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;dev&quot;: &quot;webpack&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以在命令行运行npm run dev执行webpack命令，但是无法在命令行直接执行webpack。只能这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./node_modules/.bin/webpack </span><br></pre></td></tr></table></figure>\n\n<p>npx的作用就是帮我们找到命令的路径并执行，其实就是个语法糖。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx webpack </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nrm-镜像管理\"><a href=\"#nrm-镜像管理\" class=\"headerlink\" title=\"nrm 镜像管理\"></a>nrm 镜像管理</h2><p>设置镜像的命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<p>我们不免会出现要切换镜像的时候，但是镜像的地址可能忘记了。这时候需要一个镜像管理工具，nrm。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g nrm</span><br><span class=\"line\">nrm add taobao/*或者其它名字*/ http://registry.npm.taobao.org</span><br><span class=\"line\">nrm ls // 查看镜像列表，以及当前使用的镜像</span><br><span class=\"line\">nrm use taobao // 切换镜像</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://mp.weixin.qq.com/s/LATAribargpMvDa_nrzACQ\">没想到你是这样的npm install</a></li>\n<li><a href=\"https://www.yuque.com/allenstone/learn/crd8kf\">npm 安装机制及企业级部署私服原理</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"dependencies\"><a href=\"#dependencies\" class=\"headerlink\" title=\"dependencies\"></a>dependencies</h2><p>如果是工具库之类的项目，发布之后，第三方使用时会安装dependencides，优先安装在第三方的目录下。</p>\n<p>项目依赖和工具库依赖不冲突，则依赖安装到项目下，否则就会在这个工具库的目录下再安装一份。</p>\n<h2 id=\"devDependencies\"><a href=\"#devDependencies\" class=\"headerlink\" title=\"devDependencies\"></a>devDependencies</h2><p>普通业务项目开发时，dependencies和devDependencies区别感知不大。但是如果我们开发的是一个工具库，publish之后生成的package.json中是没有devDependencies的。</p>\n<h2 id=\"peerDependencies\"><a href=\"#peerDependencies\" class=\"headerlink\" title=\"peerDependencies\"></a>peerDependencies</h2><p>同等依赖。这个同等的意思是，你想引用我这个库，你最好也一起安装这些依赖，要和我平级安装在你的目录下，而不是像dependencies一样有可能安装在我的库目录下面。</p>\n<h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><h2 id=\"npm-install\"><a href=\"#npm-install\" class=\"headerlink\" title=\"npm install\"></a>npm install</h2><p>npm install的依赖安装处理逻辑如下图：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-8/1623119747450-image.png\"></p>\n<h3 id=\"项目依赖和工具库依赖冲突\"><a href=\"#项目依赖和工具库依赖冲突\" class=\"headerlink\" title=\"项目依赖和工具库依赖冲突\"></a>项目依赖和工具库依赖冲突</h3><p>项目依赖和工具库依赖不冲突，则依赖安装到项目下，否则就会在这个工具库的目录下再安装一份。</p>\n<p>项目有如下依赖：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;dependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;fetch&quot;: &quot;^1.1.0&quot;,</span><br><span class=\"line\">    &quot;biskviit&quot;: &quot;1.0.1&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>fetch@^1.1.0的依赖如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;dependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;biskviit&quot;: &quot;2.0.1&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于项目顶级依赖和fetch对biskviit的版本不一致，存在冲突，所以biskviit在项目的node_modules目录下安装一份1.0.1的版本，然后在node_modules/fetch/node_modules目录下安装2.0.1版本。</p>\n<h3 id=\"工具库之间依赖冲突\"><a href=\"#工具库之间依赖冲突\" class=\"headerlink\" title=\"工具库之间依赖冲突\"></a>工具库之间依赖冲突</h3><p>假如项目的依赖如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;dependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;fetch&quot;: &quot;^1.1.0&quot;,</span><br><span class=\"line\">    &quot;biskviit&quot;: &quot;2.0.0&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>fetch@^1.1.0的依赖如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;dependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;biskviit&quot;: &quot;1.0.1&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>安装fetch时，遇到了<a href=\"mailto:&#98;&#105;&#x73;&#x6b;&#x76;&#x69;&#x69;&#116;&#64;&#49;&#x2e;&#x30;&#x2e;&#49;\">&#98;&#105;&#x73;&#x6b;&#x76;&#x69;&#x69;&#116;&#64;&#49;&#x2e;&#x30;&#x2e;&#49;</a>，会先检查项目依赖有没有biskviit。找到了，但是版本不一致，npm会选择较高的版本安装在顶级node_modules目录下，其余版本安装在各自工具库的目录下。</p>\n<h3 id=\"npm-init\"><a href=\"#npm-init\" class=\"headerlink\" title=\"npm init\"></a>npm init</h3><p>初始化npm管理的项目，结果是一个package.json文件。</p>\n<p>也可以通过config命令修改单个字段：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set init.author.name &quot;Lucas&quot;</span><br><span class=\"line\">npm config set init.author.email &quot;lucasXXXXXX@gmail.com&quot;</span><br><span class=\"line\">npm config set init.author.url &quot;lucasXXXXX.com&quot;</span><br><span class=\"line\">npm config set init.license &quot;MIT&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"npm-ls\"><a href=\"#npm-ls\" class=\"headerlink\" title=\"npm ls\"></a>npm ls</h3><p>列出当前目录下npm包列表，以及之间的依赖关系。</p>\n<h3 id=\"npm-config-get-cache\"><a href=\"#npm-config-get-cache\" class=\"headerlink\" title=\"npm config get cache\"></a>npm config get cache</h3><p>获取npm包本地缓存的目录</p>\n<h3 id=\"私有npm搭建工具\"><a href=\"#私有npm搭建工具\" class=\"headerlink\" title=\"私有npm搭建工具\"></a>私有npm搭建工具</h3><p>nexus、verdaccio 以及 cnpm</p>\n<h3 id=\"npx-命令工具\"><a href=\"#npx-命令工具\" class=\"headerlink\" title=\"npx 命令工具\"></a>npx 命令工具</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g npx</span><br></pre></td></tr></table></figure>\n\n<p>假如，npm安装了webpack-cli，package.json有个script为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;dev&quot;: &quot;webpack&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们可以在命令行运行npm run dev执行webpack命令，但是无法在命令行直接执行webpack。只能这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./node_modules/.bin/webpack </span><br></pre></td></tr></table></figure>\n\n<p>npx的作用就是帮我们找到命令的路径并执行，其实就是个语法糖。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx webpack </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"nrm-镜像管理\"><a href=\"#nrm-镜像管理\" class=\"headerlink\" title=\"nrm 镜像管理\"></a>nrm 镜像管理</h2><p>设置镜像的命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry http://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<p>我们不免会出现要切换镜像的时候，但是镜像的地址可能忘记了。这时候需要一个镜像管理工具，nrm。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g nrm</span><br><span class=\"line\">nrm add taobao/*或者其它名字*/ http://registry.npm.taobao.org</span><br><span class=\"line\">nrm ls // 查看镜像列表，以及当前使用的镜像</span><br><span class=\"line\">nrm use taobao // 切换镜像</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://mp.weixin.qq.com/s/LATAribargpMvDa_nrzACQ\">没想到你是这样的npm install</a></li>\n<li><a href=\"https://www.yuque.com/allenstone/learn/crd8kf\">npm 安装机制及企业级部署私服原理</a></li>\n</ul>\n"},{"title":"插件Pipeline: Groovy","date":"2021-04-29T16:00:00.000Z","_content":" \n\nJenkins 自动化构建基于一系列插件，[常用的插件](https://www.jianshu.com/p/e0b7d377132a?from=timeline)\n\n最基础的是流水线插件。公司内的流水线插件配置使用Pipeline: Groovy。该插件的基本配置如下。\n\n可以直接在文本框写入简单的脚本（Pipeline script），也可以读取Jenkinsfile内的流水线脚本（Pipeline script from scm）。scm全称是Source Control Management，如gitlab。\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343189420-image.png)\n\n选择了SCM之后需要配置git的地址和账号密码：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343216758-image.png)\n\n选择构建分支：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343247362-image.png)\n\n构建分支BRANCH的值来源于参数，需要配置参数化构建，Jenkins可配置的参数类型有：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343271570-image.png)\n\n其中，Git Parameter类型需要安装插件：Git Parameter。\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343386941-image.png)\n\n该插件获取以下类型的值，并赋值给我们定义的变量名BRANCH（可以是其它名字）：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343409839-image.png)\n\n分支选择时可以配置过滤器以及分支显示框的高度：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343429756-image.png)\n\n另外可以配置其它参数，如构建环境：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343450153-image.png)\ncheckbox类型的值传入Jenkinsfile中的格式为字符串，分隔符和Jenkins上的配置一致。\n\nJenkinsfile中可以通过params 获取到参数化构建中传入的参数：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343471298-image.png)\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343490451-image.png)\n\n\n选择构建分支时，可以使用参数化构建传入的参数：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343513092-image.png)\n\npipeline:Groovy可以配置构建执行脚本文件路径：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343529779-image.png)","source":"_posts/tools/pipeline-groovy.md","raw":"---\ntitle: \"插件Pipeline: Groovy\"\ncategories: 工具\ntags: Jenkins\ndate: 2021-4-30\n--- \n\nJenkins 自动化构建基于一系列插件，[常用的插件](https://www.jianshu.com/p/e0b7d377132a?from=timeline)\n\n最基础的是流水线插件。公司内的流水线插件配置使用Pipeline: Groovy。该插件的基本配置如下。\n\n可以直接在文本框写入简单的脚本（Pipeline script），也可以读取Jenkinsfile内的流水线脚本（Pipeline script from scm）。scm全称是Source Control Management，如gitlab。\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343189420-image.png)\n\n选择了SCM之后需要配置git的地址和账号密码：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343216758-image.png)\n\n选择构建分支：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343247362-image.png)\n\n构建分支BRANCH的值来源于参数，需要配置参数化构建，Jenkins可配置的参数类型有：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343271570-image.png)\n\n其中，Git Parameter类型需要安装插件：Git Parameter。\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343386941-image.png)\n\n该插件获取以下类型的值，并赋值给我们定义的变量名BRANCH（可以是其它名字）：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343409839-image.png)\n\n分支选择时可以配置过滤器以及分支显示框的高度：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343429756-image.png)\n\n另外可以配置其它参数，如构建环境：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343450153-image.png)\ncheckbox类型的值传入Jenkinsfile中的格式为字符串，分隔符和Jenkins上的配置一致。\n\nJenkinsfile中可以通过params 获取到参数化构建中传入的参数：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343471298-image.png)\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343490451-image.png)\n\n\n选择构建分支时，可以使用参数化构建传入的参数：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343513092-image.png)\n\npipeline:Groovy可以配置构建执行脚本文件路径：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343529779-image.png)","slug":"tools/pipeline-groovy","published":1,"updated":"2021-06-14T02:10:22.062Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6u000yecq8heemhgjs","content":"<p>Jenkins 自动化构建基于一系列插件，<a href=\"https://www.jianshu.com/p/e0b7d377132a?from=timeline\">常用的插件</a></p>\n<p>最基础的是流水线插件。公司内的流水线插件配置使用Pipeline: Groovy。该插件的基本配置如下。</p>\n<p>可以直接在文本框写入简单的脚本（Pipeline script），也可以读取Jenkinsfile内的流水线脚本（Pipeline script from scm）。scm全称是Source Control Management，如gitlab。</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343189420-image.png\"></p>\n<p>选择了SCM之后需要配置git的地址和账号密码：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343216758-image.png\"></p>\n<p>选择构建分支：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343247362-image.png\"></p>\n<p>构建分支BRANCH的值来源于参数，需要配置参数化构建，Jenkins可配置的参数类型有：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343271570-image.png\"></p>\n<p>其中，Git Parameter类型需要安装插件：Git Parameter。</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343386941-image.png\"></p>\n<p>该插件获取以下类型的值，并赋值给我们定义的变量名BRANCH（可以是其它名字）：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343409839-image.png\"></p>\n<p>分支选择时可以配置过滤器以及分支显示框的高度：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343429756-image.png\"></p>\n<p>另外可以配置其它参数，如构建环境：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343450153-image.png\"><br>checkbox类型的值传入Jenkinsfile中的格式为字符串，分隔符和Jenkins上的配置一致。</p>\n<p>Jenkinsfile中可以通过params 获取到参数化构建中传入的参数：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343471298-image.png\"><br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343490451-image.png\"></p>\n<p>选择构建分支时，可以使用参数化构建传入的参数：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343513092-image.png\"></p>\n<p>pipeline:Groovy可以配置构建执行脚本文件路径：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343529779-image.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Jenkins 自动化构建基于一系列插件，<a href=\"https://www.jianshu.com/p/e0b7d377132a?from=timeline\">常用的插件</a></p>\n<p>最基础的是流水线插件。公司内的流水线插件配置使用Pipeline: Groovy。该插件的基本配置如下。</p>\n<p>可以直接在文本框写入简单的脚本（Pipeline script），也可以读取Jenkinsfile内的流水线脚本（Pipeline script from scm）。scm全称是Source Control Management，如gitlab。</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343189420-image.png\"></p>\n<p>选择了SCM之后需要配置git的地址和账号密码：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343216758-image.png\"></p>\n<p>选择构建分支：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343247362-image.png\"></p>\n<p>构建分支BRANCH的值来源于参数，需要配置参数化构建，Jenkins可配置的参数类型有：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343271570-image.png\"></p>\n<p>其中，Git Parameter类型需要安装插件：Git Parameter。</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343386941-image.png\"></p>\n<p>该插件获取以下类型的值，并赋值给我们定义的变量名BRANCH（可以是其它名字）：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343409839-image.png\"></p>\n<p>分支选择时可以配置过滤器以及分支显示框的高度：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343429756-image.png\"></p>\n<p>另外可以配置其它参数，如构建环境：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343450153-image.png\"><br>checkbox类型的值传入Jenkinsfile中的格式为字符串，分隔符和Jenkins上的配置一致。</p>\n<p>Jenkinsfile中可以通过params 获取到参数化构建中传入的参数：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343471298-image.png\"><br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343490451-image.png\"></p>\n<p>选择构建分支时，可以使用参数化构建传入的参数：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343513092-image.png\"></p>\n<p>pipeline:Groovy可以配置构建执行脚本文件路径：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622343529779-image.png\"></p>\n"},{"title":"vscode 快捷键","date":"2021-07-11T16:00:00.000Z","_content":" \n\n\n## 重命名函数或者变量\n```\nF2 + 点击变量名（或函数名）：会出现一个输入框可修改变量名\n```\n\n\n## 复制并粘贴行\n```\nshift + Alt + 下箭头：复制并粘贴到下面一行\nshift + Alt + 上箭头：复制并粘贴到上面一行\n```\n\n## 复制光标（多行同时修改）\n```\nctrl + Alt + 上箭头：在上一行同一列生成一个光标\nctrl + Alt + 下箭头：在下一行同一列生成一个光标\n```\n\n## 标签展开折叠\n```\nctrl + shift + [：折叠\nctrl + shift + ]：展开\n```\n\n\n","source":"_posts/tools/vscode-keymap.md","raw":"---\ntitle: \"vscode 快捷键\"\ncategories: 工具\ntags: vscode\ndate: 2021-7-12\n--- \n\n\n## 重命名函数或者变量\n```\nF2 + 点击变量名（或函数名）：会出现一个输入框可修改变量名\n```\n\n\n## 复制并粘贴行\n```\nshift + Alt + 下箭头：复制并粘贴到下面一行\nshift + Alt + 上箭头：复制并粘贴到上面一行\n```\n\n## 复制光标（多行同时修改）\n```\nctrl + Alt + 上箭头：在上一行同一列生成一个光标\nctrl + Alt + 下箭头：在下一行同一列生成一个光标\n```\n\n## 标签展开折叠\n```\nctrl + shift + [：折叠\nctrl + shift + ]：展开\n```\n\n\n","slug":"tools/vscode-keymap","published":1,"updated":"2021-08-07T02:54:37.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6v000zecq88gu2ed33","content":"<h2 id=\"重命名函数或者变量\"><a href=\"#重命名函数或者变量\" class=\"headerlink\" title=\"重命名函数或者变量\"></a>重命名函数或者变量</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">F2 + 点击变量名（或函数名）：会出现一个输入框可修改变量名</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"复制并粘贴行\"><a href=\"#复制并粘贴行\" class=\"headerlink\" title=\"复制并粘贴行\"></a>复制并粘贴行</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shift + Alt + 下箭头：复制并粘贴到下面一行</span><br><span class=\"line\">shift + Alt + 上箭头：复制并粘贴到上面一行</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"复制光标（多行同时修改）\"><a href=\"#复制光标（多行同时修改）\" class=\"headerlink\" title=\"复制光标（多行同时修改）\"></a>复制光标（多行同时修改）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctrl + Alt + 上箭头：在上一行同一列生成一个光标</span><br><span class=\"line\">ctrl + Alt + 下箭头：在下一行同一列生成一个光标</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"标签展开折叠\"><a href=\"#标签展开折叠\" class=\"headerlink\" title=\"标签展开折叠\"></a>标签展开折叠</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctrl + shift + [：折叠</span><br><span class=\"line\">ctrl + shift + ]：展开</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"重命名函数或者变量\"><a href=\"#重命名函数或者变量\" class=\"headerlink\" title=\"重命名函数或者变量\"></a>重命名函数或者变量</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">F2 + 点击变量名（或函数名）：会出现一个输入框可修改变量名</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"复制并粘贴行\"><a href=\"#复制并粘贴行\" class=\"headerlink\" title=\"复制并粘贴行\"></a>复制并粘贴行</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shift + Alt + 下箭头：复制并粘贴到下面一行</span><br><span class=\"line\">shift + Alt + 上箭头：复制并粘贴到上面一行</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"复制光标（多行同时修改）\"><a href=\"#复制光标（多行同时修改）\" class=\"headerlink\" title=\"复制光标（多行同时修改）\"></a>复制光标（多行同时修改）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctrl + Alt + 上箭头：在上一行同一列生成一个光标</span><br><span class=\"line\">ctrl + Alt + 下箭头：在下一行同一列生成一个光标</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"标签展开折叠\"><a href=\"#标签展开折叠\" class=\"headerlink\" title=\"标签展开折叠\"></a>标签展开折叠</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctrl + shift + [：折叠</span><br><span class=\"line\">ctrl + shift + ]：展开</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"一次被折磨到头疼的经历","date":"2021-07-07T16:00:00.000Z","_content":" \n\n## 背景\n我们有个多应用公共仓库，不同应用打包时需要不同的manifest.json文件。\n\n每个应用都有一个manifest.xxx.json文件，打包时需要使用该文件替换掉manifest.json。我们使用了nodeJs的child_process.exec来执行cp命令：\n\n```shell\ncp -f F:\\pathToJson\\manifest.xxx.json F:\\pathToJson\\manifest.json \n```\n在某个同事的windows电脑上执行时报错：\n\n```\n`Uncaught Error: Command failed: cp -f F:\\pathToJson\\manifest.xxx.json F:\\pathToJson\\manifest.json\n\nat ChildProcess.exithandler (child_process.js:303)\nat ChildProcess.emit (events.js:182)\nat maybeClose (internal/child_process.js:961)\nat Process.ChildProcess._handle.onexit (internal/child_process.js:248)`\n```\n\n这个报错信息只是简单的说明child_process中断，并没有详细的错误原因。\n\n## 摸索\n\n试着在cmd中执行一样的命令，发现报错：\n\n```\n系统找不到指定文件\n```\n\n为啥？？这个文件的确是存在的哇？我换了个文件，也是一样的报错。目前还不清楚是什么原因。\n\n根据网上的经验，尝试过以下可能原因：\n- 文件路径名太长\n- 出现了中文路径\n- 权限问题\n- 试下其它的文件类型\n\n发现以上可能性都排除。\n\n接着在powershell中执行一样的命令，竟然成功了。作为命令行小白，去查了下二者的区别，大致结论是：powershell就是cmd的超集，不仅可以调命令，还可以连接数据库甚至编程。然而这些信息并没有给我带来灵感。\n\n无路可走的我尝试对这句命令进行各种改参数尝试，发现删掉`-f`参数就成功了。\n\n基于这一点线索，我尝试将参数改成-i，-d等都是一样的报错，我得出1个结论：cp后面的参数都是多余的！基于以前了解过命令别名，瞬间得出结论：cp命令本身包含了某个参数！换句话说，cp本身是某个命令别名！\n\n在`C:\\windows\\system32\\`目录下发现了一个cp.bat文件，里面赫然写着：\n\n```\n@echo off  \nDOSKEY cp=copy \n```\n\n所以啊，cp命令本身是Linux系统的，为什么之前就没质疑过呢？害得我浪费了这么长时间。\n\n先把命令别名这个干扰项删除，然后再执行一次：\n```shell\ncp -f F:\\pathToJson\\manifest.xxx.json F:\\pathToJson\\manifest.json \n```\n这次报错变为：\n\n```\ncp不是内部或外部命令,也不是可运行的程序\n```\n因此，接下来的问题是，NodeJs在调用child_process.exec时，使用的命令行工具是哪个呢？\n\n\n\n## 结论\n- 如果对命令行不熟的话就不要随便对命令行改造，否则在遥远对将来将成为一个巨坑。\n- 当对一个问题产生怀疑时，不要轻易让它擦肩而过。","source":"_posts/think/a-hard-experience.md","raw":"---\ntitle: 一次被折磨到头疼的经历\ncategories: 思考\ntags: [学习, debug]\ndate: 2021-7-8\n--- \n\n## 背景\n我们有个多应用公共仓库，不同应用打包时需要不同的manifest.json文件。\n\n每个应用都有一个manifest.xxx.json文件，打包时需要使用该文件替换掉manifest.json。我们使用了nodeJs的child_process.exec来执行cp命令：\n\n```shell\ncp -f F:\\pathToJson\\manifest.xxx.json F:\\pathToJson\\manifest.json \n```\n在某个同事的windows电脑上执行时报错：\n\n```\n`Uncaught Error: Command failed: cp -f F:\\pathToJson\\manifest.xxx.json F:\\pathToJson\\manifest.json\n\nat ChildProcess.exithandler (child_process.js:303)\nat ChildProcess.emit (events.js:182)\nat maybeClose (internal/child_process.js:961)\nat Process.ChildProcess._handle.onexit (internal/child_process.js:248)`\n```\n\n这个报错信息只是简单的说明child_process中断，并没有详细的错误原因。\n\n## 摸索\n\n试着在cmd中执行一样的命令，发现报错：\n\n```\n系统找不到指定文件\n```\n\n为啥？？这个文件的确是存在的哇？我换了个文件，也是一样的报错。目前还不清楚是什么原因。\n\n根据网上的经验，尝试过以下可能原因：\n- 文件路径名太长\n- 出现了中文路径\n- 权限问题\n- 试下其它的文件类型\n\n发现以上可能性都排除。\n\n接着在powershell中执行一样的命令，竟然成功了。作为命令行小白，去查了下二者的区别，大致结论是：powershell就是cmd的超集，不仅可以调命令，还可以连接数据库甚至编程。然而这些信息并没有给我带来灵感。\n\n无路可走的我尝试对这句命令进行各种改参数尝试，发现删掉`-f`参数就成功了。\n\n基于这一点线索，我尝试将参数改成-i，-d等都是一样的报错，我得出1个结论：cp后面的参数都是多余的！基于以前了解过命令别名，瞬间得出结论：cp命令本身包含了某个参数！换句话说，cp本身是某个命令别名！\n\n在`C:\\windows\\system32\\`目录下发现了一个cp.bat文件，里面赫然写着：\n\n```\n@echo off  \nDOSKEY cp=copy \n```\n\n所以啊，cp命令本身是Linux系统的，为什么之前就没质疑过呢？害得我浪费了这么长时间。\n\n先把命令别名这个干扰项删除，然后再执行一次：\n```shell\ncp -f F:\\pathToJson\\manifest.xxx.json F:\\pathToJson\\manifest.json \n```\n这次报错变为：\n\n```\ncp不是内部或外部命令,也不是可运行的程序\n```\n因此，接下来的问题是，NodeJs在调用child_process.exec时，使用的命令行工具是哪个呢？\n\n\n\n## 结论\n- 如果对命令行不熟的话就不要随便对命令行改造，否则在遥远对将来将成为一个巨坑。\n- 当对一个问题产生怀疑时，不要轻易让它擦肩而过。","slug":"think/a-hard-experience","published":1,"updated":"2021-08-05T00:37:20.831Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6v0010ecq8g4iz38kt","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>我们有个多应用公共仓库，不同应用打包时需要不同的manifest.json文件。</p>\n<p>每个应用都有一个manifest.xxx.json文件，打包时需要使用该文件替换掉manifest.json。我们使用了nodeJs的child_process.exec来执行cp命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp -f F:\\pathToJson\\manifest.xxx.json F:\\pathToJson\\manifest.json </span><br></pre></td></tr></table></figure>\n<p>在某个同事的windows电脑上执行时报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`Uncaught Error: Command failed: cp -f F:\\pathToJson\\manifest.xxx.json F:\\pathToJson\\manifest.json</span><br><span class=\"line\"></span><br><span class=\"line\">at ChildProcess.exithandler (child_process.js:303)</span><br><span class=\"line\">at ChildProcess.emit (events.js:182)</span><br><span class=\"line\">at maybeClose (internal/child_process.js:961)</span><br><span class=\"line\">at Process.ChildProcess._handle.onexit (internal/child_process.js:248)`</span><br></pre></td></tr></table></figure>\n\n<p>这个报错信息只是简单的说明child_process中断，并没有详细的错误原因。</p>\n<h2 id=\"摸索\"><a href=\"#摸索\" class=\"headerlink\" title=\"摸索\"></a>摸索</h2><p>试着在cmd中执行一样的命令，发现报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">系统找不到指定文件</span><br></pre></td></tr></table></figure>\n\n<p>为啥？？这个文件的确是存在的哇？我换了个文件，也是一样的报错。目前还不清楚是什么原因。</p>\n<p>根据网上的经验，尝试过以下可能原因：</p>\n<ul>\n<li>文件路径名太长</li>\n<li>出现了中文路径</li>\n<li>权限问题</li>\n<li>试下其它的文件类型</li>\n</ul>\n<p>发现以上可能性都排除。</p>\n<p>接着在powershell中执行一样的命令，竟然成功了。作为命令行小白，去查了下二者的区别，大致结论是：powershell就是cmd的超集，不仅可以调命令，还可以连接数据库甚至编程。然而这些信息并没有给我带来灵感。</p>\n<p>无路可走的我尝试对这句命令进行各种改参数尝试，发现删掉<code>-f</code>参数就成功了。</p>\n<p>基于这一点线索，我尝试将参数改成-i，-d等都是一样的报错，我得出1个结论：cp后面的参数都是多余的！基于以前了解过命令别名，瞬间得出结论：cp命令本身包含了某个参数！换句话说，cp本身是某个命令别名！</p>\n<p>在<code>C:\\windows\\system32\\</code>目录下发现了一个cp.bat文件，里面赫然写着：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@echo off  </span><br><span class=\"line\">DOSKEY cp=copy </span><br></pre></td></tr></table></figure>\n\n<p>所以啊，cp命令本身是Linux系统的，为什么之前就没质疑过呢？害得我浪费了这么长时间。</p>\n<p>先把命令别名这个干扰项删除，然后再执行一次：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp -f F:\\pathToJson\\manifest.xxx.json F:\\pathToJson\\manifest.json </span><br></pre></td></tr></table></figure>\n<p>这次报错变为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp不是内部或外部命令,也不是可运行的程序</span><br></pre></td></tr></table></figure>\n<p>因此，接下来的问题是，NodeJs在调用child_process.exec时，使用的命令行工具是哪个呢？</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><ul>\n<li>如果对命令行不熟的话就不要随便对命令行改造，否则在遥远对将来将成为一个巨坑。</li>\n<li>当对一个问题产生怀疑时，不要轻易让它擦肩而过。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>我们有个多应用公共仓库，不同应用打包时需要不同的manifest.json文件。</p>\n<p>每个应用都有一个manifest.xxx.json文件，打包时需要使用该文件替换掉manifest.json。我们使用了nodeJs的child_process.exec来执行cp命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp -f F:\\pathToJson\\manifest.xxx.json F:\\pathToJson\\manifest.json </span><br></pre></td></tr></table></figure>\n<p>在某个同事的windows电脑上执行时报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`Uncaught Error: Command failed: cp -f F:\\pathToJson\\manifest.xxx.json F:\\pathToJson\\manifest.json</span><br><span class=\"line\"></span><br><span class=\"line\">at ChildProcess.exithandler (child_process.js:303)</span><br><span class=\"line\">at ChildProcess.emit (events.js:182)</span><br><span class=\"line\">at maybeClose (internal/child_process.js:961)</span><br><span class=\"line\">at Process.ChildProcess._handle.onexit (internal/child_process.js:248)`</span><br></pre></td></tr></table></figure>\n\n<p>这个报错信息只是简单的说明child_process中断，并没有详细的错误原因。</p>\n<h2 id=\"摸索\"><a href=\"#摸索\" class=\"headerlink\" title=\"摸索\"></a>摸索</h2><p>试着在cmd中执行一样的命令，发现报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">系统找不到指定文件</span><br></pre></td></tr></table></figure>\n\n<p>为啥？？这个文件的确是存在的哇？我换了个文件，也是一样的报错。目前还不清楚是什么原因。</p>\n<p>根据网上的经验，尝试过以下可能原因：</p>\n<ul>\n<li>文件路径名太长</li>\n<li>出现了中文路径</li>\n<li>权限问题</li>\n<li>试下其它的文件类型</li>\n</ul>\n<p>发现以上可能性都排除。</p>\n<p>接着在powershell中执行一样的命令，竟然成功了。作为命令行小白，去查了下二者的区别，大致结论是：powershell就是cmd的超集，不仅可以调命令，还可以连接数据库甚至编程。然而这些信息并没有给我带来灵感。</p>\n<p>无路可走的我尝试对这句命令进行各种改参数尝试，发现删掉<code>-f</code>参数就成功了。</p>\n<p>基于这一点线索，我尝试将参数改成-i，-d等都是一样的报错，我得出1个结论：cp后面的参数都是多余的！基于以前了解过命令别名，瞬间得出结论：cp命令本身包含了某个参数！换句话说，cp本身是某个命令别名！</p>\n<p>在<code>C:\\windows\\system32\\</code>目录下发现了一个cp.bat文件，里面赫然写着：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@echo off  </span><br><span class=\"line\">DOSKEY cp=copy </span><br></pre></td></tr></table></figure>\n\n<p>所以啊，cp命令本身是Linux系统的，为什么之前就没质疑过呢？害得我浪费了这么长时间。</p>\n<p>先把命令别名这个干扰项删除，然后再执行一次：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp -f F:\\pathToJson\\manifest.xxx.json F:\\pathToJson\\manifest.json </span><br></pre></td></tr></table></figure>\n<p>这次报错变为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp不是内部或外部命令,也不是可运行的程序</span><br></pre></td></tr></table></figure>\n<p>因此，接下来的问题是，NodeJs在调用child_process.exec时，使用的命令行工具是哪个呢？</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><ul>\n<li>如果对命令行不熟的话就不要随便对命令行改造，否则在遥远对将来将成为一个巨坑。</li>\n<li>当对一个问题产生怀疑时，不要轻易让它擦肩而过。</li>\n</ul>\n"},{"title":"一次技术方案的分析过程","date":"2021-05-09T16:00:00.000Z","_content":" \n\n> 分析技术方案时，保持以终为始的原则。思维就像一棵树，方案就像树枝，遍历之后发现不可行，只需要往根部回溯，重新思考达到目标的其它方法。\n\n\n## 背景\n这是我负责的一个H5项目，内嵌于APP的webview，页面跳转通过打开新的webview来实现类app的效果。\n\n在app内从另外一个项目跳转到该应用时，需要带上一个sourceid，标记引流入口。sourceid可能是来源于首页或者商品详情页，只有在下单的时候会提交给订单。\n\n任务\n对该sourceid生命周期的要求是： 外部项目跳转进入该项目之后，到关闭由它打开的所有页面为止，算一个生命周期。\n\n## 行动\n### 从页面跳转传参入手\napp为和提供了桥接sdk，应用内webview调用的是同一个api，打开新窗口前可以使用proxy拦截该api，获取当前窗口的链接，将链接上的sourceid带到新窗口上，实现sourceid参数的透传。\n\n这个方法简单粗暴，却有明显的缺点：\n* 业务和工具耦合，不利于维护\n* 分享转发前需要把该参数去掉，会影响到旧的逻辑\n* 该方法可行，但是属于对公共代码的修改，容易引发bug，暂时纳入备选方案。\n\n### 从本地存储方案入手\n浏览器本地缓存方案有localstorage、sessionStorage、cookie。这些方案在webview中是否也适用呢？\n\n经过在ios中验证localstorage的缓存行为和浏览器类似，sessionStorage和cookie在webview之间不共享，因此2者被排除。\n\n> 请教了ios客户端的同事，了解到，ios平台的app目前使用的是WKwebview实现，窗口之间使用的是不同的WKProcessPool，所以数据共享是个问题，localstorage之所以看起来像是共享了，实际上只是在打开同源窗口时复制了一份，新开的窗口对localStorgae所做的修改不会对旧窗口有影响。这些问题在以前UIwebview开发的时代是不存在的，而UIwebview的是因为内存占用过高而逐渐被淘汰。\n\n可共享的存储方案就只剩下localstorage。由于localstorage属于持久化存储，想要识别一次完整使用，需要抓住一个边界点：要如何识别一次完整使用，是否具有开始或者结束的标志。在这个边界点更新sourceid\n\n完整使用的标志有：\n* 该webview是应用中当前存在的唯一本项目的webview，标记一次使用的开始\n* 应用中当前存在的唯一本项目的webview被销毁，标记一次使用的结束\n\n这2种标志如何去标记呢？我想到了以下办法：\n* app提供相关api告诉我们是否是同源webview的第一个页面，就像微信小程序那样，打开非首页的头部左上角会显示一个home按钮。很遗憾没有找到相关api。\n* 像window.onbeforeunload那样监听页面销毁，存储过sourceid的页面在页面销毁前销毁缓存的sourceid。通俗来讲，就是自产自销（销毁）。经测试发现，webview关闭并不会触发window.onbeforeunload和onunload事件。该方法不可行。\n\n### 不那么完美的实现方案\n当没有完美的解决方案时，问自己，我们真的一定要完美的实现吗？经过和产品的讨论，产品方认为，不需要。可以根据用户的使用习惯，大致确定sourceid的合理有效时间，通过localstorage实现超时清理方案。\n\n## 结论\n又一个很简单的决策公式：决策 = 收益 - 成本 - 风险\n以下列出了暂时可行的方案评估表：\n\n方案 | 收益 | 成本（开发）| 风险（上线+后期维护）| 决策\n---|---|---|---|---\nproxy拦截api添加参数 | 10 | 3 | 1+1 | 5\nlocalstorage有效期 | 8 | 1 | 0+0 | 7 \n\n根据上表的结果，最终选择了“localstorage有效期”这个方案。\n\n\n\n","source":"_posts/think/fanganfenxi.md","raw":"---\ntitle: 一次技术方案的分析过程\ncategories: 思考\ntags: [学习]\ndate: 2021-5-10\n--- \n\n> 分析技术方案时，保持以终为始的原则。思维就像一棵树，方案就像树枝，遍历之后发现不可行，只需要往根部回溯，重新思考达到目标的其它方法。\n\n\n## 背景\n这是我负责的一个H5项目，内嵌于APP的webview，页面跳转通过打开新的webview来实现类app的效果。\n\n在app内从另外一个项目跳转到该应用时，需要带上一个sourceid，标记引流入口。sourceid可能是来源于首页或者商品详情页，只有在下单的时候会提交给订单。\n\n任务\n对该sourceid生命周期的要求是： 外部项目跳转进入该项目之后，到关闭由它打开的所有页面为止，算一个生命周期。\n\n## 行动\n### 从页面跳转传参入手\napp为和提供了桥接sdk，应用内webview调用的是同一个api，打开新窗口前可以使用proxy拦截该api，获取当前窗口的链接，将链接上的sourceid带到新窗口上，实现sourceid参数的透传。\n\n这个方法简单粗暴，却有明显的缺点：\n* 业务和工具耦合，不利于维护\n* 分享转发前需要把该参数去掉，会影响到旧的逻辑\n* 该方法可行，但是属于对公共代码的修改，容易引发bug，暂时纳入备选方案。\n\n### 从本地存储方案入手\n浏览器本地缓存方案有localstorage、sessionStorage、cookie。这些方案在webview中是否也适用呢？\n\n经过在ios中验证localstorage的缓存行为和浏览器类似，sessionStorage和cookie在webview之间不共享，因此2者被排除。\n\n> 请教了ios客户端的同事，了解到，ios平台的app目前使用的是WKwebview实现，窗口之间使用的是不同的WKProcessPool，所以数据共享是个问题，localstorage之所以看起来像是共享了，实际上只是在打开同源窗口时复制了一份，新开的窗口对localStorgae所做的修改不会对旧窗口有影响。这些问题在以前UIwebview开发的时代是不存在的，而UIwebview的是因为内存占用过高而逐渐被淘汰。\n\n可共享的存储方案就只剩下localstorage。由于localstorage属于持久化存储，想要识别一次完整使用，需要抓住一个边界点：要如何识别一次完整使用，是否具有开始或者结束的标志。在这个边界点更新sourceid\n\n完整使用的标志有：\n* 该webview是应用中当前存在的唯一本项目的webview，标记一次使用的开始\n* 应用中当前存在的唯一本项目的webview被销毁，标记一次使用的结束\n\n这2种标志如何去标记呢？我想到了以下办法：\n* app提供相关api告诉我们是否是同源webview的第一个页面，就像微信小程序那样，打开非首页的头部左上角会显示一个home按钮。很遗憾没有找到相关api。\n* 像window.onbeforeunload那样监听页面销毁，存储过sourceid的页面在页面销毁前销毁缓存的sourceid。通俗来讲，就是自产自销（销毁）。经测试发现，webview关闭并不会触发window.onbeforeunload和onunload事件。该方法不可行。\n\n### 不那么完美的实现方案\n当没有完美的解决方案时，问自己，我们真的一定要完美的实现吗？经过和产品的讨论，产品方认为，不需要。可以根据用户的使用习惯，大致确定sourceid的合理有效时间，通过localstorage实现超时清理方案。\n\n## 结论\n又一个很简单的决策公式：决策 = 收益 - 成本 - 风险\n以下列出了暂时可行的方案评估表：\n\n方案 | 收益 | 成本（开发）| 风险（上线+后期维护）| 决策\n---|---|---|---|---\nproxy拦截api添加参数 | 10 | 3 | 1+1 | 5\nlocalstorage有效期 | 8 | 1 | 0+0 | 7 \n\n根据上表的结果，最终选择了“localstorage有效期”这个方案。\n\n\n\n","slug":"think/fanganfenxi","published":1,"updated":"2021-06-14T02:09:05.705Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6w0011ecq8920ffvrk","content":"<blockquote>\n<p>分析技术方案时，保持以终为始的原则。思维就像一棵树，方案就像树枝，遍历之后发现不可行，只需要往根部回溯，重新思考达到目标的其它方法。</p>\n</blockquote>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>这是我负责的一个H5项目，内嵌于APP的webview，页面跳转通过打开新的webview来实现类app的效果。</p>\n<p>在app内从另外一个项目跳转到该应用时，需要带上一个sourceid，标记引流入口。sourceid可能是来源于首页或者商品详情页，只有在下单的时候会提交给订单。</p>\n<p>任务<br>对该sourceid生命周期的要求是： 外部项目跳转进入该项目之后，到关闭由它打开的所有页面为止，算一个生命周期。</p>\n<h2 id=\"行动\"><a href=\"#行动\" class=\"headerlink\" title=\"行动\"></a>行动</h2><h3 id=\"从页面跳转传参入手\"><a href=\"#从页面跳转传参入手\" class=\"headerlink\" title=\"从页面跳转传参入手\"></a>从页面跳转传参入手</h3><p>app为和提供了桥接sdk，应用内webview调用的是同一个api，打开新窗口前可以使用proxy拦截该api，获取当前窗口的链接，将链接上的sourceid带到新窗口上，实现sourceid参数的透传。</p>\n<p>这个方法简单粗暴，却有明显的缺点：</p>\n<ul>\n<li>业务和工具耦合，不利于维护</li>\n<li>分享转发前需要把该参数去掉，会影响到旧的逻辑</li>\n<li>该方法可行，但是属于对公共代码的修改，容易引发bug，暂时纳入备选方案。</li>\n</ul>\n<h3 id=\"从本地存储方案入手\"><a href=\"#从本地存储方案入手\" class=\"headerlink\" title=\"从本地存储方案入手\"></a>从本地存储方案入手</h3><p>浏览器本地缓存方案有localstorage、sessionStorage、cookie。这些方案在webview中是否也适用呢？</p>\n<p>经过在ios中验证localstorage的缓存行为和浏览器类似，sessionStorage和cookie在webview之间不共享，因此2者被排除。</p>\n<blockquote>\n<p>请教了ios客户端的同事，了解到，ios平台的app目前使用的是WKwebview实现，窗口之间使用的是不同的WKProcessPool，所以数据共享是个问题，localstorage之所以看起来像是共享了，实际上只是在打开同源窗口时复制了一份，新开的窗口对localStorgae所做的修改不会对旧窗口有影响。这些问题在以前UIwebview开发的时代是不存在的，而UIwebview的是因为内存占用过高而逐渐被淘汰。</p>\n</blockquote>\n<p>可共享的存储方案就只剩下localstorage。由于localstorage属于持久化存储，想要识别一次完整使用，需要抓住一个边界点：要如何识别一次完整使用，是否具有开始或者结束的标志。在这个边界点更新sourceid</p>\n<p>完整使用的标志有：</p>\n<ul>\n<li>该webview是应用中当前存在的唯一本项目的webview，标记一次使用的开始</li>\n<li>应用中当前存在的唯一本项目的webview被销毁，标记一次使用的结束</li>\n</ul>\n<p>这2种标志如何去标记呢？我想到了以下办法：</p>\n<ul>\n<li>app提供相关api告诉我们是否是同源webview的第一个页面，就像微信小程序那样，打开非首页的头部左上角会显示一个home按钮。很遗憾没有找到相关api。</li>\n<li>像window.onbeforeunload那样监听页面销毁，存储过sourceid的页面在页面销毁前销毁缓存的sourceid。通俗来讲，就是自产自销（销毁）。经测试发现，webview关闭并不会触发window.onbeforeunload和onunload事件。该方法不可行。</li>\n</ul>\n<h3 id=\"不那么完美的实现方案\"><a href=\"#不那么完美的实现方案\" class=\"headerlink\" title=\"不那么完美的实现方案\"></a>不那么完美的实现方案</h3><p>当没有完美的解决方案时，问自己，我们真的一定要完美的实现吗？经过和产品的讨论，产品方认为，不需要。可以根据用户的使用习惯，大致确定sourceid的合理有效时间，通过localstorage实现超时清理方案。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>又一个很简单的决策公式：决策 = 收益 - 成本 - 风险<br>以下列出了暂时可行的方案评估表：</p>\n<table>\n<thead>\n<tr>\n<th>方案</th>\n<th>收益</th>\n<th>成本（开发）</th>\n<th>风险（上线+后期维护）</th>\n<th>决策</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>proxy拦截api添加参数</td>\n<td>10</td>\n<td>3</td>\n<td>1+1</td>\n<td>5</td>\n</tr>\n<tr>\n<td>localstorage有效期</td>\n<td>8</td>\n<td>1</td>\n<td>0+0</td>\n<td>7</td>\n</tr>\n</tbody></table>\n<p>根据上表的结果，最终选择了“localstorage有效期”这个方案。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>分析技术方案时，保持以终为始的原则。思维就像一棵树，方案就像树枝，遍历之后发现不可行，只需要往根部回溯，重新思考达到目标的其它方法。</p>\n</blockquote>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>这是我负责的一个H5项目，内嵌于APP的webview，页面跳转通过打开新的webview来实现类app的效果。</p>\n<p>在app内从另外一个项目跳转到该应用时，需要带上一个sourceid，标记引流入口。sourceid可能是来源于首页或者商品详情页，只有在下单的时候会提交给订单。</p>\n<p>任务<br>对该sourceid生命周期的要求是： 外部项目跳转进入该项目之后，到关闭由它打开的所有页面为止，算一个生命周期。</p>\n<h2 id=\"行动\"><a href=\"#行动\" class=\"headerlink\" title=\"行动\"></a>行动</h2><h3 id=\"从页面跳转传参入手\"><a href=\"#从页面跳转传参入手\" class=\"headerlink\" title=\"从页面跳转传参入手\"></a>从页面跳转传参入手</h3><p>app为和提供了桥接sdk，应用内webview调用的是同一个api，打开新窗口前可以使用proxy拦截该api，获取当前窗口的链接，将链接上的sourceid带到新窗口上，实现sourceid参数的透传。</p>\n<p>这个方法简单粗暴，却有明显的缺点：</p>\n<ul>\n<li>业务和工具耦合，不利于维护</li>\n<li>分享转发前需要把该参数去掉，会影响到旧的逻辑</li>\n<li>该方法可行，但是属于对公共代码的修改，容易引发bug，暂时纳入备选方案。</li>\n</ul>\n<h3 id=\"从本地存储方案入手\"><a href=\"#从本地存储方案入手\" class=\"headerlink\" title=\"从本地存储方案入手\"></a>从本地存储方案入手</h3><p>浏览器本地缓存方案有localstorage、sessionStorage、cookie。这些方案在webview中是否也适用呢？</p>\n<p>经过在ios中验证localstorage的缓存行为和浏览器类似，sessionStorage和cookie在webview之间不共享，因此2者被排除。</p>\n<blockquote>\n<p>请教了ios客户端的同事，了解到，ios平台的app目前使用的是WKwebview实现，窗口之间使用的是不同的WKProcessPool，所以数据共享是个问题，localstorage之所以看起来像是共享了，实际上只是在打开同源窗口时复制了一份，新开的窗口对localStorgae所做的修改不会对旧窗口有影响。这些问题在以前UIwebview开发的时代是不存在的，而UIwebview的是因为内存占用过高而逐渐被淘汰。</p>\n</blockquote>\n<p>可共享的存储方案就只剩下localstorage。由于localstorage属于持久化存储，想要识别一次完整使用，需要抓住一个边界点：要如何识别一次完整使用，是否具有开始或者结束的标志。在这个边界点更新sourceid</p>\n<p>完整使用的标志有：</p>\n<ul>\n<li>该webview是应用中当前存在的唯一本项目的webview，标记一次使用的开始</li>\n<li>应用中当前存在的唯一本项目的webview被销毁，标记一次使用的结束</li>\n</ul>\n<p>这2种标志如何去标记呢？我想到了以下办法：</p>\n<ul>\n<li>app提供相关api告诉我们是否是同源webview的第一个页面，就像微信小程序那样，打开非首页的头部左上角会显示一个home按钮。很遗憾没有找到相关api。</li>\n<li>像window.onbeforeunload那样监听页面销毁，存储过sourceid的页面在页面销毁前销毁缓存的sourceid。通俗来讲，就是自产自销（销毁）。经测试发现，webview关闭并不会触发window.onbeforeunload和onunload事件。该方法不可行。</li>\n</ul>\n<h3 id=\"不那么完美的实现方案\"><a href=\"#不那么完美的实现方案\" class=\"headerlink\" title=\"不那么完美的实现方案\"></a>不那么完美的实现方案</h3><p>当没有完美的解决方案时，问自己，我们真的一定要完美的实现吗？经过和产品的讨论，产品方认为，不需要。可以根据用户的使用习惯，大致确定sourceid的合理有效时间，通过localstorage实现超时清理方案。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>又一个很简单的决策公式：决策 = 收益 - 成本 - 风险<br>以下列出了暂时可行的方案评估表：</p>\n<table>\n<thead>\n<tr>\n<th>方案</th>\n<th>收益</th>\n<th>成本（开发）</th>\n<th>风险（上线+后期维护）</th>\n<th>决策</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>proxy拦截api添加参数</td>\n<td>10</td>\n<td>3</td>\n<td>1+1</td>\n<td>5</td>\n</tr>\n<tr>\n<td>localstorage有效期</td>\n<td>8</td>\n<td>1</td>\n<td>0+0</td>\n<td>7</td>\n</tr>\n</tbody></table>\n<p>根据上表的结果，最终选择了“localstorage有效期”这个方案。</p>\n"},{"title":"四象限时间管理","date":"2019-04-08T16:00:00.000Z","_content":"  \n\n史蒂芬·科维的《高效能人士的七个习惯》在描述如何实现个人领域成功时提到了一个很重要的习惯，“要事第一”。\n\n通常我们列出来的TODO list是线性的，从上至下排列，我们的评判标准只有一个：是否重要。\n\n## 一、2个维度 4个象限\n\n### 2个维度：\n1. 是否重要\n\n  重要性对一个人来说要从价值观的角度去考虑。这件事做了之后是否有收获，这个收获一定要对自己有意义。\n\n  通常大家觉得，让自己有收获的事情才是最重要的。我觉得，工作期间和工作之余要区分开来。即在该做什么事情的时候就做什么事情。所以，针对工作和生活可以使用2份4象限表。\n\n\n2. 是否紧急\n\n  在近期内必须要完成的，即紧急的\n\n  一般比较紧急的是有deadline的事情。\n  工作上的例子：项目上线，会议前的方案搜集\n  生活中的例子：上学，煮饭\n\n### 4个象限：\n1. 重要且紧急\n2. 重要不紧急\n3. 不重要但紧急\n4. 不重要不紧急。\n\n## 二、如何区分事件属于哪个象限？\n\n以下针对4个象限的界定标准进行描述。\n\n### 重要&紧急 (Urgent & Important)\n\n这个象限内的事情可以说不得不做。生活中应该尽量避免堆积太多此类事情，否则整日焦头烂额。\n\n> 1. 不立即做的话将来随时可能产生危机\n> 2. 必须在deadline之前赶出来，这个deadline强调外界压力\n\n### 重要&不紧急 (Important & Not Urgent)\n\n> 1. 有助于个人长远发展的事情， 比如学习计划，技术方案调研\n> 2. 有助于群体长远发展的事情，比如培训计划\n> 3. 有助于减少“重要紧急”事项的事情。\n\n我们通常说，有拖延症的人通常指，把重要但是不紧急的事情拖延到演变为重要紧急的事情，导致花更多的时间在第一象限。\n\n### 紧急&不重要 (Urgent & Not Important)\n\n> 1. 需要近期做的事情，迫不得已可以选择不做或者接受延期的\n> 2. 时间比较赶，但是不怎么耗费精力\n\n这类工作最好做，但是在精力状态一般的情况下做，必要的时候选择不做。这样可以充分利用以及节约时间。这类事情包括约会，群体活动，回复邮件。\n\n### 不重要&不紧急 (Not Important & Not Urgent)\n\n> 1. 纯粹打发时间，没有任何实际意义\n> 2. 短期精神满足，实则空虚\n\n这类事情在其它象限的事情没有处理完的时候尽量不要做。除非其它象限的事情完全没有精力做下去了又不想休息。\n\n## 三、如何实施\n\n### 1、针对列出的任务清单，问自己2个问题：\n\n1. 这件事情，真的很重要吗？如果是工作任务，是否属于高优先级的任务？如果是学习任务，是否能让自己有所收获？所需要的时间是多久？\n\n通过以上问题，把任务分成重要和不重要的，相同类别下的任务分别赋值一个重要指数。\n\n2. 这件事情你自己计划或者上级需要什么时候完成？写下deadline，给自己定下的deadline最好比实际要求的更早。\n\n通过以上问题，把最近1周内需要做的事情按照deadline进行排序，其它的事情暂时安排到下周。如果任务需要花的时间比较长，最好做一下任务分解，说不定可以分解出一些可以延后的任务。\n\n### 2、针对排好的任务进行象限组合、排序\n\n把每个任务放到所属的象限内，并根据2个维度的指数进行象限内排序。\n\n### 3、执行顺序\n\n大体上任务的执行顺序按照 重要&紧急，重要&不紧急，紧急&不重要，不紧急不重要 的顺序来。\n\n但是，如果你是替别人打工，有些工作上“不重要且紧急”的事情需要排在“重要&不紧急”的事情前面，往往前者比后者更加耗时间，所以可以选择在前者的间隙处理后者。\n\n### 4、每日调整&总结\n\n安排总会因为各种原因变化，我们要重视对任务重新梳理的过程，以免做无用功。\n\n不要每天给自己安排过多的任务，总结的时候发现没有按时完成任务会带来懊悔和自我否定。合理的安排比压榨自己更加划算。\n\n\n","source":"_posts/think/manage-time.md","raw":"---\ntitle: 四象限时间管理\ncategories: 思考\ntags: [学习]\ndate: 2019-4-9\n---  \n\n史蒂芬·科维的《高效能人士的七个习惯》在描述如何实现个人领域成功时提到了一个很重要的习惯，“要事第一”。\n\n通常我们列出来的TODO list是线性的，从上至下排列，我们的评判标准只有一个：是否重要。\n\n## 一、2个维度 4个象限\n\n### 2个维度：\n1. 是否重要\n\n  重要性对一个人来说要从价值观的角度去考虑。这件事做了之后是否有收获，这个收获一定要对自己有意义。\n\n  通常大家觉得，让自己有收获的事情才是最重要的。我觉得，工作期间和工作之余要区分开来。即在该做什么事情的时候就做什么事情。所以，针对工作和生活可以使用2份4象限表。\n\n\n2. 是否紧急\n\n  在近期内必须要完成的，即紧急的\n\n  一般比较紧急的是有deadline的事情。\n  工作上的例子：项目上线，会议前的方案搜集\n  生活中的例子：上学，煮饭\n\n### 4个象限：\n1. 重要且紧急\n2. 重要不紧急\n3. 不重要但紧急\n4. 不重要不紧急。\n\n## 二、如何区分事件属于哪个象限？\n\n以下针对4个象限的界定标准进行描述。\n\n### 重要&紧急 (Urgent & Important)\n\n这个象限内的事情可以说不得不做。生活中应该尽量避免堆积太多此类事情，否则整日焦头烂额。\n\n> 1. 不立即做的话将来随时可能产生危机\n> 2. 必须在deadline之前赶出来，这个deadline强调外界压力\n\n### 重要&不紧急 (Important & Not Urgent)\n\n> 1. 有助于个人长远发展的事情， 比如学习计划，技术方案调研\n> 2. 有助于群体长远发展的事情，比如培训计划\n> 3. 有助于减少“重要紧急”事项的事情。\n\n我们通常说，有拖延症的人通常指，把重要但是不紧急的事情拖延到演变为重要紧急的事情，导致花更多的时间在第一象限。\n\n### 紧急&不重要 (Urgent & Not Important)\n\n> 1. 需要近期做的事情，迫不得已可以选择不做或者接受延期的\n> 2. 时间比较赶，但是不怎么耗费精力\n\n这类工作最好做，但是在精力状态一般的情况下做，必要的时候选择不做。这样可以充分利用以及节约时间。这类事情包括约会，群体活动，回复邮件。\n\n### 不重要&不紧急 (Not Important & Not Urgent)\n\n> 1. 纯粹打发时间，没有任何实际意义\n> 2. 短期精神满足，实则空虚\n\n这类事情在其它象限的事情没有处理完的时候尽量不要做。除非其它象限的事情完全没有精力做下去了又不想休息。\n\n## 三、如何实施\n\n### 1、针对列出的任务清单，问自己2个问题：\n\n1. 这件事情，真的很重要吗？如果是工作任务，是否属于高优先级的任务？如果是学习任务，是否能让自己有所收获？所需要的时间是多久？\n\n通过以上问题，把任务分成重要和不重要的，相同类别下的任务分别赋值一个重要指数。\n\n2. 这件事情你自己计划或者上级需要什么时候完成？写下deadline，给自己定下的deadline最好比实际要求的更早。\n\n通过以上问题，把最近1周内需要做的事情按照deadline进行排序，其它的事情暂时安排到下周。如果任务需要花的时间比较长，最好做一下任务分解，说不定可以分解出一些可以延后的任务。\n\n### 2、针对排好的任务进行象限组合、排序\n\n把每个任务放到所属的象限内，并根据2个维度的指数进行象限内排序。\n\n### 3、执行顺序\n\n大体上任务的执行顺序按照 重要&紧急，重要&不紧急，紧急&不重要，不紧急不重要 的顺序来。\n\n但是，如果你是替别人打工，有些工作上“不重要且紧急”的事情需要排在“重要&不紧急”的事情前面，往往前者比后者更加耗时间，所以可以选择在前者的间隙处理后者。\n\n### 4、每日调整&总结\n\n安排总会因为各种原因变化，我们要重视对任务重新梳理的过程，以免做无用功。\n\n不要每天给自己安排过多的任务，总结的时候发现没有按时完成任务会带来懊悔和自我否定。合理的安排比压榨自己更加划算。\n\n\n","slug":"think/manage-time","published":1,"updated":"2021-06-14T02:09:09.240Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6w0012ecq885di2f5y","content":"<p>史蒂芬·科维的《高效能人士的七个习惯》在描述如何实现个人领域成功时提到了一个很重要的习惯，“要事第一”。</p>\n<p>通常我们列出来的TODO list是线性的，从上至下排列，我们的评判标准只有一个：是否重要。</p>\n<h2 id=\"一、2个维度-4个象限\"><a href=\"#一、2个维度-4个象限\" class=\"headerlink\" title=\"一、2个维度 4个象限\"></a>一、2个维度 4个象限</h2><h3 id=\"2个维度：\"><a href=\"#2个维度：\" class=\"headerlink\" title=\"2个维度：\"></a>2个维度：</h3><ol>\n<li>是否重要</li>\n</ol>\n<p>  重要性对一个人来说要从价值观的角度去考虑。这件事做了之后是否有收获，这个收获一定要对自己有意义。</p>\n<p>  通常大家觉得，让自己有收获的事情才是最重要的。我觉得，工作期间和工作之余要区分开来。即在该做什么事情的时候就做什么事情。所以，针对工作和生活可以使用2份4象限表。</p>\n<ol start=\"2\">\n<li>是否紧急</li>\n</ol>\n<p>  在近期内必须要完成的，即紧急的</p>\n<p>  一般比较紧急的是有deadline的事情。<br>  工作上的例子：项目上线，会议前的方案搜集<br>  生活中的例子：上学，煮饭</p>\n<h3 id=\"4个象限：\"><a href=\"#4个象限：\" class=\"headerlink\" title=\"4个象限：\"></a>4个象限：</h3><ol>\n<li>重要且紧急</li>\n<li>重要不紧急</li>\n<li>不重要但紧急</li>\n<li>不重要不紧急。</li>\n</ol>\n<h2 id=\"二、如何区分事件属于哪个象限？\"><a href=\"#二、如何区分事件属于哪个象限？\" class=\"headerlink\" title=\"二、如何区分事件属于哪个象限？\"></a>二、如何区分事件属于哪个象限？</h2><p>以下针对4个象限的界定标准进行描述。</p>\n<h3 id=\"重要-amp-紧急-Urgent-amp-Important\"><a href=\"#重要-amp-紧急-Urgent-amp-Important\" class=\"headerlink\" title=\"重要&amp;紧急 (Urgent &amp; Important)\"></a>重要&amp;紧急 (Urgent &amp; Important)</h3><p>这个象限内的事情可以说不得不做。生活中应该尽量避免堆积太多此类事情，否则整日焦头烂额。</p>\n<blockquote>\n<ol>\n<li>不立即做的话将来随时可能产生危机</li>\n<li>必须在deadline之前赶出来，这个deadline强调外界压力</li>\n</ol>\n</blockquote>\n<h3 id=\"重要-amp-不紧急-Important-amp-Not-Urgent\"><a href=\"#重要-amp-不紧急-Important-amp-Not-Urgent\" class=\"headerlink\" title=\"重要&amp;不紧急 (Important &amp; Not Urgent)\"></a>重要&amp;不紧急 (Important &amp; Not Urgent)</h3><blockquote>\n<ol>\n<li>有助于个人长远发展的事情， 比如学习计划，技术方案调研</li>\n<li>有助于群体长远发展的事情，比如培训计划</li>\n<li>有助于减少“重要紧急”事项的事情。</li>\n</ol>\n</blockquote>\n<p>我们通常说，有拖延症的人通常指，把重要但是不紧急的事情拖延到演变为重要紧急的事情，导致花更多的时间在第一象限。</p>\n<h3 id=\"紧急-amp-不重要-Urgent-amp-Not-Important\"><a href=\"#紧急-amp-不重要-Urgent-amp-Not-Important\" class=\"headerlink\" title=\"紧急&amp;不重要 (Urgent &amp; Not Important)\"></a>紧急&amp;不重要 (Urgent &amp; Not Important)</h3><blockquote>\n<ol>\n<li>需要近期做的事情，迫不得已可以选择不做或者接受延期的</li>\n<li>时间比较赶，但是不怎么耗费精力</li>\n</ol>\n</blockquote>\n<p>这类工作最好做，但是在精力状态一般的情况下做，必要的时候选择不做。这样可以充分利用以及节约时间。这类事情包括约会，群体活动，回复邮件。</p>\n<h3 id=\"不重要-amp-不紧急-Not-Important-amp-Not-Urgent\"><a href=\"#不重要-amp-不紧急-Not-Important-amp-Not-Urgent\" class=\"headerlink\" title=\"不重要&amp;不紧急 (Not Important &amp; Not Urgent)\"></a>不重要&amp;不紧急 (Not Important &amp; Not Urgent)</h3><blockquote>\n<ol>\n<li>纯粹打发时间，没有任何实际意义</li>\n<li>短期精神满足，实则空虚</li>\n</ol>\n</blockquote>\n<p>这类事情在其它象限的事情没有处理完的时候尽量不要做。除非其它象限的事情完全没有精力做下去了又不想休息。</p>\n<h2 id=\"三、如何实施\"><a href=\"#三、如何实施\" class=\"headerlink\" title=\"三、如何实施\"></a>三、如何实施</h2><h3 id=\"1、针对列出的任务清单，问自己2个问题：\"><a href=\"#1、针对列出的任务清单，问自己2个问题：\" class=\"headerlink\" title=\"1、针对列出的任务清单，问自己2个问题：\"></a>1、针对列出的任务清单，问自己2个问题：</h3><ol>\n<li>这件事情，真的很重要吗？如果是工作任务，是否属于高优先级的任务？如果是学习任务，是否能让自己有所收获？所需要的时间是多久？</li>\n</ol>\n<p>通过以上问题，把任务分成重要和不重要的，相同类别下的任务分别赋值一个重要指数。</p>\n<ol start=\"2\">\n<li>这件事情你自己计划或者上级需要什么时候完成？写下deadline，给自己定下的deadline最好比实际要求的更早。</li>\n</ol>\n<p>通过以上问题，把最近1周内需要做的事情按照deadline进行排序，其它的事情暂时安排到下周。如果任务需要花的时间比较长，最好做一下任务分解，说不定可以分解出一些可以延后的任务。</p>\n<h3 id=\"2、针对排好的任务进行象限组合、排序\"><a href=\"#2、针对排好的任务进行象限组合、排序\" class=\"headerlink\" title=\"2、针对排好的任务进行象限组合、排序\"></a>2、针对排好的任务进行象限组合、排序</h3><p>把每个任务放到所属的象限内，并根据2个维度的指数进行象限内排序。</p>\n<h3 id=\"3、执行顺序\"><a href=\"#3、执行顺序\" class=\"headerlink\" title=\"3、执行顺序\"></a>3、执行顺序</h3><p>大体上任务的执行顺序按照 重要&amp;紧急，重要&amp;不紧急，紧急&amp;不重要，不紧急不重要 的顺序来。</p>\n<p>但是，如果你是替别人打工，有些工作上“不重要且紧急”的事情需要排在“重要&amp;不紧急”的事情前面，往往前者比后者更加耗时间，所以可以选择在前者的间隙处理后者。</p>\n<h3 id=\"4、每日调整-amp-总结\"><a href=\"#4、每日调整-amp-总结\" class=\"headerlink\" title=\"4、每日调整&amp;总结\"></a>4、每日调整&amp;总结</h3><p>安排总会因为各种原因变化，我们要重视对任务重新梳理的过程，以免做无用功。</p>\n<p>不要每天给自己安排过多的任务，总结的时候发现没有按时完成任务会带来懊悔和自我否定。合理的安排比压榨自己更加划算。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>史蒂芬·科维的《高效能人士的七个习惯》在描述如何实现个人领域成功时提到了一个很重要的习惯，“要事第一”。</p>\n<p>通常我们列出来的TODO list是线性的，从上至下排列，我们的评判标准只有一个：是否重要。</p>\n<h2 id=\"一、2个维度-4个象限\"><a href=\"#一、2个维度-4个象限\" class=\"headerlink\" title=\"一、2个维度 4个象限\"></a>一、2个维度 4个象限</h2><h3 id=\"2个维度：\"><a href=\"#2个维度：\" class=\"headerlink\" title=\"2个维度：\"></a>2个维度：</h3><ol>\n<li>是否重要</li>\n</ol>\n<p>  重要性对一个人来说要从价值观的角度去考虑。这件事做了之后是否有收获，这个收获一定要对自己有意义。</p>\n<p>  通常大家觉得，让自己有收获的事情才是最重要的。我觉得，工作期间和工作之余要区分开来。即在该做什么事情的时候就做什么事情。所以，针对工作和生活可以使用2份4象限表。</p>\n<ol start=\"2\">\n<li>是否紧急</li>\n</ol>\n<p>  在近期内必须要完成的，即紧急的</p>\n<p>  一般比较紧急的是有deadline的事情。<br>  工作上的例子：项目上线，会议前的方案搜集<br>  生活中的例子：上学，煮饭</p>\n<h3 id=\"4个象限：\"><a href=\"#4个象限：\" class=\"headerlink\" title=\"4个象限：\"></a>4个象限：</h3><ol>\n<li>重要且紧急</li>\n<li>重要不紧急</li>\n<li>不重要但紧急</li>\n<li>不重要不紧急。</li>\n</ol>\n<h2 id=\"二、如何区分事件属于哪个象限？\"><a href=\"#二、如何区分事件属于哪个象限？\" class=\"headerlink\" title=\"二、如何区分事件属于哪个象限？\"></a>二、如何区分事件属于哪个象限？</h2><p>以下针对4个象限的界定标准进行描述。</p>\n<h3 id=\"重要-amp-紧急-Urgent-amp-Important\"><a href=\"#重要-amp-紧急-Urgent-amp-Important\" class=\"headerlink\" title=\"重要&amp;紧急 (Urgent &amp; Important)\"></a>重要&amp;紧急 (Urgent &amp; Important)</h3><p>这个象限内的事情可以说不得不做。生活中应该尽量避免堆积太多此类事情，否则整日焦头烂额。</p>\n<blockquote>\n<ol>\n<li>不立即做的话将来随时可能产生危机</li>\n<li>必须在deadline之前赶出来，这个deadline强调外界压力</li>\n</ol>\n</blockquote>\n<h3 id=\"重要-amp-不紧急-Important-amp-Not-Urgent\"><a href=\"#重要-amp-不紧急-Important-amp-Not-Urgent\" class=\"headerlink\" title=\"重要&amp;不紧急 (Important &amp; Not Urgent)\"></a>重要&amp;不紧急 (Important &amp; Not Urgent)</h3><blockquote>\n<ol>\n<li>有助于个人长远发展的事情， 比如学习计划，技术方案调研</li>\n<li>有助于群体长远发展的事情，比如培训计划</li>\n<li>有助于减少“重要紧急”事项的事情。</li>\n</ol>\n</blockquote>\n<p>我们通常说，有拖延症的人通常指，把重要但是不紧急的事情拖延到演变为重要紧急的事情，导致花更多的时间在第一象限。</p>\n<h3 id=\"紧急-amp-不重要-Urgent-amp-Not-Important\"><a href=\"#紧急-amp-不重要-Urgent-amp-Not-Important\" class=\"headerlink\" title=\"紧急&amp;不重要 (Urgent &amp; Not Important)\"></a>紧急&amp;不重要 (Urgent &amp; Not Important)</h3><blockquote>\n<ol>\n<li>需要近期做的事情，迫不得已可以选择不做或者接受延期的</li>\n<li>时间比较赶，但是不怎么耗费精力</li>\n</ol>\n</blockquote>\n<p>这类工作最好做，但是在精力状态一般的情况下做，必要的时候选择不做。这样可以充分利用以及节约时间。这类事情包括约会，群体活动，回复邮件。</p>\n<h3 id=\"不重要-amp-不紧急-Not-Important-amp-Not-Urgent\"><a href=\"#不重要-amp-不紧急-Not-Important-amp-Not-Urgent\" class=\"headerlink\" title=\"不重要&amp;不紧急 (Not Important &amp; Not Urgent)\"></a>不重要&amp;不紧急 (Not Important &amp; Not Urgent)</h3><blockquote>\n<ol>\n<li>纯粹打发时间，没有任何实际意义</li>\n<li>短期精神满足，实则空虚</li>\n</ol>\n</blockquote>\n<p>这类事情在其它象限的事情没有处理完的时候尽量不要做。除非其它象限的事情完全没有精力做下去了又不想休息。</p>\n<h2 id=\"三、如何实施\"><a href=\"#三、如何实施\" class=\"headerlink\" title=\"三、如何实施\"></a>三、如何实施</h2><h3 id=\"1、针对列出的任务清单，问自己2个问题：\"><a href=\"#1、针对列出的任务清单，问自己2个问题：\" class=\"headerlink\" title=\"1、针对列出的任务清单，问自己2个问题：\"></a>1、针对列出的任务清单，问自己2个问题：</h3><ol>\n<li>这件事情，真的很重要吗？如果是工作任务，是否属于高优先级的任务？如果是学习任务，是否能让自己有所收获？所需要的时间是多久？</li>\n</ol>\n<p>通过以上问题，把任务分成重要和不重要的，相同类别下的任务分别赋值一个重要指数。</p>\n<ol start=\"2\">\n<li>这件事情你自己计划或者上级需要什么时候完成？写下deadline，给自己定下的deadline最好比实际要求的更早。</li>\n</ol>\n<p>通过以上问题，把最近1周内需要做的事情按照deadline进行排序，其它的事情暂时安排到下周。如果任务需要花的时间比较长，最好做一下任务分解，说不定可以分解出一些可以延后的任务。</p>\n<h3 id=\"2、针对排好的任务进行象限组合、排序\"><a href=\"#2、针对排好的任务进行象限组合、排序\" class=\"headerlink\" title=\"2、针对排好的任务进行象限组合、排序\"></a>2、针对排好的任务进行象限组合、排序</h3><p>把每个任务放到所属的象限内，并根据2个维度的指数进行象限内排序。</p>\n<h3 id=\"3、执行顺序\"><a href=\"#3、执行顺序\" class=\"headerlink\" title=\"3、执行顺序\"></a>3、执行顺序</h3><p>大体上任务的执行顺序按照 重要&amp;紧急，重要&amp;不紧急，紧急&amp;不重要，不紧急不重要 的顺序来。</p>\n<p>但是，如果你是替别人打工，有些工作上“不重要且紧急”的事情需要排在“重要&amp;不紧急”的事情前面，往往前者比后者更加耗时间，所以可以选择在前者的间隙处理后者。</p>\n<h3 id=\"4、每日调整-amp-总结\"><a href=\"#4、每日调整-amp-总结\" class=\"headerlink\" title=\"4、每日调整&amp;总结\"></a>4、每日调整&amp;总结</h3><p>安排总会因为各种原因变化，我们要重视对任务重新梳理的过程，以免做无用功。</p>\n<p>不要每天给自己安排过多的任务，总结的时候发现没有按时完成任务会带来懊悔和自我否定。合理的安排比压榨自己更加划算。</p>\n"},{"title":"uni-app开发注意事项","date":"2021-06-06T16:00:00.000Z","_content":"  \n\n### 对Vue原生语法的支持\n1. 不支持v-model\n\n### 内置组件\n\n##### picker 日期\n\n1. 无法自定义按钮颜色\n\n### 样式\n1. 组件之间的样式互不影响，跨组件的样式定义不会生效，如果想穿透组件层级覆盖样式，需要在页面级别的文件中定义样式\n2. h5编译出来的样式默认使用了scoped，如果想要跨组件层级穿透样式，需要在样式定义前加上/deep/\n3. 引入本地的font-family时，font-face定义需要将url直接赋值为绝对路径，或者转化为base64字符串，不能直接引用相对路径，否则会出现找不到字体文件的报错\n4. class绑定不支持模板字符串拼接\n```\n:class=\"`rank-${index}`\"\n```\n这种语法不支持，但是支持表达式拼接：\n```\n:class=\"'rank'+index\"\n```\n\n### 自定义组件\n\n1. 自定义组件上绑定原生事件需要用.native修饰符\n```html\n<we-button @click.native=\"cancel\">取消</we-button>\n```\n\n2. 自定义组件绑定class和style样式不会透传到组件内部根元素上\n\n3. 不能直接在自定义组件上使用v-slot作为插槽，需要包裹一层template\n\n4. 自定义组件注册为全局组件时，本地开发需要重启。否则引用时属性传进去全是undefined\n\n5. 自定义组件模式下，子组件修改父组件传入的对象的属性不会更新到视图。\n\n### uni-ui版本问题\n\n1. uni-popup组件，1.0.8版本时uni-popup容器没有设置z-index。1.1.9版本却设置了z-index为99，会出现样式兼容问题。因此最好固定版本。\n\n### 插槽\n\nuni-app目前作用域插槽仅支持解构插槽，且作用域插槽不能使用父组件的属性\n\n### 扩展运算符\ndcloud问题版本：<= 2.0.0-28720200819001\n组件绑定属性时可以使用扩展运算符，但是，为自定义事件回调传参时，不能使用扩展运算符。\n\n\n```html\n<template>\n\t<view class=\"content\">\n\t\t\t<text class=\"title\" @click=\"handleClick({...myParams})\">点我</text>\n\t</view>\n</template>\n\n<script>\n\texport default {\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\tmyParams: {\n\t\t\t\t\tname: 'Mac'\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tonLoad() {\n\n\t\t},\n\t\tmethods: {\n\t\t\thandleClick(params) {\n\t\t\t\tconsole.log('handleClick',params)\n\t\t\t}\n\t\t}\n\t}\n</script>\n\n\n```\n\n","source":"_posts/uni-app/attentions.md","raw":"---\ntitle: uni-app开发注意事项\ncategories: uni-app\ntags: [uni-app]\ndate: 2021-6-7\n---  \n\n### 对Vue原生语法的支持\n1. 不支持v-model\n\n### 内置组件\n\n##### picker 日期\n\n1. 无法自定义按钮颜色\n\n### 样式\n1. 组件之间的样式互不影响，跨组件的样式定义不会生效，如果想穿透组件层级覆盖样式，需要在页面级别的文件中定义样式\n2. h5编译出来的样式默认使用了scoped，如果想要跨组件层级穿透样式，需要在样式定义前加上/deep/\n3. 引入本地的font-family时，font-face定义需要将url直接赋值为绝对路径，或者转化为base64字符串，不能直接引用相对路径，否则会出现找不到字体文件的报错\n4. class绑定不支持模板字符串拼接\n```\n:class=\"`rank-${index}`\"\n```\n这种语法不支持，但是支持表达式拼接：\n```\n:class=\"'rank'+index\"\n```\n\n### 自定义组件\n\n1. 自定义组件上绑定原生事件需要用.native修饰符\n```html\n<we-button @click.native=\"cancel\">取消</we-button>\n```\n\n2. 自定义组件绑定class和style样式不会透传到组件内部根元素上\n\n3. 不能直接在自定义组件上使用v-slot作为插槽，需要包裹一层template\n\n4. 自定义组件注册为全局组件时，本地开发需要重启。否则引用时属性传进去全是undefined\n\n5. 自定义组件模式下，子组件修改父组件传入的对象的属性不会更新到视图。\n\n### uni-ui版本问题\n\n1. uni-popup组件，1.0.8版本时uni-popup容器没有设置z-index。1.1.9版本却设置了z-index为99，会出现样式兼容问题。因此最好固定版本。\n\n### 插槽\n\nuni-app目前作用域插槽仅支持解构插槽，且作用域插槽不能使用父组件的属性\n\n### 扩展运算符\ndcloud问题版本：<= 2.0.0-28720200819001\n组件绑定属性时可以使用扩展运算符，但是，为自定义事件回调传参时，不能使用扩展运算符。\n\n\n```html\n<template>\n\t<view class=\"content\">\n\t\t\t<text class=\"title\" @click=\"handleClick({...myParams})\">点我</text>\n\t</view>\n</template>\n\n<script>\n\texport default {\n\t\tdata() {\n\t\t\treturn {\n\t\t\t\tmyParams: {\n\t\t\t\t\tname: 'Mac'\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tonLoad() {\n\n\t\t},\n\t\tmethods: {\n\t\t\thandleClick(params) {\n\t\t\t\tconsole.log('handleClick',params)\n\t\t\t}\n\t\t}\n\t}\n</script>\n\n\n```\n\n","slug":"uni-app/attentions","published":1,"updated":"2021-08-07T04:05:12.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6w0013ecq81pkr4sha","content":"<h3 id=\"对Vue原生语法的支持\"><a href=\"#对Vue原生语法的支持\" class=\"headerlink\" title=\"对Vue原生语法的支持\"></a>对Vue原生语法的支持</h3><ol>\n<li>不支持v-model</li>\n</ol>\n<h3 id=\"内置组件\"><a href=\"#内置组件\" class=\"headerlink\" title=\"内置组件\"></a>内置组件</h3><h5 id=\"picker-日期\"><a href=\"#picker-日期\" class=\"headerlink\" title=\"picker 日期\"></a>picker 日期</h5><ol>\n<li>无法自定义按钮颜色</li>\n</ol>\n<h3 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h3><ol>\n<li>组件之间的样式互不影响，跨组件的样式定义不会生效，如果想穿透组件层级覆盖样式，需要在页面级别的文件中定义样式</li>\n<li>h5编译出来的样式默认使用了scoped，如果想要跨组件层级穿透样式，需要在样式定义前加上/deep/</li>\n<li>引入本地的font-family时，font-face定义需要将url直接赋值为绝对路径，或者转化为base64字符串，不能直接引用相对路径，否则会出现找不到字体文件的报错</li>\n<li>class绑定不支持模板字符串拼接<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:class=&quot;`rank-$&#123;index&#125;`&quot;</span><br></pre></td></tr></table></figure>\n这种语法不支持，但是支持表达式拼接：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:class=&quot;&#x27;rank&#x27;+index&quot;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"自定义组件\"><a href=\"#自定义组件\" class=\"headerlink\" title=\"自定义组件\"></a>自定义组件</h3><ol>\n<li><p>自定义组件上绑定原生事件需要用.native修饰符</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">we-button</span> @<span class=\"attr\">click.native</span>=<span class=\"string\">&quot;cancel&quot;</span>&gt;</span>取消<span class=\"tag\">&lt;/<span class=\"name\">we-button</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>自定义组件绑定class和style样式不会透传到组件内部根元素上</p>\n</li>\n<li><p>不能直接在自定义组件上使用v-slot作为插槽，需要包裹一层template</p>\n</li>\n<li><p>自定义组件注册为全局组件时，本地开发需要重启。否则引用时属性传进去全是undefined</p>\n</li>\n<li><p>自定义组件模式下，子组件修改父组件传入的对象的属性不会更新到视图。</p>\n</li>\n</ol>\n<h3 id=\"uni-ui版本问题\"><a href=\"#uni-ui版本问题\" class=\"headerlink\" title=\"uni-ui版本问题\"></a>uni-ui版本问题</h3><ol>\n<li>uni-popup组件，1.0.8版本时uni-popup容器没有设置z-index。1.1.9版本却设置了z-index为99，会出现样式兼容问题。因此最好固定版本。</li>\n</ol>\n<h3 id=\"插槽\"><a href=\"#插槽\" class=\"headerlink\" title=\"插槽\"></a>插槽</h3><p>uni-app目前作用域插槽仅支持解构插槽，且作用域插槽不能使用父组件的属性</p>\n<h3 id=\"扩展运算符\"><a href=\"#扩展运算符\" class=\"headerlink\" title=\"扩展运算符\"></a>扩展运算符</h3><p>dcloud问题版本：&lt;= 2.0.0-28720200819001<br>组件绑定属性时可以使用扩展运算符，但是，为自定义事件回调传参时，不能使用扩展运算符。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;title&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;handleClick(&#123;...myParams&#125;)&quot;</span>&gt;</span>点我<span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"attr\">myParams</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&#x27;Mac&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"function\"><span class=\"title\">onLoad</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"function\"><span class=\"title\">handleClick</span>(<span class=\"params\">params</span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;handleClick&#x27;</span>,params)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">\t&#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"对Vue原生语法的支持\"><a href=\"#对Vue原生语法的支持\" class=\"headerlink\" title=\"对Vue原生语法的支持\"></a>对Vue原生语法的支持</h3><ol>\n<li>不支持v-model</li>\n</ol>\n<h3 id=\"内置组件\"><a href=\"#内置组件\" class=\"headerlink\" title=\"内置组件\"></a>内置组件</h3><h5 id=\"picker-日期\"><a href=\"#picker-日期\" class=\"headerlink\" title=\"picker 日期\"></a>picker 日期</h5><ol>\n<li>无法自定义按钮颜色</li>\n</ol>\n<h3 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h3><ol>\n<li>组件之间的样式互不影响，跨组件的样式定义不会生效，如果想穿透组件层级覆盖样式，需要在页面级别的文件中定义样式</li>\n<li>h5编译出来的样式默认使用了scoped，如果想要跨组件层级穿透样式，需要在样式定义前加上/deep/</li>\n<li>引入本地的font-family时，font-face定义需要将url直接赋值为绝对路径，或者转化为base64字符串，不能直接引用相对路径，否则会出现找不到字体文件的报错</li>\n<li>class绑定不支持模板字符串拼接<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:class=&quot;`rank-$&#123;index&#125;`&quot;</span><br></pre></td></tr></table></figure>\n这种语法不支持，但是支持表达式拼接：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:class=&quot;&#x27;rank&#x27;+index&quot;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"自定义组件\"><a href=\"#自定义组件\" class=\"headerlink\" title=\"自定义组件\"></a>自定义组件</h3><ol>\n<li><p>自定义组件上绑定原生事件需要用.native修饰符</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">we-button</span> @<span class=\"attr\">click.native</span>=<span class=\"string\">&quot;cancel&quot;</span>&gt;</span>取消<span class=\"tag\">&lt;/<span class=\"name\">we-button</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>自定义组件绑定class和style样式不会透传到组件内部根元素上</p>\n</li>\n<li><p>不能直接在自定义组件上使用v-slot作为插槽，需要包裹一层template</p>\n</li>\n<li><p>自定义组件注册为全局组件时，本地开发需要重启。否则引用时属性传进去全是undefined</p>\n</li>\n<li><p>自定义组件模式下，子组件修改父组件传入的对象的属性不会更新到视图。</p>\n</li>\n</ol>\n<h3 id=\"uni-ui版本问题\"><a href=\"#uni-ui版本问题\" class=\"headerlink\" title=\"uni-ui版本问题\"></a>uni-ui版本问题</h3><ol>\n<li>uni-popup组件，1.0.8版本时uni-popup容器没有设置z-index。1.1.9版本却设置了z-index为99，会出现样式兼容问题。因此最好固定版本。</li>\n</ol>\n<h3 id=\"插槽\"><a href=\"#插槽\" class=\"headerlink\" title=\"插槽\"></a>插槽</h3><p>uni-app目前作用域插槽仅支持解构插槽，且作用域插槽不能使用父组件的属性</p>\n<h3 id=\"扩展运算符\"><a href=\"#扩展运算符\" class=\"headerlink\" title=\"扩展运算符\"></a>扩展运算符</h3><p>dcloud问题版本：&lt;= 2.0.0-28720200819001<br>组件绑定属性时可以使用扩展运算符，但是，为自定义事件回调传参时，不能使用扩展运算符。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;title&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;handleClick(&#123;...myParams&#125;)&quot;</span>&gt;</span>点我<span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"attr\">myParams</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"attr\">name</span>: <span class=\"string\">&#x27;Mac&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"function\"><span class=\"title\">onLoad</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"function\"><span class=\"title\">handleClick</span>(<span class=\"params\">params</span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;handleClick&#x27;</span>,params)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">\t&#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":"修改uni-app的默认打包路径","date":"2021-06-07T16:00:00.000Z","_content":"  \n\n## 背景\n\nuni-app默认只有开发和生产环境，打包生成的路径默认下是如下映射关系：\n\nNODE_ENV | 目录\n---|---\nproduction | dist/build/${UNI_PLATFORM}\n其它 | dist/dev/${UNI_PLATFORM}\n\n## 需求\n\n如果新增自定义环境'test'和'preproduction'，则默认都是按照'dev'环境去映射打包路径。新增的环境要怎么做？官方文档并没有明确说明。\n\n我们希望让每个环境都有对应的打包路径：\n\nNODE_ENV | 目录\n---|---\nproduction | dist/build/${UNI_PLATFORM}\npreproduction | dist/prev/${UNI_PLATFORM}\ntest | dist/test/${UNI_PLATFORM}\ndev | dist/dev/${UNI_PLATFORM}\n\n通过查找源码中打包相关配置，发现有个`UNI_OUTPUT_DIR`参数可以配置打包路径，覆盖掉默认行为。\n\n\n```    \n\"test\": \"cross-env UNI_OUTPUT_DIR=dist/test/mp-weixin NODE_ENV=test UNI_PLATFORM=mp-weixin vue-cli-service uni-build\"\n```\n","source":"_posts/uni-app/bundle-path.md","raw":"---\ntitle: 修改uni-app的默认打包路径\ncategories: uni-app\ntags: [打包路径, uni-app]\ndate: 2021-6-8\n---  \n\n## 背景\n\nuni-app默认只有开发和生产环境，打包生成的路径默认下是如下映射关系：\n\nNODE_ENV | 目录\n---|---\nproduction | dist/build/${UNI_PLATFORM}\n其它 | dist/dev/${UNI_PLATFORM}\n\n## 需求\n\n如果新增自定义环境'test'和'preproduction'，则默认都是按照'dev'环境去映射打包路径。新增的环境要怎么做？官方文档并没有明确说明。\n\n我们希望让每个环境都有对应的打包路径：\n\nNODE_ENV | 目录\n---|---\nproduction | dist/build/${UNI_PLATFORM}\npreproduction | dist/prev/${UNI_PLATFORM}\ntest | dist/test/${UNI_PLATFORM}\ndev | dist/dev/${UNI_PLATFORM}\n\n通过查找源码中打包相关配置，发现有个`UNI_OUTPUT_DIR`参数可以配置打包路径，覆盖掉默认行为。\n\n\n```    \n\"test\": \"cross-env UNI_OUTPUT_DIR=dist/test/mp-weixin NODE_ENV=test UNI_PLATFORM=mp-weixin vue-cli-service uni-build\"\n```\n","slug":"uni-app/bundle-path","published":1,"updated":"2021-08-07T02:48:12.938Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6y0014ecq856kyhfx7","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>uni-app默认只有开发和生产环境，打包生成的路径默认下是如下映射关系：</p>\n<table>\n<thead>\n<tr>\n<th>NODE_ENV</th>\n<th>目录</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>production</td>\n<td>dist/build/${UNI_PLATFORM}</td>\n</tr>\n<tr>\n<td>其它</td>\n<td>dist/dev/${UNI_PLATFORM}</td>\n</tr>\n</tbody></table>\n<h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><p>如果新增自定义环境’test’和’preproduction’，则默认都是按照’dev’环境去映射打包路径。新增的环境要怎么做？官方文档并没有明确说明。</p>\n<p>我们希望让每个环境都有对应的打包路径：</p>\n<table>\n<thead>\n<tr>\n<th>NODE_ENV</th>\n<th>目录</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>production</td>\n<td>dist/build/${UNI_PLATFORM}</td>\n</tr>\n<tr>\n<td>preproduction</td>\n<td>dist/prev/${UNI_PLATFORM}</td>\n</tr>\n<tr>\n<td>test</td>\n<td>dist/test/${UNI_PLATFORM}</td>\n</tr>\n<tr>\n<td>dev</td>\n<td>dist/dev/${UNI_PLATFORM}</td>\n</tr>\n</tbody></table>\n<p>通过查找源码中打包相关配置，发现有个<code>UNI_OUTPUT_DIR</code>参数可以配置打包路径，覆盖掉默认行为。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;test&quot;: &quot;cross-env UNI_OUTPUT_DIR=dist/test/mp-weixin NODE_ENV=test UNI_PLATFORM=mp-weixin vue-cli-service uni-build&quot;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>uni-app默认只有开发和生产环境，打包生成的路径默认下是如下映射关系：</p>\n<table>\n<thead>\n<tr>\n<th>NODE_ENV</th>\n<th>目录</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>production</td>\n<td>dist/build/${UNI_PLATFORM}</td>\n</tr>\n<tr>\n<td>其它</td>\n<td>dist/dev/${UNI_PLATFORM}</td>\n</tr>\n</tbody></table>\n<h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><p>如果新增自定义环境’test’和’preproduction’，则默认都是按照’dev’环境去映射打包路径。新增的环境要怎么做？官方文档并没有明确说明。</p>\n<p>我们希望让每个环境都有对应的打包路径：</p>\n<table>\n<thead>\n<tr>\n<th>NODE_ENV</th>\n<th>目录</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>production</td>\n<td>dist/build/${UNI_PLATFORM}</td>\n</tr>\n<tr>\n<td>preproduction</td>\n<td>dist/prev/${UNI_PLATFORM}</td>\n</tr>\n<tr>\n<td>test</td>\n<td>dist/test/${UNI_PLATFORM}</td>\n</tr>\n<tr>\n<td>dev</td>\n<td>dist/dev/${UNI_PLATFORM}</td>\n</tr>\n</tbody></table>\n<p>通过查找源码中打包相关配置，发现有个<code>UNI_OUTPUT_DIR</code>参数可以配置打包路径，覆盖掉默认行为。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;test&quot;: &quot;cross-env UNI_OUTPUT_DIR=dist/test/mp-weixin NODE_ENV=test UNI_PLATFORM=mp-weixin vue-cli-service uni-build&quot;</span><br></pre></td></tr></table></figure>\n"},{"title":"uni-app 小程序自定义图标组件","date":"2020-11-19T16:00:00.000Z","_content":"   \n\n# 图标组件\n\n支持的功能：\n* 图标颜色\n* 图标名称\n* 图标边距\n* 图标大小\n\n#### 事件类型\n事件名称 |  事件描述\n---|---|\nclick | 点击事件\n\n```\n<!--图标组件\n<com-icons name=\"icon-location\" size=\"28rpx\" padding=\"0 10rpx\" color=\"#ffffff\"></com-icons>\n-->\n<template>\n  <text \n    class=\"uni-icons iconfont\"\n    :class=\"name\"\n    :style=\"{\n      fontSize: size,\n      color: color,\n      padding: padding\n    }\"\n    @click=\"_onClick\"></text>\n</template>\n<script>\nexport default {\n  name: 'uni-icons',\n  props: {\n    name: { // 图标类型，拼接前缀icon-\n      type: String\n    },\n    size: { // 图标大小\n      type: String,\n      default: 'inherit'\n    },\n    color: { // 图标颜色\n      type: String,\n      default: 'inherit'\n    },\n    padding: { // 内边距\n      type: String,\n      default: '0'\n    }\n  },\n  methods: {\n    _onClick() {\n      this.$emit('click')\n    }\n  }\n}\n</script>\n<style lang=\"scss\" scoped>\n  @import 'path-to/iconfont.less';\n</style>\n```","source":"_posts/uni-app/com-icons.md","raw":"---\ntitle: uni-app 小程序自定义图标组件\ncategories: uni-app\ntags: [组件, uni-app]\ndate: 2020-11-20\n---   \n\n# 图标组件\n\n支持的功能：\n* 图标颜色\n* 图标名称\n* 图标边距\n* 图标大小\n\n#### 事件类型\n事件名称 |  事件描述\n---|---|\nclick | 点击事件\n\n```\n<!--图标组件\n<com-icons name=\"icon-location\" size=\"28rpx\" padding=\"0 10rpx\" color=\"#ffffff\"></com-icons>\n-->\n<template>\n  <text \n    class=\"uni-icons iconfont\"\n    :class=\"name\"\n    :style=\"{\n      fontSize: size,\n      color: color,\n      padding: padding\n    }\"\n    @click=\"_onClick\"></text>\n</template>\n<script>\nexport default {\n  name: 'uni-icons',\n  props: {\n    name: { // 图标类型，拼接前缀icon-\n      type: String\n    },\n    size: { // 图标大小\n      type: String,\n      default: 'inherit'\n    },\n    color: { // 图标颜色\n      type: String,\n      default: 'inherit'\n    },\n    padding: { // 内边距\n      type: String,\n      default: '0'\n    }\n  },\n  methods: {\n    _onClick() {\n      this.$emit('click')\n    }\n  }\n}\n</script>\n<style lang=\"scss\" scoped>\n  @import 'path-to/iconfont.less';\n</style>\n```","slug":"uni-app/com-icons","published":1,"updated":"2021-06-14T02:11:34.847Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6y0015ecq87xqk197l","content":"<h1 id=\"图标组件\"><a href=\"#图标组件\" class=\"headerlink\" title=\"图标组件\"></a>图标组件</h1><p>支持的功能：</p>\n<ul>\n<li>图标颜色</li>\n<li>图标名称</li>\n<li>图标边距</li>\n<li>图标大小</li>\n</ul>\n<h4 id=\"事件类型\"><a href=\"#事件类型\" class=\"headerlink\" title=\"事件类型\"></a>事件类型</h4><table>\n<thead>\n<tr>\n<th>事件名称</th>\n<th>事件描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>click</td>\n<td>点击事件</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--图标组件</span><br><span class=\"line\">&lt;com-icons name=&quot;icon-location&quot; size=&quot;28rpx&quot; padding=&quot;0 10rpx&quot; color=&quot;#ffffff&quot;&gt;&lt;/com-icons&gt;</span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;text </span><br><span class=\"line\">    class=&quot;uni-icons iconfont&quot;</span><br><span class=\"line\">    :class=&quot;name&quot;</span><br><span class=\"line\">    :style=&quot;&#123;</span><br><span class=\"line\">      fontSize: size,</span><br><span class=\"line\">      color: color,</span><br><span class=\"line\">      padding: padding</span><br><span class=\"line\">    &#125;&quot;</span><br><span class=\"line\">    @click=&quot;_onClick&quot;&gt;&lt;/text&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &#x27;uni-icons&#x27;,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    name: &#123; // 图标类型，拼接前缀icon-</span><br><span class=\"line\">      type: String</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    size: &#123; // 图标大小</span><br><span class=\"line\">      type: String,</span><br><span class=\"line\">      default: &#x27;inherit&#x27;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    color: &#123; // 图标颜色</span><br><span class=\"line\">      type: String,</span><br><span class=\"line\">      default: &#x27;inherit&#x27;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    padding: &#123; // 内边距</span><br><span class=\"line\">      type: String,</span><br><span class=\"line\">      default: &#x27;0&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    _onClick() &#123;</span><br><span class=\"line\">      this.$emit(&#x27;click&#x27;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class=\"line\">  @import &#x27;path-to/iconfont.less&#x27;;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"图标组件\"><a href=\"#图标组件\" class=\"headerlink\" title=\"图标组件\"></a>图标组件</h1><p>支持的功能：</p>\n<ul>\n<li>图标颜色</li>\n<li>图标名称</li>\n<li>图标边距</li>\n<li>图标大小</li>\n</ul>\n<h4 id=\"事件类型\"><a href=\"#事件类型\" class=\"headerlink\" title=\"事件类型\"></a>事件类型</h4><table>\n<thead>\n<tr>\n<th>事件名称</th>\n<th>事件描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>click</td>\n<td>点击事件</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--图标组件</span><br><span class=\"line\">&lt;com-icons name=&quot;icon-location&quot; size=&quot;28rpx&quot; padding=&quot;0 10rpx&quot; color=&quot;#ffffff&quot;&gt;&lt;/com-icons&gt;</span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;text </span><br><span class=\"line\">    class=&quot;uni-icons iconfont&quot;</span><br><span class=\"line\">    :class=&quot;name&quot;</span><br><span class=\"line\">    :style=&quot;&#123;</span><br><span class=\"line\">      fontSize: size,</span><br><span class=\"line\">      color: color,</span><br><span class=\"line\">      padding: padding</span><br><span class=\"line\">    &#125;&quot;</span><br><span class=\"line\">    @click=&quot;_onClick&quot;&gt;&lt;/text&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &#x27;uni-icons&#x27;,</span><br><span class=\"line\">  props: &#123;</span><br><span class=\"line\">    name: &#123; // 图标类型，拼接前缀icon-</span><br><span class=\"line\">      type: String</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    size: &#123; // 图标大小</span><br><span class=\"line\">      type: String,</span><br><span class=\"line\">      default: &#x27;inherit&#x27;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    color: &#123; // 图标颜色</span><br><span class=\"line\">      type: String,</span><br><span class=\"line\">      default: &#x27;inherit&#x27;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    padding: &#123; // 内边距</span><br><span class=\"line\">      type: String,</span><br><span class=\"line\">      default: &#x27;0&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    _onClick() &#123;</span><br><span class=\"line\">      this.$emit(&#x27;click&#x27;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class=\"line\">  @import &#x27;path-to/iconfont.less&#x27;;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>"},{"title":"uni-app 小程序自定义导航栏组件","date":"2020-11-19T16:00:00.000Z","_content":" \n\n该组件是基于uni-ui扩展组件uni-nav-bar修改。导航组件严格来说是有2个组件组成：状态栏组件，头部组件\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-31/1622442807912-image.png)\n\ngetStatusBarHeight和getMenuButtonBoundingClientRect方法可以获取小程序状态栏和头部胶囊信息，取值关系如下：\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-31/1622449017125-image.png)\n\n需要注意的是，通过getMenuButtonBoundingClientRect方法top属性一般比getStatusBarHeight的值大，且不同设备具体差异大小不同。\n\n关于状态栏组件，具体搜索文章`小程序状态栏组件`。\n\n## 导航组件\n\n该组件依赖于以下组件：\n* com-icons iconfont组件\n* com-status-bar 状态栏组件\n  \n以上组件可通过搜索名称查找相关代码。\n\n导航组件具有以下功能：\n* 滚动头部固定/跟随文档\n* 自定义返回按钮、按钮后的文案、左侧/右侧区域宽度\n* 头部固定时是否需要保持高度（避免业务方做高度兼容）\n* 头部透明度（支持头部随着滚动过渡）\n* 是否需要状态栏\n* 自定义返回按钮点击行为\n* 小程序环境自动判断是否需要显示回到首页按钮\n\n#### 事件类型\n事件名称 |  事件描述\n---|---|\nclickLeft | 点击左侧区域\nclickRight | 点击右侧区域\n\n#### 方法\n方法名称 |  方法描述\n---|---|\ngetHeight | 获取导航高度\n  \n使用时需要修改以下功能：\n* icon组件对应的icon字体需要根据具体的应用修改\n* HOME_PATH对应的值根据具体的应用修改\n\n```html\n<template>\n\t<view class=\"uni-navbar\">\n\t\t<view :class=\"{ 'uni-navbar--fixed': fixed, 'uni-navbar--shadow': shadow, 'uni-navbar--border': border }\" :style=\"{ 'background': backgroundColor, opacity: opacity }\"\n\t\tclass=\"uni-navbar__content\">\n\t\t\t<com-status-bar v-if=\"statusBar\" />\n\t\t\t<view :style=\"{ color: color,background: backgroundColor, height: headerHeight, lineHeight: headerHeight }\" class=\"uni-navbar__header uni-navbar__content_view\">\n\t\t\t\t\n\t\t\t\t<!-- 左侧（默认点击行为：返回上一页。可重写） -->\n\t\t\t\t<view @click=\"onClickLeft\" class=\"uni-navbar__header-btns uni-navbar__header-btns-left uni-navbar__content_view\" :style=\"{width: leftIconWidth}\">\n\t\t\t\t\t<!-- 回到首页按钮（分享场景）（与其它按钮或者文案互斥） -->\n\t\t\t\t\t<!-- #ifdef MP-WEIXIN -->\n\t\t\t\t\t<view \n\t\t\t\t\t\tclass=\"uni-navbar__content_view\"\n\t\t\t\t\t\t:class=\"{'header-icon-with-bg': showIconBg}\" v-if=\"showHome\" @click=\"goHome\">\n\t\t\t\t\t\t<com-icons :color=\"color\" name=\"icon132\" size=\"40rpx\" />\n\t\t\t\t\t</view>\n\t\t\t\t\t<!-- #endif -->\n\n          <!-- 返回按钮 -->\n\t\t\t\t\t<view\n\t\t\t\t\t\tclass=\"uni-navbar__content_view\"\n\t\t\t\t\t\t:class=\"{'header-icon-with-bg': showIconBg}\" v-if=\"!showHome && leftIcon && showLeftBack\" >\n\t\t\t\t\t\t<com-icons :color=\"color\" name=\"icon9\" size=\"40rpx\" />\n\t\t\t\t\t</view>\n\n          <!-- 左侧显示文案 -->\n\t\t\t\t\t<view\n\t\t\t\t\t\tclass=\"uni-navbar-btn-text uni-navbar__content_view\"\n\t\t\t\t\t\t:class=\"{ 'uni-navbar-btn-icon-left': leftIcon }\"\n\t\t\t\t\t v-if=\"!showHome && leftText.length\">\n\t\t\t\t\t\t<text :style=\"{ color: color, fontSize: '28rpx' }\">{{ leftText }}</text>\n\t\t\t\t\t</view>\n          <!-- 左侧区域插槽（具名插槽） -->\n\t\t\t\t\t<slot name=\"left\" />\n\t\t\t\t</view>\n\n\t\t\t\t<!-- 标题区域 -->\n\t\t\t\t<view class=\"uni-navbar__header-container uni-navbar__content_view\">\n\t\t\t\t\t<view class=\"uni-navbar__header-container-inner uni-navbar__content_view\" v-if=\"title.length\">\n\t\t\t\t\t\t<text class=\"uni-nav-bar-text\" :style=\"{color: color }\">{{ title }}</text>\n\t\t\t\t\t</view>\n\t\t\t\t\t<!-- 标题插槽（无名插槽） -->\n\t\t\t\t\t<slot />\n\t\t\t\t</view>\n\n\t\t\t\t<!-- 右侧按钮区域 -->\n\t\t\t\t<view\n\t\t\t\t\t@tap=\"onClickRight\" class=\"uni-navbar__header-btns uni-navbar__header-btns-right uni-navbar__content_view\"\n\t\t\t\t\t:style=\"{width: rightIconWidth}\">\n\t\t\t\t\t<view\n\t\t\t\t\tclass=\"uni-navbar__content_view\"\n\t\t\t\t\t:class=\"{'header-icon-with-bg': showIconBg}\"\n\t\t\t\t\tv-if=\"rightIcon\">\n\t\t\t\t\t\t<com-icons :color=\"color\" :name=\"rightIcon\" size=\"56rpx\" />\n\t\t\t\t\t</view>\n\t\t\t\t\t<!-- 优先显示图标 -->\n\t\t\t\t\t<view class=\"uni-navbar-btn-text uni-navbar__content_view\" v-if=\"rightText.length && !rightIcon.length\">\n\t\t\t\t\t\t<text class=\"uni-nav-bar-right-text\">{{ rightText }}</text>\n\t\t\t\t\t</view>\n\t\t\t\t\t<!-- 右侧区域插槽（具名插槽） -->\n\t\t\t\t\t<slot name=\"right\" />\n\t\t\t\t</view>\n\t\t\t</view>\n\n\t\t\t<!-- 副标题（样式完全自定义） -->\n\t\t\t<view class=\"uni-navbar__sub-header\">\n\t\t\t\t<slot name=\"sub-nav\"></slot>\n\t\t\t</view>\n\t\t</view>\n\n\t\t<!-- 标题区域占位 -->\n\t\t<view class=\"uni-navbar__placeholder\" v-if=\"fixed && holdPlace\">\n\t\t\t<com-status-bar v-if=\"statusBar\" />\n\t\t\t<view class=\"uni-navbar__placeholder-view\" :style=\"{'padding-top': subHeaderHeight, height: headerHeight}\"/>\n\t\t</view>\n\t</view>\n</template>\n\n<script>\n// 首页路径\nconst HOME_PATH = 'pages/index/index'\n\nvar CustomNavbarHeight = uni.getCustomNavbarHeight()\n\t/**\n\t * NavBar 自定义导航栏\n\t * @description 导航栏组件，主要用于头部导航\n\t * @tutorial https://ext.dcloud.net.cn/plugin?id=52\n\t * @property {String} title 标题文字\n\t * @property {String} leftText 左侧按钮文本\n\t * @property {String} rightText 右侧按钮文本\n\t * @property {String} leftIcon 左侧按钮图标（图标类型参考 [Icon 图标](http://ext.dcloud.net.cn/plugin?id=28) type 属性）\n\t * @property {String} rightIcon 右侧按钮图标（图标类型参考 [Icon 图标](http://ext.dcloud.net.cn/plugin?id=28) type 属性）\n\t * @property {String} leftIconWidth （扩展属性）左侧按钮区域宽度 用来满足设计稿要求\n\t * @property {String} rightIconWidth （扩展属性）右侧按钮区域宽度 用来满足设计稿要求\n\t * @property {String} color 图标和文字颜色\n\t * @property {String} backgroundColor 导航栏背景颜色\n\t * @property {Boolean} fixed = [true|false] 是否固定顶部\n\t * @property {Boolean} holdPlace = [true|false]  （扩展属性）固定在顶部时，是否需要占位\n\t * @property {Boolean} opacity = 0-1  （扩展属性）头部透明度 用于头部滚动渐变\n\t * @property {Boolean} statusBar = [true|false] 是否包含状态栏\n\t * @property {Boolean} shadow = [true|false] 导航栏下是否有阴影\n\t * @property {Boolean} border = [true|false] 导航栏下是否有边框线\n\t * @event {Function} showLeftBack （扩展属性）是否显示返回按钮\n\t * @event {Function} clickLeftBack （扩展属性）点击左侧区域是否关闭当前窗口\n\t */\nexport default {\n\tname: \"NavBar\",\n\tprops: {\n\t\ttitle: {\n\t\t\ttype: String,\n\t\t\tdefault: \"\"\n\t\t},\n\t\tleftText: {\n\t\t\ttype: String,\n\t\t\tdefault: \"\"\n\t\t},\n\t\trightText: {\n\t\t\ttype: String,\n\t\t\tdefault: \"\"\n\t\t},\n\t\tleftIcon: {\n\t\t\ttype: String,\n\t\t\tdefault: \"\"\n\t\t},\n\t\tleftIconWidth: {\n\t\t\ttype: String,\n\t\t\tdefault: \"132rpx\"\n\t\t},\n\t\trightIcon: {\n\t\t\ttype: String,\n\t\t\tdefault: \"\"\n\t\t},\n\t\trightIconWidth: {\n\t\t\ttype: String,\n\t\t\tdefault: '132rpx'\n\t\t},\n\t\tfixed: {\n\t\t\ttype: [Boolean, String],\n\t\t\tdefault: false\n\t\t},\n\t\tholdPlace: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: true\n\t\t},\n\t\tcolor: {\n\t\t\ttype: String,\n\t\t\tdefault: \"#000000\"\n\t\t},\n\t\topacity: {\n\t\t\ttype: [String,Number],\n\t\t\tdefault: \"1\"\n\t\t},\n\t\tbackgroundColor: {\n\t\t\ttype: String,\n\t\t\tdefault: \"#FFFFFF\"\n\t\t},\n\t\tstatusBar: {\n\t\t\ttype: [Boolean, String],\n\t\t\tdefault: false\n\t\t},\n\t\tshadow: {\n\t\t\ttype: [String, Boolean],\n\t\t\tdefault: false\n\t\t},\n\t\tborder: {\n\t\t\ttype: [String, Boolean],\n\t\t\tdefault: true\n\t\t},\n\t\tclickLeftBack: { // 点击返回按钮区域是否返回上一页/路由\n\t\t\ttype: [String, Boolean],\n\t\t\tdefault: true\n\t\t},\n\t\tshowLeftBack: {\n\t\t\ttype: [Boolean, String],\n\t\t\tdefault: true\n\t\t}\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tshowIconBg: false, // 是否显示按钮的背景色\n\t\t\tshowHome: false, // 是否显示回到首页按钮\n\t\t\tshowNavBar: true,\n\t\t\theaderHeight: CustomNavbarHeight + 'px', // 头部高度，默认是40\n\t\t\tsubHeaderHeight: '' // 子头部高度\n\t\t}\n\t},\n\twatch: {\n\t\tcolor() {\n\t\t\tthis.handleColorChange()\n\t\t}\n\t},\n\tcreated() {\n\t\tthis.handleColorChange()\n\t},\n\tmounted() {\n\t\tif(uni.report && this.title !== '') {\n\t\t\tuni.report('title', this.title)\n\t\t}\n\t\tthis.updateHeight()\n\t\t// #ifdef MP-WEIXIN\n\t\tthis.judgeHome()\n\t\t// #endif\n\t},\n\tupdated() {\n\t\tthis.updateHeight()\n\t},\n\tmethods: {\n\t\tupdateHeight() {\n\t\t\tthis.getSubHeaderHeight()\n\t\t\tthis.getHeight()\n\t\t},\n\t\thandleColorChange() {\n\t\t\tlet color = this.color && this.color.toLocaleLowerCase()\n\t\t\t// 只有背景色透明才设置按钮的背景颜色\n\t\t\tlet bgTransparent = this.backgroundColor == 'transparent' || this.backgroundColor == 'inherit'\n\t\t\t// 设置状态栏字体颜色\n\t\t\tif (color && (color === '#ffffff' || color === '#fff')) {\n\t\t\t\tuni.setNavigationBarColor({\n\t\t\t\t\tfrontColor: '#ffffff',\n\t\t\t\t\tbackgroundColor: 'transparent'\n\t\t\t\t})\n\t\t\t\tif (bgTransparent) this.showIconBg = true\n\t\t\t} else {\n\t\t\t\tuni.setNavigationBarColor({\n\t\t\t\t\tfrontColor: '#000000',\n\t\t\t\t\tbackgroundColor: 'transparent'\n\t\t\t\t})\n\t\t\t\tthis.showIconBg = false\n\t\t\t}\n\t\t},\n    /**\n  \t * 获取节点offset值 （而非小程序提供的相对可视窗口的offset值）\n  \t * @param {string} selector 节点 与 select()方法一致\n  \t * @param {string} parent 节点相对滚动节点，非必传，不传以 viewport为默认值\n  \t * @param {string} context 查询上下文（页面/组件实例），含有自定义组件的页面，或者自定义组件中调用，必传\n  \t */\n  \tgetOffset(selector, parent, context) {\n      let query = context ? context.createSelectorQuery() : uni.createSelectorQuery();\n\n  \t\tlet parentQuery = parent ? query.select(parent) : query.selectViewport()\n\n  \t\tquery.select(selector).boundingClientRect()\n  \t\tparentQuery.scrollOffset()\n\n  \t\treturn new Promise((resolve, reject) => {\n  \t\t\tquery.exec(([selectRect, parentRect]) => {\n  \t\t\t\tif (selectRect) {\n  \t\t\t\t\tresolve({\n  \t\t\t\t\t\ttop: selectRect.top + parentRect.scrollTop,\n  \t\t\t\t\t\tleft: selectRect.left + parentRect.scrollLeft,\n  \t\t\t\t\t\theight: selectRect.height,\n              width: selectRect.width,\n              bottom: selectRect.bottom\n  \t\t\t\t\t})\n  \t\t\t\t} else {\n  \t\t\t\t\tconsole.warn(`[mp::getOffset]: 获取目标元素${selector}的offset信息失败`)\n  \t\t\t\t\tresolve({\n  \t\t\t\t\t\ttop: 0,\n  \t\t\t\t\t\tleft: 0,\n  \t\t\t\t\t\theight: 0,\n  \t\t\t\t\t\twidth: 0\n  \t\t\t\t\t})\n  \t\t\t\t}\n  \t\t\t})\n  \t\t})\n  \t},\n\t\tasync getSubHeaderHeight() {\n\t\t\tlet subHeaderOffset = await this.getOffset('.uni-navbar__sub-header', null, this)\n\n\t\t\tthis.subHeaderHeight = subHeaderOffset.height + 'px'\n\t\t},\n\t\tasync getHeight() {\n\t\t\tlet navOffset = await this.getOffset('.uni-navbar__content', null, this)\n\n\t\t\treturn navOffset\n\t\t},\n\t\t// #ifdef MP-WEIXIN\n    /**\n     * 判断是否需要显示home按钮（只有小程序需要）\n     **/\n\t\tjudgeHome() {\n      // 页面栈栈顶，且路径为非首页，则显示home按钮\n\t\t\tlet pages = getCurrentPages()\n\t\t\tif ((pages.length <= 1) && HOME_PATH !== pages[0].route) {\n\t\t\t\tthis.showHome = true\n\t\t\t}\n\t\t},\n\t\tgoHome() {\n\t\t\tuni.reLaunch({\n\t\t\t\turl: '/'+HOME_PATH,\n\t\t\t})\n\t\t},\n\t\t// #endif\n\t\tonClickLeft() {\n\t\t\tif (this.clickLeftBack) {\n\t\t\t\tuni.navigateBack()\n\t\t\t} else {\n\t\t\t\tthis.$emit(\"clickLeft\");\n\t\t\t}\n\t\t},\n\t\tonClickRight() {\n\t\t\tthis.$emit(\"clickRight\");\n\t\t}\n\t}\n};\n</script>\n\n<style lang=\"scss\" scoped>\n\t$nav-height: 44px;\n\t.uni-nav-bar-text {\n\t\tfont-size: $uni-font-size-lg;\n\t}\n\t.uni-nav-bar-right-text {\n\t\tfont-size: $uni-font-size-base;\n\t}\n\n\t.uni-navbar {\n\t\tposition: relative;\n\t\twidth: 100%;\n\t\tfont-family: PingFangSC-Medium, PingFang SC;\n\t\tbox-sizing: border-box;\n\t}\n\n\t.uni-navbar__content {\n\t\tposition: relative;\n\t\twidth: 100%;\n\t\tbackground-color: $uni-bg-color;\n\t}\n\n\t.uni-navbar__content_view {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tflex-direction: row;\n\t}\n\n\t.uni-navbar__header {\n\t\tdisplay: flex;\n\t\tflex-direction: row;\n\t\twidth: 100%;\n\t\theight: $nav-height;\n\t\tline-height: $nav-height;\n\t\tfont-size: 32rpx;\n\t}\n\n\t.header-icon-with-bg {\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\talign-content: center;\n\t\tbackground: rgba($color: #000000, $alpha: 0.2);\n\t\tborder-radius: 100%;\n\t\theight: 52rpx;\n\t\twidth: 52rpx;\n\t}\n\n\t.uni-navbar__header-btns {\n\t\tdisplay: flex;\n\t\tflex-wrap: nowrap;\n\t\tpadding: 0 12px;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\tbox-sizing: border-box;\n\t}\n\n\t.uni-navbar__header-btns-left {\n\t\tdisplay: flex;\n\t\tbox-sizing: border-box;\n\t\tjustify-content: flex-start;\n\t}\n\n\t.uni-navbar__header-btns-right {\n\t\tdisplay: flex;\n\t\tbox-sizing: border-box;\n\t\tjustify-content: flex-end;\n\t\tmargin-right: 10rpx;\n\t}\n\n\n\t.uni-navbar__header-container {\n\t\tflex: 1;\n\t\tfont-weight: 600;\n\t}\n\n\t.uni-navbar__header-container-inner {\n\t\tdisplay: flex;\n\t\tflex: 1;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\tfont-size: $uni-font-size-base;\n\t}\n\n\n\t.uni-navbar__placeholder-view {\n\t\theight: $nav-height;\n\t\tbox-sizing: content-box;\n\t}\n\n\t.uni-navbar--fixed {\n\t\tposition: fixed;\n\t\tz-index: 998;\n\t}\n\n\t.uni-navbar--shadow {\n\t\tbox-shadow: 0 1px 6px #ccc;\n\t}\n\n\t.uni-navbar--border {\n\t\tborder-bottom-width: 1rpx;\n\t\tborder-bottom-style: solid;\n\t\tborder-bottom-color: $uni-border-color;\n\t}\n</style>\n\n```\n\n","source":"_posts/uni-app/com-nav-bar.md","raw":"---\ntitle: uni-app 小程序自定义导航栏组件\ncategories: uni-app\ntags: [组件, uni-app]\ndate: 2020-11-20\n--- \n\n该组件是基于uni-ui扩展组件uni-nav-bar修改。导航组件严格来说是有2个组件组成：状态栏组件，头部组件\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-31/1622442807912-image.png)\n\ngetStatusBarHeight和getMenuButtonBoundingClientRect方法可以获取小程序状态栏和头部胶囊信息，取值关系如下：\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-31/1622449017125-image.png)\n\n需要注意的是，通过getMenuButtonBoundingClientRect方法top属性一般比getStatusBarHeight的值大，且不同设备具体差异大小不同。\n\n关于状态栏组件，具体搜索文章`小程序状态栏组件`。\n\n## 导航组件\n\n该组件依赖于以下组件：\n* com-icons iconfont组件\n* com-status-bar 状态栏组件\n  \n以上组件可通过搜索名称查找相关代码。\n\n导航组件具有以下功能：\n* 滚动头部固定/跟随文档\n* 自定义返回按钮、按钮后的文案、左侧/右侧区域宽度\n* 头部固定时是否需要保持高度（避免业务方做高度兼容）\n* 头部透明度（支持头部随着滚动过渡）\n* 是否需要状态栏\n* 自定义返回按钮点击行为\n* 小程序环境自动判断是否需要显示回到首页按钮\n\n#### 事件类型\n事件名称 |  事件描述\n---|---|\nclickLeft | 点击左侧区域\nclickRight | 点击右侧区域\n\n#### 方法\n方法名称 |  方法描述\n---|---|\ngetHeight | 获取导航高度\n  \n使用时需要修改以下功能：\n* icon组件对应的icon字体需要根据具体的应用修改\n* HOME_PATH对应的值根据具体的应用修改\n\n```html\n<template>\n\t<view class=\"uni-navbar\">\n\t\t<view :class=\"{ 'uni-navbar--fixed': fixed, 'uni-navbar--shadow': shadow, 'uni-navbar--border': border }\" :style=\"{ 'background': backgroundColor, opacity: opacity }\"\n\t\tclass=\"uni-navbar__content\">\n\t\t\t<com-status-bar v-if=\"statusBar\" />\n\t\t\t<view :style=\"{ color: color,background: backgroundColor, height: headerHeight, lineHeight: headerHeight }\" class=\"uni-navbar__header uni-navbar__content_view\">\n\t\t\t\t\n\t\t\t\t<!-- 左侧（默认点击行为：返回上一页。可重写） -->\n\t\t\t\t<view @click=\"onClickLeft\" class=\"uni-navbar__header-btns uni-navbar__header-btns-left uni-navbar__content_view\" :style=\"{width: leftIconWidth}\">\n\t\t\t\t\t<!-- 回到首页按钮（分享场景）（与其它按钮或者文案互斥） -->\n\t\t\t\t\t<!-- #ifdef MP-WEIXIN -->\n\t\t\t\t\t<view \n\t\t\t\t\t\tclass=\"uni-navbar__content_view\"\n\t\t\t\t\t\t:class=\"{'header-icon-with-bg': showIconBg}\" v-if=\"showHome\" @click=\"goHome\">\n\t\t\t\t\t\t<com-icons :color=\"color\" name=\"icon132\" size=\"40rpx\" />\n\t\t\t\t\t</view>\n\t\t\t\t\t<!-- #endif -->\n\n          <!-- 返回按钮 -->\n\t\t\t\t\t<view\n\t\t\t\t\t\tclass=\"uni-navbar__content_view\"\n\t\t\t\t\t\t:class=\"{'header-icon-with-bg': showIconBg}\" v-if=\"!showHome && leftIcon && showLeftBack\" >\n\t\t\t\t\t\t<com-icons :color=\"color\" name=\"icon9\" size=\"40rpx\" />\n\t\t\t\t\t</view>\n\n          <!-- 左侧显示文案 -->\n\t\t\t\t\t<view\n\t\t\t\t\t\tclass=\"uni-navbar-btn-text uni-navbar__content_view\"\n\t\t\t\t\t\t:class=\"{ 'uni-navbar-btn-icon-left': leftIcon }\"\n\t\t\t\t\t v-if=\"!showHome && leftText.length\">\n\t\t\t\t\t\t<text :style=\"{ color: color, fontSize: '28rpx' }\">{{ leftText }}</text>\n\t\t\t\t\t</view>\n          <!-- 左侧区域插槽（具名插槽） -->\n\t\t\t\t\t<slot name=\"left\" />\n\t\t\t\t</view>\n\n\t\t\t\t<!-- 标题区域 -->\n\t\t\t\t<view class=\"uni-navbar__header-container uni-navbar__content_view\">\n\t\t\t\t\t<view class=\"uni-navbar__header-container-inner uni-navbar__content_view\" v-if=\"title.length\">\n\t\t\t\t\t\t<text class=\"uni-nav-bar-text\" :style=\"{color: color }\">{{ title }}</text>\n\t\t\t\t\t</view>\n\t\t\t\t\t<!-- 标题插槽（无名插槽） -->\n\t\t\t\t\t<slot />\n\t\t\t\t</view>\n\n\t\t\t\t<!-- 右侧按钮区域 -->\n\t\t\t\t<view\n\t\t\t\t\t@tap=\"onClickRight\" class=\"uni-navbar__header-btns uni-navbar__header-btns-right uni-navbar__content_view\"\n\t\t\t\t\t:style=\"{width: rightIconWidth}\">\n\t\t\t\t\t<view\n\t\t\t\t\tclass=\"uni-navbar__content_view\"\n\t\t\t\t\t:class=\"{'header-icon-with-bg': showIconBg}\"\n\t\t\t\t\tv-if=\"rightIcon\">\n\t\t\t\t\t\t<com-icons :color=\"color\" :name=\"rightIcon\" size=\"56rpx\" />\n\t\t\t\t\t</view>\n\t\t\t\t\t<!-- 优先显示图标 -->\n\t\t\t\t\t<view class=\"uni-navbar-btn-text uni-navbar__content_view\" v-if=\"rightText.length && !rightIcon.length\">\n\t\t\t\t\t\t<text class=\"uni-nav-bar-right-text\">{{ rightText }}</text>\n\t\t\t\t\t</view>\n\t\t\t\t\t<!-- 右侧区域插槽（具名插槽） -->\n\t\t\t\t\t<slot name=\"right\" />\n\t\t\t\t</view>\n\t\t\t</view>\n\n\t\t\t<!-- 副标题（样式完全自定义） -->\n\t\t\t<view class=\"uni-navbar__sub-header\">\n\t\t\t\t<slot name=\"sub-nav\"></slot>\n\t\t\t</view>\n\t\t</view>\n\n\t\t<!-- 标题区域占位 -->\n\t\t<view class=\"uni-navbar__placeholder\" v-if=\"fixed && holdPlace\">\n\t\t\t<com-status-bar v-if=\"statusBar\" />\n\t\t\t<view class=\"uni-navbar__placeholder-view\" :style=\"{'padding-top': subHeaderHeight, height: headerHeight}\"/>\n\t\t</view>\n\t</view>\n</template>\n\n<script>\n// 首页路径\nconst HOME_PATH = 'pages/index/index'\n\nvar CustomNavbarHeight = uni.getCustomNavbarHeight()\n\t/**\n\t * NavBar 自定义导航栏\n\t * @description 导航栏组件，主要用于头部导航\n\t * @tutorial https://ext.dcloud.net.cn/plugin?id=52\n\t * @property {String} title 标题文字\n\t * @property {String} leftText 左侧按钮文本\n\t * @property {String} rightText 右侧按钮文本\n\t * @property {String} leftIcon 左侧按钮图标（图标类型参考 [Icon 图标](http://ext.dcloud.net.cn/plugin?id=28) type 属性）\n\t * @property {String} rightIcon 右侧按钮图标（图标类型参考 [Icon 图标](http://ext.dcloud.net.cn/plugin?id=28) type 属性）\n\t * @property {String} leftIconWidth （扩展属性）左侧按钮区域宽度 用来满足设计稿要求\n\t * @property {String} rightIconWidth （扩展属性）右侧按钮区域宽度 用来满足设计稿要求\n\t * @property {String} color 图标和文字颜色\n\t * @property {String} backgroundColor 导航栏背景颜色\n\t * @property {Boolean} fixed = [true|false] 是否固定顶部\n\t * @property {Boolean} holdPlace = [true|false]  （扩展属性）固定在顶部时，是否需要占位\n\t * @property {Boolean} opacity = 0-1  （扩展属性）头部透明度 用于头部滚动渐变\n\t * @property {Boolean} statusBar = [true|false] 是否包含状态栏\n\t * @property {Boolean} shadow = [true|false] 导航栏下是否有阴影\n\t * @property {Boolean} border = [true|false] 导航栏下是否有边框线\n\t * @event {Function} showLeftBack （扩展属性）是否显示返回按钮\n\t * @event {Function} clickLeftBack （扩展属性）点击左侧区域是否关闭当前窗口\n\t */\nexport default {\n\tname: \"NavBar\",\n\tprops: {\n\t\ttitle: {\n\t\t\ttype: String,\n\t\t\tdefault: \"\"\n\t\t},\n\t\tleftText: {\n\t\t\ttype: String,\n\t\t\tdefault: \"\"\n\t\t},\n\t\trightText: {\n\t\t\ttype: String,\n\t\t\tdefault: \"\"\n\t\t},\n\t\tleftIcon: {\n\t\t\ttype: String,\n\t\t\tdefault: \"\"\n\t\t},\n\t\tleftIconWidth: {\n\t\t\ttype: String,\n\t\t\tdefault: \"132rpx\"\n\t\t},\n\t\trightIcon: {\n\t\t\ttype: String,\n\t\t\tdefault: \"\"\n\t\t},\n\t\trightIconWidth: {\n\t\t\ttype: String,\n\t\t\tdefault: '132rpx'\n\t\t},\n\t\tfixed: {\n\t\t\ttype: [Boolean, String],\n\t\t\tdefault: false\n\t\t},\n\t\tholdPlace: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: true\n\t\t},\n\t\tcolor: {\n\t\t\ttype: String,\n\t\t\tdefault: \"#000000\"\n\t\t},\n\t\topacity: {\n\t\t\ttype: [String,Number],\n\t\t\tdefault: \"1\"\n\t\t},\n\t\tbackgroundColor: {\n\t\t\ttype: String,\n\t\t\tdefault: \"#FFFFFF\"\n\t\t},\n\t\tstatusBar: {\n\t\t\ttype: [Boolean, String],\n\t\t\tdefault: false\n\t\t},\n\t\tshadow: {\n\t\t\ttype: [String, Boolean],\n\t\t\tdefault: false\n\t\t},\n\t\tborder: {\n\t\t\ttype: [String, Boolean],\n\t\t\tdefault: true\n\t\t},\n\t\tclickLeftBack: { // 点击返回按钮区域是否返回上一页/路由\n\t\t\ttype: [String, Boolean],\n\t\t\tdefault: true\n\t\t},\n\t\tshowLeftBack: {\n\t\t\ttype: [Boolean, String],\n\t\t\tdefault: true\n\t\t}\n\t},\n\tdata() {\n\t\treturn {\n\t\t\tshowIconBg: false, // 是否显示按钮的背景色\n\t\t\tshowHome: false, // 是否显示回到首页按钮\n\t\t\tshowNavBar: true,\n\t\t\theaderHeight: CustomNavbarHeight + 'px', // 头部高度，默认是40\n\t\t\tsubHeaderHeight: '' // 子头部高度\n\t\t}\n\t},\n\twatch: {\n\t\tcolor() {\n\t\t\tthis.handleColorChange()\n\t\t}\n\t},\n\tcreated() {\n\t\tthis.handleColorChange()\n\t},\n\tmounted() {\n\t\tif(uni.report && this.title !== '') {\n\t\t\tuni.report('title', this.title)\n\t\t}\n\t\tthis.updateHeight()\n\t\t// #ifdef MP-WEIXIN\n\t\tthis.judgeHome()\n\t\t// #endif\n\t},\n\tupdated() {\n\t\tthis.updateHeight()\n\t},\n\tmethods: {\n\t\tupdateHeight() {\n\t\t\tthis.getSubHeaderHeight()\n\t\t\tthis.getHeight()\n\t\t},\n\t\thandleColorChange() {\n\t\t\tlet color = this.color && this.color.toLocaleLowerCase()\n\t\t\t// 只有背景色透明才设置按钮的背景颜色\n\t\t\tlet bgTransparent = this.backgroundColor == 'transparent' || this.backgroundColor == 'inherit'\n\t\t\t// 设置状态栏字体颜色\n\t\t\tif (color && (color === '#ffffff' || color === '#fff')) {\n\t\t\t\tuni.setNavigationBarColor({\n\t\t\t\t\tfrontColor: '#ffffff',\n\t\t\t\t\tbackgroundColor: 'transparent'\n\t\t\t\t})\n\t\t\t\tif (bgTransparent) this.showIconBg = true\n\t\t\t} else {\n\t\t\t\tuni.setNavigationBarColor({\n\t\t\t\t\tfrontColor: '#000000',\n\t\t\t\t\tbackgroundColor: 'transparent'\n\t\t\t\t})\n\t\t\t\tthis.showIconBg = false\n\t\t\t}\n\t\t},\n    /**\n  \t * 获取节点offset值 （而非小程序提供的相对可视窗口的offset值）\n  \t * @param {string} selector 节点 与 select()方法一致\n  \t * @param {string} parent 节点相对滚动节点，非必传，不传以 viewport为默认值\n  \t * @param {string} context 查询上下文（页面/组件实例），含有自定义组件的页面，或者自定义组件中调用，必传\n  \t */\n  \tgetOffset(selector, parent, context) {\n      let query = context ? context.createSelectorQuery() : uni.createSelectorQuery();\n\n  \t\tlet parentQuery = parent ? query.select(parent) : query.selectViewport()\n\n  \t\tquery.select(selector).boundingClientRect()\n  \t\tparentQuery.scrollOffset()\n\n  \t\treturn new Promise((resolve, reject) => {\n  \t\t\tquery.exec(([selectRect, parentRect]) => {\n  \t\t\t\tif (selectRect) {\n  \t\t\t\t\tresolve({\n  \t\t\t\t\t\ttop: selectRect.top + parentRect.scrollTop,\n  \t\t\t\t\t\tleft: selectRect.left + parentRect.scrollLeft,\n  \t\t\t\t\t\theight: selectRect.height,\n              width: selectRect.width,\n              bottom: selectRect.bottom\n  \t\t\t\t\t})\n  \t\t\t\t} else {\n  \t\t\t\t\tconsole.warn(`[mp::getOffset]: 获取目标元素${selector}的offset信息失败`)\n  \t\t\t\t\tresolve({\n  \t\t\t\t\t\ttop: 0,\n  \t\t\t\t\t\tleft: 0,\n  \t\t\t\t\t\theight: 0,\n  \t\t\t\t\t\twidth: 0\n  \t\t\t\t\t})\n  \t\t\t\t}\n  \t\t\t})\n  \t\t})\n  \t},\n\t\tasync getSubHeaderHeight() {\n\t\t\tlet subHeaderOffset = await this.getOffset('.uni-navbar__sub-header', null, this)\n\n\t\t\tthis.subHeaderHeight = subHeaderOffset.height + 'px'\n\t\t},\n\t\tasync getHeight() {\n\t\t\tlet navOffset = await this.getOffset('.uni-navbar__content', null, this)\n\n\t\t\treturn navOffset\n\t\t},\n\t\t// #ifdef MP-WEIXIN\n    /**\n     * 判断是否需要显示home按钮（只有小程序需要）\n     **/\n\t\tjudgeHome() {\n      // 页面栈栈顶，且路径为非首页，则显示home按钮\n\t\t\tlet pages = getCurrentPages()\n\t\t\tif ((pages.length <= 1) && HOME_PATH !== pages[0].route) {\n\t\t\t\tthis.showHome = true\n\t\t\t}\n\t\t},\n\t\tgoHome() {\n\t\t\tuni.reLaunch({\n\t\t\t\turl: '/'+HOME_PATH,\n\t\t\t})\n\t\t},\n\t\t// #endif\n\t\tonClickLeft() {\n\t\t\tif (this.clickLeftBack) {\n\t\t\t\tuni.navigateBack()\n\t\t\t} else {\n\t\t\t\tthis.$emit(\"clickLeft\");\n\t\t\t}\n\t\t},\n\t\tonClickRight() {\n\t\t\tthis.$emit(\"clickRight\");\n\t\t}\n\t}\n};\n</script>\n\n<style lang=\"scss\" scoped>\n\t$nav-height: 44px;\n\t.uni-nav-bar-text {\n\t\tfont-size: $uni-font-size-lg;\n\t}\n\t.uni-nav-bar-right-text {\n\t\tfont-size: $uni-font-size-base;\n\t}\n\n\t.uni-navbar {\n\t\tposition: relative;\n\t\twidth: 100%;\n\t\tfont-family: PingFangSC-Medium, PingFang SC;\n\t\tbox-sizing: border-box;\n\t}\n\n\t.uni-navbar__content {\n\t\tposition: relative;\n\t\twidth: 100%;\n\t\tbackground-color: $uni-bg-color;\n\t}\n\n\t.uni-navbar__content_view {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tflex-direction: row;\n\t}\n\n\t.uni-navbar__header {\n\t\tdisplay: flex;\n\t\tflex-direction: row;\n\t\twidth: 100%;\n\t\theight: $nav-height;\n\t\tline-height: $nav-height;\n\t\tfont-size: 32rpx;\n\t}\n\n\t.header-icon-with-bg {\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\talign-content: center;\n\t\tbackground: rgba($color: #000000, $alpha: 0.2);\n\t\tborder-radius: 100%;\n\t\theight: 52rpx;\n\t\twidth: 52rpx;\n\t}\n\n\t.uni-navbar__header-btns {\n\t\tdisplay: flex;\n\t\tflex-wrap: nowrap;\n\t\tpadding: 0 12px;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\tbox-sizing: border-box;\n\t}\n\n\t.uni-navbar__header-btns-left {\n\t\tdisplay: flex;\n\t\tbox-sizing: border-box;\n\t\tjustify-content: flex-start;\n\t}\n\n\t.uni-navbar__header-btns-right {\n\t\tdisplay: flex;\n\t\tbox-sizing: border-box;\n\t\tjustify-content: flex-end;\n\t\tmargin-right: 10rpx;\n\t}\n\n\n\t.uni-navbar__header-container {\n\t\tflex: 1;\n\t\tfont-weight: 600;\n\t}\n\n\t.uni-navbar__header-container-inner {\n\t\tdisplay: flex;\n\t\tflex: 1;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\tfont-size: $uni-font-size-base;\n\t}\n\n\n\t.uni-navbar__placeholder-view {\n\t\theight: $nav-height;\n\t\tbox-sizing: content-box;\n\t}\n\n\t.uni-navbar--fixed {\n\t\tposition: fixed;\n\t\tz-index: 998;\n\t}\n\n\t.uni-navbar--shadow {\n\t\tbox-shadow: 0 1px 6px #ccc;\n\t}\n\n\t.uni-navbar--border {\n\t\tborder-bottom-width: 1rpx;\n\t\tborder-bottom-style: solid;\n\t\tborder-bottom-color: $uni-border-color;\n\t}\n</style>\n\n```\n\n","slug":"uni-app/com-nav-bar","published":1,"updated":"2021-06-14T02:11:38.601Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc6z0016ecq8e5ghfp2w","content":"<p>该组件是基于uni-ui扩展组件uni-nav-bar修改。导航组件严格来说是有2个组件组成：状态栏组件，头部组件</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-31/1622442807912-image.png\"></p>\n<p>getStatusBarHeight和getMenuButtonBoundingClientRect方法可以获取小程序状态栏和头部胶囊信息，取值关系如下：</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-31/1622449017125-image.png\"></p>\n<p>需要注意的是，通过getMenuButtonBoundingClientRect方法top属性一般比getStatusBarHeight的值大，且不同设备具体差异大小不同。</p>\n<p>关于状态栏组件，具体搜索文章<code>小程序状态栏组件</code>。</p>\n<h2 id=\"导航组件\"><a href=\"#导航组件\" class=\"headerlink\" title=\"导航组件\"></a>导航组件</h2><p>该组件依赖于以下组件：</p>\n<ul>\n<li>com-icons iconfont组件</li>\n<li>com-status-bar 状态栏组件</li>\n</ul>\n<p>以上组件可通过搜索名称查找相关代码。</p>\n<p>导航组件具有以下功能：</p>\n<ul>\n<li>滚动头部固定/跟随文档</li>\n<li>自定义返回按钮、按钮后的文案、左侧/右侧区域宽度</li>\n<li>头部固定时是否需要保持高度（避免业务方做高度兼容）</li>\n<li>头部透明度（支持头部随着滚动过渡）</li>\n<li>是否需要状态栏</li>\n<li>自定义返回按钮点击行为</li>\n<li>小程序环境自动判断是否需要显示回到首页按钮</li>\n</ul>\n<h4 id=\"事件类型\"><a href=\"#事件类型\" class=\"headerlink\" title=\"事件类型\"></a>事件类型</h4><table>\n<thead>\n<tr>\n<th>事件名称</th>\n<th>事件描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>clickLeft</td>\n<td>点击左侧区域</td>\n</tr>\n<tr>\n<td>clickRight</td>\n<td>点击右侧区域</td>\n</tr>\n</tbody></table>\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4><table>\n<thead>\n<tr>\n<th>方法名称</th>\n<th>方法描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>getHeight</td>\n<td>获取导航高度</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>使用时需要修改以下功能：</td>\n<td></td>\n</tr>\n</tbody></table>\n<ul>\n<li>icon组件对应的icon字体需要根据具体的应用修改</li>\n<li>HOME_PATH对应的值根据具体的应用修改</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;uni-navbar&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;&#123; &#x27;uni-navbar--fixed&#x27;: fixed, &#x27;uni-navbar--shadow&#x27;: shadow, &#x27;uni-navbar--border&#x27;: border &#125;&quot;</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;&#123; &#x27;background&#x27;: backgroundColor, opacity: opacity &#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">class</span>=<span class=\"string\">&quot;uni-navbar__content&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">com-status-bar</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;statusBar&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;&#123; color: color,background: backgroundColor, height: headerHeight, lineHeight: headerHeight &#125;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;uni-navbar__header uni-navbar__content_view&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">&lt;!-- 左侧（默认点击行为：返回上一页。可重写） --&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">view</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;onClickLeft&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;uni-navbar__header-btns uni-navbar__header-btns-left uni-navbar__content_view&quot;</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;&#123;width: leftIconWidth&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">&lt;!-- 回到首页按钮（分享场景）（与其它按钮或者文案互斥） --&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">&lt;!-- #ifdef MP-WEIXIN --&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">view</span> </span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t\t\t<span class=\"attr\">class</span>=<span class=\"string\">&quot;uni-navbar__content_view&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t\t\t<span class=\"attr\">:class</span>=<span class=\"string\">&quot;&#123;&#x27;header-icon-with-bg&#x27;: showIconBg&#125;&quot;</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;showHome&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;goHome&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">com-icons</span> <span class=\"attr\">:color</span>=<span class=\"string\">&quot;color&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;icon132&quot;</span> <span class=\"attr\">size</span>=<span class=\"string\">&quot;40rpx&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">&lt;!-- #endif --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">&lt;!-- 返回按钮 --&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">view</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t\t\t<span class=\"attr\">class</span>=<span class=\"string\">&quot;uni-navbar__content_view&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t\t\t<span class=\"attr\">:class</span>=<span class=\"string\">&quot;&#123;&#x27;header-icon-with-bg&#x27;: showIconBg&#125;&quot;</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;!showHome &amp;&amp; leftIcon &amp;&amp; showLeftBack&quot;</span> &gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">com-icons</span> <span class=\"attr\">:color</span>=<span class=\"string\">&quot;color&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;icon9&quot;</span> <span class=\"attr\">size</span>=<span class=\"string\">&quot;40rpx&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">&lt;!-- 左侧显示文案 --&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">view</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t\t\t<span class=\"attr\">class</span>=<span class=\"string\">&quot;uni-navbar-btn-text uni-navbar__content_view&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t\t\t<span class=\"attr\">:class</span>=<span class=\"string\">&quot;&#123; &#x27;uni-navbar-btn-icon-left&#x27;: leftIcon &#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t\t <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;!showHome &amp;&amp; leftText.length&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;&#123; color: color, fontSize: &#x27;28rpx&#x27; &#125;&quot;</span>&gt;</span>&#123;&#123; leftText &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">          <span class=\"comment\">&lt;!-- 左侧区域插槽（具名插槽） --&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;left&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">&lt;!-- 标题区域 --&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;uni-navbar__header-container uni-navbar__content_view&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;uni-navbar__header-container-inner uni-navbar__content_view&quot;</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;title.length&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;uni-nav-bar-text&quot;</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;&#123;color: color &#125;&quot;</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">&lt;!-- 标题插槽（无名插槽） --&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">slot</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">&lt;!-- 右侧按钮区域 --&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">view</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t\t@<span class=\"attr\">tap</span>=<span class=\"string\">&quot;onClickRight&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;uni-navbar__header-btns uni-navbar__header-btns-right uni-navbar__content_view&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t\t<span class=\"attr\">:style</span>=<span class=\"string\">&quot;&#123;width: rightIconWidth&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">view</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t\t<span class=\"attr\">class</span>=<span class=\"string\">&quot;uni-navbar__content_view&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t\t<span class=\"attr\">:class</span>=<span class=\"string\">&quot;&#123;&#x27;header-icon-with-bg&#x27;: showIconBg&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t\t<span class=\"attr\">v-if</span>=<span class=\"string\">&quot;rightIcon&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">com-icons</span> <span class=\"attr\">:color</span>=<span class=\"string\">&quot;color&quot;</span> <span class=\"attr\">:name</span>=<span class=\"string\">&quot;rightIcon&quot;</span> <span class=\"attr\">size</span>=<span class=\"string\">&quot;56rpx&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">&lt;!-- 优先显示图标 --&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;uni-navbar-btn-text uni-navbar__content_view&quot;</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;rightText.length &amp;&amp; !rightIcon.length&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;uni-nav-bar-right-text&quot;</span>&gt;</span>&#123;&#123; rightText &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">&lt;!-- 右侧区域插槽（具名插槽） --&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;right&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 副标题（样式完全自定义） --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;uni-navbar__sub-header&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sub-nav&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 标题区域占位 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;uni-navbar__placeholder&quot;</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;fixed &amp;&amp; holdPlace&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">com-status-bar</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;statusBar&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;uni-navbar__placeholder-view&quot;</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;&#123;&#x27;padding-top&#x27;: subHeaderHeight, height: headerHeight&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// 首页路径</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">const</span> HOME_PATH = <span class=\"string\">&#x27;pages/index/index&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> CustomNavbarHeight = uni.getCustomNavbarHeight()</span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"comment\">/**</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t * NavBar 自定义导航栏</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t * <span class=\"doctag\">@description </span>导航栏组件，主要用于头部导航</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t * <span class=\"doctag\">@tutorial </span>https://ext.dcloud.net.cn/plugin?id=52</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t * <span class=\"doctag\">@property <span class=\"type\">&#123;String&#125;</span> </span>title 标题文字</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t * <span class=\"doctag\">@property <span class=\"type\">&#123;String&#125;</span> </span>leftText 左侧按钮文本</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t * <span class=\"doctag\">@property <span class=\"type\">&#123;String&#125;</span> </span>rightText 右侧按钮文本</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t * <span class=\"doctag\">@property <span class=\"type\">&#123;String&#125;</span> </span>leftIcon 左侧按钮图标（图标类型参考 [Icon 图标](http://ext.dcloud.net.cn/plugin?id=28) type 属性）</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t * <span class=\"doctag\">@property <span class=\"type\">&#123;String&#125;</span> </span>rightIcon 右侧按钮图标（图标类型参考 [Icon 图标](http://ext.dcloud.net.cn/plugin?id=28) type 属性）</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t * <span class=\"doctag\">@property <span class=\"type\">&#123;String&#125;</span> </span>leftIconWidth （扩展属性）左侧按钮区域宽度 用来满足设计稿要求</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t * <span class=\"doctag\">@property <span class=\"type\">&#123;String&#125;</span> </span>rightIconWidth （扩展属性）右侧按钮区域宽度 用来满足设计稿要求</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t * <span class=\"doctag\">@property <span class=\"type\">&#123;String&#125;</span> </span>color 图标和文字颜色</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t * <span class=\"doctag\">@property <span class=\"type\">&#123;String&#125;</span> </span>backgroundColor 导航栏背景颜色</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t * <span class=\"doctag\">@property <span class=\"type\">&#123;Boolean&#125;</span> </span>fixed = [true|false] 是否固定顶部</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t * <span class=\"doctag\">@property <span class=\"type\">&#123;Boolean&#125;</span> </span>holdPlace = [true|false]  （扩展属性）固定在顶部时，是否需要占位</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t * <span class=\"doctag\">@property <span class=\"type\">&#123;Boolean&#125;</span> </span>opacity = 0-1  （扩展属性）头部透明度 用于头部滚动渐变</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t * <span class=\"doctag\">@property <span class=\"type\">&#123;Boolean&#125;</span> </span>statusBar = [true|false] 是否包含状态栏</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t * <span class=\"doctag\">@property <span class=\"type\">&#123;Boolean&#125;</span> </span>shadow = [true|false] 导航栏下是否有阴影</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t * <span class=\"doctag\">@property <span class=\"type\">&#123;Boolean&#125;</span> </span>border = [true|false] 导航栏下是否有边框线</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t * <span class=\"doctag\">@event <span class=\"type\">&#123;Function&#125;</span> </span>showLeftBack （扩展属性）是否显示返回按钮</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t * <span class=\"doctag\">@event <span class=\"type\">&#123;Function&#125;</span> </span>clickLeftBack （扩展属性）点击左侧区域是否关闭当前窗口</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t */</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;NavBar&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"attr\">props</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"attr\">title</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">type</span>: <span class=\"built_in\">String</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">default</span>: <span class=\"string\">&quot;&quot;</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"attr\">leftText</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">type</span>: <span class=\"built_in\">String</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">default</span>: <span class=\"string\">&quot;&quot;</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"attr\">rightText</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">type</span>: <span class=\"built_in\">String</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">default</span>: <span class=\"string\">&quot;&quot;</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"attr\">leftIcon</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">type</span>: <span class=\"built_in\">String</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">default</span>: <span class=\"string\">&quot;&quot;</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"attr\">leftIconWidth</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">type</span>: <span class=\"built_in\">String</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">default</span>: <span class=\"string\">&quot;132rpx&quot;</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"attr\">rightIcon</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">type</span>: <span class=\"built_in\">String</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">default</span>: <span class=\"string\">&quot;&quot;</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"attr\">rightIconWidth</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">type</span>: <span class=\"built_in\">String</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">default</span>: <span class=\"string\">&#x27;132rpx&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"attr\">fixed</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">type</span>: [<span class=\"built_in\">Boolean</span>, <span class=\"built_in\">String</span>],</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">default</span>: <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"attr\">holdPlace</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">type</span>: <span class=\"built_in\">Boolean</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">default</span>: <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"attr\">color</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">type</span>: <span class=\"built_in\">String</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">default</span>: <span class=\"string\">&quot;#000000&quot;</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"attr\">opacity</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">type</span>: [<span class=\"built_in\">String</span>,<span class=\"built_in\">Number</span>],</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">default</span>: <span class=\"string\">&quot;1&quot;</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"attr\">backgroundColor</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">type</span>: <span class=\"built_in\">String</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">default</span>: <span class=\"string\">&quot;#FFFFFF&quot;</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"attr\">statusBar</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">type</span>: [<span class=\"built_in\">Boolean</span>, <span class=\"built_in\">String</span>],</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">default</span>: <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"attr\">shadow</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">type</span>: [<span class=\"built_in\">String</span>, <span class=\"built_in\">Boolean</span>],</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">default</span>: <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"attr\">border</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">type</span>: [<span class=\"built_in\">String</span>, <span class=\"built_in\">Boolean</span>],</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">default</span>: <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"attr\">clickLeftBack</span>: &#123; <span class=\"comment\">// 点击返回按钮区域是否返回上一页/路由</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">type</span>: [<span class=\"built_in\">String</span>, <span class=\"built_in\">Boolean</span>],</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">default</span>: <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"attr\">showLeftBack</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">type</span>: [<span class=\"built_in\">Boolean</span>, <span class=\"built_in\">String</span>],</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">default</span>: <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">showIconBg</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否显示按钮的背景色</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">showHome</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否显示回到首页按钮</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">showNavBar</span>: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">headerHeight</span>: CustomNavbarHeight + <span class=\"string\">&#x27;px&#x27;</span>, <span class=\"comment\">// 头部高度，默认是40</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">subHeaderHeight</span>: <span class=\"string\">&#x27;&#x27;</span> <span class=\"comment\">// 子头部高度</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"attr\">watch</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"function\"><span class=\"title\">color</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"built_in\">this</span>.handleColorChange()</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"built_in\">this</span>.handleColorChange()</span></span><br><span class=\"line\"><span class=\"javascript\">\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"keyword\">if</span>(uni.report &amp;&amp; <span class=\"built_in\">this</span>.title !== <span class=\"string\">&#x27;&#x27;</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tuni.report(<span class=\"string\">&#x27;title&#x27;</span>, <span class=\"built_in\">this</span>.title)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"built_in\">this</span>.updateHeight()</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"comment\">// #ifdef MP-WEIXIN</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"built_in\">this</span>.judgeHome()</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"comment\">// #endif</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"function\"><span class=\"title\">updated</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"built_in\">this</span>.updateHeight()</span></span><br><span class=\"line\"><span class=\"javascript\">\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"function\"><span class=\"title\">updateHeight</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"built_in\">this</span>.getSubHeaderHeight()</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"built_in\">this</span>.getHeight()</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"function\"><span class=\"title\">handleColorChange</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">let</span> color = <span class=\"built_in\">this</span>.color &amp;&amp; <span class=\"built_in\">this</span>.color.toLocaleLowerCase()</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">// 只有背景色透明才设置按钮的背景颜色</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">let</span> bgTransparent = <span class=\"built_in\">this</span>.backgroundColor == <span class=\"string\">&#x27;transparent&#x27;</span> || <span class=\"built_in\">this</span>.backgroundColor == <span class=\"string\">&#x27;inherit&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">// 设置状态栏字体颜色</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">if</span> (color &amp;&amp; (color === <span class=\"string\">&#x27;#ffffff&#x27;</span> || color === <span class=\"string\">&#x27;#fff&#x27;</span>)) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tuni.setNavigationBarColor(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"attr\">frontColor</span>: <span class=\"string\">&#x27;#ffffff&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"attr\">backgroundColor</span>: <span class=\"string\">&#x27;transparent&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t&#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"keyword\">if</span> (bgTransparent) <span class=\"built_in\">this</span>.showIconBg = <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tuni.setNavigationBarColor(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"attr\">frontColor</span>: <span class=\"string\">&#x27;#000000&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"attr\">backgroundColor</span>: <span class=\"string\">&#x27;transparent&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t&#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"built_in\">this</span>.showIconBg = <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">/**</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">  \t * 获取节点offset值 （而非小程序提供的相对可视窗口的offset值）</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">  \t * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> </span>selector 节点 与 select()方法一致</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">  \t * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> </span>parent 节点相对滚动节点，非必传，不传以 viewport为默认值</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">  \t * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> </span>context 查询上下文（页面/组件实例），含有自定义组件的页面，或者自定义组件中调用，必传</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">  \t */</span></span></span><br><span class=\"line\"><span class=\"javascript\">  \t<span class=\"function\"><span class=\"title\">getOffset</span>(<span class=\"params\">selector, parent, context</span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> query = context ? context.createSelectorQuery() : uni.createSelectorQuery();</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  \t\t<span class=\"keyword\">let</span> parentQuery = parent ? query.select(parent) : query.selectViewport()</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  \t\tquery.select(selector).boundingClientRect()</span></span><br><span class=\"line\"><span class=\"javascript\">  \t\tparentQuery.scrollOffset()</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  \t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  \t\t\tquery.exec(<span class=\"function\">(<span class=\"params\">[selectRect, parentRect]</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  \t\t\t\t<span class=\"keyword\">if</span> (selectRect) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  \t\t\t\t\tresolve(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  \t\t\t\t\t\t<span class=\"attr\">top</span>: selectRect.top + parentRect.scrollTop,</span></span><br><span class=\"line\"><span class=\"javascript\">  \t\t\t\t\t\t<span class=\"attr\">left</span>: selectRect.left + parentRect.scrollLeft,</span></span><br><span class=\"line\"><span class=\"javascript\">  \t\t\t\t\t\t<span class=\"attr\">height</span>: selectRect.height,</span></span><br><span class=\"line\"><span class=\"javascript\">              <span class=\"attr\">width</span>: selectRect.width,</span></span><br><span class=\"line\"><span class=\"javascript\">              <span class=\"attr\">bottom</span>: selectRect.bottom</span></span><br><span class=\"line\"><span class=\"javascript\">  \t\t\t\t\t&#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">  \t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  \t\t\t\t\t<span class=\"built_in\">console</span>.warn(<span class=\"string\">`[mp::getOffset]: 获取目标元素<span class=\"subst\">$&#123;selector&#125;</span>的offset信息失败`</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">  \t\t\t\t\tresolve(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  \t\t\t\t\t\t<span class=\"attr\">top</span>: <span class=\"number\">0</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">  \t\t\t\t\t\t<span class=\"attr\">left</span>: <span class=\"number\">0</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">  \t\t\t\t\t\t<span class=\"attr\">height</span>: <span class=\"number\">0</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">  \t\t\t\t\t\t<span class=\"attr\">width</span>: <span class=\"number\">0</span></span></span><br><span class=\"line\"><span class=\"javascript\">  \t\t\t\t\t&#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">  \t\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  \t\t\t&#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">  \t\t&#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">  \t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"title\">getSubHeaderHeight</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">let</span> subHeaderOffset = <span class=\"keyword\">await</span> <span class=\"built_in\">this</span>.getOffset(<span class=\"string\">&#x27;.uni-navbar__sub-header&#x27;</span>, <span class=\"literal\">null</span>, <span class=\"built_in\">this</span>)</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"built_in\">this</span>.subHeaderHeight = subHeaderOffset.height + <span class=\"string\">&#x27;px&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"title\">getHeight</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">let</span> navOffset = <span class=\"keyword\">await</span> <span class=\"built_in\">this</span>.getOffset(<span class=\"string\">&#x27;.uni-navbar__content&#x27;</span>, <span class=\"literal\">null</span>, <span class=\"built_in\">this</span>)</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">return</span> navOffset</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"comment\">// #ifdef MP-WEIXIN</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">/**</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">     * 判断是否需要显示home按钮（只有小程序需要）</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">     **/</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"function\"><span class=\"title\">judgeHome</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 页面栈栈顶，且路径为非首页，则显示home按钮</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">let</span> pages = getCurrentPages()</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">if</span> ((pages.length &lt;= <span class=\"number\">1</span>) &amp;&amp; HOME_PATH !== pages[<span class=\"number\">0</span>].route) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"built_in\">this</span>.showHome = <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"function\"><span class=\"title\">goHome</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tuni.reLaunch(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"attr\">url</span>: <span class=\"string\">&#x27;/&#x27;</span>+HOME_PATH,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t&#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"comment\">// #endif</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"function\"><span class=\"title\">onClickLeft</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.clickLeftBack) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tuni.navigateBack()</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"built_in\">this</span>.$emit(<span class=\"string\">&quot;clickLeft&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"function\"><span class=\"title\">onClickRight</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"built_in\">this</span>.$emit(<span class=\"string\">&quot;clickRight&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">\t&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">&#125;;</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;scss&quot;</span> <span class=\"attr\">scoped</span>&gt;</span></span><br><span class=\"line\">\t$nav-height: 44px;</span><br><span class=\"line\">\t.uni-nav-bar-text &#123;</span><br><span class=\"line\">\t\tfont-size: $uni-font-size-lg;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t.uni-nav-bar-right-text &#123;</span><br><span class=\"line\">\t\tfont-size: $uni-font-size-base;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t.uni-navbar &#123;</span><br><span class=\"line\">\t\tposition: relative;</span><br><span class=\"line\">\t\twidth: 100%;</span><br><span class=\"line\">\t\tfont-family: PingFangSC-Medium, PingFang SC;</span><br><span class=\"line\">\t\tbox-sizing: border-box;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t.uni-navbar__content &#123;</span><br><span class=\"line\">\t\tposition: relative;</span><br><span class=\"line\">\t\twidth: 100%;</span><br><span class=\"line\">\t\tbackground-color: $uni-bg-color;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t.uni-navbar__content_view &#123;</span><br><span class=\"line\">\t\tdisplay: flex;</span><br><span class=\"line\">\t\talign-items: center;</span><br><span class=\"line\">\t\tflex-direction: row;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t.uni-navbar__header &#123;</span><br><span class=\"line\">\t\tdisplay: flex;</span><br><span class=\"line\">\t\tflex-direction: row;</span><br><span class=\"line\">\t\twidth: 100%;</span><br><span class=\"line\">\t\theight: $nav-height;</span><br><span class=\"line\">\t\tline-height: $nav-height;</span><br><span class=\"line\">\t\tfont-size: 32rpx;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t.header-icon-with-bg &#123;</span><br><span class=\"line\">\t\tdisplay: flex;</span><br><span class=\"line\">\t\tjustify-content: center;</span><br><span class=\"line\">\t\talign-items: center;</span><br><span class=\"line\">\t\talign-content: center;</span><br><span class=\"line\">\t\tbackground: rgba($color: #000000, $alpha: 0.2);</span><br><span class=\"line\">\t\tborder-radius: 100%;</span><br><span class=\"line\">\t\theight: 52rpx;</span><br><span class=\"line\">\t\twidth: 52rpx;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t.uni-navbar__header-btns &#123;</span><br><span class=\"line\">\t\tdisplay: flex;</span><br><span class=\"line\">\t\tflex-wrap: nowrap;</span><br><span class=\"line\">\t\tpadding: 0 12px;</span><br><span class=\"line\">\t\tjustify-content: center;</span><br><span class=\"line\">\t\talign-items: center;</span><br><span class=\"line\">\t\tbox-sizing: border-box;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t.uni-navbar__header-btns-left &#123;</span><br><span class=\"line\">\t\tdisplay: flex;</span><br><span class=\"line\">\t\tbox-sizing: border-box;</span><br><span class=\"line\">\t\tjustify-content: flex-start;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t.uni-navbar__header-btns-right &#123;</span><br><span class=\"line\">\t\tdisplay: flex;</span><br><span class=\"line\">\t\tbox-sizing: border-box;</span><br><span class=\"line\">\t\tjustify-content: flex-end;</span><br><span class=\"line\">\t\tmargin-right: 10rpx;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t.uni-navbar__header-container &#123;</span><br><span class=\"line\">\t\tflex: 1;</span><br><span class=\"line\">\t\tfont-weight: 600;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t.uni-navbar__header-container-inner &#123;</span><br><span class=\"line\">\t\tdisplay: flex;</span><br><span class=\"line\">\t\tflex: 1;</span><br><span class=\"line\">\t\talign-items: center;</span><br><span class=\"line\">\t\tjustify-content: center;</span><br><span class=\"line\">\t\tfont-size: $uni-font-size-base;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t.uni-navbar__placeholder-view &#123;</span><br><span class=\"line\">\t\theight: $nav-height;</span><br><span class=\"line\">\t\tbox-sizing: content-box;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t.uni-navbar--fixed &#123;</span><br><span class=\"line\">\t\tposition: fixed;</span><br><span class=\"line\">\t\tz-index: 998;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t.uni-navbar--shadow &#123;</span><br><span class=\"line\">\t\tbox-shadow: 0 1px 6px #ccc;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t.uni-navbar--border &#123;</span><br><span class=\"line\">\t\tborder-bottom-width: 1rpx;</span><br><span class=\"line\">\t\tborder-bottom-style: solid;</span><br><span class=\"line\">\t\tborder-bottom-color: $uni-border-color;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>该组件是基于uni-ui扩展组件uni-nav-bar修改。导航组件严格来说是有2个组件组成：状态栏组件，头部组件</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-31/1622442807912-image.png\"></p>\n<p>getStatusBarHeight和getMenuButtonBoundingClientRect方法可以获取小程序状态栏和头部胶囊信息，取值关系如下：</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-31/1622449017125-image.png\"></p>\n<p>需要注意的是，通过getMenuButtonBoundingClientRect方法top属性一般比getStatusBarHeight的值大，且不同设备具体差异大小不同。</p>\n<p>关于状态栏组件，具体搜索文章<code>小程序状态栏组件</code>。</p>\n<h2 id=\"导航组件\"><a href=\"#导航组件\" class=\"headerlink\" title=\"导航组件\"></a>导航组件</h2><p>该组件依赖于以下组件：</p>\n<ul>\n<li>com-icons iconfont组件</li>\n<li>com-status-bar 状态栏组件</li>\n</ul>\n<p>以上组件可通过搜索名称查找相关代码。</p>\n<p>导航组件具有以下功能：</p>\n<ul>\n<li>滚动头部固定/跟随文档</li>\n<li>自定义返回按钮、按钮后的文案、左侧/右侧区域宽度</li>\n<li>头部固定时是否需要保持高度（避免业务方做高度兼容）</li>\n<li>头部透明度（支持头部随着滚动过渡）</li>\n<li>是否需要状态栏</li>\n<li>自定义返回按钮点击行为</li>\n<li>小程序环境自动判断是否需要显示回到首页按钮</li>\n</ul>\n<h4 id=\"事件类型\"><a href=\"#事件类型\" class=\"headerlink\" title=\"事件类型\"></a>事件类型</h4><table>\n<thead>\n<tr>\n<th>事件名称</th>\n<th>事件描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>clickLeft</td>\n<td>点击左侧区域</td>\n</tr>\n<tr>\n<td>clickRight</td>\n<td>点击右侧区域</td>\n</tr>\n</tbody></table>\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4><table>\n<thead>\n<tr>\n<th>方法名称</th>\n<th>方法描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>getHeight</td>\n<td>获取导航高度</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>使用时需要修改以下功能：</td>\n<td></td>\n</tr>\n</tbody></table>\n<ul>\n<li>icon组件对应的icon字体需要根据具体的应用修改</li>\n<li>HOME_PATH对应的值根据具体的应用修改</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;uni-navbar&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;&#123; &#x27;uni-navbar--fixed&#x27;: fixed, &#x27;uni-navbar--shadow&#x27;: shadow, &#x27;uni-navbar--border&#x27;: border &#125;&quot;</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;&#123; &#x27;background&#x27;: backgroundColor, opacity: opacity &#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">class</span>=<span class=\"string\">&quot;uni-navbar__content&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">com-status-bar</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;statusBar&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;&#123; color: color,background: backgroundColor, height: headerHeight, lineHeight: headerHeight &#125;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;uni-navbar__header uni-navbar__content_view&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">&lt;!-- 左侧（默认点击行为：返回上一页。可重写） --&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">view</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;onClickLeft&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;uni-navbar__header-btns uni-navbar__header-btns-left uni-navbar__content_view&quot;</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;&#123;width: leftIconWidth&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">&lt;!-- 回到首页按钮（分享场景）（与其它按钮或者文案互斥） --&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">&lt;!-- #ifdef MP-WEIXIN --&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">view</span> </span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t\t\t<span class=\"attr\">class</span>=<span class=\"string\">&quot;uni-navbar__content_view&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t\t\t<span class=\"attr\">:class</span>=<span class=\"string\">&quot;&#123;&#x27;header-icon-with-bg&#x27;: showIconBg&#125;&quot;</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;showHome&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;goHome&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">com-icons</span> <span class=\"attr\">:color</span>=<span class=\"string\">&quot;color&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;icon132&quot;</span> <span class=\"attr\">size</span>=<span class=\"string\">&quot;40rpx&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">&lt;!-- #endif --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">&lt;!-- 返回按钮 --&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">view</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t\t\t<span class=\"attr\">class</span>=<span class=\"string\">&quot;uni-navbar__content_view&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t\t\t<span class=\"attr\">:class</span>=<span class=\"string\">&quot;&#123;&#x27;header-icon-with-bg&#x27;: showIconBg&#125;&quot;</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;!showHome &amp;&amp; leftIcon &amp;&amp; showLeftBack&quot;</span> &gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">com-icons</span> <span class=\"attr\">:color</span>=<span class=\"string\">&quot;color&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;icon9&quot;</span> <span class=\"attr\">size</span>=<span class=\"string\">&quot;40rpx&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">&lt;!-- 左侧显示文案 --&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">view</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t\t\t<span class=\"attr\">class</span>=<span class=\"string\">&quot;uni-navbar-btn-text uni-navbar__content_view&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t\t\t<span class=\"attr\">:class</span>=<span class=\"string\">&quot;&#123; &#x27;uni-navbar-btn-icon-left&#x27;: leftIcon &#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t\t <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;!showHome &amp;&amp; leftText.length&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;&#123; color: color, fontSize: &#x27;28rpx&#x27; &#125;&quot;</span>&gt;</span>&#123;&#123; leftText &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">          <span class=\"comment\">&lt;!-- 左侧区域插槽（具名插槽） --&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;left&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">&lt;!-- 标题区域 --&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;uni-navbar__header-container uni-navbar__content_view&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;uni-navbar__header-container-inner uni-navbar__content_view&quot;</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;title.length&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;uni-nav-bar-text&quot;</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;&#123;color: color &#125;&quot;</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">&lt;!-- 标题插槽（无名插槽） --&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">slot</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">&lt;!-- 右侧按钮区域 --&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">view</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t\t@<span class=\"attr\">tap</span>=<span class=\"string\">&quot;onClickRight&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;uni-navbar__header-btns uni-navbar__header-btns-right uni-navbar__content_view&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t\t<span class=\"attr\">:style</span>=<span class=\"string\">&quot;&#123;width: rightIconWidth&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">view</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t\t<span class=\"attr\">class</span>=<span class=\"string\">&quot;uni-navbar__content_view&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t\t<span class=\"attr\">:class</span>=<span class=\"string\">&quot;&#123;&#x27;header-icon-with-bg&#x27;: showIconBg&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t\t<span class=\"attr\">v-if</span>=<span class=\"string\">&quot;rightIcon&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">com-icons</span> <span class=\"attr\">:color</span>=<span class=\"string\">&quot;color&quot;</span> <span class=\"attr\">:name</span>=<span class=\"string\">&quot;rightIcon&quot;</span> <span class=\"attr\">size</span>=<span class=\"string\">&quot;56rpx&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">&lt;!-- 优先显示图标 --&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;uni-navbar-btn-text uni-navbar__content_view&quot;</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;rightText.length &amp;&amp; !rightIcon.length&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;uni-nav-bar-right-text&quot;</span>&gt;</span>&#123;&#123; rightText &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">&lt;!-- 右侧区域插槽（具名插槽） --&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;right&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 副标题（样式完全自定义） --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;uni-navbar__sub-header&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sub-nav&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 标题区域占位 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;uni-navbar__placeholder&quot;</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;fixed &amp;&amp; holdPlace&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">com-status-bar</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;statusBar&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;uni-navbar__placeholder-view&quot;</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;&#123;&#x27;padding-top&#x27;: subHeaderHeight, height: headerHeight&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">// 首页路径</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">const</span> HOME_PATH = <span class=\"string\">&#x27;pages/index/index&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> CustomNavbarHeight = uni.getCustomNavbarHeight()</span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"comment\">/**</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t * NavBar 自定义导航栏</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t * <span class=\"doctag\">@description </span>导航栏组件，主要用于头部导航</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t * <span class=\"doctag\">@tutorial </span>https://ext.dcloud.net.cn/plugin?id=52</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t * <span class=\"doctag\">@property <span class=\"type\">&#123;String&#125;</span> </span>title 标题文字</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t * <span class=\"doctag\">@property <span class=\"type\">&#123;String&#125;</span> </span>leftText 左侧按钮文本</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t * <span class=\"doctag\">@property <span class=\"type\">&#123;String&#125;</span> </span>rightText 右侧按钮文本</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t * <span class=\"doctag\">@property <span class=\"type\">&#123;String&#125;</span> </span>leftIcon 左侧按钮图标（图标类型参考 [Icon 图标](http://ext.dcloud.net.cn/plugin?id=28) type 属性）</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t * <span class=\"doctag\">@property <span class=\"type\">&#123;String&#125;</span> </span>rightIcon 右侧按钮图标（图标类型参考 [Icon 图标](http://ext.dcloud.net.cn/plugin?id=28) type 属性）</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t * <span class=\"doctag\">@property <span class=\"type\">&#123;String&#125;</span> </span>leftIconWidth （扩展属性）左侧按钮区域宽度 用来满足设计稿要求</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t * <span class=\"doctag\">@property <span class=\"type\">&#123;String&#125;</span> </span>rightIconWidth （扩展属性）右侧按钮区域宽度 用来满足设计稿要求</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t * <span class=\"doctag\">@property <span class=\"type\">&#123;String&#125;</span> </span>color 图标和文字颜色</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t * <span class=\"doctag\">@property <span class=\"type\">&#123;String&#125;</span> </span>backgroundColor 导航栏背景颜色</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t * <span class=\"doctag\">@property <span class=\"type\">&#123;Boolean&#125;</span> </span>fixed = [true|false] 是否固定顶部</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t * <span class=\"doctag\">@property <span class=\"type\">&#123;Boolean&#125;</span> </span>holdPlace = [true|false]  （扩展属性）固定在顶部时，是否需要占位</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t * <span class=\"doctag\">@property <span class=\"type\">&#123;Boolean&#125;</span> </span>opacity = 0-1  （扩展属性）头部透明度 用于头部滚动渐变</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t * <span class=\"doctag\">@property <span class=\"type\">&#123;Boolean&#125;</span> </span>statusBar = [true|false] 是否包含状态栏</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t * <span class=\"doctag\">@property <span class=\"type\">&#123;Boolean&#125;</span> </span>shadow = [true|false] 导航栏下是否有阴影</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t * <span class=\"doctag\">@property <span class=\"type\">&#123;Boolean&#125;</span> </span>border = [true|false] 导航栏下是否有边框线</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t * <span class=\"doctag\">@event <span class=\"type\">&#123;Function&#125;</span> </span>showLeftBack （扩展属性）是否显示返回按钮</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t * <span class=\"doctag\">@event <span class=\"type\">&#123;Function&#125;</span> </span>clickLeftBack （扩展属性）点击左侧区域是否关闭当前窗口</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">\t */</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"attr\">name</span>: <span class=\"string\">&quot;NavBar&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"attr\">props</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"attr\">title</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">type</span>: <span class=\"built_in\">String</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">default</span>: <span class=\"string\">&quot;&quot;</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"attr\">leftText</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">type</span>: <span class=\"built_in\">String</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">default</span>: <span class=\"string\">&quot;&quot;</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"attr\">rightText</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">type</span>: <span class=\"built_in\">String</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">default</span>: <span class=\"string\">&quot;&quot;</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"attr\">leftIcon</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">type</span>: <span class=\"built_in\">String</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">default</span>: <span class=\"string\">&quot;&quot;</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"attr\">leftIconWidth</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">type</span>: <span class=\"built_in\">String</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">default</span>: <span class=\"string\">&quot;132rpx&quot;</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"attr\">rightIcon</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">type</span>: <span class=\"built_in\">String</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">default</span>: <span class=\"string\">&quot;&quot;</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"attr\">rightIconWidth</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">type</span>: <span class=\"built_in\">String</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">default</span>: <span class=\"string\">&#x27;132rpx&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"attr\">fixed</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">type</span>: [<span class=\"built_in\">Boolean</span>, <span class=\"built_in\">String</span>],</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">default</span>: <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"attr\">holdPlace</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">type</span>: <span class=\"built_in\">Boolean</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">default</span>: <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"attr\">color</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">type</span>: <span class=\"built_in\">String</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">default</span>: <span class=\"string\">&quot;#000000&quot;</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"attr\">opacity</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">type</span>: [<span class=\"built_in\">String</span>,<span class=\"built_in\">Number</span>],</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">default</span>: <span class=\"string\">&quot;1&quot;</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"attr\">backgroundColor</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">type</span>: <span class=\"built_in\">String</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">default</span>: <span class=\"string\">&quot;#FFFFFF&quot;</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"attr\">statusBar</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">type</span>: [<span class=\"built_in\">Boolean</span>, <span class=\"built_in\">String</span>],</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">default</span>: <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"attr\">shadow</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">type</span>: [<span class=\"built_in\">String</span>, <span class=\"built_in\">Boolean</span>],</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">default</span>: <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"attr\">border</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">type</span>: [<span class=\"built_in\">String</span>, <span class=\"built_in\">Boolean</span>],</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">default</span>: <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"attr\">clickLeftBack</span>: &#123; <span class=\"comment\">// 点击返回按钮区域是否返回上一页/路由</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">type</span>: [<span class=\"built_in\">String</span>, <span class=\"built_in\">Boolean</span>],</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">default</span>: <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"attr\">showLeftBack</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">type</span>: [<span class=\"built_in\">Boolean</span>, <span class=\"built_in\">String</span>],</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">default</span>: <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">showIconBg</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否显示按钮的背景色</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">showHome</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否显示回到首页按钮</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">showNavBar</span>: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">headerHeight</span>: CustomNavbarHeight + <span class=\"string\">&#x27;px&#x27;</span>, <span class=\"comment\">// 头部高度，默认是40</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"attr\">subHeaderHeight</span>: <span class=\"string\">&#x27;&#x27;</span> <span class=\"comment\">// 子头部高度</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"attr\">watch</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"function\"><span class=\"title\">color</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"built_in\">this</span>.handleColorChange()</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"built_in\">this</span>.handleColorChange()</span></span><br><span class=\"line\"><span class=\"javascript\">\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"keyword\">if</span>(uni.report &amp;&amp; <span class=\"built_in\">this</span>.title !== <span class=\"string\">&#x27;&#x27;</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tuni.report(<span class=\"string\">&#x27;title&#x27;</span>, <span class=\"built_in\">this</span>.title)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"built_in\">this</span>.updateHeight()</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"comment\">// #ifdef MP-WEIXIN</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"built_in\">this</span>.judgeHome()</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"comment\">// #endif</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"function\"><span class=\"title\">updated</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"built_in\">this</span>.updateHeight()</span></span><br><span class=\"line\"><span class=\"javascript\">\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t<span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"function\"><span class=\"title\">updateHeight</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"built_in\">this</span>.getSubHeaderHeight()</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"built_in\">this</span>.getHeight()</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"function\"><span class=\"title\">handleColorChange</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">let</span> color = <span class=\"built_in\">this</span>.color &amp;&amp; <span class=\"built_in\">this</span>.color.toLocaleLowerCase()</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">// 只有背景色透明才设置按钮的背景颜色</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">let</span> bgTransparent = <span class=\"built_in\">this</span>.backgroundColor == <span class=\"string\">&#x27;transparent&#x27;</span> || <span class=\"built_in\">this</span>.backgroundColor == <span class=\"string\">&#x27;inherit&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"comment\">// 设置状态栏字体颜色</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">if</span> (color &amp;&amp; (color === <span class=\"string\">&#x27;#ffffff&#x27;</span> || color === <span class=\"string\">&#x27;#fff&#x27;</span>)) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tuni.setNavigationBarColor(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"attr\">frontColor</span>: <span class=\"string\">&#x27;#ffffff&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"attr\">backgroundColor</span>: <span class=\"string\">&#x27;transparent&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t&#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"keyword\">if</span> (bgTransparent) <span class=\"built_in\">this</span>.showIconBg = <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tuni.setNavigationBarColor(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"attr\">frontColor</span>: <span class=\"string\">&#x27;#000000&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t<span class=\"attr\">backgroundColor</span>: <span class=\"string\">&#x27;transparent&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t&#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"built_in\">this</span>.showIconBg = <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">/**</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">  \t * 获取节点offset值 （而非小程序提供的相对可视窗口的offset值）</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">  \t * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> </span>selector 节点 与 select()方法一致</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">  \t * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> </span>parent 节点相对滚动节点，非必传，不传以 viewport为默认值</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">  \t * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> </span>context 查询上下文（页面/组件实例），含有自定义组件的页面，或者自定义组件中调用，必传</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">  \t */</span></span></span><br><span class=\"line\"><span class=\"javascript\">  \t<span class=\"function\"><span class=\"title\">getOffset</span>(<span class=\"params\">selector, parent, context</span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> query = context ? context.createSelectorQuery() : uni.createSelectorQuery();</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  \t\t<span class=\"keyword\">let</span> parentQuery = parent ? query.select(parent) : query.selectViewport()</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  \t\tquery.select(selector).boundingClientRect()</span></span><br><span class=\"line\"><span class=\"javascript\">  \t\tparentQuery.scrollOffset()</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  \t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  \t\t\tquery.exec(<span class=\"function\">(<span class=\"params\">[selectRect, parentRect]</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  \t\t\t\t<span class=\"keyword\">if</span> (selectRect) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  \t\t\t\t\tresolve(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  \t\t\t\t\t\t<span class=\"attr\">top</span>: selectRect.top + parentRect.scrollTop,</span></span><br><span class=\"line\"><span class=\"javascript\">  \t\t\t\t\t\t<span class=\"attr\">left</span>: selectRect.left + parentRect.scrollLeft,</span></span><br><span class=\"line\"><span class=\"javascript\">  \t\t\t\t\t\t<span class=\"attr\">height</span>: selectRect.height,</span></span><br><span class=\"line\"><span class=\"javascript\">              <span class=\"attr\">width</span>: selectRect.width,</span></span><br><span class=\"line\"><span class=\"javascript\">              <span class=\"attr\">bottom</span>: selectRect.bottom</span></span><br><span class=\"line\"><span class=\"javascript\">  \t\t\t\t\t&#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">  \t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  \t\t\t\t\t<span class=\"built_in\">console</span>.warn(<span class=\"string\">`[mp::getOffset]: 获取目标元素<span class=\"subst\">$&#123;selector&#125;</span>的offset信息失败`</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">  \t\t\t\t\tresolve(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  \t\t\t\t\t\t<span class=\"attr\">top</span>: <span class=\"number\">0</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">  \t\t\t\t\t\t<span class=\"attr\">left</span>: <span class=\"number\">0</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">  \t\t\t\t\t\t<span class=\"attr\">height</span>: <span class=\"number\">0</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">  \t\t\t\t\t\t<span class=\"attr\">width</span>: <span class=\"number\">0</span></span></span><br><span class=\"line\"><span class=\"javascript\">  \t\t\t\t\t&#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">  \t\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  \t\t\t&#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">  \t\t&#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">  \t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"title\">getSubHeaderHeight</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">let</span> subHeaderOffset = <span class=\"keyword\">await</span> <span class=\"built_in\">this</span>.getOffset(<span class=\"string\">&#x27;.uni-navbar__sub-header&#x27;</span>, <span class=\"literal\">null</span>, <span class=\"built_in\">this</span>)</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"built_in\">this</span>.subHeaderHeight = subHeaderOffset.height + <span class=\"string\">&#x27;px&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"title\">getHeight</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">let</span> navOffset = <span class=\"keyword\">await</span> <span class=\"built_in\">this</span>.getOffset(<span class=\"string\">&#x27;.uni-navbar__content&#x27;</span>, <span class=\"literal\">null</span>, <span class=\"built_in\">this</span>)</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">return</span> navOffset</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"comment\">// #ifdef MP-WEIXIN</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">/**</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">     * 判断是否需要显示home按钮（只有小程序需要）</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"javascript\">     **/</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"function\"><span class=\"title\">judgeHome</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 页面栈栈顶，且路径为非首页，则显示home按钮</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">let</span> pages = getCurrentPages()</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">if</span> ((pages.length &lt;= <span class=\"number\">1</span>) &amp;&amp; HOME_PATH !== pages[<span class=\"number\">0</span>].route) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"built_in\">this</span>.showHome = <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"function\"><span class=\"title\">goHome</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\tuni.reLaunch(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"attr\">url</span>: <span class=\"string\">&#x27;/&#x27;</span>+HOME_PATH,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t&#125;)</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"comment\">// #endif</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"function\"><span class=\"title\">onClickLeft</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.clickLeftBack) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\tuni.navigateBack()</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t<span class=\"built_in\">this</span>.$emit(<span class=\"string\">&quot;clickLeft&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t<span class=\"function\"><span class=\"title\">onClickRight</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t<span class=\"built_in\">this</span>.$emit(<span class=\"string\">&quot;clickRight&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">\t&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">&#125;;</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;scss&quot;</span> <span class=\"attr\">scoped</span>&gt;</span></span><br><span class=\"line\">\t$nav-height: 44px;</span><br><span class=\"line\">\t.uni-nav-bar-text &#123;</span><br><span class=\"line\">\t\tfont-size: $uni-font-size-lg;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t.uni-nav-bar-right-text &#123;</span><br><span class=\"line\">\t\tfont-size: $uni-font-size-base;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t.uni-navbar &#123;</span><br><span class=\"line\">\t\tposition: relative;</span><br><span class=\"line\">\t\twidth: 100%;</span><br><span class=\"line\">\t\tfont-family: PingFangSC-Medium, PingFang SC;</span><br><span class=\"line\">\t\tbox-sizing: border-box;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t.uni-navbar__content &#123;</span><br><span class=\"line\">\t\tposition: relative;</span><br><span class=\"line\">\t\twidth: 100%;</span><br><span class=\"line\">\t\tbackground-color: $uni-bg-color;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t.uni-navbar__content_view &#123;</span><br><span class=\"line\">\t\tdisplay: flex;</span><br><span class=\"line\">\t\talign-items: center;</span><br><span class=\"line\">\t\tflex-direction: row;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t.uni-navbar__header &#123;</span><br><span class=\"line\">\t\tdisplay: flex;</span><br><span class=\"line\">\t\tflex-direction: row;</span><br><span class=\"line\">\t\twidth: 100%;</span><br><span class=\"line\">\t\theight: $nav-height;</span><br><span class=\"line\">\t\tline-height: $nav-height;</span><br><span class=\"line\">\t\tfont-size: 32rpx;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t.header-icon-with-bg &#123;</span><br><span class=\"line\">\t\tdisplay: flex;</span><br><span class=\"line\">\t\tjustify-content: center;</span><br><span class=\"line\">\t\talign-items: center;</span><br><span class=\"line\">\t\talign-content: center;</span><br><span class=\"line\">\t\tbackground: rgba($color: #000000, $alpha: 0.2);</span><br><span class=\"line\">\t\tborder-radius: 100%;</span><br><span class=\"line\">\t\theight: 52rpx;</span><br><span class=\"line\">\t\twidth: 52rpx;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t.uni-navbar__header-btns &#123;</span><br><span class=\"line\">\t\tdisplay: flex;</span><br><span class=\"line\">\t\tflex-wrap: nowrap;</span><br><span class=\"line\">\t\tpadding: 0 12px;</span><br><span class=\"line\">\t\tjustify-content: center;</span><br><span class=\"line\">\t\talign-items: center;</span><br><span class=\"line\">\t\tbox-sizing: border-box;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t.uni-navbar__header-btns-left &#123;</span><br><span class=\"line\">\t\tdisplay: flex;</span><br><span class=\"line\">\t\tbox-sizing: border-box;</span><br><span class=\"line\">\t\tjustify-content: flex-start;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t.uni-navbar__header-btns-right &#123;</span><br><span class=\"line\">\t\tdisplay: flex;</span><br><span class=\"line\">\t\tbox-sizing: border-box;</span><br><span class=\"line\">\t\tjustify-content: flex-end;</span><br><span class=\"line\">\t\tmargin-right: 10rpx;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t.uni-navbar__header-container &#123;</span><br><span class=\"line\">\t\tflex: 1;</span><br><span class=\"line\">\t\tfont-weight: 600;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t.uni-navbar__header-container-inner &#123;</span><br><span class=\"line\">\t\tdisplay: flex;</span><br><span class=\"line\">\t\tflex: 1;</span><br><span class=\"line\">\t\talign-items: center;</span><br><span class=\"line\">\t\tjustify-content: center;</span><br><span class=\"line\">\t\tfont-size: $uni-font-size-base;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t.uni-navbar__placeholder-view &#123;</span><br><span class=\"line\">\t\theight: $nav-height;</span><br><span class=\"line\">\t\tbox-sizing: content-box;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t.uni-navbar--fixed &#123;</span><br><span class=\"line\">\t\tposition: fixed;</span><br><span class=\"line\">\t\tz-index: 998;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t.uni-navbar--shadow &#123;</span><br><span class=\"line\">\t\tbox-shadow: 0 1px 6px #ccc;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t.uni-navbar--border &#123;</span><br><span class=\"line\">\t\tborder-bottom-width: 1rpx;</span><br><span class=\"line\">\t\tborder-bottom-style: solid;</span><br><span class=\"line\">\t\tborder-bottom-color: $uni-border-color;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":"uni-app 小程序状态栏组件","date":"2020-11-19T16:00:00.000Z","_content":"   \n\n小程序状态栏高度通过wx.getSystemInfoSync().statusBarHeight获取是最准确的。单位是px。wx.getMenuButtonBoundingClientRect()方法获取的top属性时不准确的，不能作为参考。\n\n```\n<template>\n\t<view :style=\"{ height: statusBarHeight }\" class=\"uni-status-bar\">\n\t\t<slot />\n\t</view>\n</template>\n\n<script>\nconst statusBarHeight = uni.getStatusBarHeight()\n\nexport default {\n\tname: 'status-bar',\n\tdata() {\n\t\treturn {\n\t\t\tstatusBarHeight: statusBarHeight + 'px'\n\t\t}\n\t}\n}\n</script>\n\n<style lang=\"scss\" scoped>\n\t.uni-status-bar {\n\t\twidth: 750rpx;\n\t\theight: 20px;\n\t}\n</style>\n```\n\n","source":"_posts/uni-app/com-status-bar.md","raw":"---\ntitle: uni-app 小程序状态栏组件\ncategories: uni-app\ntags: [组件, uni-app]\ndate: 2020-11-20\n---   \n\n小程序状态栏高度通过wx.getSystemInfoSync().statusBarHeight获取是最准确的。单位是px。wx.getMenuButtonBoundingClientRect()方法获取的top属性时不准确的，不能作为参考。\n\n```\n<template>\n\t<view :style=\"{ height: statusBarHeight }\" class=\"uni-status-bar\">\n\t\t<slot />\n\t</view>\n</template>\n\n<script>\nconst statusBarHeight = uni.getStatusBarHeight()\n\nexport default {\n\tname: 'status-bar',\n\tdata() {\n\t\treturn {\n\t\t\tstatusBarHeight: statusBarHeight + 'px'\n\t\t}\n\t}\n}\n</script>\n\n<style lang=\"scss\" scoped>\n\t.uni-status-bar {\n\t\twidth: 750rpx;\n\t\theight: 20px;\n\t}\n</style>\n```\n\n","slug":"uni-app/com-status-bar","published":1,"updated":"2021-06-14T02:11:41.625Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc700017ecq88yu3e8wf","content":"<p>小程序状态栏高度通过wx.getSystemInfoSync().statusBarHeight获取是最准确的。单位是px。wx.getMenuButtonBoundingClientRect()方法获取的top属性时不准确的，不能作为参考。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;view :style=&quot;&#123; height: statusBarHeight &#125;&quot; class=&quot;uni-status-bar&quot;&gt;</span><br><span class=\"line\">\t\t&lt;slot /&gt;</span><br><span class=\"line\">\t&lt;/view&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">const statusBarHeight = uni.getStatusBarHeight()</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">\tname: &#x27;status-bar&#x27;,</span><br><span class=\"line\">\tdata() &#123;</span><br><span class=\"line\">\t\treturn &#123;</span><br><span class=\"line\">\t\t\tstatusBarHeight: statusBarHeight + &#x27;px&#x27;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class=\"line\">\t.uni-status-bar &#123;</span><br><span class=\"line\">\t\twidth: 750rpx;</span><br><span class=\"line\">\t\theight: 20px;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>小程序状态栏高度通过wx.getSystemInfoSync().statusBarHeight获取是最准确的。单位是px。wx.getMenuButtonBoundingClientRect()方法获取的top属性时不准确的，不能作为参考。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;view :style=&quot;&#123; height: statusBarHeight &#125;&quot; class=&quot;uni-status-bar&quot;&gt;</span><br><span class=\"line\">\t\t&lt;slot /&gt;</span><br><span class=\"line\">\t&lt;/view&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">const statusBarHeight = uni.getStatusBarHeight()</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">\tname: &#x27;status-bar&#x27;,</span><br><span class=\"line\">\tdata() &#123;</span><br><span class=\"line\">\t\treturn &#123;</span><br><span class=\"line\">\t\t\tstatusBarHeight: statusBarHeight + &#x27;px&#x27;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class=\"line\">\t.uni-status-bar &#123;</span><br><span class=\"line\">\t\twidth: 750rpx;</span><br><span class=\"line\">\t\theight: 20px;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"uni-app 自定义条件编译","date":"2021-04-06T16:00:00.000Z","_content":"   \n\npackage.json文件中添加如下配置：\n```\n\"uni-app\": {\n    \"scripts\": {\n      \"mp-qly\": {\n        \"title\": \"趣旅游小程序\",\n        \"BROWSER\": \"\",\n        \"env\": {\n          \"UNI_PLATFORM\": \"mp-weixin\"\n        },\n        \"define\": {\n          \"QLY\": true\n        }\n      },\n      \"h5-qly\": {\n        \"title\": \"趣旅游h5\",\n        \"BROWSER\": \"\",\n        \"env\": {\n          \"UNI_PLATFORM\": \"h5\"\n        },\n        \"define\": {\n          \"QLY\": true\n        }\n      }\n    }\n}\n```\n\n在npm script中带上custom参数：\n```\n\"dev:wx:qly\": \"uniapp-cli custom mp-qly\",\n\"dev:h5:qly\": \"uniapp-cli custom h5-qly\"\n```\n\n那么，这俩命令执行后\n```\n// #ifdef QLY\n// #endif\n```\n这个条件编译是都会命中的。自定义条件编译适合在saas应用中针对业务做区分，同一个业务不同的平台保持一致性。\n\n自定义条件编译有个缺点，就是不支持or判断\n```\n// #ifdef BOOKING || QLY\ndosomething();\n// #endif\n```\n\n以上条件编译只会命中BOOKING。不会命中QLY。\n\n解决办法\n1. 按照[官方的办法](https://github.com/dcloudio/uni-app/issues/1008#issuecomment-555409355)处理。\n2. 分开处理\n```\n// #ifdef BOOKING\ndosomething();\n// #endif\n// #ifdef QLY\ndosomething();\n// #endif\n```\n\n如果是ifndef呢？既不是，也不是。\n```\n// #ifndef BOOKING || QLY\ndosomething();\n// #endif\n```\n以上写法是不对的。可以通过嵌套解决：\n```\n// #ifndef BOOKING\n// #ifndef QLY\ndosomething();\n// #endif\n// #endif\n```","source":"_posts/uni-app/custom-if.md","raw":"---\ntitle: uni-app 自定义条件编译\ncategories: uni-app\ntags: [条件编译, uni-app]\ndate: 2021-4-7\n---   \n\npackage.json文件中添加如下配置：\n```\n\"uni-app\": {\n    \"scripts\": {\n      \"mp-qly\": {\n        \"title\": \"趣旅游小程序\",\n        \"BROWSER\": \"\",\n        \"env\": {\n          \"UNI_PLATFORM\": \"mp-weixin\"\n        },\n        \"define\": {\n          \"QLY\": true\n        }\n      },\n      \"h5-qly\": {\n        \"title\": \"趣旅游h5\",\n        \"BROWSER\": \"\",\n        \"env\": {\n          \"UNI_PLATFORM\": \"h5\"\n        },\n        \"define\": {\n          \"QLY\": true\n        }\n      }\n    }\n}\n```\n\n在npm script中带上custom参数：\n```\n\"dev:wx:qly\": \"uniapp-cli custom mp-qly\",\n\"dev:h5:qly\": \"uniapp-cli custom h5-qly\"\n```\n\n那么，这俩命令执行后\n```\n// #ifdef QLY\n// #endif\n```\n这个条件编译是都会命中的。自定义条件编译适合在saas应用中针对业务做区分，同一个业务不同的平台保持一致性。\n\n自定义条件编译有个缺点，就是不支持or判断\n```\n// #ifdef BOOKING || QLY\ndosomething();\n// #endif\n```\n\n以上条件编译只会命中BOOKING。不会命中QLY。\n\n解决办法\n1. 按照[官方的办法](https://github.com/dcloudio/uni-app/issues/1008#issuecomment-555409355)处理。\n2. 分开处理\n```\n// #ifdef BOOKING\ndosomething();\n// #endif\n// #ifdef QLY\ndosomething();\n// #endif\n```\n\n如果是ifndef呢？既不是，也不是。\n```\n// #ifndef BOOKING || QLY\ndosomething();\n// #endif\n```\n以上写法是不对的。可以通过嵌套解决：\n```\n// #ifndef BOOKING\n// #ifndef QLY\ndosomething();\n// #endif\n// #endif\n```","slug":"uni-app/custom-if","published":1,"updated":"2021-06-14T02:15:49.882Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc700018ecq88b218imb","content":"<p>package.json文件中添加如下配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;uni-app&quot;: &#123;</span><br><span class=\"line\">    &quot;scripts&quot;: &#123;</span><br><span class=\"line\">      &quot;mp-qly&quot;: &#123;</span><br><span class=\"line\">        &quot;title&quot;: &quot;趣旅游小程序&quot;,</span><br><span class=\"line\">        &quot;BROWSER&quot;: &quot;&quot;,</span><br><span class=\"line\">        &quot;env&quot;: &#123;</span><br><span class=\"line\">          &quot;UNI_PLATFORM&quot;: &quot;mp-weixin&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;define&quot;: &#123;</span><br><span class=\"line\">          &quot;QLY&quot;: true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &quot;h5-qly&quot;: &#123;</span><br><span class=\"line\">        &quot;title&quot;: &quot;趣旅游h5&quot;,</span><br><span class=\"line\">        &quot;BROWSER&quot;: &quot;&quot;,</span><br><span class=\"line\">        &quot;env&quot;: &#123;</span><br><span class=\"line\">          &quot;UNI_PLATFORM&quot;: &quot;h5&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;define&quot;: &#123;</span><br><span class=\"line\">          &quot;QLY&quot;: true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在npm script中带上custom参数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dev:wx:qly&quot;: &quot;uniapp-cli custom mp-qly&quot;,</span><br><span class=\"line\">&quot;dev:h5:qly&quot;: &quot;uniapp-cli custom h5-qly&quot;</span><br></pre></td></tr></table></figure>\n\n<p>那么，这俩命令执行后</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// #ifdef QLY</span><br><span class=\"line\">// #endif</span><br></pre></td></tr></table></figure>\n<p>这个条件编译是都会命中的。自定义条件编译适合在saas应用中针对业务做区分，同一个业务不同的平台保持一致性。</p>\n<p>自定义条件编译有个缺点，就是不支持or判断</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// #ifdef BOOKING || QLY</span><br><span class=\"line\">dosomething();</span><br><span class=\"line\">// #endif</span><br></pre></td></tr></table></figure>\n\n<p>以上条件编译只会命中BOOKING。不会命中QLY。</p>\n<p>解决办法</p>\n<ol>\n<li>按照<a href=\"https://github.com/dcloudio/uni-app/issues/1008#issuecomment-555409355\">官方的办法</a>处理。</li>\n<li>分开处理<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// #ifdef BOOKING</span><br><span class=\"line\">dosomething();</span><br><span class=\"line\">// #endif</span><br><span class=\"line\">// #ifdef QLY</span><br><span class=\"line\">dosomething();</span><br><span class=\"line\">// #endif</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>如果是ifndef呢？既不是，也不是。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// #ifndef BOOKING || QLY</span><br><span class=\"line\">dosomething();</span><br><span class=\"line\">// #endif</span><br></pre></td></tr></table></figure>\n<p>以上写法是不对的。可以通过嵌套解决：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// #ifndef BOOKING</span><br><span class=\"line\">// #ifndef QLY</span><br><span class=\"line\">dosomething();</span><br><span class=\"line\">// #endif</span><br><span class=\"line\">// #endif</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>package.json文件中添加如下配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;uni-app&quot;: &#123;</span><br><span class=\"line\">    &quot;scripts&quot;: &#123;</span><br><span class=\"line\">      &quot;mp-qly&quot;: &#123;</span><br><span class=\"line\">        &quot;title&quot;: &quot;趣旅游小程序&quot;,</span><br><span class=\"line\">        &quot;BROWSER&quot;: &quot;&quot;,</span><br><span class=\"line\">        &quot;env&quot;: &#123;</span><br><span class=\"line\">          &quot;UNI_PLATFORM&quot;: &quot;mp-weixin&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;define&quot;: &#123;</span><br><span class=\"line\">          &quot;QLY&quot;: true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &quot;h5-qly&quot;: &#123;</span><br><span class=\"line\">        &quot;title&quot;: &quot;趣旅游h5&quot;,</span><br><span class=\"line\">        &quot;BROWSER&quot;: &quot;&quot;,</span><br><span class=\"line\">        &quot;env&quot;: &#123;</span><br><span class=\"line\">          &quot;UNI_PLATFORM&quot;: &quot;h5&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;define&quot;: &#123;</span><br><span class=\"line\">          &quot;QLY&quot;: true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在npm script中带上custom参数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dev:wx:qly&quot;: &quot;uniapp-cli custom mp-qly&quot;,</span><br><span class=\"line\">&quot;dev:h5:qly&quot;: &quot;uniapp-cli custom h5-qly&quot;</span><br></pre></td></tr></table></figure>\n\n<p>那么，这俩命令执行后</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// #ifdef QLY</span><br><span class=\"line\">// #endif</span><br></pre></td></tr></table></figure>\n<p>这个条件编译是都会命中的。自定义条件编译适合在saas应用中针对业务做区分，同一个业务不同的平台保持一致性。</p>\n<p>自定义条件编译有个缺点，就是不支持or判断</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// #ifdef BOOKING || QLY</span><br><span class=\"line\">dosomething();</span><br><span class=\"line\">// #endif</span><br></pre></td></tr></table></figure>\n\n<p>以上条件编译只会命中BOOKING。不会命中QLY。</p>\n<p>解决办法</p>\n<ol>\n<li>按照<a href=\"https://github.com/dcloudio/uni-app/issues/1008#issuecomment-555409355\">官方的办法</a>处理。</li>\n<li>分开处理<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// #ifdef BOOKING</span><br><span class=\"line\">dosomething();</span><br><span class=\"line\">// #endif</span><br><span class=\"line\">// #ifdef QLY</span><br><span class=\"line\">dosomething();</span><br><span class=\"line\">// #endif</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>如果是ifndef呢？既不是，也不是。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// #ifndef BOOKING || QLY</span><br><span class=\"line\">dosomething();</span><br><span class=\"line\">// #endif</span><br></pre></td></tr></table></figure>\n<p>以上写法是不对的。可以通过嵌套解决：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// #ifndef BOOKING</span><br><span class=\"line\">// #ifndef QLY</span><br><span class=\"line\">dosomething();</span><br><span class=\"line\">// #endif</span><br><span class=\"line\">// #endif</span><br></pre></td></tr></table></figure>"},{"title":"uni-app的环境变量","date":"2021-07-31T16:00:00.000Z","_content":"\n> uni-app有较多环境变量，有些变量是没有体现在官方文档中的。以下是个人用过的环境变量。\n\n### NODE_ENV\n构建环境。该值可以影响到一些默认配置。如\n\n值为production时：\n- h5模式下，publicPath才能生效。\n- 错误信息不会输出\n- 启用terser代码压缩\n\n值为development时：\n- h5模式下，默认开启sourceMap\n\n### UNI_PLATFORM\n基准平台，即代码编译目标。可选值有：\n- h5\n- mp-weixin\n- app-plus\n- quickapp-native\n- mp-baidu\n- mp-toutiao\n- mp-qq\n它的值决定了编译的核心流程。\n\n### UNI_INPUT_DIR\n入口文件所在目录，默认是src。\n\n不只是入口文件，也代表着和入口文件层级关系固定的资源路径。\n\n因此不管入口目录是什么，该目录下的资源要符合uni-app的规则。\n\n### UNI_OUTPUT_DIR\n\n打包后代码的输出目录。默认为：\n```\n/dist/${process.env.NODE_ENV === 'production' ? 'build' : 'dev'}/${process.env.UNI_PLATFORM}\n```\n\n### UNI_MINIMIZE\n是否开启代码压缩。\n","source":"_posts/uni-app/env.md","raw":"---\ntitle: uni-app的环境变量\ncategories: uni-app\ntags: [环境变量, uni-app]\ndate: 2021-8-1\n---\n\n> uni-app有较多环境变量，有些变量是没有体现在官方文档中的。以下是个人用过的环境变量。\n\n### NODE_ENV\n构建环境。该值可以影响到一些默认配置。如\n\n值为production时：\n- h5模式下，publicPath才能生效。\n- 错误信息不会输出\n- 启用terser代码压缩\n\n值为development时：\n- h5模式下，默认开启sourceMap\n\n### UNI_PLATFORM\n基准平台，即代码编译目标。可选值有：\n- h5\n- mp-weixin\n- app-plus\n- quickapp-native\n- mp-baidu\n- mp-toutiao\n- mp-qq\n它的值决定了编译的核心流程。\n\n### UNI_INPUT_DIR\n入口文件所在目录，默认是src。\n\n不只是入口文件，也代表着和入口文件层级关系固定的资源路径。\n\n因此不管入口目录是什么，该目录下的资源要符合uni-app的规则。\n\n### UNI_OUTPUT_DIR\n\n打包后代码的输出目录。默认为：\n```\n/dist/${process.env.NODE_ENV === 'production' ? 'build' : 'dev'}/${process.env.UNI_PLATFORM}\n```\n\n### UNI_MINIMIZE\n是否开启代码压缩。\n","slug":"uni-app/env","published":1,"updated":"2021-08-07T02:46:52.587Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc700019ecq8h2177uil","content":"<blockquote>\n<p>uni-app有较多环境变量，有些变量是没有体现在官方文档中的。以下是个人用过的环境变量。</p>\n</blockquote>\n<h3 id=\"NODE-ENV\"><a href=\"#NODE-ENV\" class=\"headerlink\" title=\"NODE_ENV\"></a>NODE_ENV</h3><p>构建环境。该值可以影响到一些默认配置。如</p>\n<p>值为production时：</p>\n<ul>\n<li>h5模式下，publicPath才能生效。</li>\n<li>错误信息不会输出</li>\n<li>启用terser代码压缩</li>\n</ul>\n<p>值为development时：</p>\n<ul>\n<li>h5模式下，默认开启sourceMap</li>\n</ul>\n<h3 id=\"UNI-PLATFORM\"><a href=\"#UNI-PLATFORM\" class=\"headerlink\" title=\"UNI_PLATFORM\"></a>UNI_PLATFORM</h3><p>基准平台，即代码编译目标。可选值有：</p>\n<ul>\n<li>h5</li>\n<li>mp-weixin</li>\n<li>app-plus</li>\n<li>quickapp-native</li>\n<li>mp-baidu</li>\n<li>mp-toutiao</li>\n<li>mp-qq<br>它的值决定了编译的核心流程。</li>\n</ul>\n<h3 id=\"UNI-INPUT-DIR\"><a href=\"#UNI-INPUT-DIR\" class=\"headerlink\" title=\"UNI_INPUT_DIR\"></a>UNI_INPUT_DIR</h3><p>入口文件所在目录，默认是src。</p>\n<p>不只是入口文件，也代表着和入口文件层级关系固定的资源路径。</p>\n<p>因此不管入口目录是什么，该目录下的资源要符合uni-app的规则。</p>\n<h3 id=\"UNI-OUTPUT-DIR\"><a href=\"#UNI-OUTPUT-DIR\" class=\"headerlink\" title=\"UNI_OUTPUT_DIR\"></a>UNI_OUTPUT_DIR</h3><p>打包后代码的输出目录。默认为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/dist/$&#123;process.env.NODE_ENV === &#x27;production&#x27; ? &#x27;build&#x27; : &#x27;dev&#x27;&#125;/$&#123;process.env.UNI_PLATFORM&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"UNI-MINIMIZE\"><a href=\"#UNI-MINIMIZE\" class=\"headerlink\" title=\"UNI_MINIMIZE\"></a>UNI_MINIMIZE</h3><p>是否开启代码压缩。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>uni-app有较多环境变量，有些变量是没有体现在官方文档中的。以下是个人用过的环境变量。</p>\n</blockquote>\n<h3 id=\"NODE-ENV\"><a href=\"#NODE-ENV\" class=\"headerlink\" title=\"NODE_ENV\"></a>NODE_ENV</h3><p>构建环境。该值可以影响到一些默认配置。如</p>\n<p>值为production时：</p>\n<ul>\n<li>h5模式下，publicPath才能生效。</li>\n<li>错误信息不会输出</li>\n<li>启用terser代码压缩</li>\n</ul>\n<p>值为development时：</p>\n<ul>\n<li>h5模式下，默认开启sourceMap</li>\n</ul>\n<h3 id=\"UNI-PLATFORM\"><a href=\"#UNI-PLATFORM\" class=\"headerlink\" title=\"UNI_PLATFORM\"></a>UNI_PLATFORM</h3><p>基准平台，即代码编译目标。可选值有：</p>\n<ul>\n<li>h5</li>\n<li>mp-weixin</li>\n<li>app-plus</li>\n<li>quickapp-native</li>\n<li>mp-baidu</li>\n<li>mp-toutiao</li>\n<li>mp-qq<br>它的值决定了编译的核心流程。</li>\n</ul>\n<h3 id=\"UNI-INPUT-DIR\"><a href=\"#UNI-INPUT-DIR\" class=\"headerlink\" title=\"UNI_INPUT_DIR\"></a>UNI_INPUT_DIR</h3><p>入口文件所在目录，默认是src。</p>\n<p>不只是入口文件，也代表着和入口文件层级关系固定的资源路径。</p>\n<p>因此不管入口目录是什么，该目录下的资源要符合uni-app的规则。</p>\n<h3 id=\"UNI-OUTPUT-DIR\"><a href=\"#UNI-OUTPUT-DIR\" class=\"headerlink\" title=\"UNI_OUTPUT_DIR\"></a>UNI_OUTPUT_DIR</h3><p>打包后代码的输出目录。默认为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/dist/$&#123;process.env.NODE_ENV === &#x27;production&#x27; ? &#x27;build&#x27; : &#x27;dev&#x27;&#125;/$&#123;process.env.UNI_PLATFORM&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"UNI-MINIMIZE\"><a href=\"#UNI-MINIMIZE\" class=\"headerlink\" title=\"UNI_MINIMIZE\"></a>UNI_MINIMIZE</h3><p>是否开启代码压缩。</p>\n"},{"title":"前端错误捕获学习与实践","date":"2021-06-03T16:00:00.000Z","_content":"\n小程序和上线后遇到部分页面出现白屏的情况，小程序还好说，有些错误是可以在微信后台浏览的，H5就不一样了，经历了找遍测试机都无法复现的痛苦之后，迎来的便是缠着用户配合调试的无奈。自己动手，解决一部分开发者的痛苦。先把能捕获的错误上报先。\n\n## H5\n### window.onerror = function (event) {}\n\n该回调可以捕获js运行时错误。如果函数返回true，就会阻止默认事件处理函数（如consoe输出）。\n\n### window.addEventListener('error')\n\n```\nwindow.addEventListener('error', function (msg, url, lineNo, columnNo, error) {\n    // 获取出错的脚本路径，行列信息，以及报错信息\n}, true)\n```\n\n该回调可以捕获js语法错误，或者运行时错误，或者脚本加载错误。比window.onerror先触发。无法阻止默认事件处理函数。\n\n如果要和window.onerror一起使用，需要过滤要重叠的部分，该方法可以只负责监听脚本加载错误：\n\n```\nwindow.addEventListener('error', event => (){ \n  // 过滤js error\n  let target = event.target || event.srcElement;\n  let isElementTarget = target instanceof HTMLScriptElement || target instanceof HTMLLinkElement || target instanceof HTMLImageElement;\n  if (!isElementTarget) return false;\n  // 上报资源地址\n  let url = target.src || target.href;\n  console.log(url);\n}, true);\n```\n\n\n### window.addEventListener('unhandledrejection')\n\n```\nwindow.addEventListener('unhandledrejection', function (event) {\n    const error = event.reason\n}, true)\n```\n\n该回调可以捕获promise链中未被catch的错误。可以通过event.preventDefault阻止默认事件处理函数（如：console输出）。\n\n### 跨域资源脚本错误捕获\nscript标签不受浏览器同源策略影响。但是，H5默认跨域js无法获取脚本错误的具体信息。除非script标签增加跨域限制，且资源返回`Access-Control-Allow-Origin`头部信息。\n\n由于我们的项目，生产的静态JS资源可能使用了cdn，这种情况下，脚本报错是无法获取完整信息的。只能得到“script error.”信息。\n\n解决办法：\n1. 为cdn资源的返回头添加`Access-Control-Allow-Origin`头部即可。（目前采用该方法）\n2. script标签添加： crossorigin=\"anonymous\"。该步骤是匿名获取目标脚本。\n\n以上2步都要做。针对webpack的htmlWebpackPlugin，生成的动态script标签默认是没有crossorigin属性，我们可以借用以下插件帮忙完成添加属性的工作：\n- [webpack-subresource-integrity](https://www.npmjs.com/package/webpack-subresource-integrity)\n- [html-webpack-inject-attributes-plugin](https://www.npmjs.com/package/html-webpack-inject-attributes-plugin)\n\n参考资料：\n- https://www.cnblogs.com/vivotech/p/11162672.html\n\n### 现有成熟的可解决方案\n\n- [trackjs](https://trackjs.com/how/)\n- [sentry](https://sentry.io/)\n\n## 小程序\n\n### App.onError或wx.onError\n官方表示，二者的触发时机一致，但是经过实际试验，发现后者在自定义组件的生命周期钩子中并没有触发。\n\n相关社区文章：\nhttps://developers.weixin.qq.com/community/develop/doc/000c8cf5794770272709f38a756000\n\n### 官方后台\n官方后台可查看客户端捕获的代码报错，无需业务端重新上报。\n\n### 成熟方案\n\n#### sentry\n\nsentry提供小程序平台方案：https://github.com/lizhiyao/sentry-miniapp\n\n\n## 参考资料\n- [前端异常埋点系统初探](https://mp.weixin.qq.com/s/nvI_6e_DC0p1ukY9oXStWg)","source":"_posts/uni-app/error-catch.md","raw":"---\ntitle: 前端错误捕获学习与实践\ncategories: uni-app\ntags: [错误捕获, uni-app]\ndate: 2021-6-4\n---\n\n小程序和上线后遇到部分页面出现白屏的情况，小程序还好说，有些错误是可以在微信后台浏览的，H5就不一样了，经历了找遍测试机都无法复现的痛苦之后，迎来的便是缠着用户配合调试的无奈。自己动手，解决一部分开发者的痛苦。先把能捕获的错误上报先。\n\n## H5\n### window.onerror = function (event) {}\n\n该回调可以捕获js运行时错误。如果函数返回true，就会阻止默认事件处理函数（如consoe输出）。\n\n### window.addEventListener('error')\n\n```\nwindow.addEventListener('error', function (msg, url, lineNo, columnNo, error) {\n    // 获取出错的脚本路径，行列信息，以及报错信息\n}, true)\n```\n\n该回调可以捕获js语法错误，或者运行时错误，或者脚本加载错误。比window.onerror先触发。无法阻止默认事件处理函数。\n\n如果要和window.onerror一起使用，需要过滤要重叠的部分，该方法可以只负责监听脚本加载错误：\n\n```\nwindow.addEventListener('error', event => (){ \n  // 过滤js error\n  let target = event.target || event.srcElement;\n  let isElementTarget = target instanceof HTMLScriptElement || target instanceof HTMLLinkElement || target instanceof HTMLImageElement;\n  if (!isElementTarget) return false;\n  // 上报资源地址\n  let url = target.src || target.href;\n  console.log(url);\n}, true);\n```\n\n\n### window.addEventListener('unhandledrejection')\n\n```\nwindow.addEventListener('unhandledrejection', function (event) {\n    const error = event.reason\n}, true)\n```\n\n该回调可以捕获promise链中未被catch的错误。可以通过event.preventDefault阻止默认事件处理函数（如：console输出）。\n\n### 跨域资源脚本错误捕获\nscript标签不受浏览器同源策略影响。但是，H5默认跨域js无法获取脚本错误的具体信息。除非script标签增加跨域限制，且资源返回`Access-Control-Allow-Origin`头部信息。\n\n由于我们的项目，生产的静态JS资源可能使用了cdn，这种情况下，脚本报错是无法获取完整信息的。只能得到“script error.”信息。\n\n解决办法：\n1. 为cdn资源的返回头添加`Access-Control-Allow-Origin`头部即可。（目前采用该方法）\n2. script标签添加： crossorigin=\"anonymous\"。该步骤是匿名获取目标脚本。\n\n以上2步都要做。针对webpack的htmlWebpackPlugin，生成的动态script标签默认是没有crossorigin属性，我们可以借用以下插件帮忙完成添加属性的工作：\n- [webpack-subresource-integrity](https://www.npmjs.com/package/webpack-subresource-integrity)\n- [html-webpack-inject-attributes-plugin](https://www.npmjs.com/package/html-webpack-inject-attributes-plugin)\n\n参考资料：\n- https://www.cnblogs.com/vivotech/p/11162672.html\n\n### 现有成熟的可解决方案\n\n- [trackjs](https://trackjs.com/how/)\n- [sentry](https://sentry.io/)\n\n## 小程序\n\n### App.onError或wx.onError\n官方表示，二者的触发时机一致，但是经过实际试验，发现后者在自定义组件的生命周期钩子中并没有触发。\n\n相关社区文章：\nhttps://developers.weixin.qq.com/community/develop/doc/000c8cf5794770272709f38a756000\n\n### 官方后台\n官方后台可查看客户端捕获的代码报错，无需业务端重新上报。\n\n### 成熟方案\n\n#### sentry\n\nsentry提供小程序平台方案：https://github.com/lizhiyao/sentry-miniapp\n\n\n## 参考资料\n- [前端异常埋点系统初探](https://mp.weixin.qq.com/s/nvI_6e_DC0p1ukY9oXStWg)","slug":"uni-app/error-catch","published":1,"updated":"2021-08-07T04:11:14.040Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc71001aecq88e4rcsb8","content":"<p>小程序和上线后遇到部分页面出现白屏的情况，小程序还好说，有些错误是可以在微信后台浏览的，H5就不一样了，经历了找遍测试机都无法复现的痛苦之后，迎来的便是缠着用户配合调试的无奈。自己动手，解决一部分开发者的痛苦。先把能捕获的错误上报先。</p>\n<h2 id=\"H5\"><a href=\"#H5\" class=\"headerlink\" title=\"H5\"></a>H5</h2><h3 id=\"window-onerror-function-event\"><a href=\"#window-onerror-function-event\" class=\"headerlink\" title=\"window.onerror = function (event) {}\"></a>window.onerror = function (event) {}</h3><p>该回调可以捕获js运行时错误。如果函数返回true，就会阻止默认事件处理函数（如consoe输出）。</p>\n<h3 id=\"window-addEventListener-‘error’\"><a href=\"#window-addEventListener-‘error’\" class=\"headerlink\" title=\"window.addEventListener(‘error’)\"></a>window.addEventListener(‘error’)</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.addEventListener(&#x27;error&#x27;, function (msg, url, lineNo, columnNo, error) &#123;</span><br><span class=\"line\">    // 获取出错的脚本路径，行列信息，以及报错信息</span><br><span class=\"line\">&#125;, true)</span><br></pre></td></tr></table></figure>\n\n<p>该回调可以捕获js语法错误，或者运行时错误，或者脚本加载错误。比window.onerror先触发。无法阻止默认事件处理函数。</p>\n<p>如果要和window.onerror一起使用，需要过滤要重叠的部分，该方法可以只负责监听脚本加载错误：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.addEventListener(&#x27;error&#x27;, event =&gt; ()&#123; </span><br><span class=\"line\">  // 过滤js error</span><br><span class=\"line\">  let target = event.target || event.srcElement;</span><br><span class=\"line\">  let isElementTarget = target instanceof HTMLScriptElement || target instanceof HTMLLinkElement || target instanceof HTMLImageElement;</span><br><span class=\"line\">  if (!isElementTarget) return false;</span><br><span class=\"line\">  // 上报资源地址</span><br><span class=\"line\">  let url = target.src || target.href;</span><br><span class=\"line\">  console.log(url);</span><br><span class=\"line\">&#125;, true);</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"window-addEventListener-‘unhandledrejection’\"><a href=\"#window-addEventListener-‘unhandledrejection’\" class=\"headerlink\" title=\"window.addEventListener(‘unhandledrejection’)\"></a>window.addEventListener(‘unhandledrejection’)</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.addEventListener(&#x27;unhandledrejection&#x27;, function (event) &#123;</span><br><span class=\"line\">    const error = event.reason</span><br><span class=\"line\">&#125;, true)</span><br></pre></td></tr></table></figure>\n\n<p>该回调可以捕获promise链中未被catch的错误。可以通过event.preventDefault阻止默认事件处理函数（如：console输出）。</p>\n<h3 id=\"跨域资源脚本错误捕获\"><a href=\"#跨域资源脚本错误捕获\" class=\"headerlink\" title=\"跨域资源脚本错误捕获\"></a>跨域资源脚本错误捕获</h3><p>script标签不受浏览器同源策略影响。但是，H5默认跨域js无法获取脚本错误的具体信息。除非script标签增加跨域限制，且资源返回<code>Access-Control-Allow-Origin</code>头部信息。</p>\n<p>由于我们的项目，生产的静态JS资源可能使用了cdn，这种情况下，脚本报错是无法获取完整信息的。只能得到“script error.”信息。</p>\n<p>解决办法：</p>\n<ol>\n<li>为cdn资源的返回头添加<code>Access-Control-Allow-Origin</code>头部即可。（目前采用该方法）</li>\n<li>script标签添加： crossorigin=”anonymous”。该步骤是匿名获取目标脚本。</li>\n</ol>\n<p>以上2步都要做。针对webpack的htmlWebpackPlugin，生成的动态script标签默认是没有crossorigin属性，我们可以借用以下插件帮忙完成添加属性的工作：</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/webpack-subresource-integrity\">webpack-subresource-integrity</a></li>\n<li><a href=\"https://www.npmjs.com/package/html-webpack-inject-attributes-plugin\">html-webpack-inject-attributes-plugin</a></li>\n</ul>\n<p>参考资料：</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/vivotech/p/11162672.html\">https://www.cnblogs.com/vivotech/p/11162672.html</a></li>\n</ul>\n<h3 id=\"现有成熟的可解决方案\"><a href=\"#现有成熟的可解决方案\" class=\"headerlink\" title=\"现有成熟的可解决方案\"></a>现有成熟的可解决方案</h3><ul>\n<li><a href=\"https://trackjs.com/how/\">trackjs</a></li>\n<li><a href=\"https://sentry.io/\">sentry</a></li>\n</ul>\n<h2 id=\"小程序\"><a href=\"#小程序\" class=\"headerlink\" title=\"小程序\"></a>小程序</h2><h3 id=\"App-onError或wx-onError\"><a href=\"#App-onError或wx-onError\" class=\"headerlink\" title=\"App.onError或wx.onError\"></a>App.onError或wx.onError</h3><p>官方表示，二者的触发时机一致，但是经过实际试验，发现后者在自定义组件的生命周期钩子中并没有触发。</p>\n<p>相关社区文章：<br><a href=\"https://developers.weixin.qq.com/community/develop/doc/000c8cf5794770272709f38a756000\">https://developers.weixin.qq.com/community/develop/doc/000c8cf5794770272709f38a756000</a></p>\n<h3 id=\"官方后台\"><a href=\"#官方后台\" class=\"headerlink\" title=\"官方后台\"></a>官方后台</h3><p>官方后台可查看客户端捕获的代码报错，无需业务端重新上报。</p>\n<h3 id=\"成熟方案\"><a href=\"#成熟方案\" class=\"headerlink\" title=\"成熟方案\"></a>成熟方案</h3><h4 id=\"sentry\"><a href=\"#sentry\" class=\"headerlink\" title=\"sentry\"></a>sentry</h4><p>sentry提供小程序平台方案：<a href=\"https://github.com/lizhiyao/sentry-miniapp\">https://github.com/lizhiyao/sentry-miniapp</a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://mp.weixin.qq.com/s/nvI_6e_DC0p1ukY9oXStWg\">前端异常埋点系统初探</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>小程序和上线后遇到部分页面出现白屏的情况，小程序还好说，有些错误是可以在微信后台浏览的，H5就不一样了，经历了找遍测试机都无法复现的痛苦之后，迎来的便是缠着用户配合调试的无奈。自己动手，解决一部分开发者的痛苦。先把能捕获的错误上报先。</p>\n<h2 id=\"H5\"><a href=\"#H5\" class=\"headerlink\" title=\"H5\"></a>H5</h2><h3 id=\"window-onerror-function-event\"><a href=\"#window-onerror-function-event\" class=\"headerlink\" title=\"window.onerror = function (event) {}\"></a>window.onerror = function (event) {}</h3><p>该回调可以捕获js运行时错误。如果函数返回true，就会阻止默认事件处理函数（如consoe输出）。</p>\n<h3 id=\"window-addEventListener-‘error’\"><a href=\"#window-addEventListener-‘error’\" class=\"headerlink\" title=\"window.addEventListener(‘error’)\"></a>window.addEventListener(‘error’)</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.addEventListener(&#x27;error&#x27;, function (msg, url, lineNo, columnNo, error) &#123;</span><br><span class=\"line\">    // 获取出错的脚本路径，行列信息，以及报错信息</span><br><span class=\"line\">&#125;, true)</span><br></pre></td></tr></table></figure>\n\n<p>该回调可以捕获js语法错误，或者运行时错误，或者脚本加载错误。比window.onerror先触发。无法阻止默认事件处理函数。</p>\n<p>如果要和window.onerror一起使用，需要过滤要重叠的部分，该方法可以只负责监听脚本加载错误：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.addEventListener(&#x27;error&#x27;, event =&gt; ()&#123; </span><br><span class=\"line\">  // 过滤js error</span><br><span class=\"line\">  let target = event.target || event.srcElement;</span><br><span class=\"line\">  let isElementTarget = target instanceof HTMLScriptElement || target instanceof HTMLLinkElement || target instanceof HTMLImageElement;</span><br><span class=\"line\">  if (!isElementTarget) return false;</span><br><span class=\"line\">  // 上报资源地址</span><br><span class=\"line\">  let url = target.src || target.href;</span><br><span class=\"line\">  console.log(url);</span><br><span class=\"line\">&#125;, true);</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"window-addEventListener-‘unhandledrejection’\"><a href=\"#window-addEventListener-‘unhandledrejection’\" class=\"headerlink\" title=\"window.addEventListener(‘unhandledrejection’)\"></a>window.addEventListener(‘unhandledrejection’)</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.addEventListener(&#x27;unhandledrejection&#x27;, function (event) &#123;</span><br><span class=\"line\">    const error = event.reason</span><br><span class=\"line\">&#125;, true)</span><br></pre></td></tr></table></figure>\n\n<p>该回调可以捕获promise链中未被catch的错误。可以通过event.preventDefault阻止默认事件处理函数（如：console输出）。</p>\n<h3 id=\"跨域资源脚本错误捕获\"><a href=\"#跨域资源脚本错误捕获\" class=\"headerlink\" title=\"跨域资源脚本错误捕获\"></a>跨域资源脚本错误捕获</h3><p>script标签不受浏览器同源策略影响。但是，H5默认跨域js无法获取脚本错误的具体信息。除非script标签增加跨域限制，且资源返回<code>Access-Control-Allow-Origin</code>头部信息。</p>\n<p>由于我们的项目，生产的静态JS资源可能使用了cdn，这种情况下，脚本报错是无法获取完整信息的。只能得到“script error.”信息。</p>\n<p>解决办法：</p>\n<ol>\n<li>为cdn资源的返回头添加<code>Access-Control-Allow-Origin</code>头部即可。（目前采用该方法）</li>\n<li>script标签添加： crossorigin=”anonymous”。该步骤是匿名获取目标脚本。</li>\n</ol>\n<p>以上2步都要做。针对webpack的htmlWebpackPlugin，生成的动态script标签默认是没有crossorigin属性，我们可以借用以下插件帮忙完成添加属性的工作：</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/webpack-subresource-integrity\">webpack-subresource-integrity</a></li>\n<li><a href=\"https://www.npmjs.com/package/html-webpack-inject-attributes-plugin\">html-webpack-inject-attributes-plugin</a></li>\n</ul>\n<p>参考资料：</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/vivotech/p/11162672.html\">https://www.cnblogs.com/vivotech/p/11162672.html</a></li>\n</ul>\n<h3 id=\"现有成熟的可解决方案\"><a href=\"#现有成熟的可解决方案\" class=\"headerlink\" title=\"现有成熟的可解决方案\"></a>现有成熟的可解决方案</h3><ul>\n<li><a href=\"https://trackjs.com/how/\">trackjs</a></li>\n<li><a href=\"https://sentry.io/\">sentry</a></li>\n</ul>\n<h2 id=\"小程序\"><a href=\"#小程序\" class=\"headerlink\" title=\"小程序\"></a>小程序</h2><h3 id=\"App-onError或wx-onError\"><a href=\"#App-onError或wx-onError\" class=\"headerlink\" title=\"App.onError或wx.onError\"></a>App.onError或wx.onError</h3><p>官方表示，二者的触发时机一致，但是经过实际试验，发现后者在自定义组件的生命周期钩子中并没有触发。</p>\n<p>相关社区文章：<br><a href=\"https://developers.weixin.qq.com/community/develop/doc/000c8cf5794770272709f38a756000\">https://developers.weixin.qq.com/community/develop/doc/000c8cf5794770272709f38a756000</a></p>\n<h3 id=\"官方后台\"><a href=\"#官方后台\" class=\"headerlink\" title=\"官方后台\"></a>官方后台</h3><p>官方后台可查看客户端捕获的代码报错，无需业务端重新上报。</p>\n<h3 id=\"成熟方案\"><a href=\"#成熟方案\" class=\"headerlink\" title=\"成熟方案\"></a>成熟方案</h3><h4 id=\"sentry\"><a href=\"#sentry\" class=\"headerlink\" title=\"sentry\"></a>sentry</h4><p>sentry提供小程序平台方案：<a href=\"https://github.com/lizhiyao/sentry-miniapp\">https://github.com/lizhiyao/sentry-miniapp</a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://mp.weixin.qq.com/s/nvI_6e_DC0p1ukY9oXStWg\">前端异常埋点系统初探</a></li>\n</ul>\n"},{"title":"uni-app 打包为h5时rpx编译错误","date":"2021-06-28T16:00:00.000Z","_content":"  \n\n某天，产品给我看了一个线上h5页面的布局问题：有个组件的padding属性不见了。我以为这是一贯的粗心导致简单的样式问题，当我打开生产页面样式审查的时候，我傻眼了：\n```\n.comp-card .content--wrap[data-v-8ec74a42] { \n  padding: %?22?% %?24?%; \n}\n```\n\n### 暂时的解决方案\n这个问题之前同事也遇到过，当时经过简单的实验，发现是uni-app较新版本才会出现。我们目前使用的uni-app版本都是`latest`，即使用较新的稳定版本。\n\n既然没有定位到直接原因，干脆先固定到较低的版本号暂时解决问题。\n\n### 分析问题特点\n此时，`编译结果错误`，`uni-app版本号错误`这俩关键词已经在我脑海里扎根。\n\n为了进一步研究问题特点和原因，我尝试在开发环境复现这个问题，结果发现只有在NODE_ENV的值为production时才能出现。\n\n继续审查了其它元素，只发现了这一处样式异常。单独的异常很难分析出问题的原因在哪里。\n\n分析到这里没有进展，直接去uni-app的Github和社区看看有没有相关issue，还真找到了几个：\n1. https://github.com/dcloudio/uni-app/issues/1132\n2. https://github.com/dcloudio/uni-app/issues/1069\n\n这几个issue的最终解决办法就是使用@vue/cli 3.x的版本（我用的就是3.x啊喂！更何况uni-app现在已经支持@vue/cli 4.x了）\n\n没有找到复现条件和demo，直接拿着这2个现象去提[issue](https://github.com/dcloudio/uni-app/issues/2600 \"issue\")。果然等来的是类似“按照你说的条件，没发现这个问题啊”这样的回复。\n\n### 刨根究底\n自己动手，丰衣足食。我们知道，webpack对css的处理方式通常是使用style-loader将css插入header标签中，uni-app也是如此：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-4-25/1619361955023-image.png)\n上图中6215就是一个css模块：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-4-25/1619362025628-image.png)\n这个css模块其实就是一个字符串，截取这段字符串格式化后的一部分：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-4-25/1619361866485-image.png)\n可以得出结论：\n> uni-app编译后的css中，rpx单位并没有直接转化成px，因为需要根据具体的设备类型做移动端适配。这个适配工作就在style标签插入html之前。\n\n接下来，找到rpx转px的工具函数，在@dcloudio/vue-cli-plugin-uni/packages/h5-vue-style-loader/lib/addStylesClient.js文件中，名为`processCss`的方法：\n\n```\nvar UPX_RE = /%\\?([+-]?\\d+(\\.\\d+)?)\\?%/g\nvar BODY_RE = /\\.\\?%PAGE\\?%/g\nvar BODY_SCOPED_RE = /\\?%PAGE\\?%\\[data-v-[a-z0-9]{8}\\]/g\nvar PAGE_SCOPED_RE = /uni-page-body\\[data-v-[a-z0-9]{8}\\]/g\nvar VAR_STATUS_BAR_HEIGHT = /var\\(--status-bar-height\\)/gi\nvar VAR_WINDOW_TOP = /var\\(--window-top\\)/gi\nvar VAR_WINDOW_BOTTOM = /var\\(--window-bottom\\)/gi\nvar VAR_WINDOW_LEFT = /var\\(--window-left\\)/gi\nvar VAR_WINDOW_RIGHT = /var\\(--window-right\\)/gi\n\nfunction processCss(css) {\n\tvar page = getPage()\n\tif (typeof uni !== 'undefined' && !uni.canIUse('css.var')) { //不支持 css 变量\n\t\tvar offset = getWindowOffset()\n\t\tcss = css.replace(VAR_STATUS_BAR_HEIGHT, '0px')\n\t\t\t.replace(VAR_WINDOW_TOP, offset.top + 'px')\n\t\t\t.replace(VAR_WINDOW_BOTTOM, offset.bottom + 'px')\n            .replace(VAR_WINDOW_LEFT, '0px')\n            .replace(VAR_WINDOW_RIGHT, '0px')\n\t}\n\treturn css\n\t\t.replace(BODY_SCOPED_RE, page)\n\t\t.replace(BODY_RE, '')\n\t\t.replace(PAGE_SCOPED_RE, 'body.' + page + ' uni-page-body')\n\t\t.replace(/\\{[\\s\\S]+?\\}|@media.+\\{/g, function (css) {\n      if(typeof uni === 'undefined'){\n        return css\n      }\n\t\t\treturn css.replace(UPX_RE, function (a, b) {\n\t\t\t\treturn uni.upx2px(b) + 'px'\n\t\t\t})\n\t\t})\n}\n```\n正则变量`UPX_RE`是生成px的关键点，replace链式调用的结尾需要对满足正则`/\\{[\\s\\S]+?\\}|@media.+\\{/g`的部分做px单位转换。现在可以确认的是，这个正则没有完全覆盖我们的css模块中所有的样式。\n### 解决啦\n拿以下样式做一个验证：\n\n```\n.class-a[data-v-8ec74a42] {\n  width: %?678?%;\n}\n@media only screen and (-webkit-min-device-pixel-ratio: 2) {\n  .class-a[data-v-8ec74a42] {\n    -webkit-transform: scaleY(0.5);\n    -ms-transform: scaleY(0.5);\n    transform: scaleY(0.5);\n  }\n}\n.class-b[data-v-8ec74a42] {\n  font-size: %?28?%;\n  line-height: %?88?%;\n}\n```\n发现`@media.+\\{`部分会匹配从`@media`到`.class-b[data-v-8ec74a42] {`，剩下的部分因为无法匹配`\\{[\\s\\S]+?\\}`就被忽略了。\n\n根据该文件的修改记录，看到了上一次修改的commit message：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-4-25/1619363407452-image.png)\n哦，人家大概是想处理这样的情况下吧：\n```\n@media screen and (max-width: 300rpx)\n```\n修正后的正则：\n```\n/\\{[\\s\\S]+?\\}|@media[^{]+/g\n```\n既然如此，那就赶紧提个[pull request](https://github.com/dcloudio/uni-app/pull/2614 \"pull request\")叭！\n\n\n### 相关issue:\nhttps://github.com/dcloudio/uni-app/issues/1132\nhttps://github.com/dcloudio/uni-app/issues/1606\nhttps://github.com/dcloudio/uni-app/issues/1069\nhttps://github.com/dcloudio/uni-app/issues/2600\n\n\n\n","source":"_posts/uni-app/fix-bug.md","raw":"---\ntitle: uni-app 打包为h5时rpx编译错误\ncategories: uni-app\ntags: [rpx, uni-app]\ndate: 2021-6-29\n---  \n\n某天，产品给我看了一个线上h5页面的布局问题：有个组件的padding属性不见了。我以为这是一贯的粗心导致简单的样式问题，当我打开生产页面样式审查的时候，我傻眼了：\n```\n.comp-card .content--wrap[data-v-8ec74a42] { \n  padding: %?22?% %?24?%; \n}\n```\n\n### 暂时的解决方案\n这个问题之前同事也遇到过，当时经过简单的实验，发现是uni-app较新版本才会出现。我们目前使用的uni-app版本都是`latest`，即使用较新的稳定版本。\n\n既然没有定位到直接原因，干脆先固定到较低的版本号暂时解决问题。\n\n### 分析问题特点\n此时，`编译结果错误`，`uni-app版本号错误`这俩关键词已经在我脑海里扎根。\n\n为了进一步研究问题特点和原因，我尝试在开发环境复现这个问题，结果发现只有在NODE_ENV的值为production时才能出现。\n\n继续审查了其它元素，只发现了这一处样式异常。单独的异常很难分析出问题的原因在哪里。\n\n分析到这里没有进展，直接去uni-app的Github和社区看看有没有相关issue，还真找到了几个：\n1. https://github.com/dcloudio/uni-app/issues/1132\n2. https://github.com/dcloudio/uni-app/issues/1069\n\n这几个issue的最终解决办法就是使用@vue/cli 3.x的版本（我用的就是3.x啊喂！更何况uni-app现在已经支持@vue/cli 4.x了）\n\n没有找到复现条件和demo，直接拿着这2个现象去提[issue](https://github.com/dcloudio/uni-app/issues/2600 \"issue\")。果然等来的是类似“按照你说的条件，没发现这个问题啊”这样的回复。\n\n### 刨根究底\n自己动手，丰衣足食。我们知道，webpack对css的处理方式通常是使用style-loader将css插入header标签中，uni-app也是如此：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-4-25/1619361955023-image.png)\n上图中6215就是一个css模块：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-4-25/1619362025628-image.png)\n这个css模块其实就是一个字符串，截取这段字符串格式化后的一部分：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-4-25/1619361866485-image.png)\n可以得出结论：\n> uni-app编译后的css中，rpx单位并没有直接转化成px，因为需要根据具体的设备类型做移动端适配。这个适配工作就在style标签插入html之前。\n\n接下来，找到rpx转px的工具函数，在@dcloudio/vue-cli-plugin-uni/packages/h5-vue-style-loader/lib/addStylesClient.js文件中，名为`processCss`的方法：\n\n```\nvar UPX_RE = /%\\?([+-]?\\d+(\\.\\d+)?)\\?%/g\nvar BODY_RE = /\\.\\?%PAGE\\?%/g\nvar BODY_SCOPED_RE = /\\?%PAGE\\?%\\[data-v-[a-z0-9]{8}\\]/g\nvar PAGE_SCOPED_RE = /uni-page-body\\[data-v-[a-z0-9]{8}\\]/g\nvar VAR_STATUS_BAR_HEIGHT = /var\\(--status-bar-height\\)/gi\nvar VAR_WINDOW_TOP = /var\\(--window-top\\)/gi\nvar VAR_WINDOW_BOTTOM = /var\\(--window-bottom\\)/gi\nvar VAR_WINDOW_LEFT = /var\\(--window-left\\)/gi\nvar VAR_WINDOW_RIGHT = /var\\(--window-right\\)/gi\n\nfunction processCss(css) {\n\tvar page = getPage()\n\tif (typeof uni !== 'undefined' && !uni.canIUse('css.var')) { //不支持 css 变量\n\t\tvar offset = getWindowOffset()\n\t\tcss = css.replace(VAR_STATUS_BAR_HEIGHT, '0px')\n\t\t\t.replace(VAR_WINDOW_TOP, offset.top + 'px')\n\t\t\t.replace(VAR_WINDOW_BOTTOM, offset.bottom + 'px')\n            .replace(VAR_WINDOW_LEFT, '0px')\n            .replace(VAR_WINDOW_RIGHT, '0px')\n\t}\n\treturn css\n\t\t.replace(BODY_SCOPED_RE, page)\n\t\t.replace(BODY_RE, '')\n\t\t.replace(PAGE_SCOPED_RE, 'body.' + page + ' uni-page-body')\n\t\t.replace(/\\{[\\s\\S]+?\\}|@media.+\\{/g, function (css) {\n      if(typeof uni === 'undefined'){\n        return css\n      }\n\t\t\treturn css.replace(UPX_RE, function (a, b) {\n\t\t\t\treturn uni.upx2px(b) + 'px'\n\t\t\t})\n\t\t})\n}\n```\n正则变量`UPX_RE`是生成px的关键点，replace链式调用的结尾需要对满足正则`/\\{[\\s\\S]+?\\}|@media.+\\{/g`的部分做px单位转换。现在可以确认的是，这个正则没有完全覆盖我们的css模块中所有的样式。\n### 解决啦\n拿以下样式做一个验证：\n\n```\n.class-a[data-v-8ec74a42] {\n  width: %?678?%;\n}\n@media only screen and (-webkit-min-device-pixel-ratio: 2) {\n  .class-a[data-v-8ec74a42] {\n    -webkit-transform: scaleY(0.5);\n    -ms-transform: scaleY(0.5);\n    transform: scaleY(0.5);\n  }\n}\n.class-b[data-v-8ec74a42] {\n  font-size: %?28?%;\n  line-height: %?88?%;\n}\n```\n发现`@media.+\\{`部分会匹配从`@media`到`.class-b[data-v-8ec74a42] {`，剩下的部分因为无法匹配`\\{[\\s\\S]+?\\}`就被忽略了。\n\n根据该文件的修改记录，看到了上一次修改的commit message：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-4-25/1619363407452-image.png)\n哦，人家大概是想处理这样的情况下吧：\n```\n@media screen and (max-width: 300rpx)\n```\n修正后的正则：\n```\n/\\{[\\s\\S]+?\\}|@media[^{]+/g\n```\n既然如此，那就赶紧提个[pull request](https://github.com/dcloudio/uni-app/pull/2614 \"pull request\")叭！\n\n\n### 相关issue:\nhttps://github.com/dcloudio/uni-app/issues/1132\nhttps://github.com/dcloudio/uni-app/issues/1606\nhttps://github.com/dcloudio/uni-app/issues/1069\nhttps://github.com/dcloudio/uni-app/issues/2600\n\n\n\n","slug":"uni-app/fix-bug","published":1,"updated":"2021-08-07T03:30:55.555Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc71001becq8ao4fh23g","content":"<p>某天，产品给我看了一个线上h5页面的布局问题：有个组件的padding属性不见了。我以为这是一贯的粗心导致简单的样式问题，当我打开生产页面样式审查的时候，我傻眼了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.comp-card .content--wrap[data-v-8ec74a42] &#123; </span><br><span class=\"line\">  padding: %?22?% %?24?%; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"暂时的解决方案\"><a href=\"#暂时的解决方案\" class=\"headerlink\" title=\"暂时的解决方案\"></a>暂时的解决方案</h3><p>这个问题之前同事也遇到过，当时经过简单的实验，发现是uni-app较新版本才会出现。我们目前使用的uni-app版本都是<code>latest</code>，即使用较新的稳定版本。</p>\n<p>既然没有定位到直接原因，干脆先固定到较低的版本号暂时解决问题。</p>\n<h3 id=\"分析问题特点\"><a href=\"#分析问题特点\" class=\"headerlink\" title=\"分析问题特点\"></a>分析问题特点</h3><p>此时，<code>编译结果错误</code>，<code>uni-app版本号错误</code>这俩关键词已经在我脑海里扎根。</p>\n<p>为了进一步研究问题特点和原因，我尝试在开发环境复现这个问题，结果发现只有在NODE_ENV的值为production时才能出现。</p>\n<p>继续审查了其它元素，只发现了这一处样式异常。单独的异常很难分析出问题的原因在哪里。</p>\n<p>分析到这里没有进展，直接去uni-app的Github和社区看看有没有相关issue，还真找到了几个：</p>\n<ol>\n<li><a href=\"https://github.com/dcloudio/uni-app/issues/1132\">https://github.com/dcloudio/uni-app/issues/1132</a></li>\n<li><a href=\"https://github.com/dcloudio/uni-app/issues/1069\">https://github.com/dcloudio/uni-app/issues/1069</a></li>\n</ol>\n<p>这几个issue的最终解决办法就是使用@vue/cli 3.x的版本（我用的就是3.x啊喂！更何况uni-app现在已经支持@vue/cli 4.x了）</p>\n<p>没有找到复现条件和demo，直接拿着这2个现象去提<a href=\"https://github.com/dcloudio/uni-app/issues/2600\" title=\"issue\">issue</a>。果然等来的是类似“按照你说的条件，没发现这个问题啊”这样的回复。</p>\n<h3 id=\"刨根究底\"><a href=\"#刨根究底\" class=\"headerlink\" title=\"刨根究底\"></a>刨根究底</h3><p>自己动手，丰衣足食。我们知道，webpack对css的处理方式通常是使用style-loader将css插入header标签中，uni-app也是如此：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-4-25/1619361955023-image.png\"><br>上图中6215就是一个css模块：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-4-25/1619362025628-image.png\"><br>这个css模块其实就是一个字符串，截取这段字符串格式化后的一部分：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-4-25/1619361866485-image.png\"><br>可以得出结论：</p>\n<blockquote>\n<p>uni-app编译后的css中，rpx单位并没有直接转化成px，因为需要根据具体的设备类型做移动端适配。这个适配工作就在style标签插入html之前。</p>\n</blockquote>\n<p>接下来，找到rpx转px的工具函数，在@dcloudio/vue-cli-plugin-uni/packages/h5-vue-style-loader/lib/addStylesClient.js文件中，名为<code>processCss</code>的方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var UPX_RE = /%\\?([+-]?\\d+(\\.\\d+)?)\\?%/g</span><br><span class=\"line\">var BODY_RE = /\\.\\?%PAGE\\?%/g</span><br><span class=\"line\">var BODY_SCOPED_RE = /\\?%PAGE\\?%\\[data-v-[a-z0-9]&#123;8&#125;\\]/g</span><br><span class=\"line\">var PAGE_SCOPED_RE = /uni-page-body\\[data-v-[a-z0-9]&#123;8&#125;\\]/g</span><br><span class=\"line\">var VAR_STATUS_BAR_HEIGHT = /var\\(--status-bar-height\\)/gi</span><br><span class=\"line\">var VAR_WINDOW_TOP = /var\\(--window-top\\)/gi</span><br><span class=\"line\">var VAR_WINDOW_BOTTOM = /var\\(--window-bottom\\)/gi</span><br><span class=\"line\">var VAR_WINDOW_LEFT = /var\\(--window-left\\)/gi</span><br><span class=\"line\">var VAR_WINDOW_RIGHT = /var\\(--window-right\\)/gi</span><br><span class=\"line\"></span><br><span class=\"line\">function processCss(css) &#123;</span><br><span class=\"line\">\tvar page = getPage()</span><br><span class=\"line\">\tif (typeof uni !== &#x27;undefined&#x27; &amp;&amp; !uni.canIUse(&#x27;css.var&#x27;)) &#123; //不支持 css 变量</span><br><span class=\"line\">\t\tvar offset = getWindowOffset()</span><br><span class=\"line\">\t\tcss = css.replace(VAR_STATUS_BAR_HEIGHT, &#x27;0px&#x27;)</span><br><span class=\"line\">\t\t\t.replace(VAR_WINDOW_TOP, offset.top + &#x27;px&#x27;)</span><br><span class=\"line\">\t\t\t.replace(VAR_WINDOW_BOTTOM, offset.bottom + &#x27;px&#x27;)</span><br><span class=\"line\">            .replace(VAR_WINDOW_LEFT, &#x27;0px&#x27;)</span><br><span class=\"line\">            .replace(VAR_WINDOW_RIGHT, &#x27;0px&#x27;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn css</span><br><span class=\"line\">\t\t.replace(BODY_SCOPED_RE, page)</span><br><span class=\"line\">\t\t.replace(BODY_RE, &#x27;&#x27;)</span><br><span class=\"line\">\t\t.replace(PAGE_SCOPED_RE, &#x27;body.&#x27; + page + &#x27; uni-page-body&#x27;)</span><br><span class=\"line\">\t\t.replace(/\\&#123;[\\s\\S]+?\\&#125;|@media.+\\&#123;/g, function (css) &#123;</span><br><span class=\"line\">      if(typeof uni === &#x27;undefined&#x27;)&#123;</span><br><span class=\"line\">        return css</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">\t\t\treturn css.replace(UPX_RE, function (a, b) &#123;</span><br><span class=\"line\">\t\t\t\treturn uni.upx2px(b) + &#x27;px&#x27;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>正则变量<code>UPX_RE</code>是生成px的关键点，replace链式调用的结尾需要对满足正则<code>/\\&#123;[\\s\\S]+?\\&#125;|@media.+\\&#123;/g</code>的部分做px单位转换。现在可以确认的是，这个正则没有完全覆盖我们的css模块中所有的样式。</p>\n<h3 id=\"解决啦\"><a href=\"#解决啦\" class=\"headerlink\" title=\"解决啦\"></a>解决啦</h3><p>拿以下样式做一个验证：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.class-a[data-v-8ec74a42] &#123;</span><br><span class=\"line\">  width: %?678?%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@media only screen and (-webkit-min-device-pixel-ratio: 2) &#123;</span><br><span class=\"line\">  .class-a[data-v-8ec74a42] &#123;</span><br><span class=\"line\">    -webkit-transform: scaleY(0.5);</span><br><span class=\"line\">    -ms-transform: scaleY(0.5);</span><br><span class=\"line\">    transform: scaleY(0.5);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.class-b[data-v-8ec74a42] &#123;</span><br><span class=\"line\">  font-size: %?28?%;</span><br><span class=\"line\">  line-height: %?88?%;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>发现<code>@media.+\\&#123;</code>部分会匹配从<code>@media</code>到<code>.class-b[data-v-8ec74a42] &#123;</code>，剩下的部分因为无法匹配<code>\\&#123;[\\s\\S]+?\\&#125;</code>就被忽略了。</p>\n<p>根据该文件的修改记录，看到了上一次修改的commit message：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-4-25/1619363407452-image.png\"><br>哦，人家大概是想处理这样的情况下吧：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@media screen and (max-width: 300rpx)</span><br></pre></td></tr></table></figure>\n<p>修正后的正则：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/\\&#123;[\\s\\S]+?\\&#125;|@media[^&#123;]+/g</span><br></pre></td></tr></table></figure>\n<p>既然如此，那就赶紧提个<a href=\"https://github.com/dcloudio/uni-app/pull/2614\" title=\"pull request\">pull request</a>叭！</p>\n<h3 id=\"相关issue\"><a href=\"#相关issue\" class=\"headerlink\" title=\"相关issue:\"></a>相关issue:</h3><p><a href=\"https://github.com/dcloudio/uni-app/issues/1132\">https://github.com/dcloudio/uni-app/issues/1132</a><br><a href=\"https://github.com/dcloudio/uni-app/issues/1606\">https://github.com/dcloudio/uni-app/issues/1606</a><br><a href=\"https://github.com/dcloudio/uni-app/issues/1069\">https://github.com/dcloudio/uni-app/issues/1069</a><br><a href=\"https://github.com/dcloudio/uni-app/issues/2600\">https://github.com/dcloudio/uni-app/issues/2600</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>某天，产品给我看了一个线上h5页面的布局问题：有个组件的padding属性不见了。我以为这是一贯的粗心导致简单的样式问题，当我打开生产页面样式审查的时候，我傻眼了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.comp-card .content--wrap[data-v-8ec74a42] &#123; </span><br><span class=\"line\">  padding: %?22?% %?24?%; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"暂时的解决方案\"><a href=\"#暂时的解决方案\" class=\"headerlink\" title=\"暂时的解决方案\"></a>暂时的解决方案</h3><p>这个问题之前同事也遇到过，当时经过简单的实验，发现是uni-app较新版本才会出现。我们目前使用的uni-app版本都是<code>latest</code>，即使用较新的稳定版本。</p>\n<p>既然没有定位到直接原因，干脆先固定到较低的版本号暂时解决问题。</p>\n<h3 id=\"分析问题特点\"><a href=\"#分析问题特点\" class=\"headerlink\" title=\"分析问题特点\"></a>分析问题特点</h3><p>此时，<code>编译结果错误</code>，<code>uni-app版本号错误</code>这俩关键词已经在我脑海里扎根。</p>\n<p>为了进一步研究问题特点和原因，我尝试在开发环境复现这个问题，结果发现只有在NODE_ENV的值为production时才能出现。</p>\n<p>继续审查了其它元素，只发现了这一处样式异常。单独的异常很难分析出问题的原因在哪里。</p>\n<p>分析到这里没有进展，直接去uni-app的Github和社区看看有没有相关issue，还真找到了几个：</p>\n<ol>\n<li><a href=\"https://github.com/dcloudio/uni-app/issues/1132\">https://github.com/dcloudio/uni-app/issues/1132</a></li>\n<li><a href=\"https://github.com/dcloudio/uni-app/issues/1069\">https://github.com/dcloudio/uni-app/issues/1069</a></li>\n</ol>\n<p>这几个issue的最终解决办法就是使用@vue/cli 3.x的版本（我用的就是3.x啊喂！更何况uni-app现在已经支持@vue/cli 4.x了）</p>\n<p>没有找到复现条件和demo，直接拿着这2个现象去提<a href=\"https://github.com/dcloudio/uni-app/issues/2600\" title=\"issue\">issue</a>。果然等来的是类似“按照你说的条件，没发现这个问题啊”这样的回复。</p>\n<h3 id=\"刨根究底\"><a href=\"#刨根究底\" class=\"headerlink\" title=\"刨根究底\"></a>刨根究底</h3><p>自己动手，丰衣足食。我们知道，webpack对css的处理方式通常是使用style-loader将css插入header标签中，uni-app也是如此：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-4-25/1619361955023-image.png\"><br>上图中6215就是一个css模块：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-4-25/1619362025628-image.png\"><br>这个css模块其实就是一个字符串，截取这段字符串格式化后的一部分：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-4-25/1619361866485-image.png\"><br>可以得出结论：</p>\n<blockquote>\n<p>uni-app编译后的css中，rpx单位并没有直接转化成px，因为需要根据具体的设备类型做移动端适配。这个适配工作就在style标签插入html之前。</p>\n</blockquote>\n<p>接下来，找到rpx转px的工具函数，在@dcloudio/vue-cli-plugin-uni/packages/h5-vue-style-loader/lib/addStylesClient.js文件中，名为<code>processCss</code>的方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var UPX_RE = /%\\?([+-]?\\d+(\\.\\d+)?)\\?%/g</span><br><span class=\"line\">var BODY_RE = /\\.\\?%PAGE\\?%/g</span><br><span class=\"line\">var BODY_SCOPED_RE = /\\?%PAGE\\?%\\[data-v-[a-z0-9]&#123;8&#125;\\]/g</span><br><span class=\"line\">var PAGE_SCOPED_RE = /uni-page-body\\[data-v-[a-z0-9]&#123;8&#125;\\]/g</span><br><span class=\"line\">var VAR_STATUS_BAR_HEIGHT = /var\\(--status-bar-height\\)/gi</span><br><span class=\"line\">var VAR_WINDOW_TOP = /var\\(--window-top\\)/gi</span><br><span class=\"line\">var VAR_WINDOW_BOTTOM = /var\\(--window-bottom\\)/gi</span><br><span class=\"line\">var VAR_WINDOW_LEFT = /var\\(--window-left\\)/gi</span><br><span class=\"line\">var VAR_WINDOW_RIGHT = /var\\(--window-right\\)/gi</span><br><span class=\"line\"></span><br><span class=\"line\">function processCss(css) &#123;</span><br><span class=\"line\">\tvar page = getPage()</span><br><span class=\"line\">\tif (typeof uni !== &#x27;undefined&#x27; &amp;&amp; !uni.canIUse(&#x27;css.var&#x27;)) &#123; //不支持 css 变量</span><br><span class=\"line\">\t\tvar offset = getWindowOffset()</span><br><span class=\"line\">\t\tcss = css.replace(VAR_STATUS_BAR_HEIGHT, &#x27;0px&#x27;)</span><br><span class=\"line\">\t\t\t.replace(VAR_WINDOW_TOP, offset.top + &#x27;px&#x27;)</span><br><span class=\"line\">\t\t\t.replace(VAR_WINDOW_BOTTOM, offset.bottom + &#x27;px&#x27;)</span><br><span class=\"line\">            .replace(VAR_WINDOW_LEFT, &#x27;0px&#x27;)</span><br><span class=\"line\">            .replace(VAR_WINDOW_RIGHT, &#x27;0px&#x27;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn css</span><br><span class=\"line\">\t\t.replace(BODY_SCOPED_RE, page)</span><br><span class=\"line\">\t\t.replace(BODY_RE, &#x27;&#x27;)</span><br><span class=\"line\">\t\t.replace(PAGE_SCOPED_RE, &#x27;body.&#x27; + page + &#x27; uni-page-body&#x27;)</span><br><span class=\"line\">\t\t.replace(/\\&#123;[\\s\\S]+?\\&#125;|@media.+\\&#123;/g, function (css) &#123;</span><br><span class=\"line\">      if(typeof uni === &#x27;undefined&#x27;)&#123;</span><br><span class=\"line\">        return css</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">\t\t\treturn css.replace(UPX_RE, function (a, b) &#123;</span><br><span class=\"line\">\t\t\t\treturn uni.upx2px(b) + &#x27;px&#x27;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>正则变量<code>UPX_RE</code>是生成px的关键点，replace链式调用的结尾需要对满足正则<code>/\\&#123;[\\s\\S]+?\\&#125;|@media.+\\&#123;/g</code>的部分做px单位转换。现在可以确认的是，这个正则没有完全覆盖我们的css模块中所有的样式。</p>\n<h3 id=\"解决啦\"><a href=\"#解决啦\" class=\"headerlink\" title=\"解决啦\"></a>解决啦</h3><p>拿以下样式做一个验证：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.class-a[data-v-8ec74a42] &#123;</span><br><span class=\"line\">  width: %?678?%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@media only screen and (-webkit-min-device-pixel-ratio: 2) &#123;</span><br><span class=\"line\">  .class-a[data-v-8ec74a42] &#123;</span><br><span class=\"line\">    -webkit-transform: scaleY(0.5);</span><br><span class=\"line\">    -ms-transform: scaleY(0.5);</span><br><span class=\"line\">    transform: scaleY(0.5);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.class-b[data-v-8ec74a42] &#123;</span><br><span class=\"line\">  font-size: %?28?%;</span><br><span class=\"line\">  line-height: %?88?%;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>发现<code>@media.+\\&#123;</code>部分会匹配从<code>@media</code>到<code>.class-b[data-v-8ec74a42] &#123;</code>，剩下的部分因为无法匹配<code>\\&#123;[\\s\\S]+?\\&#125;</code>就被忽略了。</p>\n<p>根据该文件的修改记录，看到了上一次修改的commit message：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-4-25/1619363407452-image.png\"><br>哦，人家大概是想处理这样的情况下吧：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@media screen and (max-width: 300rpx)</span><br></pre></td></tr></table></figure>\n<p>修正后的正则：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/\\&#123;[\\s\\S]+?\\&#125;|@media[^&#123;]+/g</span><br></pre></td></tr></table></figure>\n<p>既然如此，那就赶紧提个<a href=\"https://github.com/dcloudio/uni-app/pull/2614\" title=\"pull request\">pull request</a>叭！</p>\n<h3 id=\"相关issue\"><a href=\"#相关issue\" class=\"headerlink\" title=\"相关issue:\"></a>相关issue:</h3><p><a href=\"https://github.com/dcloudio/uni-app/issues/1132\">https://github.com/dcloudio/uni-app/issues/1132</a><br><a href=\"https://github.com/dcloudio/uni-app/issues/1606\">https://github.com/dcloudio/uni-app/issues/1606</a><br><a href=\"https://github.com/dcloudio/uni-app/issues/1069\">https://github.com/dcloudio/uni-app/issues/1069</a><br><a href=\"https://github.com/dcloudio/uni-app/issues/2600\">https://github.com/dcloudio/uni-app/issues/2600</a></p>\n"},{"title":"uni-app H5模式下treeShaking的坑","date":"2021-05-09T16:00:00.000Z","_content":"  \n\nuni-apph5打包模式，使用[treeShaking](https://uniapp.dcloud.io/collocation/manifest?id=treeshaking)时，该配置只在生产模式下有效，即使部署到测试和预生产都没有问题，发布到生产之前一定要先本地打包生产模式确保无异常。\n\n我们的项目发布到生产之后运行h5出现以下报错：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622344617219-image.png)\n\n经过一番全局搜索，看到了一个插件（目录：@dcloudio/vue-cli-plugin-uni-optimize/packages/babel-plugin-uni-api/index.js）：\n\n```\nprocess.UNI_APIS = new Set()\nmodule.exports = function ({\n  types: t\n}) {\n  return {\n    visitor: {\n      MemberExpression (path, state) {\n        if (\n          t.isIdentifier(path.node.object) &&\n          (\n            path.node.object.name === 'uni' ||\n            path.node.object.name === 'wx'\n          )\n        ) {\n          process.UNI_APIS.add(path.node.property.name || path.node.property.value)\n        }\n      }\n    }\n  }\n}\n```\n该插件在获取了AST语法树之后，将遇到uni.xxx语法的对象属性引用对应的api名称添加到process.UNI_APIS中。\n\n然而，通过调试发现代码并没有运行到此处，此路不通。\n\n后来终于发现了一个关键线索。\n\n1. 读取optimization.treeShaking开关并标记\n\n@dcloudio/vue-cli-plugin-uni/lib/env.js文件中读取到optimization.treeShaking配置为true时，就会执行以下代码：\n```\nprocess.env.UNI_OPT_TREESHAKINGNG = true\n```\n\n2. vue-cli-optimize插件\n\nvue-cli-plugin-uni-optimize插件（@dcloudio/vue-cli-plugin-uni-optimize/index.js）针对uni-api做了以下事情：\n* 将process.UNI_APIS写入@dcloudio\\vue-cli-plugin-uni-optimize\\.tmp\\api.js路径下的文件\n* 将uni api的模块引用路径替换成@dcloudio\\vue-cli-plugin-uni-optimize\\.tmp\\api.js路径下的文件\n\n但是我们从前文可知，唯一一处更新process.UNI_APIS的代码并未执行（猜测是uni-app代码的bug），导致uni-api update了个寂寞:\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622345030913-image.png)\n\n以上关键代码并未更新任何api，只是引入了一些默认的核心api（@dcloudio/vue-cli-plugin-uni-optimize/packages/webpack-optimize-plugin/api.js）:\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622345080481-image.png)\n\n以上代码标记部分，manifest[name][2]的值为true，即为核心api时才会被默认引入。\n\n由于不知道什么原因没有使用babel-plugin-uni-api，而且，考虑到该插件的tree-shaking比较粗暴，增加了业务代码的开发复杂度。\n\n而我负责的项目，业务中存在对uni的直接使用扩展运算符来实现uni-api和其它自定义api的整合：\n```\nsdk = {\n    ...uni,\n    someCustomApi: function(){...}\n}\n```\n即使babel-plugin-uni-api插件正常工作，根据该插件的shaking原理，我们需要将扩展运算符改为按需赋值的结构：\n```\nsdk = {\n    api1: uni.api1,\n    api2: uni.api2,\n    someCustomApi: function(){...}\n}\n```\n每增加一个新的uni-api都要去修改sdk文件，这是开发不希望发生的事情。因此考虑简单粗暴从manifest.json文件入手，让每一个api都成为核心api。在compiler的beforeCompile钩子回调中修改manifest文件的标记：\n```\nconst manifest = require('@dcloudio/uni-h5/manifest.json')\nObject.keys(manifest).forEach(name => {\n  if (manifest[name].length < 3) {\n    manifest[name].push(true)\n  }\n})\nconst newManifest = JSON.stringify(manifest, null, 2);\ntry {\n  fs.writeFileSync(path.resolve(process.cwd(), 'node_modules', '@dcloudio/uni-h5/manifest.json'), newManifest)\n  console.log('@dcloudio/uni-h5/manifest.json 替换成功...')\n} catch (err) {\n  console.log('@dcloudio/uni-h5/manifest.json 替换失败...')\n}\n```\n> writeFileSync将json写回文件时，需要转化为字符串，为了让字符串能够换行，保持json格式，需要传入JSON.stringify的第三个参数值为2，表示保留换行和空格，以及每次缩进使用2个空格。\n\n## 结果\n\n将“未开启tree-shaking”，“开启tree-shaking打包异常”，“开启tree-shaking并修复api打包异常”3个版本打包结果对比：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622345486280-image.png)\n\n可以看到，uni-app的tree-shaking效果一般，修复tree-shaking的打包结果依旧比开启前少了0.1M。\n\n[uni-app 2.2 大幅优化H5端性能体验，只开发H5，也要用uni-app](https://ask.dcloud.net.cn/article/36279)这篇文章提到，manifest内部的的tree-shaking其实主要做了2件事，内置组件的treeShaking和api的treeShaking，而且，文中数据显示，shaking效果拔群。但是本人尝试的结果发现效果实在一般。\n\n","source":"_posts/uni-app/h5-tree-shaking.md","raw":"---\ntitle: uni-app H5模式下treeShaking的坑\ncategories: uni-app\ntags: [treeShaking, uni-app]\ndate: 2021-5-10\n---  \n\nuni-apph5打包模式，使用[treeShaking](https://uniapp.dcloud.io/collocation/manifest?id=treeshaking)时，该配置只在生产模式下有效，即使部署到测试和预生产都没有问题，发布到生产之前一定要先本地打包生产模式确保无异常。\n\n我们的项目发布到生产之后运行h5出现以下报错：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622344617219-image.png)\n\n经过一番全局搜索，看到了一个插件（目录：@dcloudio/vue-cli-plugin-uni-optimize/packages/babel-plugin-uni-api/index.js）：\n\n```\nprocess.UNI_APIS = new Set()\nmodule.exports = function ({\n  types: t\n}) {\n  return {\n    visitor: {\n      MemberExpression (path, state) {\n        if (\n          t.isIdentifier(path.node.object) &&\n          (\n            path.node.object.name === 'uni' ||\n            path.node.object.name === 'wx'\n          )\n        ) {\n          process.UNI_APIS.add(path.node.property.name || path.node.property.value)\n        }\n      }\n    }\n  }\n}\n```\n该插件在获取了AST语法树之后，将遇到uni.xxx语法的对象属性引用对应的api名称添加到process.UNI_APIS中。\n\n然而，通过调试发现代码并没有运行到此处，此路不通。\n\n后来终于发现了一个关键线索。\n\n1. 读取optimization.treeShaking开关并标记\n\n@dcloudio/vue-cli-plugin-uni/lib/env.js文件中读取到optimization.treeShaking配置为true时，就会执行以下代码：\n```\nprocess.env.UNI_OPT_TREESHAKINGNG = true\n```\n\n2. vue-cli-optimize插件\n\nvue-cli-plugin-uni-optimize插件（@dcloudio/vue-cli-plugin-uni-optimize/index.js）针对uni-api做了以下事情：\n* 将process.UNI_APIS写入@dcloudio\\vue-cli-plugin-uni-optimize\\.tmp\\api.js路径下的文件\n* 将uni api的模块引用路径替换成@dcloudio\\vue-cli-plugin-uni-optimize\\.tmp\\api.js路径下的文件\n\n但是我们从前文可知，唯一一处更新process.UNI_APIS的代码并未执行（猜测是uni-app代码的bug），导致uni-api update了个寂寞:\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622345030913-image.png)\n\n以上关键代码并未更新任何api，只是引入了一些默认的核心api（@dcloudio/vue-cli-plugin-uni-optimize/packages/webpack-optimize-plugin/api.js）:\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622345080481-image.png)\n\n以上代码标记部分，manifest[name][2]的值为true，即为核心api时才会被默认引入。\n\n由于不知道什么原因没有使用babel-plugin-uni-api，而且，考虑到该插件的tree-shaking比较粗暴，增加了业务代码的开发复杂度。\n\n而我负责的项目，业务中存在对uni的直接使用扩展运算符来实现uni-api和其它自定义api的整合：\n```\nsdk = {\n    ...uni,\n    someCustomApi: function(){...}\n}\n```\n即使babel-plugin-uni-api插件正常工作，根据该插件的shaking原理，我们需要将扩展运算符改为按需赋值的结构：\n```\nsdk = {\n    api1: uni.api1,\n    api2: uni.api2,\n    someCustomApi: function(){...}\n}\n```\n每增加一个新的uni-api都要去修改sdk文件，这是开发不希望发生的事情。因此考虑简单粗暴从manifest.json文件入手，让每一个api都成为核心api。在compiler的beforeCompile钩子回调中修改manifest文件的标记：\n```\nconst manifest = require('@dcloudio/uni-h5/manifest.json')\nObject.keys(manifest).forEach(name => {\n  if (manifest[name].length < 3) {\n    manifest[name].push(true)\n  }\n})\nconst newManifest = JSON.stringify(manifest, null, 2);\ntry {\n  fs.writeFileSync(path.resolve(process.cwd(), 'node_modules', '@dcloudio/uni-h5/manifest.json'), newManifest)\n  console.log('@dcloudio/uni-h5/manifest.json 替换成功...')\n} catch (err) {\n  console.log('@dcloudio/uni-h5/manifest.json 替换失败...')\n}\n```\n> writeFileSync将json写回文件时，需要转化为字符串，为了让字符串能够换行，保持json格式，需要传入JSON.stringify的第三个参数值为2，表示保留换行和空格，以及每次缩进使用2个空格。\n\n## 结果\n\n将“未开启tree-shaking”，“开启tree-shaking打包异常”，“开启tree-shaking并修复api打包异常”3个版本打包结果对比：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622345486280-image.png)\n\n可以看到，uni-app的tree-shaking效果一般，修复tree-shaking的打包结果依旧比开启前少了0.1M。\n\n[uni-app 2.2 大幅优化H5端性能体验，只开发H5，也要用uni-app](https://ask.dcloud.net.cn/article/36279)这篇文章提到，manifest内部的的tree-shaking其实主要做了2件事，内置组件的treeShaking和api的treeShaking，而且，文中数据显示，shaking效果拔群。但是本人尝试的结果发现效果实在一般。\n\n","slug":"uni-app/h5-tree-shaking","published":1,"updated":"2021-06-14T02:11:56.300Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc71001cecq813goebjd","content":"<p>uni-apph5打包模式，使用<a href=\"https://uniapp.dcloud.io/collocation/manifest?id=treeshaking\">treeShaking</a>时，该配置只在生产模式下有效，即使部署到测试和预生产都没有问题，发布到生产之前一定要先本地打包生产模式确保无异常。</p>\n<p>我们的项目发布到生产之后运行h5出现以下报错：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622344617219-image.png\"></p>\n<p>经过一番全局搜索，看到了一个插件（目录：@dcloudio/vue-cli-plugin-uni-optimize/packages/babel-plugin-uni-api/index.js）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.UNI_APIS = new Set()</span><br><span class=\"line\">module.exports = function (&#123;</span><br><span class=\"line\">  types: t</span><br><span class=\"line\">&#125;) &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    visitor: &#123;</span><br><span class=\"line\">      MemberExpression (path, state) &#123;</span><br><span class=\"line\">        if (</span><br><span class=\"line\">          t.isIdentifier(path.node.object) &amp;&amp;</span><br><span class=\"line\">          (</span><br><span class=\"line\">            path.node.object.name === &#x27;uni&#x27; ||</span><br><span class=\"line\">            path.node.object.name === &#x27;wx&#x27;</span><br><span class=\"line\">          )</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">          process.UNI_APIS.add(path.node.property.name || path.node.property.value)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该插件在获取了AST语法树之后，将遇到uni.xxx语法的对象属性引用对应的api名称添加到process.UNI_APIS中。</p>\n<p>然而，通过调试发现代码并没有运行到此处，此路不通。</p>\n<p>后来终于发现了一个关键线索。</p>\n<ol>\n<li>读取optimization.treeShaking开关并标记</li>\n</ol>\n<p>@dcloudio/vue-cli-plugin-uni/lib/env.js文件中读取到optimization.treeShaking配置为true时，就会执行以下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.env.UNI_OPT_TREESHAKINGNG = true</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>vue-cli-optimize插件</li>\n</ol>\n<p>vue-cli-plugin-uni-optimize插件（@dcloudio/vue-cli-plugin-uni-optimize/index.js）针对uni-api做了以下事情：</p>\n<ul>\n<li>将process.UNI_APIS写入@dcloudio\\vue-cli-plugin-uni-optimize.tmp\\api.js路径下的文件</li>\n<li>将uni api的模块引用路径替换成@dcloudio\\vue-cli-plugin-uni-optimize.tmp\\api.js路径下的文件</li>\n</ul>\n<p>但是我们从前文可知，唯一一处更新process.UNI_APIS的代码并未执行（猜测是uni-app代码的bug），导致uni-api update了个寂寞:<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622345030913-image.png\"></p>\n<p>以上关键代码并未更新任何api，只是引入了一些默认的核心api（@dcloudio/vue-cli-plugin-uni-optimize/packages/webpack-optimize-plugin/api.js）:<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622345080481-image.png\"></p>\n<p>以上代码标记部分，manifest[name][2]的值为true，即为核心api时才会被默认引入。</p>\n<p>由于不知道什么原因没有使用babel-plugin-uni-api，而且，考虑到该插件的tree-shaking比较粗暴，增加了业务代码的开发复杂度。</p>\n<p>而我负责的项目，业务中存在对uni的直接使用扩展运算符来实现uni-api和其它自定义api的整合：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sdk = &#123;</span><br><span class=\"line\">    ...uni,</span><br><span class=\"line\">    someCustomApi: function()&#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>即使babel-plugin-uni-api插件正常工作，根据该插件的shaking原理，我们需要将扩展运算符改为按需赋值的结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sdk = &#123;</span><br><span class=\"line\">    api1: uni.api1,</span><br><span class=\"line\">    api2: uni.api2,</span><br><span class=\"line\">    someCustomApi: function()&#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>每增加一个新的uni-api都要去修改sdk文件，这是开发不希望发生的事情。因此考虑简单粗暴从manifest.json文件入手，让每一个api都成为核心api。在compiler的beforeCompile钩子回调中修改manifest文件的标记：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const manifest = require(&#x27;@dcloudio/uni-h5/manifest.json&#x27;)</span><br><span class=\"line\">Object.keys(manifest).forEach(name =&gt; &#123;</span><br><span class=\"line\">  if (manifest[name].length &lt; 3) &#123;</span><br><span class=\"line\">    manifest[name].push(true)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">const newManifest = JSON.stringify(manifest, null, 2);</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">  fs.writeFileSync(path.resolve(process.cwd(), &#x27;node_modules&#x27;, &#x27;@dcloudio/uni-h5/manifest.json&#x27;), newManifest)</span><br><span class=\"line\">  console.log(&#x27;@dcloudio/uni-h5/manifest.json 替换成功...&#x27;)</span><br><span class=\"line\">&#125; catch (err) &#123;</span><br><span class=\"line\">  console.log(&#x27;@dcloudio/uni-h5/manifest.json 替换失败...&#x27;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>writeFileSync将json写回文件时，需要转化为字符串，为了让字符串能够换行，保持json格式，需要传入JSON.stringify的第三个参数值为2，表示保留换行和空格，以及每次缩进使用2个空格。</p>\n</blockquote>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p>将“未开启tree-shaking”，“开启tree-shaking打包异常”，“开启tree-shaking并修复api打包异常”3个版本打包结果对比：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622345486280-image.png\"></p>\n<p>可以看到，uni-app的tree-shaking效果一般，修复tree-shaking的打包结果依旧比开启前少了0.1M。</p>\n<p><a href=\"https://ask.dcloud.net.cn/article/36279\">uni-app 2.2 大幅优化H5端性能体验，只开发H5，也要用uni-app</a>这篇文章提到，manifest内部的的tree-shaking其实主要做了2件事，内置组件的treeShaking和api的treeShaking，而且，文中数据显示，shaking效果拔群。但是本人尝试的结果发现效果实在一般。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>uni-apph5打包模式，使用<a href=\"https://uniapp.dcloud.io/collocation/manifest?id=treeshaking\">treeShaking</a>时，该配置只在生产模式下有效，即使部署到测试和预生产都没有问题，发布到生产之前一定要先本地打包生产模式确保无异常。</p>\n<p>我们的项目发布到生产之后运行h5出现以下报错：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622344617219-image.png\"></p>\n<p>经过一番全局搜索，看到了一个插件（目录：@dcloudio/vue-cli-plugin-uni-optimize/packages/babel-plugin-uni-api/index.js）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.UNI_APIS = new Set()</span><br><span class=\"line\">module.exports = function (&#123;</span><br><span class=\"line\">  types: t</span><br><span class=\"line\">&#125;) &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    visitor: &#123;</span><br><span class=\"line\">      MemberExpression (path, state) &#123;</span><br><span class=\"line\">        if (</span><br><span class=\"line\">          t.isIdentifier(path.node.object) &amp;&amp;</span><br><span class=\"line\">          (</span><br><span class=\"line\">            path.node.object.name === &#x27;uni&#x27; ||</span><br><span class=\"line\">            path.node.object.name === &#x27;wx&#x27;</span><br><span class=\"line\">          )</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">          process.UNI_APIS.add(path.node.property.name || path.node.property.value)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该插件在获取了AST语法树之后，将遇到uni.xxx语法的对象属性引用对应的api名称添加到process.UNI_APIS中。</p>\n<p>然而，通过调试发现代码并没有运行到此处，此路不通。</p>\n<p>后来终于发现了一个关键线索。</p>\n<ol>\n<li>读取optimization.treeShaking开关并标记</li>\n</ol>\n<p>@dcloudio/vue-cli-plugin-uni/lib/env.js文件中读取到optimization.treeShaking配置为true时，就会执行以下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.env.UNI_OPT_TREESHAKINGNG = true</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>vue-cli-optimize插件</li>\n</ol>\n<p>vue-cli-plugin-uni-optimize插件（@dcloudio/vue-cli-plugin-uni-optimize/index.js）针对uni-api做了以下事情：</p>\n<ul>\n<li>将process.UNI_APIS写入@dcloudio\\vue-cli-plugin-uni-optimize.tmp\\api.js路径下的文件</li>\n<li>将uni api的模块引用路径替换成@dcloudio\\vue-cli-plugin-uni-optimize.tmp\\api.js路径下的文件</li>\n</ul>\n<p>但是我们从前文可知，唯一一处更新process.UNI_APIS的代码并未执行（猜测是uni-app代码的bug），导致uni-api update了个寂寞:<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622345030913-image.png\"></p>\n<p>以上关键代码并未更新任何api，只是引入了一些默认的核心api（@dcloudio/vue-cli-plugin-uni-optimize/packages/webpack-optimize-plugin/api.js）:<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622345080481-image.png\"></p>\n<p>以上代码标记部分，manifest[name][2]的值为true，即为核心api时才会被默认引入。</p>\n<p>由于不知道什么原因没有使用babel-plugin-uni-api，而且，考虑到该插件的tree-shaking比较粗暴，增加了业务代码的开发复杂度。</p>\n<p>而我负责的项目，业务中存在对uni的直接使用扩展运算符来实现uni-api和其它自定义api的整合：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sdk = &#123;</span><br><span class=\"line\">    ...uni,</span><br><span class=\"line\">    someCustomApi: function()&#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>即使babel-plugin-uni-api插件正常工作，根据该插件的shaking原理，我们需要将扩展运算符改为按需赋值的结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sdk = &#123;</span><br><span class=\"line\">    api1: uni.api1,</span><br><span class=\"line\">    api2: uni.api2,</span><br><span class=\"line\">    someCustomApi: function()&#123;...&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>每增加一个新的uni-api都要去修改sdk文件，这是开发不希望发生的事情。因此考虑简单粗暴从manifest.json文件入手，让每一个api都成为核心api。在compiler的beforeCompile钩子回调中修改manifest文件的标记：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const manifest = require(&#x27;@dcloudio/uni-h5/manifest.json&#x27;)</span><br><span class=\"line\">Object.keys(manifest).forEach(name =&gt; &#123;</span><br><span class=\"line\">  if (manifest[name].length &lt; 3) &#123;</span><br><span class=\"line\">    manifest[name].push(true)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">const newManifest = JSON.stringify(manifest, null, 2);</span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">  fs.writeFileSync(path.resolve(process.cwd(), &#x27;node_modules&#x27;, &#x27;@dcloudio/uni-h5/manifest.json&#x27;), newManifest)</span><br><span class=\"line\">  console.log(&#x27;@dcloudio/uni-h5/manifest.json 替换成功...&#x27;)</span><br><span class=\"line\">&#125; catch (err) &#123;</span><br><span class=\"line\">  console.log(&#x27;@dcloudio/uni-h5/manifest.json 替换失败...&#x27;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>writeFileSync将json写回文件时，需要转化为字符串，为了让字符串能够换行，保持json格式，需要传入JSON.stringify的第三个参数值为2，表示保留换行和空格，以及每次缩进使用2个空格。</p>\n</blockquote>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p>将“未开启tree-shaking”，“开启tree-shaking打包异常”，“开启tree-shaking并修复api打包异常”3个版本打包结果对比：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622345486280-image.png\"></p>\n<p>可以看到，uni-app的tree-shaking效果一般，修复tree-shaking的打包结果依旧比开启前少了0.1M。</p>\n<p><a href=\"https://ask.dcloud.net.cn/article/36279\">uni-app 2.2 大幅优化H5端性能体验，只开发H5，也要用uni-app</a>这篇文章提到，manifest内部的的tree-shaking其实主要做了2件事，内置组件的treeShaking和api的treeShaking，而且，文中数据显示，shaking效果拔群。但是本人尝试的结果发现效果实在一般。</p>\n"},{"title":"uni-app实现文本长按复制","date":"2021-07-19T16:00:00.000Z","_content":"  \n\n### 文本长按复制的实现原理\n\n小程序所有的标签css都具有user-select:none属性。可通过user-select:text使其支持长按复制。\n\n真机调试的时候样式审查，看到的text标签具有user-select:text：\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623928631379-image.png)\n\n虽然审查出来样式是有user-select:text，实际上在ios设备上依旧无法长按选择。这个样式审查估计是假的吧。\n\n开启了user-select:text的text标签，由inline布局变为inline-block，需要开发者自己做样式适配（[官方说明](https://developers.weixin.qq.com/community/develop/doc/00086ee03a0bd096595ac5e905ac00)）\n\n##### 安卓\n* css中的user-select:text有效\n* text标签的user-select有效\n\n##### IOS\n* css中的user-select:text无效\n* text标签的user-select有效\n\n因此还是要用text标签的user-text属性。\n\n## 富文本的长按复制\n\n富文本要用到rich-text标签。但是该标签不支持user-select属性。\n\n唯一的办法就是将富文本中的文本标签都改成text标签。\n\n插件市场有很多富文本解析插件。\n\n## mp-html\n\n[文档](https://ext.dcloud.net.cn/plugin?id=805#detail)\n\n优点：\n* 支持图片预览\n* 文案长按复制\n* 全端支持\n\n缺陷：\n* selectable:true 对ios无效，selectable:force才对ios有效。\n* selectable:force对h5无效，所以h5需要额外用user-select:text样式对容器处理。\n* lazy-load在小程序端有问题。图片并没有渲染出来。\n\n## H5模式下的长按复制\n以上都是小程序环境的处理方法。\n\nH5 模式下，text标签的user-select属性无效，需要在css中设置user-select:text属性","source":"_posts/uni-app/longpress-copy.md","raw":"---\ntitle: uni-app实现文本长按复制\ncategories: uni-app\ntags: [长按复制, uni-app]\ndate: 2021-7-20\n---  \n\n### 文本长按复制的实现原理\n\n小程序所有的标签css都具有user-select:none属性。可通过user-select:text使其支持长按复制。\n\n真机调试的时候样式审查，看到的text标签具有user-select:text：\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623928631379-image.png)\n\n虽然审查出来样式是有user-select:text，实际上在ios设备上依旧无法长按选择。这个样式审查估计是假的吧。\n\n开启了user-select:text的text标签，由inline布局变为inline-block，需要开发者自己做样式适配（[官方说明](https://developers.weixin.qq.com/community/develop/doc/00086ee03a0bd096595ac5e905ac00)）\n\n##### 安卓\n* css中的user-select:text有效\n* text标签的user-select有效\n\n##### IOS\n* css中的user-select:text无效\n* text标签的user-select有效\n\n因此还是要用text标签的user-text属性。\n\n## 富文本的长按复制\n\n富文本要用到rich-text标签。但是该标签不支持user-select属性。\n\n唯一的办法就是将富文本中的文本标签都改成text标签。\n\n插件市场有很多富文本解析插件。\n\n## mp-html\n\n[文档](https://ext.dcloud.net.cn/plugin?id=805#detail)\n\n优点：\n* 支持图片预览\n* 文案长按复制\n* 全端支持\n\n缺陷：\n* selectable:true 对ios无效，selectable:force才对ios有效。\n* selectable:force对h5无效，所以h5需要额外用user-select:text样式对容器处理。\n* lazy-load在小程序端有问题。图片并没有渲染出来。\n\n## H5模式下的长按复制\n以上都是小程序环境的处理方法。\n\nH5 模式下，text标签的user-select属性无效，需要在css中设置user-select:text属性","slug":"uni-app/longpress-copy","published":1,"updated":"2021-08-07T02:52:50.241Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc72001decq83v1452y1","content":"<h3 id=\"文本长按复制的实现原理\"><a href=\"#文本长按复制的实现原理\" class=\"headerlink\" title=\"文本长按复制的实现原理\"></a>文本长按复制的实现原理</h3><p>小程序所有的标签css都具有user-select:none属性。可通过user-select:text使其支持长按复制。</p>\n<p>真机调试的时候样式审查，看到的text标签具有user-select:text：</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623928631379-image.png\"></p>\n<p>虽然审查出来样式是有user-select:text，实际上在ios设备上依旧无法长按选择。这个样式审查估计是假的吧。</p>\n<p>开启了user-select:text的text标签，由inline布局变为inline-block，需要开发者自己做样式适配（<a href=\"https://developers.weixin.qq.com/community/develop/doc/00086ee03a0bd096595ac5e905ac00\">官方说明</a>）</p>\n<h5 id=\"安卓\"><a href=\"#安卓\" class=\"headerlink\" title=\"安卓\"></a>安卓</h5><ul>\n<li>css中的user-select:text有效</li>\n<li>text标签的user-select有效</li>\n</ul>\n<h5 id=\"IOS\"><a href=\"#IOS\" class=\"headerlink\" title=\"IOS\"></a>IOS</h5><ul>\n<li>css中的user-select:text无效</li>\n<li>text标签的user-select有效</li>\n</ul>\n<p>因此还是要用text标签的user-text属性。</p>\n<h2 id=\"富文本的长按复制\"><a href=\"#富文本的长按复制\" class=\"headerlink\" title=\"富文本的长按复制\"></a>富文本的长按复制</h2><p>富文本要用到rich-text标签。但是该标签不支持user-select属性。</p>\n<p>唯一的办法就是将富文本中的文本标签都改成text标签。</p>\n<p>插件市场有很多富文本解析插件。</p>\n<h2 id=\"mp-html\"><a href=\"#mp-html\" class=\"headerlink\" title=\"mp-html\"></a>mp-html</h2><p><a href=\"https://ext.dcloud.net.cn/plugin?id=805#detail\">文档</a></p>\n<p>优点：</p>\n<ul>\n<li>支持图片预览</li>\n<li>文案长按复制</li>\n<li>全端支持</li>\n</ul>\n<p>缺陷：</p>\n<ul>\n<li>selectable:true 对ios无效，selectable:force才对ios有效。</li>\n<li>selectable:force对h5无效，所以h5需要额外用user-select:text样式对容器处理。</li>\n<li>lazy-load在小程序端有问题。图片并没有渲染出来。</li>\n</ul>\n<h2 id=\"H5模式下的长按复制\"><a href=\"#H5模式下的长按复制\" class=\"headerlink\" title=\"H5模式下的长按复制\"></a>H5模式下的长按复制</h2><p>以上都是小程序环境的处理方法。</p>\n<p>H5 模式下，text标签的user-select属性无效，需要在css中设置user-select:text属性</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"文本长按复制的实现原理\"><a href=\"#文本长按复制的实现原理\" class=\"headerlink\" title=\"文本长按复制的实现原理\"></a>文本长按复制的实现原理</h3><p>小程序所有的标签css都具有user-select:none属性。可通过user-select:text使其支持长按复制。</p>\n<p>真机调试的时候样式审查，看到的text标签具有user-select:text：</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623928631379-image.png\"></p>\n<p>虽然审查出来样式是有user-select:text，实际上在ios设备上依旧无法长按选择。这个样式审查估计是假的吧。</p>\n<p>开启了user-select:text的text标签，由inline布局变为inline-block，需要开发者自己做样式适配（<a href=\"https://developers.weixin.qq.com/community/develop/doc/00086ee03a0bd096595ac5e905ac00\">官方说明</a>）</p>\n<h5 id=\"安卓\"><a href=\"#安卓\" class=\"headerlink\" title=\"安卓\"></a>安卓</h5><ul>\n<li>css中的user-select:text有效</li>\n<li>text标签的user-select有效</li>\n</ul>\n<h5 id=\"IOS\"><a href=\"#IOS\" class=\"headerlink\" title=\"IOS\"></a>IOS</h5><ul>\n<li>css中的user-select:text无效</li>\n<li>text标签的user-select有效</li>\n</ul>\n<p>因此还是要用text标签的user-text属性。</p>\n<h2 id=\"富文本的长按复制\"><a href=\"#富文本的长按复制\" class=\"headerlink\" title=\"富文本的长按复制\"></a>富文本的长按复制</h2><p>富文本要用到rich-text标签。但是该标签不支持user-select属性。</p>\n<p>唯一的办法就是将富文本中的文本标签都改成text标签。</p>\n<p>插件市场有很多富文本解析插件。</p>\n<h2 id=\"mp-html\"><a href=\"#mp-html\" class=\"headerlink\" title=\"mp-html\"></a>mp-html</h2><p><a href=\"https://ext.dcloud.net.cn/plugin?id=805#detail\">文档</a></p>\n<p>优点：</p>\n<ul>\n<li>支持图片预览</li>\n<li>文案长按复制</li>\n<li>全端支持</li>\n</ul>\n<p>缺陷：</p>\n<ul>\n<li>selectable:true 对ios无效，selectable:force才对ios有效。</li>\n<li>selectable:force对h5无效，所以h5需要额外用user-select:text样式对容器处理。</li>\n<li>lazy-load在小程序端有问题。图片并没有渲染出来。</li>\n</ul>\n<h2 id=\"H5模式下的长按复制\"><a href=\"#H5模式下的长按复制\" class=\"headerlink\" title=\"H5模式下的长按复制\"></a>H5模式下的长按复制</h2><p>以上都是小程序环境的处理方法。</p>\n<p>H5 模式下，text标签的user-select属性无效，需要在css中设置user-select:text属性</p>\n"},{"title":"uni-app rpx单位在h5环境转换为px的方法","date":"2021-06-28T16:00:00.000Z","_content":" \n\n源码中的rpx单位，如`22rpx`编译后为`%?22?%`的格式。具体px值为多少，是根据运行时设备环境判断的。\n\n运行时单位转换核心方法如下：\n\n```\n// newDeviceWidth通常不传，用默认值deviceWidth\nfunction upx2px (number, newDeviceWidth) {\n  if (deviceWidth === 0) {\n    checkDeviceWidth()\n  }\n\n  number = Number(number)\n  if (number === 0) {\n    return 0\n  }\n  \n  \n  // 计算基准以globalStyle配置为准\n  const config = __uniConfig.globalStyle || __uniConfig.window || {}\n  const maxWidth = checkValue(config.rpxCalcMaxDeviceWidth, 960)\n  const baseWidth = checkValue(config.rpxCalcBaseDeviceWidth, 375)\n  \n  // 容器像素宽度值（通常和设计稿宽度一致）\n  const includeWidth = checkValue(config.rpxCalcIncludeWidth, 750)\n  \n  // deviceWidth为窗口像素宽度（css层面的像素，如iphone 6: 375px）\n  let width = newDeviceWidth || deviceWidth\n  \n  width = number === includeWidth || width <= maxWidth ? width : baseWidth\n  // BASE_DEVICE_WIDTH固定为750，因此代码中的值也要以750的设计稿为准\n  let result = (number / BASE_DEVICE_WIDTH) * width\n  if (result < 0) {\n    result = -result\n  }\n  result = Math.floor(result + EPS)\n  if (result === 0) {\n    // 计算结果小于1px时特殊处理。\n    \n    if (deviceDPR === 1 || !isIOS) { // DPR不大于1，或者不是ios设备，则一律为1px\n      result = 1\n    } else { // DPR大于1，或者ios设备，则一律为0.5px\n      result = 0.5\n    }\n  }\n  return number < 0 ? -result : result\n}\n\nfunction checkDeviceWidth () {\n  const {\n    platform,\n    pixelRatio,\n    windowWidth\n  } = uni.getSystemInfoSync()\n\n  deviceWidth = windowWidth\n  deviceDPR = pixelRatio\n  isIOS = platform === 'ios'\n}\n```\n\n该方法在将style插入DOM之前执行。\n","source":"_posts/uni-app/rpx.md","raw":"---\ntitle: \"uni-app rpx单位在h5环境转换为px的方法\"\ncategories: uni-app\ntags: [rpx, uni-app]\ndate: 2021-6-29\n--- \n\n源码中的rpx单位，如`22rpx`编译后为`%?22?%`的格式。具体px值为多少，是根据运行时设备环境判断的。\n\n运行时单位转换核心方法如下：\n\n```\n// newDeviceWidth通常不传，用默认值deviceWidth\nfunction upx2px (number, newDeviceWidth) {\n  if (deviceWidth === 0) {\n    checkDeviceWidth()\n  }\n\n  number = Number(number)\n  if (number === 0) {\n    return 0\n  }\n  \n  \n  // 计算基准以globalStyle配置为准\n  const config = __uniConfig.globalStyle || __uniConfig.window || {}\n  const maxWidth = checkValue(config.rpxCalcMaxDeviceWidth, 960)\n  const baseWidth = checkValue(config.rpxCalcBaseDeviceWidth, 375)\n  \n  // 容器像素宽度值（通常和设计稿宽度一致）\n  const includeWidth = checkValue(config.rpxCalcIncludeWidth, 750)\n  \n  // deviceWidth为窗口像素宽度（css层面的像素，如iphone 6: 375px）\n  let width = newDeviceWidth || deviceWidth\n  \n  width = number === includeWidth || width <= maxWidth ? width : baseWidth\n  // BASE_DEVICE_WIDTH固定为750，因此代码中的值也要以750的设计稿为准\n  let result = (number / BASE_DEVICE_WIDTH) * width\n  if (result < 0) {\n    result = -result\n  }\n  result = Math.floor(result + EPS)\n  if (result === 0) {\n    // 计算结果小于1px时特殊处理。\n    \n    if (deviceDPR === 1 || !isIOS) { // DPR不大于1，或者不是ios设备，则一律为1px\n      result = 1\n    } else { // DPR大于1，或者ios设备，则一律为0.5px\n      result = 0.5\n    }\n  }\n  return number < 0 ? -result : result\n}\n\nfunction checkDeviceWidth () {\n  const {\n    platform,\n    pixelRatio,\n    windowWidth\n  } = uni.getSystemInfoSync()\n\n  deviceWidth = windowWidth\n  deviceDPR = pixelRatio\n  isIOS = platform === 'ios'\n}\n```\n\n该方法在将style插入DOM之前执行。\n","slug":"uni-app/rpx","published":1,"updated":"2021-08-07T03:11:40.933Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc72001eecq813f58r0t","content":"<p>源码中的rpx单位，如<code>22rpx</code>编译后为<code>%?22?%</code>的格式。具体px值为多少，是根据运行时设备环境判断的。</p>\n<p>运行时单位转换核心方法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// newDeviceWidth通常不传，用默认值deviceWidth</span><br><span class=\"line\">function upx2px (number, newDeviceWidth) &#123;</span><br><span class=\"line\">  if (deviceWidth === 0) &#123;</span><br><span class=\"line\">    checkDeviceWidth()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  number = Number(number)</span><br><span class=\"line\">  if (number === 0) &#123;</span><br><span class=\"line\">    return 0</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  // 计算基准以globalStyle配置为准</span><br><span class=\"line\">  const config = __uniConfig.globalStyle || __uniConfig.window || &#123;&#125;</span><br><span class=\"line\">  const maxWidth = checkValue(config.rpxCalcMaxDeviceWidth, 960)</span><br><span class=\"line\">  const baseWidth = checkValue(config.rpxCalcBaseDeviceWidth, 375)</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 容器像素宽度值（通常和设计稿宽度一致）</span><br><span class=\"line\">  const includeWidth = checkValue(config.rpxCalcIncludeWidth, 750)</span><br><span class=\"line\">  </span><br><span class=\"line\">  // deviceWidth为窗口像素宽度（css层面的像素，如iphone 6: 375px）</span><br><span class=\"line\">  let width = newDeviceWidth || deviceWidth</span><br><span class=\"line\">  </span><br><span class=\"line\">  width = number === includeWidth || width &lt;= maxWidth ? width : baseWidth</span><br><span class=\"line\">  // BASE_DEVICE_WIDTH固定为750，因此代码中的值也要以750的设计稿为准</span><br><span class=\"line\">  let result = (number / BASE_DEVICE_WIDTH) * width</span><br><span class=\"line\">  if (result &lt; 0) &#123;</span><br><span class=\"line\">    result = -result</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  result = Math.floor(result + EPS)</span><br><span class=\"line\">  if (result === 0) &#123;</span><br><span class=\"line\">    // 计算结果小于1px时特殊处理。</span><br><span class=\"line\">    </span><br><span class=\"line\">    if (deviceDPR === 1 || !isIOS) &#123; // DPR不大于1，或者不是ios设备，则一律为1px</span><br><span class=\"line\">      result = 1</span><br><span class=\"line\">    &#125; else &#123; // DPR大于1，或者ios设备，则一律为0.5px</span><br><span class=\"line\">      result = 0.5</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return number &lt; 0 ? -result : result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function checkDeviceWidth () &#123;</span><br><span class=\"line\">  const &#123;</span><br><span class=\"line\">    platform,</span><br><span class=\"line\">    pixelRatio,</span><br><span class=\"line\">    windowWidth</span><br><span class=\"line\">  &#125; = uni.getSystemInfoSync()</span><br><span class=\"line\"></span><br><span class=\"line\">  deviceWidth = windowWidth</span><br><span class=\"line\">  deviceDPR = pixelRatio</span><br><span class=\"line\">  isIOS = platform === &#x27;ios&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该方法在将style插入DOM之前执行。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>源码中的rpx单位，如<code>22rpx</code>编译后为<code>%?22?%</code>的格式。具体px值为多少，是根据运行时设备环境判断的。</p>\n<p>运行时单位转换核心方法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// newDeviceWidth通常不传，用默认值deviceWidth</span><br><span class=\"line\">function upx2px (number, newDeviceWidth) &#123;</span><br><span class=\"line\">  if (deviceWidth === 0) &#123;</span><br><span class=\"line\">    checkDeviceWidth()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  number = Number(number)</span><br><span class=\"line\">  if (number === 0) &#123;</span><br><span class=\"line\">    return 0</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  // 计算基准以globalStyle配置为准</span><br><span class=\"line\">  const config = __uniConfig.globalStyle || __uniConfig.window || &#123;&#125;</span><br><span class=\"line\">  const maxWidth = checkValue(config.rpxCalcMaxDeviceWidth, 960)</span><br><span class=\"line\">  const baseWidth = checkValue(config.rpxCalcBaseDeviceWidth, 375)</span><br><span class=\"line\">  </span><br><span class=\"line\">  // 容器像素宽度值（通常和设计稿宽度一致）</span><br><span class=\"line\">  const includeWidth = checkValue(config.rpxCalcIncludeWidth, 750)</span><br><span class=\"line\">  </span><br><span class=\"line\">  // deviceWidth为窗口像素宽度（css层面的像素，如iphone 6: 375px）</span><br><span class=\"line\">  let width = newDeviceWidth || deviceWidth</span><br><span class=\"line\">  </span><br><span class=\"line\">  width = number === includeWidth || width &lt;= maxWidth ? width : baseWidth</span><br><span class=\"line\">  // BASE_DEVICE_WIDTH固定为750，因此代码中的值也要以750的设计稿为准</span><br><span class=\"line\">  let result = (number / BASE_DEVICE_WIDTH) * width</span><br><span class=\"line\">  if (result &lt; 0) &#123;</span><br><span class=\"line\">    result = -result</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  result = Math.floor(result + EPS)</span><br><span class=\"line\">  if (result === 0) &#123;</span><br><span class=\"line\">    // 计算结果小于1px时特殊处理。</span><br><span class=\"line\">    </span><br><span class=\"line\">    if (deviceDPR === 1 || !isIOS) &#123; // DPR不大于1，或者不是ios设备，则一律为1px</span><br><span class=\"line\">      result = 1</span><br><span class=\"line\">    &#125; else &#123; // DPR大于1，或者ios设备，则一律为0.5px</span><br><span class=\"line\">      result = 0.5</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return number &lt; 0 ? -result : result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function checkDeviceWidth () &#123;</span><br><span class=\"line\">  const &#123;</span><br><span class=\"line\">    platform,</span><br><span class=\"line\">    pixelRatio,</span><br><span class=\"line\">    windowWidth</span><br><span class=\"line\">  &#125; = uni.getSystemInfoSync()</span><br><span class=\"line\"></span><br><span class=\"line\">  deviceWidth = windowWidth</span><br><span class=\"line\">  deviceDPR = pixelRatio</span><br><span class=\"line\">  isIOS = platform === &#x27;ios&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该方法在将style插入DOM之前执行。</p>\n"},{"title":"uni-app 分包优化","date":"2021-06-28T16:00:00.000Z","_content":" \n\nmanifest.json文件配置，可以开启分包优化。\n```\n\"mp-weixin\":{\n  // ...\n   \"optimization\": {\n     \"subPackages\": true\n   }\n  // ...\n}\n```\n\n该配置优化的具体具体逻辑：\n\n- 静态文件：分包下支持 static 等静态资源拷贝，即分包目录内放置的静态资源不会被打包到主包中，也不可在主包中使用\n- js文件：当某个 js 仅被一个分包引用时，该 js 会被打包到该分包内，否则仍打到主包（即被主包引用，或被超过 1 个分包引用）\n- 自定义组件：若某个自定义组件仅被一个分包引用时，且未放入到分包内，编译时会输出提示信息\n\n划重点：\n1. 自定义组件不会自动被优化，只是会在命令行显示提示信息，并不会自动移动组件\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628306356264-image.png)\n\n2. 只会自动移动可移入分包的js文件。\n3. 分析分包建议结果，发现其建议存在部分误导，开发者需要主动鉴别：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628306408144-image.png)\n4. 分析分包建议结果，发现其建议存在遗漏。\n5. npm中的组件也会参与分包优化建议，但是使用easycom的情况下是不会被提示的。","source":"_posts/uni-app/subPackages.md","raw":"---\ntitle: \"uni-app 分包优化\"\ncategories: uni-app\ntags: [分包优化, uni-app]\ndate: 2021-6-29\n--- \n\nmanifest.json文件配置，可以开启分包优化。\n```\n\"mp-weixin\":{\n  // ...\n   \"optimization\": {\n     \"subPackages\": true\n   }\n  // ...\n}\n```\n\n该配置优化的具体具体逻辑：\n\n- 静态文件：分包下支持 static 等静态资源拷贝，即分包目录内放置的静态资源不会被打包到主包中，也不可在主包中使用\n- js文件：当某个 js 仅被一个分包引用时，该 js 会被打包到该分包内，否则仍打到主包（即被主包引用，或被超过 1 个分包引用）\n- 自定义组件：若某个自定义组件仅被一个分包引用时，且未放入到分包内，编译时会输出提示信息\n\n划重点：\n1. 自定义组件不会自动被优化，只是会在命令行显示提示信息，并不会自动移动组件\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628306356264-image.png)\n\n2. 只会自动移动可移入分包的js文件。\n3. 分析分包建议结果，发现其建议存在部分误导，开发者需要主动鉴别：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628306408144-image.png)\n4. 分析分包建议结果，发现其建议存在遗漏。\n5. npm中的组件也会参与分包优化建议，但是使用easycom的情况下是不会被提示的。","slug":"uni-app/subPackages","published":1,"updated":"2021-08-07T03:21:48.086Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc73001fecq806n2gtyy","content":"<p>manifest.json文件配置，可以开启分包优化。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;mp-weixin&quot;:&#123;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">   &quot;optimization&quot;: &#123;</span><br><span class=\"line\">     &quot;subPackages&quot;: true</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该配置优化的具体具体逻辑：</p>\n<ul>\n<li>静态文件：分包下支持 static 等静态资源拷贝，即分包目录内放置的静态资源不会被打包到主包中，也不可在主包中使用</li>\n<li>js文件：当某个 js 仅被一个分包引用时，该 js 会被打包到该分包内，否则仍打到主包（即被主包引用，或被超过 1 个分包引用）</li>\n<li>自定义组件：若某个自定义组件仅被一个分包引用时，且未放入到分包内，编译时会输出提示信息</li>\n</ul>\n<p>划重点：</p>\n<ol>\n<li><p>自定义组件不会自动被优化，只是会在命令行显示提示信息，并不会自动移动组件<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628306356264-image.png\"></p>\n</li>\n<li><p>只会自动移动可移入分包的js文件。</p>\n</li>\n<li><p>分析分包建议结果，发现其建议存在部分误导，开发者需要主动鉴别：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628306408144-image.png\"></p>\n</li>\n<li><p>分析分包建议结果，发现其建议存在遗漏。</p>\n</li>\n<li><p>npm中的组件也会参与分包优化建议，但是使用easycom的情况下是不会被提示的。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>manifest.json文件配置，可以开启分包优化。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;mp-weixin&quot;:&#123;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">   &quot;optimization&quot;: &#123;</span><br><span class=\"line\">     &quot;subPackages&quot;: true</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该配置优化的具体具体逻辑：</p>\n<ul>\n<li>静态文件：分包下支持 static 等静态资源拷贝，即分包目录内放置的静态资源不会被打包到主包中，也不可在主包中使用</li>\n<li>js文件：当某个 js 仅被一个分包引用时，该 js 会被打包到该分包内，否则仍打到主包（即被主包引用，或被超过 1 个分包引用）</li>\n<li>自定义组件：若某个自定义组件仅被一个分包引用时，且未放入到分包内，编译时会输出提示信息</li>\n</ul>\n<p>划重点：</p>\n<ol>\n<li><p>自定义组件不会自动被优化，只是会在命令行显示提示信息，并不会自动移动组件<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628306356264-image.png\"></p>\n</li>\n<li><p>只会自动移动可移入分包的js文件。</p>\n</li>\n<li><p>分析分包建议结果，发现其建议存在部分误导，开发者需要主动鉴别：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628306408144-image.png\"></p>\n</li>\n<li><p>分析分包建议结果，发现其建议存在遗漏。</p>\n</li>\n<li><p>npm中的组件也会参与分包优化建议，但是使用easycom的情况下是不会被提示的。</p>\n</li>\n</ol>\n"},{"title":"uni-app无法使用thread-loader","date":"2021-06-26T16:00:00.000Z","_content":"\n拦截config.module.rules，给每个rule插入thread-loader。\n按照文档的说法，thread-loader有使用限制：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628307624782-image.png)\n\n翻译一下，有以下限制：\n1. 无法在具有输出文件功能的loader上使用\n2. 不能在plugin生成的loader上使）\n3. 不能在访问了webpack配置的loader上使用\n\n暂时先不理会这些限制，先让它跑起来。\n\n 安装最新版（3.0.3），vue.config.js文件添加以下代码：\n ```\nconfig.module.rules[19].use.unshift({loader: 'thread-loader'})\n```\n\n实验需要，随便找了一个/\\.vue$/文件添加thread-loader，运行一下有报错：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628307666164-image.png)\n\n去github上查到类似的issue ：https://github.com/dcloudio/uni-app/issues/2198\n根据别人的解决方案，尝试了升级版本，更换npm源，都没有解决。\n\n无奈只能自己定位错误。\n代码定位到`vue-li-shared/lib/platform`文件：\n```\nconst uniPluginOptions = global.uniPlugin.options || {}\n```\n\n`global.uniPlugin`值为undefined，我找下uniPlugin的来源，发现全局只赋值了一次，而thread-loader之间的global变量是不共享的。\n\n后来跑去看了源码，看到在设置默认vue.config.js配置时的一段注释：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628307706484-image.png)\n\n看来果真如此，自定义compiler不是在每个线程都执行一遍的，可能只有第一个线程能拿到这个自定义的compiler。\n\n不能用thread-loader的另外一个原因是，uni-app的loader使用了不能序列化的配置，否则会出现loadder内部报错属性undefined之类的bug，正如vue-cli官网解释的那样：\n\n","source":"_posts/uni-app/thread-loader.md","raw":"\n---\ntitle: uni-app无法使用thread-loader\ncategories: uni-app\ntags: [thread-loader, uni-app]\ndate: 2021-6-27\n---\n\n拦截config.module.rules，给每个rule插入thread-loader。\n按照文档的说法，thread-loader有使用限制：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628307624782-image.png)\n\n翻译一下，有以下限制：\n1. 无法在具有输出文件功能的loader上使用\n2. 不能在plugin生成的loader上使）\n3. 不能在访问了webpack配置的loader上使用\n\n暂时先不理会这些限制，先让它跑起来。\n\n 安装最新版（3.0.3），vue.config.js文件添加以下代码：\n ```\nconfig.module.rules[19].use.unshift({loader: 'thread-loader'})\n```\n\n实验需要，随便找了一个/\\.vue$/文件添加thread-loader，运行一下有报错：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628307666164-image.png)\n\n去github上查到类似的issue ：https://github.com/dcloudio/uni-app/issues/2198\n根据别人的解决方案，尝试了升级版本，更换npm源，都没有解决。\n\n无奈只能自己定位错误。\n代码定位到`vue-li-shared/lib/platform`文件：\n```\nconst uniPluginOptions = global.uniPlugin.options || {}\n```\n\n`global.uniPlugin`值为undefined，我找下uniPlugin的来源，发现全局只赋值了一次，而thread-loader之间的global变量是不共享的。\n\n后来跑去看了源码，看到在设置默认vue.config.js配置时的一段注释：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628307706484-image.png)\n\n看来果真如此，自定义compiler不是在每个线程都执行一遍的，可能只有第一个线程能拿到这个自定义的compiler。\n\n不能用thread-loader的另外一个原因是，uni-app的loader使用了不能序列化的配置，否则会出现loadder内部报错属性undefined之类的bug，正如vue-cli官网解释的那样：\n\n","slug":"uni-app/thread-loader","published":1,"updated":"2021-08-07T03:42:35.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc73001gecq8998s0a83","content":"<p>拦截config.module.rules，给每个rule插入thread-loader。<br>按照文档的说法，thread-loader有使用限制：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628307624782-image.png\"></p>\n<p>翻译一下，有以下限制：</p>\n<ol>\n<li>无法在具有输出文件功能的loader上使用</li>\n<li>不能在plugin生成的loader上使）</li>\n<li>不能在访问了webpack配置的loader上使用</li>\n</ol>\n<p>暂时先不理会这些限制，先让它跑起来。</p>\n<p> 安装最新版（3.0.3），vue.config.js文件添加以下代码：<br> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config.module.rules[19].use.unshift(&#123;loader: &#x27;thread-loader&#x27;&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>实验需要，随便找了一个/.vue$/文件添加thread-loader，运行一下有报错：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628307666164-image.png\"></p>\n<p>去github上查到类似的issue ：<a href=\"https://github.com/dcloudio/uni-app/issues/2198\">https://github.com/dcloudio/uni-app/issues/2198</a><br>根据别人的解决方案，尝试了升级版本，更换npm源，都没有解决。</p>\n<p>无奈只能自己定位错误。<br>代码定位到<code>vue-li-shared/lib/platform</code>文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const uniPluginOptions = global.uniPlugin.options || &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>global.uniPlugin</code>值为undefined，我找下uniPlugin的来源，发现全局只赋值了一次，而thread-loader之间的global变量是不共享的。</p>\n<p>后来跑去看了源码，看到在设置默认vue.config.js配置时的一段注释：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628307706484-image.png\"></p>\n<p>看来果真如此，自定义compiler不是在每个线程都执行一遍的，可能只有第一个线程能拿到这个自定义的compiler。</p>\n<p>不能用thread-loader的另外一个原因是，uni-app的loader使用了不能序列化的配置，否则会出现loadder内部报错属性undefined之类的bug，正如vue-cli官网解释的那样：</p>\n","site":{"data":{}},"excerpt":"","more":"<p>拦截config.module.rules，给每个rule插入thread-loader。<br>按照文档的说法，thread-loader有使用限制：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628307624782-image.png\"></p>\n<p>翻译一下，有以下限制：</p>\n<ol>\n<li>无法在具有输出文件功能的loader上使用</li>\n<li>不能在plugin生成的loader上使）</li>\n<li>不能在访问了webpack配置的loader上使用</li>\n</ol>\n<p>暂时先不理会这些限制，先让它跑起来。</p>\n<p> 安装最新版（3.0.3），vue.config.js文件添加以下代码：<br> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config.module.rules[19].use.unshift(&#123;loader: &#x27;thread-loader&#x27;&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>实验需要，随便找了一个/.vue$/文件添加thread-loader，运行一下有报错：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628307666164-image.png\"></p>\n<p>去github上查到类似的issue ：<a href=\"https://github.com/dcloudio/uni-app/issues/2198\">https://github.com/dcloudio/uni-app/issues/2198</a><br>根据别人的解决方案，尝试了升级版本，更换npm源，都没有解决。</p>\n<p>无奈只能自己定位错误。<br>代码定位到<code>vue-li-shared/lib/platform</code>文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const uniPluginOptions = global.uniPlugin.options || &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>global.uniPlugin</code>值为undefined，我找下uniPlugin的来源，发现全局只赋值了一次，而thread-loader之间的global变量是不共享的。</p>\n<p>后来跑去看了源码，看到在设置默认vue.config.js配置时的一段注释：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628307706484-image.png\"></p>\n<p>看来果真如此，自定义compiler不是在每个线程都执行一遍的，可能只有第一个线程能拿到这个自定义的compiler。</p>\n<p>不能用thread-loader的另外一个原因是，uni-app的loader使用了不能序列化的配置，否则会出现loadder内部报错属性undefined之类的bug，正如vue-cli官网解释的那样：</p>\n"},{"title":"defineProperty","date":"2019-11-02T16:00:00.000Z","_content":"定义了如下一个对象：\n\n```javascript\nlet arr = {\n  a: []\n}\nObject.defineProperty(arr, 'a', {\n  get() {\n    console.log('get')\n    return []\n  },\n  set(val) {\n    console.log('set')\n  }\n})\n```\n当执行`arr.a = [1, 2]`时输出\n```\nset\n```\n当执行`arr.a.push(1)`或者`arr.a[0] = 1`时输出\n```\nget\n```\n这说明，Array的元素的增减不会触发setter。\n\n那，为什么在 Vue中，`arr.a[0] = 1`不会触发视图更新，但是`arr.a.push(1)`却可以呢。\n\n> Vue 将被侦听的数组的变异方法进行了包裹，所以它们也将会触发视图更新。这些被包裹过的方法包括： push, pop, shift, unshift, splice, sort, reverse\n\n截取核心的代码实现：\n\n```javascript\n/* observer/array.js */\nimport { def } from '../util/index'\n\nconst arrayProto = Array.prototype\nexport const arrayMethods = Object.create(arrayProto)\n\n[\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n]\n.forEach(function (method) {\n  // cache original method\n  const original = arrayProto[method]\n  def(arrayMethods, method, function mutator (...args) {\n    // 执行默认行为 original: Array.prototype[method]\n    const result = original.apply(this, args)\n    // ob: Observer实例\n    const ob = this.__ob__\n    // 获取数组中新增的元素，并为其添加watcher\n    let inserted\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args\n        break\n      case 'splice':\n        inserted = args.slice(2)\n        break\n    }\n    if (inserted) ob.observeArray(inserted)\n    // notify change\n    ob.dep.notify()\n    return result\n  })\n})\n// ------------------------------------- //\n\n/* util/lang.js */\n/**\n * Define a property.\n */\nexport function def (obj: Object, key: string, val: any, enumerable?: boolean) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  })\n}\n// ------------------------------------- //\n/* observer/index.js */\nimport { arrayMethods } from './array'\n\nfunction protoAugment (target, src: Object, keys: any) {\n  target.__proto__ = src\n}\nfunction copyAugment (target: Object, src: Object, keys: Array<string>) {\n  for (let i = 0, l = keys.length; i < l; i++) {\n    const key = keys[i]\n    def(target, key, src[key])\n  }\n}\n\n// ...\nexport class Observer {\n  value: any;\n  dep: Dep;\n  vmCount: number; // number of vms that has this object as root $data\n\n  constructor (value: any) {\n    this.value = value\n    this.dep = new Dep()\n    this.vmCount = 0\n    def(value, '__ob__', this)\n    if (Array.isArray(value)) {\n      const augment = hasProto\n        ? protoAugment\n        : copyAugment\n      augment(value, arrayMethods, arrayKeys)\n      this.observeArray(value)\n    } else {\n      this.walk(value)\n    }\n  }\n  // ...\n  /**\n   * Observe a list of Array items.\n   */\n  observeArray (items: Array<any>) {\n    for (let i = 0, l = items.length; i < l; i++) {\n      observe(items[i])\n    }\n  }\n}\n```\n输出挂载在Vue实例上的数组和未挂载在Vue实例上的数组进行比较：\n\n```html\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n</head>\n<body>\n  <div></div>\n</body>\n<script>\nnew Vue({\n  data: {\n    arr: [1, 2]\n  },\n  created() {\n    console.log('arr on vue:', this.arr)\n    console.log('arr free:', [1, 2])\n  }\n})\n</script>\n</html>\n```\n输出对比：\n![](/images/2019072201.jpeg)\n![](/images/2019072202.jpeg)\n\n可以看出来，挂载在vue实例上的数组，原型是arrayMethods，arrayMethods继承于Array。\n\n上面输出的结果说明了什么？只有调用了数组上的'push','pop','shift','unshift','splice','sort','reverse'方法，才能触发watcher更新DOM。\n\n可运行下面的代码以做验证：\n```html\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <script src=\"https://cdn.jsdelivr.net/npm/vue\"></script>\n</head>\n<body>\n  <div id=\"app\">\n    <div v-for=\"number in arr\">\n      {{number}}\n    </div>\n    <button @click=\"push\">push</button>\n    <button @click=\"rawPush\">rawPush</button>\n  </div>\n</body>\n<script>\nnew Vue({\n  el: '#app',\n  data: {\n    arr: [1, 2]\n  },\n  methods: {\n    push() {\n      this.arr.push('3')\n    },\n    rawPush() {\n      Array.prototype.push.apply(this.arr, [4])\n    }\n  }\n})\n</script>\n</html>\n```\n上面的代码中，push方法执行后视图立即更新。rawPush方法执行后视图没有更新，但是内容有push成功。下次执行push方法才会把rawPush进去的值渲染出来。\n\n为什么有时候直接对数组的某个元素赋值却发现有更新呢？\n\n原因是存在搭便车的情况。请看如下代码：\n\n```html\n<template>\n  <div>\n    <button @click=\"changeArr\">修改arr</button>\n    <button @click=\"changeProp\">修改prop</button>\n    <button @click=\"changeBoth\">一起修改</button>\n    <div>arr:</div>\n    <div v-for=\"(item, $index) in arr\" :key=\"$index\">{{item}}</div>\n    <div><br>prop:</div>\n    <div>{{JSON.stringify(prop)}}</div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      arr: [1, 2],\n      prop: {\n        a: {\n          b: {\n            c: ''\n          }\n        }\n      }\n    }\n  },\n  methods: {\n    changeProp() {\n      this.prop.a.b.c = 'hello'\n    },\n    changeArr() {\n      this.arr[0] = 111\n    },\n    changeBoth() {\n      this.changeProp()\n      this.changeArr()\n    }\n  }\n}\n</script>\n```\n对数组的某个元素直接修改，视图不会先更新，除非在修改之后其它因素触发了视图更新。\n\n假如，prop属性没有渲染在视图中，那么，点击任何一个按钮都不会刷新视图。","source":"_posts/vue/define-property.md","raw":"---\ntitle: defineProperty\ncategories: vue\ntags: [vue]\ndate: 2019-11-3\n---\n定义了如下一个对象：\n\n```javascript\nlet arr = {\n  a: []\n}\nObject.defineProperty(arr, 'a', {\n  get() {\n    console.log('get')\n    return []\n  },\n  set(val) {\n    console.log('set')\n  }\n})\n```\n当执行`arr.a = [1, 2]`时输出\n```\nset\n```\n当执行`arr.a.push(1)`或者`arr.a[0] = 1`时输出\n```\nget\n```\n这说明，Array的元素的增减不会触发setter。\n\n那，为什么在 Vue中，`arr.a[0] = 1`不会触发视图更新，但是`arr.a.push(1)`却可以呢。\n\n> Vue 将被侦听的数组的变异方法进行了包裹，所以它们也将会触发视图更新。这些被包裹过的方法包括： push, pop, shift, unshift, splice, sort, reverse\n\n截取核心的代码实现：\n\n```javascript\n/* observer/array.js */\nimport { def } from '../util/index'\n\nconst arrayProto = Array.prototype\nexport const arrayMethods = Object.create(arrayProto)\n\n[\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n]\n.forEach(function (method) {\n  // cache original method\n  const original = arrayProto[method]\n  def(arrayMethods, method, function mutator (...args) {\n    // 执行默认行为 original: Array.prototype[method]\n    const result = original.apply(this, args)\n    // ob: Observer实例\n    const ob = this.__ob__\n    // 获取数组中新增的元素，并为其添加watcher\n    let inserted\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args\n        break\n      case 'splice':\n        inserted = args.slice(2)\n        break\n    }\n    if (inserted) ob.observeArray(inserted)\n    // notify change\n    ob.dep.notify()\n    return result\n  })\n})\n// ------------------------------------- //\n\n/* util/lang.js */\n/**\n * Define a property.\n */\nexport function def (obj: Object, key: string, val: any, enumerable?: boolean) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  })\n}\n// ------------------------------------- //\n/* observer/index.js */\nimport { arrayMethods } from './array'\n\nfunction protoAugment (target, src: Object, keys: any) {\n  target.__proto__ = src\n}\nfunction copyAugment (target: Object, src: Object, keys: Array<string>) {\n  for (let i = 0, l = keys.length; i < l; i++) {\n    const key = keys[i]\n    def(target, key, src[key])\n  }\n}\n\n// ...\nexport class Observer {\n  value: any;\n  dep: Dep;\n  vmCount: number; // number of vms that has this object as root $data\n\n  constructor (value: any) {\n    this.value = value\n    this.dep = new Dep()\n    this.vmCount = 0\n    def(value, '__ob__', this)\n    if (Array.isArray(value)) {\n      const augment = hasProto\n        ? protoAugment\n        : copyAugment\n      augment(value, arrayMethods, arrayKeys)\n      this.observeArray(value)\n    } else {\n      this.walk(value)\n    }\n  }\n  // ...\n  /**\n   * Observe a list of Array items.\n   */\n  observeArray (items: Array<any>) {\n    for (let i = 0, l = items.length; i < l; i++) {\n      observe(items[i])\n    }\n  }\n}\n```\n输出挂载在Vue实例上的数组和未挂载在Vue实例上的数组进行比较：\n\n```html\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n</head>\n<body>\n  <div></div>\n</body>\n<script>\nnew Vue({\n  data: {\n    arr: [1, 2]\n  },\n  created() {\n    console.log('arr on vue:', this.arr)\n    console.log('arr free:', [1, 2])\n  }\n})\n</script>\n</html>\n```\n输出对比：\n![](/images/2019072201.jpeg)\n![](/images/2019072202.jpeg)\n\n可以看出来，挂载在vue实例上的数组，原型是arrayMethods，arrayMethods继承于Array。\n\n上面输出的结果说明了什么？只有调用了数组上的'push','pop','shift','unshift','splice','sort','reverse'方法，才能触发watcher更新DOM。\n\n可运行下面的代码以做验证：\n```html\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <script src=\"https://cdn.jsdelivr.net/npm/vue\"></script>\n</head>\n<body>\n  <div id=\"app\">\n    <div v-for=\"number in arr\">\n      {{number}}\n    </div>\n    <button @click=\"push\">push</button>\n    <button @click=\"rawPush\">rawPush</button>\n  </div>\n</body>\n<script>\nnew Vue({\n  el: '#app',\n  data: {\n    arr: [1, 2]\n  },\n  methods: {\n    push() {\n      this.arr.push('3')\n    },\n    rawPush() {\n      Array.prototype.push.apply(this.arr, [4])\n    }\n  }\n})\n</script>\n</html>\n```\n上面的代码中，push方法执行后视图立即更新。rawPush方法执行后视图没有更新，但是内容有push成功。下次执行push方法才会把rawPush进去的值渲染出来。\n\n为什么有时候直接对数组的某个元素赋值却发现有更新呢？\n\n原因是存在搭便车的情况。请看如下代码：\n\n```html\n<template>\n  <div>\n    <button @click=\"changeArr\">修改arr</button>\n    <button @click=\"changeProp\">修改prop</button>\n    <button @click=\"changeBoth\">一起修改</button>\n    <div>arr:</div>\n    <div v-for=\"(item, $index) in arr\" :key=\"$index\">{{item}}</div>\n    <div><br>prop:</div>\n    <div>{{JSON.stringify(prop)}}</div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      arr: [1, 2],\n      prop: {\n        a: {\n          b: {\n            c: ''\n          }\n        }\n      }\n    }\n  },\n  methods: {\n    changeProp() {\n      this.prop.a.b.c = 'hello'\n    },\n    changeArr() {\n      this.arr[0] = 111\n    },\n    changeBoth() {\n      this.changeProp()\n      this.changeArr()\n    }\n  }\n}\n</script>\n```\n对数组的某个元素直接修改，视图不会先更新，除非在修改之后其它因素触发了视图更新。\n\n假如，prop属性没有渲染在视图中，那么，点击任何一个按钮都不会刷新视图。","slug":"vue/define-property","published":1,"updated":"2021-06-14T02:12:36.540Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc73001hecq875xpd7gn","content":"<p>定义了如下一个对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: []</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(arr, <span class=\"string\">&#x27;a&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;get&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> []</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">val</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;set&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>当执行<code>arr.a = [1, 2]</code>时输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set</span><br></pre></td></tr></table></figure>\n<p>当执行<code>arr.a.push(1)</code>或者<code>arr.a[0] = 1</code>时输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get</span><br></pre></td></tr></table></figure>\n<p>这说明，Array的元素的增减不会触发setter。</p>\n<p>那，为什么在 Vue中，<code>arr.a[0] = 1</code>不会触发视图更新，但是<code>arr.a.push(1)</code>却可以呢。</p>\n<blockquote>\n<p>Vue 将被侦听的数组的变异方法进行了包裹，所以它们也将会触发视图更新。这些被包裹过的方法包括： push, pop, shift, unshift, splice, sort, reverse</p>\n</blockquote>\n<p>截取核心的代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* observer/array.js */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; def &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../util/index&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arrayProto = <span class=\"built_in\">Array</span>.prototype</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> arrayMethods = <span class=\"built_in\">Object</span>.create(arrayProto)</span><br><span class=\"line\"></span><br><span class=\"line\">[</span><br><span class=\"line\">  <span class=\"string\">&#x27;push&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;pop&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;shift&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;unshift&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;splice&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;sort&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;reverse&#x27;</span></span><br><span class=\"line\">]</span><br><span class=\"line\">.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">method</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// cache original method</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> original = arrayProto[method]</span><br><span class=\"line\">  def(arrayMethods, method, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mutator</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行默认行为 original: Array.prototype[method]</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = original.apply(<span class=\"built_in\">this</span>, args)</span><br><span class=\"line\">    <span class=\"comment\">// ob: Observer实例</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> ob = <span class=\"built_in\">this</span>.__ob__</span><br><span class=\"line\">    <span class=\"comment\">// 获取数组中新增的元素，并为其添加watcher</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> inserted</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (method) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;push&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;unshift&#x27;</span>:</span><br><span class=\"line\">        inserted = args</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;splice&#x27;</span>:</span><br><span class=\"line\">        inserted = args.slice(<span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (inserted) ob.observeArray(inserted)</span><br><span class=\"line\">    <span class=\"comment\">// notify change</span></span><br><span class=\"line\">    ob.dep.notify()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// ------------------------------------- //</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* util/lang.js */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Define a property.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">def</span> (<span class=\"params\">obj: <span class=\"built_in\">Object</span>, key: string, val: any, enumerable?: boolean</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(obj, key, &#123;</span><br><span class=\"line\">    <span class=\"attr\">value</span>: val,</span><br><span class=\"line\">    <span class=\"attr\">enumerable</span>: !!enumerable,</span><br><span class=\"line\">    <span class=\"attr\">writable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ------------------------------------- //</span></span><br><span class=\"line\"><span class=\"comment\">/* observer/index.js */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; arrayMethods &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./array&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">protoAugment</span> (<span class=\"params\">target, src: <span class=\"built_in\">Object</span>, keys: any</span>) </span>&#123;</span><br><span class=\"line\">  target.__proto__ = src</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copyAugment</span> (<span class=\"params\">target: <span class=\"built_in\">Object</span>, src: <span class=\"built_in\">Object</span>, keys: <span class=\"built_in\">Array</span>&lt;string&gt;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = keys.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = keys[i]</span><br><span class=\"line\">    def(target, key, src[key])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: any;</span><br><span class=\"line\">  dep: Dep;</span><br><span class=\"line\">  vmCount: number; <span class=\"comment\">// number of vms that has this object as root $data</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title\">constructor</span> (<span class=\"params\">value: any</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.value = value</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.dep = <span class=\"keyword\">new</span> Dep()</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.vmCount = <span class=\"number\">0</span></span><br><span class=\"line\">    def(value, <span class=\"string\">&#x27;__ob__&#x27;</span>, <span class=\"built_in\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(value)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> augment = hasProto</span><br><span class=\"line\">        ? protoAugment</span><br><span class=\"line\">        : copyAugment</span><br><span class=\"line\">      augment(value, arrayMethods, arrayKeys)</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.observeArray(value)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.walk(value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Observe a list of Array items.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  observeArray (items: <span class=\"built_in\">Array</span>&lt;any&gt;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = items.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">      observe(items[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出挂载在Vue实例上的数组和未挂载在Vue实例上的数组进行比较：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">arr</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;arr on vue:&#x27;</span>, <span class=\"built_in\">this</span>.arr)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;arr free:&#x27;</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>])</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">&#125;)</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>输出对比：<br><img src=\"/images/2019072201.jpeg\"><br><img src=\"/images/2019072202.jpeg\"></p>\n<p>可以看出来，挂载在vue实例上的数组，原型是arrayMethods，arrayMethods继承于Array。</p>\n<p>上面输出的结果说明了什么？只有调用了数组上的’push’,’pop’,’shift’,’unshift’,’splice’,’sort’,’reverse’方法，才能触发watcher更新DOM。</p>\n<p>可运行下面的代码以做验证：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;number in arr&quot;</span>&gt;</span></span><br><span class=\"line\">      &#123;&#123;number&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;push&quot;</span>&gt;</span>push<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;rawPush&quot;</span>&gt;</span>rawPush<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">arr</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">push</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">this</span>.arr.push(<span class=\"string\">&#x27;3&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">rawPush</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">Array</span>.prototype.push.apply(<span class=\"built_in\">this</span>.arr, [<span class=\"number\">4</span>])</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">&#125;)</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码中，push方法执行后视图立即更新。rawPush方法执行后视图没有更新，但是内容有push成功。下次执行push方法才会把rawPush进去的值渲染出来。</p>\n<p>为什么有时候直接对数组的某个元素赋值却发现有更新呢？</p>\n<p>原因是存在搭便车的情况。请看如下代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;changeArr&quot;</span>&gt;</span>修改arr<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;changeProp&quot;</span>&gt;</span>修改prop<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;changeBoth&quot;</span>&gt;</span>一起修改<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>arr:<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item, $index) in arr&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;$index&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>prop:<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;JSON.stringify(prop)&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">arr</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>],</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">prop</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">a</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"attr\">b</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">c</span>: <span class=\"string\">&#x27;&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">          &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">changeProp</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">this</span>.prop.a.b.c = <span class=\"string\">&#x27;hello&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">changeArr</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">this</span>.arr[<span class=\"number\">0</span>] = <span class=\"number\">111</span></span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">changeBoth</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">this</span>.changeProp()</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">this</span>.changeArr()</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>对数组的某个元素直接修改，视图不会先更新，除非在修改之后其它因素触发了视图更新。</p>\n<p>假如，prop属性没有渲染在视图中，那么，点击任何一个按钮都不会刷新视图。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>定义了如下一个对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: []</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(arr, <span class=\"string\">&#x27;a&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;get&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> []</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">val</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;set&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>当执行<code>arr.a = [1, 2]</code>时输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set</span><br></pre></td></tr></table></figure>\n<p>当执行<code>arr.a.push(1)</code>或者<code>arr.a[0] = 1</code>时输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get</span><br></pre></td></tr></table></figure>\n<p>这说明，Array的元素的增减不会触发setter。</p>\n<p>那，为什么在 Vue中，<code>arr.a[0] = 1</code>不会触发视图更新，但是<code>arr.a.push(1)</code>却可以呢。</p>\n<blockquote>\n<p>Vue 将被侦听的数组的变异方法进行了包裹，所以它们也将会触发视图更新。这些被包裹过的方法包括： push, pop, shift, unshift, splice, sort, reverse</p>\n</blockquote>\n<p>截取核心的代码实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* observer/array.js */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; def &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../util/index&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arrayProto = <span class=\"built_in\">Array</span>.prototype</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> arrayMethods = <span class=\"built_in\">Object</span>.create(arrayProto)</span><br><span class=\"line\"></span><br><span class=\"line\">[</span><br><span class=\"line\">  <span class=\"string\">&#x27;push&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;pop&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;shift&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;unshift&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;splice&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;sort&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;reverse&#x27;</span></span><br><span class=\"line\">]</span><br><span class=\"line\">.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">method</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// cache original method</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> original = arrayProto[method]</span><br><span class=\"line\">  def(arrayMethods, method, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mutator</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行默认行为 original: Array.prototype[method]</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = original.apply(<span class=\"built_in\">this</span>, args)</span><br><span class=\"line\">    <span class=\"comment\">// ob: Observer实例</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> ob = <span class=\"built_in\">this</span>.__ob__</span><br><span class=\"line\">    <span class=\"comment\">// 获取数组中新增的元素，并为其添加watcher</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> inserted</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (method) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;push&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;unshift&#x27;</span>:</span><br><span class=\"line\">        inserted = args</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&#x27;splice&#x27;</span>:</span><br><span class=\"line\">        inserted = args.slice(<span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (inserted) ob.observeArray(inserted)</span><br><span class=\"line\">    <span class=\"comment\">// notify change</span></span><br><span class=\"line\">    ob.dep.notify()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// ------------------------------------- //</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* util/lang.js */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Define a property.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">def</span> (<span class=\"params\">obj: <span class=\"built_in\">Object</span>, key: string, val: any, enumerable?: boolean</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(obj, key, &#123;</span><br><span class=\"line\">    <span class=\"attr\">value</span>: val,</span><br><span class=\"line\">    <span class=\"attr\">enumerable</span>: !!enumerable,</span><br><span class=\"line\">    <span class=\"attr\">writable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ------------------------------------- //</span></span><br><span class=\"line\"><span class=\"comment\">/* observer/index.js */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; arrayMethods &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./array&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">protoAugment</span> (<span class=\"params\">target, src: <span class=\"built_in\">Object</span>, keys: any</span>) </span>&#123;</span><br><span class=\"line\">  target.__proto__ = src</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copyAugment</span> (<span class=\"params\">target: <span class=\"built_in\">Object</span>, src: <span class=\"built_in\">Object</span>, keys: <span class=\"built_in\">Array</span>&lt;string&gt;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = keys.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = keys[i]</span><br><span class=\"line\">    def(target, key, src[key])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: any;</span><br><span class=\"line\">  dep: Dep;</span><br><span class=\"line\">  vmCount: number; <span class=\"comment\">// number of vms that has this object as root $data</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title\">constructor</span> (<span class=\"params\">value: any</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.value = value</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.dep = <span class=\"keyword\">new</span> Dep()</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.vmCount = <span class=\"number\">0</span></span><br><span class=\"line\">    def(value, <span class=\"string\">&#x27;__ob__&#x27;</span>, <span class=\"built_in\">this</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(value)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> augment = hasProto</span><br><span class=\"line\">        ? protoAugment</span><br><span class=\"line\">        : copyAugment</span><br><span class=\"line\">      augment(value, arrayMethods, arrayKeys)</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.observeArray(value)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.walk(value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Observe a list of Array items.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  observeArray (items: <span class=\"built_in\">Array</span>&lt;any&gt;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = items.length; i &lt; l; i++) &#123;</span><br><span class=\"line\">      observe(items[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出挂载在Vue实例上的数组和未挂载在Vue实例上的数组进行比较：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">arr</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;arr on vue:&#x27;</span>, <span class=\"built_in\">this</span>.arr)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;arr free:&#x27;</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>])</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">&#125;)</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>输出对比：<br><img src=\"/images/2019072201.jpeg\"><br><img src=\"/images/2019072202.jpeg\"></p>\n<p>可以看出来，挂载在vue实例上的数组，原型是arrayMethods，arrayMethods继承于Array。</p>\n<p>上面输出的结果说明了什么？只有调用了数组上的’push’,’pop’,’shift’,’unshift’,’splice’,’sort’,’reverse’方法，才能触发watcher更新DOM。</p>\n<p>可运行下面的代码以做验证：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;number in arr&quot;</span>&gt;</span></span><br><span class=\"line\">      &#123;&#123;number&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;push&quot;</span>&gt;</span>push<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;rawPush&quot;</span>&gt;</span>rawPush<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">arr</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">push</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">this</span>.arr.push(<span class=\"string\">&#x27;3&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">rawPush</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">Array</span>.prototype.push.apply(<span class=\"built_in\">this</span>.arr, [<span class=\"number\">4</span>])</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">&#125;)</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码中，push方法执行后视图立即更新。rawPush方法执行后视图没有更新，但是内容有push成功。下次执行push方法才会把rawPush进去的值渲染出来。</p>\n<p>为什么有时候直接对数组的某个元素赋值却发现有更新呢？</p>\n<p>原因是存在搭便车的情况。请看如下代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;changeArr&quot;</span>&gt;</span>修改arr<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;changeProp&quot;</span>&gt;</span>修改prop<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;changeBoth&quot;</span>&gt;</span>一起修改<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>arr:<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item, $index) in arr&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;$index&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>prop:<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;JSON.stringify(prop)&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">arr</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>],</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">prop</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">a</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"attr\">b</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">c</span>: <span class=\"string\">&#x27;&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">          &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">changeProp</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">this</span>.prop.a.b.c = <span class=\"string\">&#x27;hello&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">changeArr</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">this</span>.arr[<span class=\"number\">0</span>] = <span class=\"number\">111</span></span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">changeBoth</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">this</span>.changeProp()</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">this</span>.changeArr()</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>对数组的某个元素直接修改，视图不会先更新，除非在修改之后其它因素触发了视图更新。</p>\n<p>假如，prop属性没有渲染在视图中，那么，点击任何一个按钮都不会刷新视图。</p>\n"},{"title":"手写defineReactive","date":"2019-11-02T16:00:00.000Z","_content":"\ndefineReactive是Vue响应式的核心。我们手写一个简单的defineReactive：\n\n```\nlet obj = {\n  c: 2\n}\n/**\n* 将获取到的变量值渲染到视图\n**/\nfunction showGet(key, val) {\n  console.log(key, 'get newVal', val)\n  let bodyEle = window.document.body\n  bodyEle && (bodyEle.innerText = bodyEle.innerText + '\\n' + key + ' get newVal' + val)\n}\n\n/**\n* 将更新后的变量值渲染到视图\n**/\nfunction showSet(key, newVal) {\n  console.log(key, 'set newVal', newVal)\n  let bodyEle = window.document.body\n  bodyEle && (bodyEle.innerText = bodyEle.innerText + '\\n' + key + ' set newVal' + newVal)\n}\n\nfunction defineReactive(obj, key) {\n  let val = obj[key]\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function() {\n      showGet(key, val)\n      return val\n    },\n    set: function (newVal) {\n      val = newVal\n      showSet(key, newVal)\n    }\n  })\n}\n\nlet keys = Object.keys(obj)\nfor (const key of keys) {\n  defineReactive(obj, key)\n}\n\nobj.c = 3\nconsole.log(obj.c)\n\n\n```","source":"_posts/vue/define-reactive.md","raw":"---\ntitle: 手写defineReactive\ncategories: vue\ntags: [vue]\ndate: 2019-11-3\n---\n\ndefineReactive是Vue响应式的核心。我们手写一个简单的defineReactive：\n\n```\nlet obj = {\n  c: 2\n}\n/**\n* 将获取到的变量值渲染到视图\n**/\nfunction showGet(key, val) {\n  console.log(key, 'get newVal', val)\n  let bodyEle = window.document.body\n  bodyEle && (bodyEle.innerText = bodyEle.innerText + '\\n' + key + ' get newVal' + val)\n}\n\n/**\n* 将更新后的变量值渲染到视图\n**/\nfunction showSet(key, newVal) {\n  console.log(key, 'set newVal', newVal)\n  let bodyEle = window.document.body\n  bodyEle && (bodyEle.innerText = bodyEle.innerText + '\\n' + key + ' set newVal' + newVal)\n}\n\nfunction defineReactive(obj, key) {\n  let val = obj[key]\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function() {\n      showGet(key, val)\n      return val\n    },\n    set: function (newVal) {\n      val = newVal\n      showSet(key, newVal)\n    }\n  })\n}\n\nlet keys = Object.keys(obj)\nfor (const key of keys) {\n  defineReactive(obj, key)\n}\n\nobj.c = 3\nconsole.log(obj.c)\n\n\n```","slug":"vue/define-reactive","published":1,"updated":"2021-06-14T06:13:34.262Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc74001iecq8h7u53pnd","content":"<p>defineReactive是Vue响应式的核心。我们手写一个简单的defineReactive：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;</span><br><span class=\"line\">  c: 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/**</span><br><span class=\"line\">* 将获取到的变量值渲染到视图</span><br><span class=\"line\">**/</span><br><span class=\"line\">function showGet(key, val) &#123;</span><br><span class=\"line\">  console.log(key, &#x27;get newVal&#x27;, val)</span><br><span class=\"line\">  let bodyEle = window.document.body</span><br><span class=\"line\">  bodyEle &amp;&amp; (bodyEle.innerText = bodyEle.innerText + &#x27;\\n&#x27; + key + &#x27; get newVal&#x27; + val)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">* 将更新后的变量值渲染到视图</span><br><span class=\"line\">**/</span><br><span class=\"line\">function showSet(key, newVal) &#123;</span><br><span class=\"line\">  console.log(key, &#x27;set newVal&#x27;, newVal)</span><br><span class=\"line\">  let bodyEle = window.document.body</span><br><span class=\"line\">  bodyEle &amp;&amp; (bodyEle.innerText = bodyEle.innerText + &#x27;\\n&#x27; + key + &#x27; set newVal&#x27; + newVal)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function defineReactive(obj, key) &#123;</span><br><span class=\"line\">  let val = obj[key]</span><br><span class=\"line\">  Object.defineProperty(obj, key, &#123;</span><br><span class=\"line\">    enumerable: true,</span><br><span class=\"line\">    configurable: true,</span><br><span class=\"line\">    get: function() &#123;</span><br><span class=\"line\">      showGet(key, val)</span><br><span class=\"line\">      return val</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    set: function (newVal) &#123;</span><br><span class=\"line\">      val = newVal</span><br><span class=\"line\">      showSet(key, newVal)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let keys = Object.keys(obj)</span><br><span class=\"line\">for (const key of keys) &#123;</span><br><span class=\"line\">  defineReactive(obj, key)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.c = 3</span><br><span class=\"line\">console.log(obj.c)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>defineReactive是Vue响应式的核心。我们手写一个简单的defineReactive：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let obj = &#123;</span><br><span class=\"line\">  c: 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/**</span><br><span class=\"line\">* 将获取到的变量值渲染到视图</span><br><span class=\"line\">**/</span><br><span class=\"line\">function showGet(key, val) &#123;</span><br><span class=\"line\">  console.log(key, &#x27;get newVal&#x27;, val)</span><br><span class=\"line\">  let bodyEle = window.document.body</span><br><span class=\"line\">  bodyEle &amp;&amp; (bodyEle.innerText = bodyEle.innerText + &#x27;\\n&#x27; + key + &#x27; get newVal&#x27; + val)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">* 将更新后的变量值渲染到视图</span><br><span class=\"line\">**/</span><br><span class=\"line\">function showSet(key, newVal) &#123;</span><br><span class=\"line\">  console.log(key, &#x27;set newVal&#x27;, newVal)</span><br><span class=\"line\">  let bodyEle = window.document.body</span><br><span class=\"line\">  bodyEle &amp;&amp; (bodyEle.innerText = bodyEle.innerText + &#x27;\\n&#x27; + key + &#x27; set newVal&#x27; + newVal)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function defineReactive(obj, key) &#123;</span><br><span class=\"line\">  let val = obj[key]</span><br><span class=\"line\">  Object.defineProperty(obj, key, &#123;</span><br><span class=\"line\">    enumerable: true,</span><br><span class=\"line\">    configurable: true,</span><br><span class=\"line\">    get: function() &#123;</span><br><span class=\"line\">      showGet(key, val)</span><br><span class=\"line\">      return val</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    set: function (newVal) &#123;</span><br><span class=\"line\">      val = newVal</span><br><span class=\"line\">      showSet(key, newVal)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let keys = Object.keys(obj)</span><br><span class=\"line\">for (const key of keys) &#123;</span><br><span class=\"line\">  defineReactive(obj, key)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.c = 3</span><br><span class=\"line\">console.log(obj.c)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"vue定义非响应式属性的方法","date":"2021-06-14T16:00:00.000Z","_content":"\n1. created钩子函数中定义\n```\ncreated() {\n    // 注意data中不要声明该变量名\n    this.testData = 'testData'\n}\n```\n不能在mounted钩子中定义，否则，会在首次渲染template的时候报错\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628308848610-image.png)\n\n2. 自定义options\n```\n<template>\n  <div id=\"app\">\n    <p v-for=\"item in $options.list\" :key=\"item.value\">{{ item.value }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"app\",\n  data: () => {\n      return {\n      }\n  },\n  list: []\n}\n</script>\n```\n\n\n3. Object.freeze\n```\n<template>\n  <div id=\"app\">\n    <div v-for=\"(item, index) in list\" :key=\"index\">\n      {{ item.a }}\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"app\",\n  data() {\n    return {\n      list: Object.freeze([\n        { a: 1 },\n        { a: 1 },\n        { a: 1 },\n        { a: 1 }\n      ])\n    }\n  },\n  mounted() {\n    this.list = [\n      { a: 2 },\n      { a: 2 },\n      { a: 2 },\n      { a: 2 }\n    ].map(item => {\n          return Object.freeze(item)\n    })\n    this.list[0].a = 111 // 此行代码不会生效\n    console.log(this)\n    console.log(this.list)\n  }\n}\n</script>\n```\n\n\n在mounted钩子中，\n组件实例上list具有getter和setter属性，说明list属性值是响应式的，就是说，直接修改List的值是可以的。\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628308871725-image.png)\n\n输出的list指向的数组内不具有getter和setter属性，说明list值中的元素是非响应式的。\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628308895336-image.png)\n\n通过这种特性，可以让list整块修改触发视图响应，但修改/删除/新增数组内的某个元素DOM都是不会响应的。\nObject.freeze是浅冻结，\n```\nconsole.log(Object.isExtensible(this.list)) // 输出false\nconsole.log(Object.isExtensible(this.list[0])) // 输出true\n```\n\n如果要更高提升性能，关键还是要实现深冻结:\n```\nlist: [\n    { value: 1 },\n    { value: 2 }\n].map(item => {\n  return Object.freeze(item)\n})\n```\n\n注意： data属性加上_或者$前缀，该属性依旧是响应式，只是不能直接通过this访问\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628308928462-image.png)\n","source":"_posts/vue/define-unreactive.md","raw":"---\ntitle: vue定义非响应式属性的方法\ncategories: vue\ntags: [vue]\ndate: 2021-6-15\n---\n\n1. created钩子函数中定义\n```\ncreated() {\n    // 注意data中不要声明该变量名\n    this.testData = 'testData'\n}\n```\n不能在mounted钩子中定义，否则，会在首次渲染template的时候报错\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628308848610-image.png)\n\n2. 自定义options\n```\n<template>\n  <div id=\"app\">\n    <p v-for=\"item in $options.list\" :key=\"item.value\">{{ item.value }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"app\",\n  data: () => {\n      return {\n      }\n  },\n  list: []\n}\n</script>\n```\n\n\n3. Object.freeze\n```\n<template>\n  <div id=\"app\">\n    <div v-for=\"(item, index) in list\" :key=\"index\">\n      {{ item.a }}\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"app\",\n  data() {\n    return {\n      list: Object.freeze([\n        { a: 1 },\n        { a: 1 },\n        { a: 1 },\n        { a: 1 }\n      ])\n    }\n  },\n  mounted() {\n    this.list = [\n      { a: 2 },\n      { a: 2 },\n      { a: 2 },\n      { a: 2 }\n    ].map(item => {\n          return Object.freeze(item)\n    })\n    this.list[0].a = 111 // 此行代码不会生效\n    console.log(this)\n    console.log(this.list)\n  }\n}\n</script>\n```\n\n\n在mounted钩子中，\n组件实例上list具有getter和setter属性，说明list属性值是响应式的，就是说，直接修改List的值是可以的。\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628308871725-image.png)\n\n输出的list指向的数组内不具有getter和setter属性，说明list值中的元素是非响应式的。\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628308895336-image.png)\n\n通过这种特性，可以让list整块修改触发视图响应，但修改/删除/新增数组内的某个元素DOM都是不会响应的。\nObject.freeze是浅冻结，\n```\nconsole.log(Object.isExtensible(this.list)) // 输出false\nconsole.log(Object.isExtensible(this.list[0])) // 输出true\n```\n\n如果要更高提升性能，关键还是要实现深冻结:\n```\nlist: [\n    { value: 1 },\n    { value: 2 }\n].map(item => {\n  return Object.freeze(item)\n})\n```\n\n注意： data属性加上_或者$前缀，该属性依旧是响应式，只是不能直接通过this访问\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628308928462-image.png)\n","slug":"vue/define-unreactive","published":1,"updated":"2021-08-07T04:02:12.800Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc74001jecq8dfb4gal4","content":"<ol>\n<li><p>created钩子函数中定义</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">created() &#123;</span><br><span class=\"line\">    // 注意data中不要声明该变量名</span><br><span class=\"line\">    this.testData = &#x27;testData&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不能在mounted钩子中定义，否则，会在首次渲染template的时候报错<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628308848610-image.png\"></p>\n</li>\n<li><p>自定义options</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;p v-for=&quot;item in $options.list&quot; :key=&quot;item.value&quot;&gt;&#123;&#123; item.value &#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &quot;app&quot;,</span><br><span class=\"line\">  data: () =&gt; &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  list: []</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ol start=\"3\">\n<li>Object.freeze<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;div v-for=&quot;(item, index) in list&quot; :key=&quot;index&quot;&gt;</span><br><span class=\"line\">      &#123;&#123; item.a &#125;&#125;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &quot;app&quot;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      list: Object.freeze([</span><br><span class=\"line\">        &#123; a: 1 &#125;,</span><br><span class=\"line\">        &#123; a: 1 &#125;,</span><br><span class=\"line\">        &#123; a: 1 &#125;,</span><br><span class=\"line\">        &#123; a: 1 &#125;</span><br><span class=\"line\">      ])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    this.list = [</span><br><span class=\"line\">      &#123; a: 2 &#125;,</span><br><span class=\"line\">      &#123; a: 2 &#125;,</span><br><span class=\"line\">      &#123; a: 2 &#125;,</span><br><span class=\"line\">      &#123; a: 2 &#125;</span><br><span class=\"line\">    ].map(item =&gt; &#123;</span><br><span class=\"line\">          return Object.freeze(item)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    this.list[0].a = 111 // 此行代码不会生效</span><br><span class=\"line\">    console.log(this)</span><br><span class=\"line\">    console.log(this.list)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>在mounted钩子中，<br>组件实例上list具有getter和setter属性，说明list属性值是响应式的，就是说，直接修改List的值是可以的。</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628308871725-image.png\"></p>\n<p>输出的list指向的数组内不具有getter和setter属性，说明list值中的元素是非响应式的。<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628308895336-image.png\"></p>\n<p>通过这种特性，可以让list整块修改触发视图响应，但修改/删除/新增数组内的某个元素DOM都是不会响应的。<br>Object.freeze是浅冻结，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(Object.isExtensible(this.list)) // 输出false</span><br><span class=\"line\">console.log(Object.isExtensible(this.list[0])) // 输出true</span><br></pre></td></tr></table></figure>\n\n<p>如果要更高提升性能，关键还是要实现深冻结:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list: [</span><br><span class=\"line\">    &#123; value: 1 &#125;,</span><br><span class=\"line\">    &#123; value: 2 &#125;</span><br><span class=\"line\">].map(item =&gt; &#123;</span><br><span class=\"line\">  return Object.freeze(item)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>注意： data属性加上_或者$前缀，该属性依旧是响应式，只是不能直接通过this访问</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628308928462-image.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>created钩子函数中定义</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">created() &#123;</span><br><span class=\"line\">    // 注意data中不要声明该变量名</span><br><span class=\"line\">    this.testData = &#x27;testData&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不能在mounted钩子中定义，否则，会在首次渲染template的时候报错<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628308848610-image.png\"></p>\n</li>\n<li><p>自定义options</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;p v-for=&quot;item in $options.list&quot; :key=&quot;item.value&quot;&gt;&#123;&#123; item.value &#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &quot;app&quot;,</span><br><span class=\"line\">  data: () =&gt; &#123;</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  list: []</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ol start=\"3\">\n<li>Object.freeze<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">    &lt;div v-for=&quot;(item, index) in list&quot; :key=&quot;index&quot;&gt;</span><br><span class=\"line\">      &#123;&#123; item.a &#125;&#125;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &quot;app&quot;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      list: Object.freeze([</span><br><span class=\"line\">        &#123; a: 1 &#125;,</span><br><span class=\"line\">        &#123; a: 1 &#125;,</span><br><span class=\"line\">        &#123; a: 1 &#125;,</span><br><span class=\"line\">        &#123; a: 1 &#125;</span><br><span class=\"line\">      ])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    this.list = [</span><br><span class=\"line\">      &#123; a: 2 &#125;,</span><br><span class=\"line\">      &#123; a: 2 &#125;,</span><br><span class=\"line\">      &#123; a: 2 &#125;,</span><br><span class=\"line\">      &#123; a: 2 &#125;</span><br><span class=\"line\">    ].map(item =&gt; &#123;</span><br><span class=\"line\">          return Object.freeze(item)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    this.list[0].a = 111 // 此行代码不会生效</span><br><span class=\"line\">    console.log(this)</span><br><span class=\"line\">    console.log(this.list)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>在mounted钩子中，<br>组件实例上list具有getter和setter属性，说明list属性值是响应式的，就是说，直接修改List的值是可以的。</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628308871725-image.png\"></p>\n<p>输出的list指向的数组内不具有getter和setter属性，说明list值中的元素是非响应式的。<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628308895336-image.png\"></p>\n<p>通过这种特性，可以让list整块修改触发视图响应，但修改/删除/新增数组内的某个元素DOM都是不会响应的。<br>Object.freeze是浅冻结，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(Object.isExtensible(this.list)) // 输出false</span><br><span class=\"line\">console.log(Object.isExtensible(this.list[0])) // 输出true</span><br></pre></td></tr></table></figure>\n\n<p>如果要更高提升性能，关键还是要实现深冻结:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list: [</span><br><span class=\"line\">    &#123; value: 1 &#125;,</span><br><span class=\"line\">    &#123; value: 2 &#125;</span><br><span class=\"line\">].map(item =&gt; &#123;</span><br><span class=\"line\">  return Object.freeze(item)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>注意： data属性加上_或者$前缀，该属性依旧是响应式，只是不能直接通过this访问</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628308928462-image.png\"></p>\n"},{"title":"vue-cli 全局less,sass文件的注入方法","date":"2021-06-21T16:00:00.000Z","_content":"\n\n全局的mixins和variable非常有用，但是在每个文件手动引入就很费劲，需要一个一劳永逸的办法直接在编译时插入文件开头。\n\n[style-resources-loader](https://github.com/yenshih/style-resources-loader)可以解决这个问题。\n\n```\n// webpack-chain语法\nconst types = ['vue-modules', 'vue', 'normal-modules', 'normal']\n\n// 业务代码注入全局变量\ntypes.forEach(type => {\n  config.module.rule('less').oneOf(type)\n  .use('style-resource')\n  .loader('style-resources-loader')\n  .options({\n      patterns: [\n          path.resolve(__dirname, `./src/style/variables.less`),\n          path.resolve(__dirname, './src/style/mixins.less')\n      ]\n  })\n})\n\n```\n\n'vue-modules', 'vue', 'normal-modules', 'normal'这几种规则类型都是vue/cli-service定义的：\n\n```\nfunction createCSSRule (lang, test, loader, options) {\n    const baseRule = webpackConfig.module.rule(lang).test(test)\n    \n    // rules for <style lang=\"module\">\n    const vueModulesRule = baseRule.oneOf('vue-modules').resourceQuery(/module/)\n    applyLoaders(vueModulesRule, true)\n    \n    // rules for <style>\n    const vueNormalRule = baseRule.oneOf('vue').resourceQuery(/\\?vue/)\n    applyLoaders(vueNormalRule, false)\n    \n    // rules for *.module.* files\n    const extModulesRule = baseRule.oneOf('normal-modules').test(/\\.module\\.\\w+$/)\n    applyLoaders(extModulesRule, true)\n    \n    // rules for normal CSS imports\n    const normalRule = baseRule.oneOf('normal')\n    applyLoaders(normalRule, modules)\n    \n    // ...\n}\n```\nvue-cli为`css`,`postcss`,`scss`,`sass`,`less`,`stylus`这几种语言都定义了'vue-modules', 'vue', 'normal-modules', 'normal'这4种子规则。\n\n我们最常用的是`vue`，表示.vue文件中的style标签。\n\n## 参考\n[自动化导入](https://cli.vuejs.org/zh/guide/css.html#%E8%87%AA%E5%8A%A8%E5%8C%96%E5%AF%BC%E5%85%A5)","source":"_posts/vue/global-style-file.md","raw":"\n---\ntitle: vue-cli 全局less,sass文件的注入方法\ncategories: 工程化\ntags: [全局样式, vue-cli]\ndate: 2021-6-22\n---\n\n\n全局的mixins和variable非常有用，但是在每个文件手动引入就很费劲，需要一个一劳永逸的办法直接在编译时插入文件开头。\n\n[style-resources-loader](https://github.com/yenshih/style-resources-loader)可以解决这个问题。\n\n```\n// webpack-chain语法\nconst types = ['vue-modules', 'vue', 'normal-modules', 'normal']\n\n// 业务代码注入全局变量\ntypes.forEach(type => {\n  config.module.rule('less').oneOf(type)\n  .use('style-resource')\n  .loader('style-resources-loader')\n  .options({\n      patterns: [\n          path.resolve(__dirname, `./src/style/variables.less`),\n          path.resolve(__dirname, './src/style/mixins.less')\n      ]\n  })\n})\n\n```\n\n'vue-modules', 'vue', 'normal-modules', 'normal'这几种规则类型都是vue/cli-service定义的：\n\n```\nfunction createCSSRule (lang, test, loader, options) {\n    const baseRule = webpackConfig.module.rule(lang).test(test)\n    \n    // rules for <style lang=\"module\">\n    const vueModulesRule = baseRule.oneOf('vue-modules').resourceQuery(/module/)\n    applyLoaders(vueModulesRule, true)\n    \n    // rules for <style>\n    const vueNormalRule = baseRule.oneOf('vue').resourceQuery(/\\?vue/)\n    applyLoaders(vueNormalRule, false)\n    \n    // rules for *.module.* files\n    const extModulesRule = baseRule.oneOf('normal-modules').test(/\\.module\\.\\w+$/)\n    applyLoaders(extModulesRule, true)\n    \n    // rules for normal CSS imports\n    const normalRule = baseRule.oneOf('normal')\n    applyLoaders(normalRule, modules)\n    \n    // ...\n}\n```\nvue-cli为`css`,`postcss`,`scss`,`sass`,`less`,`stylus`这几种语言都定义了'vue-modules', 'vue', 'normal-modules', 'normal'这4种子规则。\n\n我们最常用的是`vue`，表示.vue文件中的style标签。\n\n## 参考\n[自动化导入](https://cli.vuejs.org/zh/guide/css.html#%E8%87%AA%E5%8A%A8%E5%8C%96%E5%AF%BC%E5%85%A5)","slug":"vue/global-style-file","published":1,"updated":"2021-08-07T03:48:19.330Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc75001kecq8eo3dh8wb","content":"<p>全局的mixins和variable非常有用，但是在每个文件手动引入就很费劲，需要一个一劳永逸的办法直接在编译时插入文件开头。</p>\n<p><a href=\"https://github.com/yenshih/style-resources-loader\">style-resources-loader</a>可以解决这个问题。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// webpack-chain语法</span><br><span class=\"line\">const types = [&#x27;vue-modules&#x27;, &#x27;vue&#x27;, &#x27;normal-modules&#x27;, &#x27;normal&#x27;]</span><br><span class=\"line\"></span><br><span class=\"line\">// 业务代码注入全局变量</span><br><span class=\"line\">types.forEach(type =&gt; &#123;</span><br><span class=\"line\">  config.module.rule(&#x27;less&#x27;).oneOf(type)</span><br><span class=\"line\">  .use(&#x27;style-resource&#x27;)</span><br><span class=\"line\">  .loader(&#x27;style-resources-loader&#x27;)</span><br><span class=\"line\">  .options(&#123;</span><br><span class=\"line\">      patterns: [</span><br><span class=\"line\">          path.resolve(__dirname, `./src/style/variables.less`),</span><br><span class=\"line\">          path.resolve(__dirname, &#x27;./src/style/mixins.less&#x27;)</span><br><span class=\"line\">      ]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>‘vue-modules’, ‘vue’, ‘normal-modules’, ‘normal’这几种规则类型都是vue/cli-service定义的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createCSSRule (lang, test, loader, options) &#123;</span><br><span class=\"line\">    const baseRule = webpackConfig.module.rule(lang).test(test)</span><br><span class=\"line\">    </span><br><span class=\"line\">    // rules for &lt;style lang=&quot;module&quot;&gt;</span><br><span class=\"line\">    const vueModulesRule = baseRule.oneOf(&#x27;vue-modules&#x27;).resourceQuery(/module/)</span><br><span class=\"line\">    applyLoaders(vueModulesRule, true)</span><br><span class=\"line\">    </span><br><span class=\"line\">    // rules for &lt;style&gt;</span><br><span class=\"line\">    const vueNormalRule = baseRule.oneOf(&#x27;vue&#x27;).resourceQuery(/\\?vue/)</span><br><span class=\"line\">    applyLoaders(vueNormalRule, false)</span><br><span class=\"line\">    </span><br><span class=\"line\">    // rules for *.module.* files</span><br><span class=\"line\">    const extModulesRule = baseRule.oneOf(&#x27;normal-modules&#x27;).test(/\\.module\\.\\w+$/)</span><br><span class=\"line\">    applyLoaders(extModulesRule, true)</span><br><span class=\"line\">    </span><br><span class=\"line\">    // rules for normal CSS imports</span><br><span class=\"line\">    const normalRule = baseRule.oneOf(&#x27;normal&#x27;)</span><br><span class=\"line\">    applyLoaders(normalRule, modules)</span><br><span class=\"line\">    </span><br><span class=\"line\">    // ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>vue-cli为<code>css</code>,<code>postcss</code>,<code>scss</code>,<code>sass</code>,<code>less</code>,<code>stylus</code>这几种语言都定义了’vue-modules’, ‘vue’, ‘normal-modules’, ‘normal’这4种子规则。</p>\n<p>我们最常用的是<code>vue</code>，表示.vue文件中的style标签。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://cli.vuejs.org/zh/guide/css.html#%E8%87%AA%E5%8A%A8%E5%8C%96%E5%AF%BC%E5%85%A5\">自动化导入</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>全局的mixins和variable非常有用，但是在每个文件手动引入就很费劲，需要一个一劳永逸的办法直接在编译时插入文件开头。</p>\n<p><a href=\"https://github.com/yenshih/style-resources-loader\">style-resources-loader</a>可以解决这个问题。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// webpack-chain语法</span><br><span class=\"line\">const types = [&#x27;vue-modules&#x27;, &#x27;vue&#x27;, &#x27;normal-modules&#x27;, &#x27;normal&#x27;]</span><br><span class=\"line\"></span><br><span class=\"line\">// 业务代码注入全局变量</span><br><span class=\"line\">types.forEach(type =&gt; &#123;</span><br><span class=\"line\">  config.module.rule(&#x27;less&#x27;).oneOf(type)</span><br><span class=\"line\">  .use(&#x27;style-resource&#x27;)</span><br><span class=\"line\">  .loader(&#x27;style-resources-loader&#x27;)</span><br><span class=\"line\">  .options(&#123;</span><br><span class=\"line\">      patterns: [</span><br><span class=\"line\">          path.resolve(__dirname, `./src/style/variables.less`),</span><br><span class=\"line\">          path.resolve(__dirname, &#x27;./src/style/mixins.less&#x27;)</span><br><span class=\"line\">      ]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>‘vue-modules’, ‘vue’, ‘normal-modules’, ‘normal’这几种规则类型都是vue/cli-service定义的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createCSSRule (lang, test, loader, options) &#123;</span><br><span class=\"line\">    const baseRule = webpackConfig.module.rule(lang).test(test)</span><br><span class=\"line\">    </span><br><span class=\"line\">    // rules for &lt;style lang=&quot;module&quot;&gt;</span><br><span class=\"line\">    const vueModulesRule = baseRule.oneOf(&#x27;vue-modules&#x27;).resourceQuery(/module/)</span><br><span class=\"line\">    applyLoaders(vueModulesRule, true)</span><br><span class=\"line\">    </span><br><span class=\"line\">    // rules for &lt;style&gt;</span><br><span class=\"line\">    const vueNormalRule = baseRule.oneOf(&#x27;vue&#x27;).resourceQuery(/\\?vue/)</span><br><span class=\"line\">    applyLoaders(vueNormalRule, false)</span><br><span class=\"line\">    </span><br><span class=\"line\">    // rules for *.module.* files</span><br><span class=\"line\">    const extModulesRule = baseRule.oneOf(&#x27;normal-modules&#x27;).test(/\\.module\\.\\w+$/)</span><br><span class=\"line\">    applyLoaders(extModulesRule, true)</span><br><span class=\"line\">    </span><br><span class=\"line\">    // rules for normal CSS imports</span><br><span class=\"line\">    const normalRule = baseRule.oneOf(&#x27;normal&#x27;)</span><br><span class=\"line\">    applyLoaders(normalRule, modules)</span><br><span class=\"line\">    </span><br><span class=\"line\">    // ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>vue-cli为<code>css</code>,<code>postcss</code>,<code>scss</code>,<code>sass</code>,<code>less</code>,<code>stylus</code>这几种语言都定义了’vue-modules’, ‘vue’, ‘normal-modules’, ‘normal’这4种子规则。</p>\n<p>我们最常用的是<code>vue</code>，表示.vue文件中的style标签。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://cli.vuejs.org/zh/guide/css.html#%E8%87%AA%E5%8A%A8%E5%8C%96%E5%AF%BC%E5%85%A5\">自动化导入</a></p>\n"},{"title":"通过一个细节学习节点复用","date":"2019-12-05T16:00:00.000Z","_content":"\n## 背景\n\n有一个图片列表，被transition-group包裹：\n```\n<template>\n<div>\n  <transition-group name=\"movee\">\n    <template v-for=\"(img, index) in images\">\n      <!-- key绑定为index -->\n      <!-- <img class=\"image-item movee-item\" :src=\"img\" :key=\"index\" alt=\"\"> -->\n      <!-- key绑定为img值 -->\n      <img class=\"image-item movee-item\" :src=\"img\" :key=\"img\" alt=\"\">\n    </template>\n  </transition-group>\n  <div>\n    <button @click=\"swapImage\">第一张和第二张交换顺序</button>\n  </div>\n    \n</div>\n \n</template>\n\n<script>\nexport default {\n  name: 'app',\n  data() {\n    return {\n      images: [\n        '/static/image1.png',\n        '/static/image2.png',\n        '/static/image3.png'\n      ]\n    }\n  },\n  methods: {\n    swapImage() {\n      let first = this.images.shift()\n      let last = this.images.pop()\n      this.images.unshift(last)\n      this.images.push(first)\n    }\n  }\n}\n</script>\n\n<style>\n.image-item {\n  height: 200px;\n}\n.movee-item {\n  transition: all 0.3s;\n}\n</style> \n```\n当for循环绑定的key为index时，没有任何动画；当key为img值时，效果如下：\n![](/images/2021061401.gif)\n\n为什么key绑定为img值，过渡效果就生效了呢？带着这个问题重新学习了一下vue的节点复用。\n\n## key绑定\n\n根据官方文档的说法，独特的 key，可以用于强制替换元素/组件而不是重复使用它。当你遇到如下场景时它可能会很有用：\n* 完整地触发组件的生命周期钩子\n* 触发过渡\n\n那么，vue是怎么判断节点复用的呢？\n\nvue的节点树存在vDOM中。包含了节点的所有信息。当template中绑定的data属性发生变化，就会触发新的虚拟节点生成。新旧虚拟节点会进行对比，可以复用的节点不需要重新渲染到DOM中。\n\n同一个层级下，相同的虚拟节点才可以复用真实DOM，复用其实就是把节点对应的整个element对象粘贴到新的虚拟节点elm属性值上。新旧节点需要同时满足以下条件才能判定为相同：\n  * key 相同（不绑定key 的情况下也相同，因为都是null）\n  * tag 相同（没有tag的情况下也相同，如组件和文本节点）\n  * 如果是输入框，输入框类型也要相同\n\n贴出源码更加直观：\n```\nfunction sameVnode (a, b) {\n  return (\n    a.key === b.key && (\n      (\n        a.tag === b.tag &&\n        a.isComment === b.isComment &&\n        isDef(a.data) === isDef(b.data) &&\n        sameInputType(a, b)\n      ) || (\n        isTrue(a.isAsyncPlaceholder) &&\n        a.asyncFactory === b.asyncFactory &&\n        isUndef(b.asyncFactory.error)\n      )\n    )\n  )\n}\n\nfunction sameInputType (a, b) {\n  if (a.tag !== 'input') return true\n  let i\n  const typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type\n  const typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type\n  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)\n}\n```\n> 需要注意的是，输入框等表单项的value并没有作为判断依据。即，如果input的所有属性都一样，就会被认为可以复用，input并不会被重新渲染。这也解释了为什么会存在2个输入框交换顺序后绑定值和之前的顺序一致。\n\n关于对容一个层级的理解，看下图就清楚了：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-14/1623672057253-image.png)\n\n对于整个树状的vDOM，对比过程就是深度遍历的过程。\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-14/1623672201578-image.png)\n\n\n\n## 节点复用的图示\nvue是如何对比同一个层级新旧子节点的呢？它其实是2种方法的结合：\n* 两两对比交叉验证\n* 绑定key的情况下，保存一份旧的子节点key:index键值对\n\n两两对比始终是比较消耗性能的，这也是为什么vue针对for循环要求我们绑定key。\n\n以同一个层级的新旧列表为例，假设数组的顺序变更为：**[A, B, C, D, E] => [F, B, A, E, C, G]**，用图展示绑定key为value的过程。\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-16/1623804238240-image.png)\n<div style=\"color: #999;padding: 2px;\">👆4个箭头分别为oldStartIndex，oldEndIndex，newStartIndex, newEndIndex。旧A-新F，旧A-新G，旧E-新F，旧E-新G这4对对应的vNode进行比较。</div>\n\n<div style=\"color: #999;padding: 2px;\">👆由于绑定的key值不同，认定为不同的节点。接下来将通过key:index映射来尝试找到newStartNode。</div>\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623889372354-image.png)\n<div style=\"color: #999;padding: 2px;\">👆newStartNode通过key也没找到，因此新建一个DOM元素，插入到oldStartNode指向的DOM节点之前</div>\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623889877910-image.png)\n\n<div style=\"color: #999;padding: 2px;\">👆newStartVnode已经完成DOM创建和插入，接下来右移newStartIndex</div>\n<div style=\"color: #999;padding: 2px;\">👆新B-旧A，新B-旧E，新G-旧A，新G-旧E这4对又开始对比（这里发现有个问题，新G-旧A，新G-旧E重复对比了，这算不算一个优化点呢？vue@2.6.11）。</div>\n<div style=\"color: #999;padding: 2px;\">👆对比结果又是没匹配上。新B通过key:index映射找到了原身，旧B对应的DOM节点则移动到oldStartNode的前面。</div>\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623890393456-image.png)\n\n<div style=\"color: #999;padding: 2px;\">👆新B的DOM节点已经安顿好了，新B对应的old vNode位置也对应从数组删除，为了不影响现有索引位置，只是old vNode的值设置为undefined。newStartIndex右移一位。</div>\n<div style=\"color: #999;padding: 2px;\">👆新A-旧A识别为相同的节点，由于都是startIndex，因此二者对应的DOM节点在父元素中的位置保持不变。oldStartIndex和newStartIndex右移一位</div>\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623939477940-image.png)\n\n<div style=\"color: #999;padding: 2px;\">👆新E-旧E识别为相同节点。旧E（oldEndIndex）对应的DOM移动到旧C（oldStartIndex）对应的DOM节点之前👇</div>\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623939669940-image.png)\n\n<div style=\"color: #999;padding: 2px;\">👇oldStartIndex和newStartIndex右移一位，oldStartIndex遇到旧B的位置为undefined，继续右移。</div>\n\n<div style=\"color: #999;padding: 2px;\">根据上一轮的匹配结果，oldEndIndex对应vNode置空，oldEndIndex左移，newStartIndex右移👇</div>\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623940208168-image.png)\n\n<div style=\"color: #999;padding: 2px;\">👆新C-旧C识别为相同的节点，由于都是startIndex，因此二者对应的DOM节点在父元素中的位置保持不变。oldStartIndex对应的vNode置空，oldStartIndex和newStartIndex右移一位。</div>\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623940918268-image.png)\n\n<div style=\"color: #999;padding: 2px;\">👆oldStartIndex和oldEndIndex相遇，newStartIndex和newEndIndex相遇。新G-旧D无法识别为相同节点。通过key:index映射也无法匹配上，说明G是新增节点。</div>\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623941240177-image.png)\n\n<div style=\"color: #999;padding: 2px;\">👆针对G新建DOM节点，插入oldStartIndex对应DOM节点之前。</div>\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623941521350-image.png)\n\n<div style=\"color: #999;padding: 2px;\">👆由于新G已安顿好，newStartIndex右移，但是越界，因此循环终止。</div>\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623941771908-image.png)\n\n<div style=\"color: #999;padding: 2px;\">👆删除oldStartIndex和oldEndIndex之间的vNode以及DOM节点。</div>\n\n## 总结\n\n* 循环条件：旧startIndex <= 旧endIndex 且 新startIndex <= 新endIndex\n    \n    * 若旧startIndex 与 新startIndex 匹配，则二者均右移，不需要操作DOM顺序，继续新一轮循环\n    * 若旧startIndex 与 新endIndex 匹配，则说明处于当前对比区间最后面，将DOM节点移动到旧endIndex之后。新endIndex左移，继续新一轮循环。\n    * 若旧endIndex 与 新startIndex 匹配，则说明处于当前对比区间的最前面，将DOM节点移动到旧startIndex之前。新startIndex右移，继续新一轮循环。\n    * 若旧endIndex 与 新endIndex 匹配，则二者均左移，不需要操作DOM顺序，继续新一轮循环。\n    * 若以上都不满足，则根据当前查找区间的key:index映射寻找新startNode对应的旧index。\n        \n        * 若找到匹配元素对应位置为idxInOld，则将idxInOld对应的DOM节点移动到旧startIndex前面。新startIndex右移，继续新一轮循环。\n        * 若找不到，则新建一个DOM节点，插入到旧startIndex前面。新startIndex右移，继续新一轮循环。\n* 若旧startIndex > 旧endIndex，则为新startIndex -> 新endIndex之前所有节点新建DOM节点并按顺序插入父节点的末尾。\n* 若新startIndex > 新endIndex，则删除旧startIndex -> 旧endIndex之前所有节点的DOM节点\n\n##  transition-group\n\n以上分析过程只是普通的节点更新流程。如果一串节点被transition-group包裹，会发生什么呢？\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-18/1623976185660-image.png)\n\n源码中，如果有transition-group包裹，可复用的DOM节点顺序是不会调整的，只会新增和删除。如以上例子 **[A, B, C, D, E] => [F, B, A, E, C, G] ** 对比结束后顺序DOM节点顺序将会是:\n\n**[F, A, B, C, E, G]**：\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-20/1624192060131-image.png)\n\n接下来是实施过渡的步骤：\n\n1. 记录当前各个DOM节点的边界位置\n2. children更新，触发render，记录旧DOM节点的边界信息（getBoundingClientRect），重新渲染新DOM（对的，没有过渡，直接按照新的顺序渲染）\n3. 触发updated钩子，记录新DOM节点的边界信息\n4. 遍历所有children cNode，若同时存在新旧位置信息，说明是复用节点，通过transform将位置重新调整到旧位置（对的，立马设置回旧的位置，前面渲染出来的效果时间很短，用户视觉上看不到，可以通过在transition-group组件的updated钩子加断点看到）\n5. 通过读取`document.body.offsetHeight`触发重排\n6. 将children所有节点再设置回新位置，并添加过渡类\n7. 主线程执行完，开始重排，此时会显示过渡效果\n\n关于transition-group这里有个小问题：为什么transition-group不立即更新DOM节点？\n\n因为需要一个过渡效果，不能立即切换为终点状态。过渡过程完全交给transition-group处理。\n\n\n## 回到一开始的问题\n\n为什么key绑定为img值，过渡效果就生效了呢？\n\n* 若key绑定为img时，img相同的图片才会被视为相同节点，会被记录移动前后的位置，因此有过渡效果。\n* 若key不绑定，或者绑定为index，那么相同index的图片被视为相同节点，每个节点的位置都没有变化，因此没有过渡效果。\n","source":"_posts/vue/learn-node-reuse.md","raw":"---\ntitle: 通过一个细节学习节点复用\ncategories: vue\ntags: [vue, node-reuse]\ndate: 2019-12-6\n---\n\n## 背景\n\n有一个图片列表，被transition-group包裹：\n```\n<template>\n<div>\n  <transition-group name=\"movee\">\n    <template v-for=\"(img, index) in images\">\n      <!-- key绑定为index -->\n      <!-- <img class=\"image-item movee-item\" :src=\"img\" :key=\"index\" alt=\"\"> -->\n      <!-- key绑定为img值 -->\n      <img class=\"image-item movee-item\" :src=\"img\" :key=\"img\" alt=\"\">\n    </template>\n  </transition-group>\n  <div>\n    <button @click=\"swapImage\">第一张和第二张交换顺序</button>\n  </div>\n    \n</div>\n \n</template>\n\n<script>\nexport default {\n  name: 'app',\n  data() {\n    return {\n      images: [\n        '/static/image1.png',\n        '/static/image2.png',\n        '/static/image3.png'\n      ]\n    }\n  },\n  methods: {\n    swapImage() {\n      let first = this.images.shift()\n      let last = this.images.pop()\n      this.images.unshift(last)\n      this.images.push(first)\n    }\n  }\n}\n</script>\n\n<style>\n.image-item {\n  height: 200px;\n}\n.movee-item {\n  transition: all 0.3s;\n}\n</style> \n```\n当for循环绑定的key为index时，没有任何动画；当key为img值时，效果如下：\n![](/images/2021061401.gif)\n\n为什么key绑定为img值，过渡效果就生效了呢？带着这个问题重新学习了一下vue的节点复用。\n\n## key绑定\n\n根据官方文档的说法，独特的 key，可以用于强制替换元素/组件而不是重复使用它。当你遇到如下场景时它可能会很有用：\n* 完整地触发组件的生命周期钩子\n* 触发过渡\n\n那么，vue是怎么判断节点复用的呢？\n\nvue的节点树存在vDOM中。包含了节点的所有信息。当template中绑定的data属性发生变化，就会触发新的虚拟节点生成。新旧虚拟节点会进行对比，可以复用的节点不需要重新渲染到DOM中。\n\n同一个层级下，相同的虚拟节点才可以复用真实DOM，复用其实就是把节点对应的整个element对象粘贴到新的虚拟节点elm属性值上。新旧节点需要同时满足以下条件才能判定为相同：\n  * key 相同（不绑定key 的情况下也相同，因为都是null）\n  * tag 相同（没有tag的情况下也相同，如组件和文本节点）\n  * 如果是输入框，输入框类型也要相同\n\n贴出源码更加直观：\n```\nfunction sameVnode (a, b) {\n  return (\n    a.key === b.key && (\n      (\n        a.tag === b.tag &&\n        a.isComment === b.isComment &&\n        isDef(a.data) === isDef(b.data) &&\n        sameInputType(a, b)\n      ) || (\n        isTrue(a.isAsyncPlaceholder) &&\n        a.asyncFactory === b.asyncFactory &&\n        isUndef(b.asyncFactory.error)\n      )\n    )\n  )\n}\n\nfunction sameInputType (a, b) {\n  if (a.tag !== 'input') return true\n  let i\n  const typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type\n  const typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type\n  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)\n}\n```\n> 需要注意的是，输入框等表单项的value并没有作为判断依据。即，如果input的所有属性都一样，就会被认为可以复用，input并不会被重新渲染。这也解释了为什么会存在2个输入框交换顺序后绑定值和之前的顺序一致。\n\n关于对容一个层级的理解，看下图就清楚了：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-14/1623672057253-image.png)\n\n对于整个树状的vDOM，对比过程就是深度遍历的过程。\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-14/1623672201578-image.png)\n\n\n\n## 节点复用的图示\nvue是如何对比同一个层级新旧子节点的呢？它其实是2种方法的结合：\n* 两两对比交叉验证\n* 绑定key的情况下，保存一份旧的子节点key:index键值对\n\n两两对比始终是比较消耗性能的，这也是为什么vue针对for循环要求我们绑定key。\n\n以同一个层级的新旧列表为例，假设数组的顺序变更为：**[A, B, C, D, E] => [F, B, A, E, C, G]**，用图展示绑定key为value的过程。\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-16/1623804238240-image.png)\n<div style=\"color: #999;padding: 2px;\">👆4个箭头分别为oldStartIndex，oldEndIndex，newStartIndex, newEndIndex。旧A-新F，旧A-新G，旧E-新F，旧E-新G这4对对应的vNode进行比较。</div>\n\n<div style=\"color: #999;padding: 2px;\">👆由于绑定的key值不同，认定为不同的节点。接下来将通过key:index映射来尝试找到newStartNode。</div>\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623889372354-image.png)\n<div style=\"color: #999;padding: 2px;\">👆newStartNode通过key也没找到，因此新建一个DOM元素，插入到oldStartNode指向的DOM节点之前</div>\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623889877910-image.png)\n\n<div style=\"color: #999;padding: 2px;\">👆newStartVnode已经完成DOM创建和插入，接下来右移newStartIndex</div>\n<div style=\"color: #999;padding: 2px;\">👆新B-旧A，新B-旧E，新G-旧A，新G-旧E这4对又开始对比（这里发现有个问题，新G-旧A，新G-旧E重复对比了，这算不算一个优化点呢？vue@2.6.11）。</div>\n<div style=\"color: #999;padding: 2px;\">👆对比结果又是没匹配上。新B通过key:index映射找到了原身，旧B对应的DOM节点则移动到oldStartNode的前面。</div>\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623890393456-image.png)\n\n<div style=\"color: #999;padding: 2px;\">👆新B的DOM节点已经安顿好了，新B对应的old vNode位置也对应从数组删除，为了不影响现有索引位置，只是old vNode的值设置为undefined。newStartIndex右移一位。</div>\n<div style=\"color: #999;padding: 2px;\">👆新A-旧A识别为相同的节点，由于都是startIndex，因此二者对应的DOM节点在父元素中的位置保持不变。oldStartIndex和newStartIndex右移一位</div>\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623939477940-image.png)\n\n<div style=\"color: #999;padding: 2px;\">👆新E-旧E识别为相同节点。旧E（oldEndIndex）对应的DOM移动到旧C（oldStartIndex）对应的DOM节点之前👇</div>\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623939669940-image.png)\n\n<div style=\"color: #999;padding: 2px;\">👇oldStartIndex和newStartIndex右移一位，oldStartIndex遇到旧B的位置为undefined，继续右移。</div>\n\n<div style=\"color: #999;padding: 2px;\">根据上一轮的匹配结果，oldEndIndex对应vNode置空，oldEndIndex左移，newStartIndex右移👇</div>\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623940208168-image.png)\n\n<div style=\"color: #999;padding: 2px;\">👆新C-旧C识别为相同的节点，由于都是startIndex，因此二者对应的DOM节点在父元素中的位置保持不变。oldStartIndex对应的vNode置空，oldStartIndex和newStartIndex右移一位。</div>\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623940918268-image.png)\n\n<div style=\"color: #999;padding: 2px;\">👆oldStartIndex和oldEndIndex相遇，newStartIndex和newEndIndex相遇。新G-旧D无法识别为相同节点。通过key:index映射也无法匹配上，说明G是新增节点。</div>\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623941240177-image.png)\n\n<div style=\"color: #999;padding: 2px;\">👆针对G新建DOM节点，插入oldStartIndex对应DOM节点之前。</div>\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623941521350-image.png)\n\n<div style=\"color: #999;padding: 2px;\">👆由于新G已安顿好，newStartIndex右移，但是越界，因此循环终止。</div>\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623941771908-image.png)\n\n<div style=\"color: #999;padding: 2px;\">👆删除oldStartIndex和oldEndIndex之间的vNode以及DOM节点。</div>\n\n## 总结\n\n* 循环条件：旧startIndex <= 旧endIndex 且 新startIndex <= 新endIndex\n    \n    * 若旧startIndex 与 新startIndex 匹配，则二者均右移，不需要操作DOM顺序，继续新一轮循环\n    * 若旧startIndex 与 新endIndex 匹配，则说明处于当前对比区间最后面，将DOM节点移动到旧endIndex之后。新endIndex左移，继续新一轮循环。\n    * 若旧endIndex 与 新startIndex 匹配，则说明处于当前对比区间的最前面，将DOM节点移动到旧startIndex之前。新startIndex右移，继续新一轮循环。\n    * 若旧endIndex 与 新endIndex 匹配，则二者均左移，不需要操作DOM顺序，继续新一轮循环。\n    * 若以上都不满足，则根据当前查找区间的key:index映射寻找新startNode对应的旧index。\n        \n        * 若找到匹配元素对应位置为idxInOld，则将idxInOld对应的DOM节点移动到旧startIndex前面。新startIndex右移，继续新一轮循环。\n        * 若找不到，则新建一个DOM节点，插入到旧startIndex前面。新startIndex右移，继续新一轮循环。\n* 若旧startIndex > 旧endIndex，则为新startIndex -> 新endIndex之前所有节点新建DOM节点并按顺序插入父节点的末尾。\n* 若新startIndex > 新endIndex，则删除旧startIndex -> 旧endIndex之前所有节点的DOM节点\n\n##  transition-group\n\n以上分析过程只是普通的节点更新流程。如果一串节点被transition-group包裹，会发生什么呢？\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-18/1623976185660-image.png)\n\n源码中，如果有transition-group包裹，可复用的DOM节点顺序是不会调整的，只会新增和删除。如以上例子 **[A, B, C, D, E] => [F, B, A, E, C, G] ** 对比结束后顺序DOM节点顺序将会是:\n\n**[F, A, B, C, E, G]**：\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-20/1624192060131-image.png)\n\n接下来是实施过渡的步骤：\n\n1. 记录当前各个DOM节点的边界位置\n2. children更新，触发render，记录旧DOM节点的边界信息（getBoundingClientRect），重新渲染新DOM（对的，没有过渡，直接按照新的顺序渲染）\n3. 触发updated钩子，记录新DOM节点的边界信息\n4. 遍历所有children cNode，若同时存在新旧位置信息，说明是复用节点，通过transform将位置重新调整到旧位置（对的，立马设置回旧的位置，前面渲染出来的效果时间很短，用户视觉上看不到，可以通过在transition-group组件的updated钩子加断点看到）\n5. 通过读取`document.body.offsetHeight`触发重排\n6. 将children所有节点再设置回新位置，并添加过渡类\n7. 主线程执行完，开始重排，此时会显示过渡效果\n\n关于transition-group这里有个小问题：为什么transition-group不立即更新DOM节点？\n\n因为需要一个过渡效果，不能立即切换为终点状态。过渡过程完全交给transition-group处理。\n\n\n## 回到一开始的问题\n\n为什么key绑定为img值，过渡效果就生效了呢？\n\n* 若key绑定为img时，img相同的图片才会被视为相同节点，会被记录移动前后的位置，因此有过渡效果。\n* 若key不绑定，或者绑定为index，那么相同index的图片被视为相同节点，每个节点的位置都没有变化，因此没有过渡效果。\n","slug":"vue/learn-node-reuse","published":1,"updated":"2021-06-20T14:58:56.392Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc75001lecq83om0dqpo","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>有一个图片列表，被transition-group包裹：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;transition-group name=&quot;movee&quot;&gt;</span><br><span class=\"line\">    &lt;template v-for=&quot;(img, index) in images&quot;&gt;</span><br><span class=\"line\">      &lt;!-- key绑定为index --&gt;</span><br><span class=\"line\">      &lt;!-- &lt;img class=&quot;image-item movee-item&quot; :src=&quot;img&quot; :key=&quot;index&quot; alt=&quot;&quot;&gt; --&gt;</span><br><span class=\"line\">      &lt;!-- key绑定为img值 --&gt;</span><br><span class=\"line\">      &lt;img class=&quot;image-item movee-item&quot; :src=&quot;img&quot; :key=&quot;img&quot; alt=&quot;&quot;&gt;</span><br><span class=\"line\">    &lt;/template&gt;</span><br><span class=\"line\">  &lt;/transition-group&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;swapImage&quot;&gt;第一张和第二张交换顺序&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &#x27;app&#x27;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      images: [</span><br><span class=\"line\">        &#x27;/static/image1.png&#x27;,</span><br><span class=\"line\">        &#x27;/static/image2.png&#x27;,</span><br><span class=\"line\">        &#x27;/static/image3.png&#x27;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    swapImage() &#123;</span><br><span class=\"line\">      let first = this.images.shift()</span><br><span class=\"line\">      let last = this.images.pop()</span><br><span class=\"line\">      this.images.unshift(last)</span><br><span class=\"line\">      this.images.push(first)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.image-item &#123;</span><br><span class=\"line\">  height: 200px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.movee-item &#123;</span><br><span class=\"line\">  transition: all 0.3s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt; </span><br></pre></td></tr></table></figure>\n<p>当for循环绑定的key为index时，没有任何动画；当key为img值时，效果如下：<br><img src=\"/images/2021061401.gif\"></p>\n<p>为什么key绑定为img值，过渡效果就生效了呢？带着这个问题重新学习了一下vue的节点复用。</p>\n<h2 id=\"key绑定\"><a href=\"#key绑定\" class=\"headerlink\" title=\"key绑定\"></a>key绑定</h2><p>根据官方文档的说法，独特的 key，可以用于强制替换元素/组件而不是重复使用它。当你遇到如下场景时它可能会很有用：</p>\n<ul>\n<li>完整地触发组件的生命周期钩子</li>\n<li>触发过渡</li>\n</ul>\n<p>那么，vue是怎么判断节点复用的呢？</p>\n<p>vue的节点树存在vDOM中。包含了节点的所有信息。当template中绑定的data属性发生变化，就会触发新的虚拟节点生成。新旧虚拟节点会进行对比，可以复用的节点不需要重新渲染到DOM中。</p>\n<p>同一个层级下，相同的虚拟节点才可以复用真实DOM，复用其实就是把节点对应的整个element对象粘贴到新的虚拟节点elm属性值上。新旧节点需要同时满足以下条件才能判定为相同：</p>\n<ul>\n<li>key 相同（不绑定key 的情况下也相同，因为都是null）</li>\n<li>tag 相同（没有tag的情况下也相同，如组件和文本节点）</li>\n<li>如果是输入框，输入框类型也要相同</li>\n</ul>\n<p>贴出源码更加直观：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sameVnode (a, b) &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    a.key === b.key &amp;&amp; (</span><br><span class=\"line\">      (</span><br><span class=\"line\">        a.tag === b.tag &amp;&amp;</span><br><span class=\"line\">        a.isComment === b.isComment &amp;&amp;</span><br><span class=\"line\">        isDef(a.data) === isDef(b.data) &amp;&amp;</span><br><span class=\"line\">        sameInputType(a, b)</span><br><span class=\"line\">      ) || (</span><br><span class=\"line\">        isTrue(a.isAsyncPlaceholder) &amp;&amp;</span><br><span class=\"line\">        a.asyncFactory === b.asyncFactory &amp;&amp;</span><br><span class=\"line\">        isUndef(b.asyncFactory.error)</span><br><span class=\"line\">      )</span><br><span class=\"line\">    )</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function sameInputType (a, b) &#123;</span><br><span class=\"line\">  if (a.tag !== &#x27;input&#x27;) return true</span><br><span class=\"line\">  let i</span><br><span class=\"line\">  const typeA = isDef(i = a.data) &amp;&amp; isDef(i = i.attrs) &amp;&amp; i.type</span><br><span class=\"line\">  const typeB = isDef(i = b.data) &amp;&amp; isDef(i = i.attrs) &amp;&amp; i.type</span><br><span class=\"line\">  return typeA === typeB || isTextInputType(typeA) &amp;&amp; isTextInputType(typeB)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>需要注意的是，输入框等表单项的value并没有作为判断依据。即，如果input的所有属性都一样，就会被认为可以复用，input并不会被重新渲染。这也解释了为什么会存在2个输入框交换顺序后绑定值和之前的顺序一致。</p>\n</blockquote>\n<p>关于对容一个层级的理解，看下图就清楚了：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-14/1623672057253-image.png\"></p>\n<p>对于整个树状的vDOM，对比过程就是深度遍历的过程。<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-14/1623672201578-image.png\"></p>\n<h2 id=\"节点复用的图示\"><a href=\"#节点复用的图示\" class=\"headerlink\" title=\"节点复用的图示\"></a>节点复用的图示</h2><p>vue是如何对比同一个层级新旧子节点的呢？它其实是2种方法的结合：</p>\n<ul>\n<li>两两对比交叉验证</li>\n<li>绑定key的情况下，保存一份旧的子节点key:index键值对</li>\n</ul>\n<p>两两对比始终是比较消耗性能的，这也是为什么vue针对for循环要求我们绑定key。</p>\n<p>以同一个层级的新旧列表为例，假设数组的顺序变更为：**[A, B, C, D, E] =&gt; [F, B, A, E, C, G]**，用图展示绑定key为value的过程。</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-16/1623804238240-image.png\"></p>\n<div style=\"color: #999;padding: 2px;\">👆4个箭头分别为oldStartIndex，oldEndIndex，newStartIndex, newEndIndex。旧A-新F，旧A-新G，旧E-新F，旧E-新G这4对对应的vNode进行比较。</div>\n\n<div style=\"color: #999;padding: 2px;\">👆由于绑定的key值不同，认定为不同的节点。接下来将通过key:index映射来尝试找到newStartNode。</div>\n\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623889372354-image.png\"></p>\n<div style=\"color: #999;padding: 2px;\">👆newStartNode通过key也没找到，因此新建一个DOM元素，插入到oldStartNode指向的DOM节点之前</div>\n\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623889877910-image.png\"></p>\n<div style=\"color: #999;padding: 2px;\">👆newStartVnode已经完成DOM创建和插入，接下来右移newStartIndex</div>\n<div style=\"color: #999;padding: 2px;\">👆新B-旧A，新B-旧E，新G-旧A，新G-旧E这4对又开始对比（这里发现有个问题，新G-旧A，新G-旧E重复对比了，这算不算一个优化点呢？vue@2.6.11）。</div>\n<div style=\"color: #999;padding: 2px;\">👆对比结果又是没匹配上。新B通过key:index映射找到了原身，旧B对应的DOM节点则移动到oldStartNode的前面。</div>\n\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623890393456-image.png\"></p>\n<div style=\"color: #999;padding: 2px;\">👆新B的DOM节点已经安顿好了，新B对应的old vNode位置也对应从数组删除，为了不影响现有索引位置，只是old vNode的值设置为undefined。newStartIndex右移一位。</div>\n<div style=\"color: #999;padding: 2px;\">👆新A-旧A识别为相同的节点，由于都是startIndex，因此二者对应的DOM节点在父元素中的位置保持不变。oldStartIndex和newStartIndex右移一位</div>\n\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623939477940-image.png\"></p>\n<div style=\"color: #999;padding: 2px;\">👆新E-旧E识别为相同节点。旧E（oldEndIndex）对应的DOM移动到旧C（oldStartIndex）对应的DOM节点之前👇</div>\n\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623939669940-image.png\"></p>\n<div style=\"color: #999;padding: 2px;\">👇oldStartIndex和newStartIndex右移一位，oldStartIndex遇到旧B的位置为undefined，继续右移。</div>\n\n<div style=\"color: #999;padding: 2px;\">根据上一轮的匹配结果，oldEndIndex对应vNode置空，oldEndIndex左移，newStartIndex右移👇</div>\n\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623940208168-image.png\"></p>\n<div style=\"color: #999;padding: 2px;\">👆新C-旧C识别为相同的节点，由于都是startIndex，因此二者对应的DOM节点在父元素中的位置保持不变。oldStartIndex对应的vNode置空，oldStartIndex和newStartIndex右移一位。</div>\n\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623940918268-image.png\"></p>\n<div style=\"color: #999;padding: 2px;\">👆oldStartIndex和oldEndIndex相遇，newStartIndex和newEndIndex相遇。新G-旧D无法识别为相同节点。通过key:index映射也无法匹配上，说明G是新增节点。</div>\n\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623941240177-image.png\"></p>\n<div style=\"color: #999;padding: 2px;\">👆针对G新建DOM节点，插入oldStartIndex对应DOM节点之前。</div>\n\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623941521350-image.png\"></p>\n<div style=\"color: #999;padding: 2px;\">👆由于新G已安顿好，newStartIndex右移，但是越界，因此循环终止。</div>\n\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623941771908-image.png\"></p>\n<div style=\"color: #999;padding: 2px;\">👆删除oldStartIndex和oldEndIndex之间的vNode以及DOM节点。</div>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>循环条件：旧startIndex &lt;= 旧endIndex 且 新startIndex &lt;= 新endIndex<ul>\n<li>若旧startIndex 与 新startIndex 匹配，则二者均右移，不需要操作DOM顺序，继续新一轮循环</li>\n<li>若旧startIndex 与 新endIndex 匹配，则说明处于当前对比区间最后面，将DOM节点移动到旧endIndex之后。新endIndex左移，继续新一轮循环。</li>\n<li>若旧endIndex 与 新startIndex 匹配，则说明处于当前对比区间的最前面，将DOM节点移动到旧startIndex之前。新startIndex右移，继续新一轮循环。</li>\n<li>若旧endIndex 与 新endIndex 匹配，则二者均左移，不需要操作DOM顺序，继续新一轮循环。</li>\n<li>若以上都不满足，则根据当前查找区间的key:index映射寻找新startNode对应的旧index。<ul>\n<li>若找到匹配元素对应位置为idxInOld，则将idxInOld对应的DOM节点移动到旧startIndex前面。新startIndex右移，继续新一轮循环。</li>\n<li>若找不到，则新建一个DOM节点，插入到旧startIndex前面。新startIndex右移，继续新一轮循环。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>若旧startIndex &gt; 旧endIndex，则为新startIndex -&gt; 新endIndex之前所有节点新建DOM节点并按顺序插入父节点的末尾。</li>\n<li>若新startIndex &gt; 新endIndex，则删除旧startIndex -&gt; 旧endIndex之前所有节点的DOM节点</li>\n</ul>\n<h2 id=\"transition-group\"><a href=\"#transition-group\" class=\"headerlink\" title=\"transition-group\"></a>transition-group</h2><p>以上分析过程只是普通的节点更新流程。如果一串节点被transition-group包裹，会发生什么呢？</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-18/1623976185660-image.png\"></p>\n<p>源码中，如果有transition-group包裹，可复用的DOM节点顺序是不会调整的，只会新增和删除。如以上例子 **[A, B, C, D, E] =&gt; [F, B, A, E, C, G] ** 对比结束后顺序DOM节点顺序将会是:</p>\n<p>**[F, A, B, C, E, G]**：</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-20/1624192060131-image.png\"></p>\n<p>接下来是实施过渡的步骤：</p>\n<ol>\n<li>记录当前各个DOM节点的边界位置</li>\n<li>children更新，触发render，记录旧DOM节点的边界信息（getBoundingClientRect），重新渲染新DOM（对的，没有过渡，直接按照新的顺序渲染）</li>\n<li>触发updated钩子，记录新DOM节点的边界信息</li>\n<li>遍历所有children cNode，若同时存在新旧位置信息，说明是复用节点，通过transform将位置重新调整到旧位置（对的，立马设置回旧的位置，前面渲染出来的效果时间很短，用户视觉上看不到，可以通过在transition-group组件的updated钩子加断点看到）</li>\n<li>通过读取<code>document.body.offsetHeight</code>触发重排</li>\n<li>将children所有节点再设置回新位置，并添加过渡类</li>\n<li>主线程执行完，开始重排，此时会显示过渡效果</li>\n</ol>\n<p>关于transition-group这里有个小问题：为什么transition-group不立即更新DOM节点？</p>\n<p>因为需要一个过渡效果，不能立即切换为终点状态。过渡过程完全交给transition-group处理。</p>\n<h2 id=\"回到一开始的问题\"><a href=\"#回到一开始的问题\" class=\"headerlink\" title=\"回到一开始的问题\"></a>回到一开始的问题</h2><p>为什么key绑定为img值，过渡效果就生效了呢？</p>\n<ul>\n<li>若key绑定为img时，img相同的图片才会被视为相同节点，会被记录移动前后的位置，因此有过渡效果。</li>\n<li>若key不绑定，或者绑定为index，那么相同index的图片被视为相同节点，每个节点的位置都没有变化，因此没有过渡效果。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>有一个图片列表，被transition-group包裹：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &lt;transition-group name=&quot;movee&quot;&gt;</span><br><span class=\"line\">    &lt;template v-for=&quot;(img, index) in images&quot;&gt;</span><br><span class=\"line\">      &lt;!-- key绑定为index --&gt;</span><br><span class=\"line\">      &lt;!-- &lt;img class=&quot;image-item movee-item&quot; :src=&quot;img&quot; :key=&quot;index&quot; alt=&quot;&quot;&gt; --&gt;</span><br><span class=\"line\">      &lt;!-- key绑定为img值 --&gt;</span><br><span class=\"line\">      &lt;img class=&quot;image-item movee-item&quot; :src=&quot;img&quot; :key=&quot;img&quot; alt=&quot;&quot;&gt;</span><br><span class=\"line\">    &lt;/template&gt;</span><br><span class=\"line\">  &lt;/transition-group&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;swapImage&quot;&gt;第一张和第二张交换顺序&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &#x27;app&#x27;,</span><br><span class=\"line\">  data() &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      images: [</span><br><span class=\"line\">        &#x27;/static/image1.png&#x27;,</span><br><span class=\"line\">        &#x27;/static/image2.png&#x27;,</span><br><span class=\"line\">        &#x27;/static/image3.png&#x27;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    swapImage() &#123;</span><br><span class=\"line\">      let first = this.images.shift()</span><br><span class=\"line\">      let last = this.images.pop()</span><br><span class=\"line\">      this.images.unshift(last)</span><br><span class=\"line\">      this.images.push(first)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">.image-item &#123;</span><br><span class=\"line\">  height: 200px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.movee-item &#123;</span><br><span class=\"line\">  transition: all 0.3s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt; </span><br></pre></td></tr></table></figure>\n<p>当for循环绑定的key为index时，没有任何动画；当key为img值时，效果如下：<br><img src=\"/images/2021061401.gif\"></p>\n<p>为什么key绑定为img值，过渡效果就生效了呢？带着这个问题重新学习了一下vue的节点复用。</p>\n<h2 id=\"key绑定\"><a href=\"#key绑定\" class=\"headerlink\" title=\"key绑定\"></a>key绑定</h2><p>根据官方文档的说法，独特的 key，可以用于强制替换元素/组件而不是重复使用它。当你遇到如下场景时它可能会很有用：</p>\n<ul>\n<li>完整地触发组件的生命周期钩子</li>\n<li>触发过渡</li>\n</ul>\n<p>那么，vue是怎么判断节点复用的呢？</p>\n<p>vue的节点树存在vDOM中。包含了节点的所有信息。当template中绑定的data属性发生变化，就会触发新的虚拟节点生成。新旧虚拟节点会进行对比，可以复用的节点不需要重新渲染到DOM中。</p>\n<p>同一个层级下，相同的虚拟节点才可以复用真实DOM，复用其实就是把节点对应的整个element对象粘贴到新的虚拟节点elm属性值上。新旧节点需要同时满足以下条件才能判定为相同：</p>\n<ul>\n<li>key 相同（不绑定key 的情况下也相同，因为都是null）</li>\n<li>tag 相同（没有tag的情况下也相同，如组件和文本节点）</li>\n<li>如果是输入框，输入框类型也要相同</li>\n</ul>\n<p>贴出源码更加直观：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sameVnode (a, b) &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    a.key === b.key &amp;&amp; (</span><br><span class=\"line\">      (</span><br><span class=\"line\">        a.tag === b.tag &amp;&amp;</span><br><span class=\"line\">        a.isComment === b.isComment &amp;&amp;</span><br><span class=\"line\">        isDef(a.data) === isDef(b.data) &amp;&amp;</span><br><span class=\"line\">        sameInputType(a, b)</span><br><span class=\"line\">      ) || (</span><br><span class=\"line\">        isTrue(a.isAsyncPlaceholder) &amp;&amp;</span><br><span class=\"line\">        a.asyncFactory === b.asyncFactory &amp;&amp;</span><br><span class=\"line\">        isUndef(b.asyncFactory.error)</span><br><span class=\"line\">      )</span><br><span class=\"line\">    )</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function sameInputType (a, b) &#123;</span><br><span class=\"line\">  if (a.tag !== &#x27;input&#x27;) return true</span><br><span class=\"line\">  let i</span><br><span class=\"line\">  const typeA = isDef(i = a.data) &amp;&amp; isDef(i = i.attrs) &amp;&amp; i.type</span><br><span class=\"line\">  const typeB = isDef(i = b.data) &amp;&amp; isDef(i = i.attrs) &amp;&amp; i.type</span><br><span class=\"line\">  return typeA === typeB || isTextInputType(typeA) &amp;&amp; isTextInputType(typeB)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>需要注意的是，输入框等表单项的value并没有作为判断依据。即，如果input的所有属性都一样，就会被认为可以复用，input并不会被重新渲染。这也解释了为什么会存在2个输入框交换顺序后绑定值和之前的顺序一致。</p>\n</blockquote>\n<p>关于对容一个层级的理解，看下图就清楚了：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-14/1623672057253-image.png\"></p>\n<p>对于整个树状的vDOM，对比过程就是深度遍历的过程。<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-14/1623672201578-image.png\"></p>\n<h2 id=\"节点复用的图示\"><a href=\"#节点复用的图示\" class=\"headerlink\" title=\"节点复用的图示\"></a>节点复用的图示</h2><p>vue是如何对比同一个层级新旧子节点的呢？它其实是2种方法的结合：</p>\n<ul>\n<li>两两对比交叉验证</li>\n<li>绑定key的情况下，保存一份旧的子节点key:index键值对</li>\n</ul>\n<p>两两对比始终是比较消耗性能的，这也是为什么vue针对for循环要求我们绑定key。</p>\n<p>以同一个层级的新旧列表为例，假设数组的顺序变更为：**[A, B, C, D, E] =&gt; [F, B, A, E, C, G]**，用图展示绑定key为value的过程。</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-16/1623804238240-image.png\"></p>\n<div style=\"color: #999;padding: 2px;\">👆4个箭头分别为oldStartIndex，oldEndIndex，newStartIndex, newEndIndex。旧A-新F，旧A-新G，旧E-新F，旧E-新G这4对对应的vNode进行比较。</div>\n\n<div style=\"color: #999;padding: 2px;\">👆由于绑定的key值不同，认定为不同的节点。接下来将通过key:index映射来尝试找到newStartNode。</div>\n\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623889372354-image.png\"></p>\n<div style=\"color: #999;padding: 2px;\">👆newStartNode通过key也没找到，因此新建一个DOM元素，插入到oldStartNode指向的DOM节点之前</div>\n\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623889877910-image.png\"></p>\n<div style=\"color: #999;padding: 2px;\">👆newStartVnode已经完成DOM创建和插入，接下来右移newStartIndex</div>\n<div style=\"color: #999;padding: 2px;\">👆新B-旧A，新B-旧E，新G-旧A，新G-旧E这4对又开始对比（这里发现有个问题，新G-旧A，新G-旧E重复对比了，这算不算一个优化点呢？vue@2.6.11）。</div>\n<div style=\"color: #999;padding: 2px;\">👆对比结果又是没匹配上。新B通过key:index映射找到了原身，旧B对应的DOM节点则移动到oldStartNode的前面。</div>\n\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623890393456-image.png\"></p>\n<div style=\"color: #999;padding: 2px;\">👆新B的DOM节点已经安顿好了，新B对应的old vNode位置也对应从数组删除，为了不影响现有索引位置，只是old vNode的值设置为undefined。newStartIndex右移一位。</div>\n<div style=\"color: #999;padding: 2px;\">👆新A-旧A识别为相同的节点，由于都是startIndex，因此二者对应的DOM节点在父元素中的位置保持不变。oldStartIndex和newStartIndex右移一位</div>\n\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623939477940-image.png\"></p>\n<div style=\"color: #999;padding: 2px;\">👆新E-旧E识别为相同节点。旧E（oldEndIndex）对应的DOM移动到旧C（oldStartIndex）对应的DOM节点之前👇</div>\n\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623939669940-image.png\"></p>\n<div style=\"color: #999;padding: 2px;\">👇oldStartIndex和newStartIndex右移一位，oldStartIndex遇到旧B的位置为undefined，继续右移。</div>\n\n<div style=\"color: #999;padding: 2px;\">根据上一轮的匹配结果，oldEndIndex对应vNode置空，oldEndIndex左移，newStartIndex右移👇</div>\n\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623940208168-image.png\"></p>\n<div style=\"color: #999;padding: 2px;\">👆新C-旧C识别为相同的节点，由于都是startIndex，因此二者对应的DOM节点在父元素中的位置保持不变。oldStartIndex对应的vNode置空，oldStartIndex和newStartIndex右移一位。</div>\n\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623940918268-image.png\"></p>\n<div style=\"color: #999;padding: 2px;\">👆oldStartIndex和oldEndIndex相遇，newStartIndex和newEndIndex相遇。新G-旧D无法识别为相同节点。通过key:index映射也无法匹配上，说明G是新增节点。</div>\n\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623941240177-image.png\"></p>\n<div style=\"color: #999;padding: 2px;\">👆针对G新建DOM节点，插入oldStartIndex对应DOM节点之前。</div>\n\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623941521350-image.png\"></p>\n<div style=\"color: #999;padding: 2px;\">👆由于新G已安顿好，newStartIndex右移，但是越界，因此循环终止。</div>\n\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-17/1623941771908-image.png\"></p>\n<div style=\"color: #999;padding: 2px;\">👆删除oldStartIndex和oldEndIndex之间的vNode以及DOM节点。</div>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>循环条件：旧startIndex &lt;= 旧endIndex 且 新startIndex &lt;= 新endIndex<ul>\n<li>若旧startIndex 与 新startIndex 匹配，则二者均右移，不需要操作DOM顺序，继续新一轮循环</li>\n<li>若旧startIndex 与 新endIndex 匹配，则说明处于当前对比区间最后面，将DOM节点移动到旧endIndex之后。新endIndex左移，继续新一轮循环。</li>\n<li>若旧endIndex 与 新startIndex 匹配，则说明处于当前对比区间的最前面，将DOM节点移动到旧startIndex之前。新startIndex右移，继续新一轮循环。</li>\n<li>若旧endIndex 与 新endIndex 匹配，则二者均左移，不需要操作DOM顺序，继续新一轮循环。</li>\n<li>若以上都不满足，则根据当前查找区间的key:index映射寻找新startNode对应的旧index。<ul>\n<li>若找到匹配元素对应位置为idxInOld，则将idxInOld对应的DOM节点移动到旧startIndex前面。新startIndex右移，继续新一轮循环。</li>\n<li>若找不到，则新建一个DOM节点，插入到旧startIndex前面。新startIndex右移，继续新一轮循环。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>若旧startIndex &gt; 旧endIndex，则为新startIndex -&gt; 新endIndex之前所有节点新建DOM节点并按顺序插入父节点的末尾。</li>\n<li>若新startIndex &gt; 新endIndex，则删除旧startIndex -&gt; 旧endIndex之前所有节点的DOM节点</li>\n</ul>\n<h2 id=\"transition-group\"><a href=\"#transition-group\" class=\"headerlink\" title=\"transition-group\"></a>transition-group</h2><p>以上分析过程只是普通的节点更新流程。如果一串节点被transition-group包裹，会发生什么呢？</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-18/1623976185660-image.png\"></p>\n<p>源码中，如果有transition-group包裹，可复用的DOM节点顺序是不会调整的，只会新增和删除。如以上例子 **[A, B, C, D, E] =&gt; [F, B, A, E, C, G] ** 对比结束后顺序DOM节点顺序将会是:</p>\n<p>**[F, A, B, C, E, G]**：</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-20/1624192060131-image.png\"></p>\n<p>接下来是实施过渡的步骤：</p>\n<ol>\n<li>记录当前各个DOM节点的边界位置</li>\n<li>children更新，触发render，记录旧DOM节点的边界信息（getBoundingClientRect），重新渲染新DOM（对的，没有过渡，直接按照新的顺序渲染）</li>\n<li>触发updated钩子，记录新DOM节点的边界信息</li>\n<li>遍历所有children cNode，若同时存在新旧位置信息，说明是复用节点，通过transform将位置重新调整到旧位置（对的，立马设置回旧的位置，前面渲染出来的效果时间很短，用户视觉上看不到，可以通过在transition-group组件的updated钩子加断点看到）</li>\n<li>通过读取<code>document.body.offsetHeight</code>触发重排</li>\n<li>将children所有节点再设置回新位置，并添加过渡类</li>\n<li>主线程执行完，开始重排，此时会显示过渡效果</li>\n</ol>\n<p>关于transition-group这里有个小问题：为什么transition-group不立即更新DOM节点？</p>\n<p>因为需要一个过渡效果，不能立即切换为终点状态。过渡过程完全交给transition-group处理。</p>\n<h2 id=\"回到一开始的问题\"><a href=\"#回到一开始的问题\" class=\"headerlink\" title=\"回到一开始的问题\"></a>回到一开始的问题</h2><p>为什么key绑定为img值，过渡效果就生效了呢？</p>\n<ul>\n<li>若key绑定为img时，img相同的图片才会被视为相同节点，会被记录移动前后的位置，因此有过渡效果。</li>\n<li>若key不绑定，或者绑定为index，那么相同index的图片被视为相同节点，每个节点的位置都没有变化，因此没有过渡效果。</li>\n</ul>\n"},{"title":"vue 的mount 过程","date":"2020-04-01T16:00:00.000Z","_content":"\n>> 前段时间学习了vue的源码，理清了vue的mount流程，在此做下总结。\n\n![](/images/2019051301.svg)\n\nmount过程分为2个大阶段，生成vnode，和渲染dom\n\n## 生成vnode\n\nmount方法其实调用了render函数，该函数返回的就是vnode\n\n## 渲染 dom\n\n这个过程主要调用了update方法。每一个vnode的渲染都会调用一次update方法。\n\n针对组件，render返回的对应vnode只是一个占位vnode。在update的时候占位vnode会根据组件配置生成所有内容的dom。\n\n渲染过程其实是一个深度遍历的过程。即，最先生成子dom，逐个层级向上插入，直到插入根结点的dom中。\n","source":"_posts/vue/mount-flow.md","raw":"---\ntitle: vue 的mount 过程\ncategories: vue\ntags: [vue]\ndate: 2020-4-2\n---\n\n>> 前段时间学习了vue的源码，理清了vue的mount流程，在此做下总结。\n\n![](/images/2019051301.svg)\n\nmount过程分为2个大阶段，生成vnode，和渲染dom\n\n## 生成vnode\n\nmount方法其实调用了render函数，该函数返回的就是vnode\n\n## 渲染 dom\n\n这个过程主要调用了update方法。每一个vnode的渲染都会调用一次update方法。\n\n针对组件，render返回的对应vnode只是一个占位vnode。在update的时候占位vnode会根据组件配置生成所有内容的dom。\n\n渲染过程其实是一个深度遍历的过程。即，最先生成子dom，逐个层级向上插入，直到插入根结点的dom中。\n","slug":"vue/mount-flow","published":1,"updated":"2021-06-14T02:13:19.207Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc75001mecq8a6025hbv","content":"<blockquote>\n<blockquote>\n<p>前段时间学习了vue的源码，理清了vue的mount流程，在此做下总结。</p>\n</blockquote>\n</blockquote>\n<p><img src=\"/images/2019051301.svg\"></p>\n<p>mount过程分为2个大阶段，生成vnode，和渲染dom</p>\n<h2 id=\"生成vnode\"><a href=\"#生成vnode\" class=\"headerlink\" title=\"生成vnode\"></a>生成vnode</h2><p>mount方法其实调用了render函数，该函数返回的就是vnode</p>\n<h2 id=\"渲染-dom\"><a href=\"#渲染-dom\" class=\"headerlink\" title=\"渲染 dom\"></a>渲染 dom</h2><p>这个过程主要调用了update方法。每一个vnode的渲染都会调用一次update方法。</p>\n<p>针对组件，render返回的对应vnode只是一个占位vnode。在update的时候占位vnode会根据组件配置生成所有内容的dom。</p>\n<p>渲染过程其实是一个深度遍历的过程。即，最先生成子dom，逐个层级向上插入，直到插入根结点的dom中。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<blockquote>\n<p>前段时间学习了vue的源码，理清了vue的mount流程，在此做下总结。</p>\n</blockquote>\n</blockquote>\n<p><img src=\"/images/2019051301.svg\"></p>\n<p>mount过程分为2个大阶段，生成vnode，和渲染dom</p>\n<h2 id=\"生成vnode\"><a href=\"#生成vnode\" class=\"headerlink\" title=\"生成vnode\"></a>生成vnode</h2><p>mount方法其实调用了render函数，该函数返回的就是vnode</p>\n<h2 id=\"渲染-dom\"><a href=\"#渲染-dom\" class=\"headerlink\" title=\"渲染 dom\"></a>渲染 dom</h2><p>这个过程主要调用了update方法。每一个vnode的渲染都会调用一次update方法。</p>\n<p>针对组件，render返回的对应vnode只是一个占位vnode。在update的时候占位vnode会根据组件配置生成所有内容的dom。</p>\n<p>渲染过程其实是一个深度遍历的过程。即，最先生成子dom，逐个层级向上插入，直到插入根结点的dom中。</p>\n"},{"title":"vue-router 总结","date":"2018-08-19T16:00:00.000Z","_content":"\n## 路由钩子（导航守卫）\n\n### 全局钩子\n\n#### beforeEach\n\n```js\nrouter.beforeEach((to, from, next) => {\n  // ...\n})\n```\n\n异步回调，按照钩子挂载的顺序执行。有点类似于tapable的waterfall任务队列。所有的回调必须执行next才能进行下一步。\n\nnext可以做以下事情：\n* 中断路由跳转\n* 跳转到一个不同的地址\n* 中断跳转并抛出错误\n\n#### beforeResolve\n和 router.beforeEach 类似，在 beforeEach 和 组件内beforeRouteEnter 之后，afterEach之前调用。\n\n#### afterEach\n```js\nrouter.afterEach((to, from) => {\n  // ...\n})\n```\n\n路由切换后的回调。无法修改路由。\n\n### 路由内钩子\n\n#### beforeEnter\n\n和beforeEach一样。区别是，这个钩子是挂在特定路由下的，表示只有跳转到当前路由前才执行的钩子。\n\n```js\nconst router = new VueRouter({\n  routes: [\n    {\n      path: '/foo',\n      component: Foo,\n      beforeEnter: (to, from, next) => {\n        // ...\n      }\n    }\n  ]\n})\n```\n\n### 组件内钩子\n\n#### beforeRouteEnter\n```js\nbeforeRouteEnter(to, from, next) {\n  // 在渲染该组件的对应路由被 confirm 前调用\n  // 不！能！直接获取组件实例 `this`\n  // 但是可以在next回调获取`this`\n  // 因为当守卫执行前，组件实例还没被创建\n  // next一定要调用\n}\n```\n\n#### beforeRouteUpdate\n```js\nbeforeRouteUpdate(to, from, next) {\n  // 在当前路由改变，但是该组件被复用时调用\n  // 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，\n  // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。\n  // 可以访问组件实例 `this`\n  // next一定要调用\n  // next无需传参\n}\n```\n#### beforeRouteLeave\n```js\nbeforeRouteLeave(to, from, next) {\n  // 导航离开该组件的对应路由时调用\n  // 可以访问组件实例 `this`\n  // next一定要调用\n  // next无需传参\n  // next(false)可以阻止跳转\n}\n```\n\n## 完整的导航流程\n\n1. 导航被触发。\n2. 在失活的组件里调用 beforeRouteLeave 守卫。\n3. 调用全局的 beforeEach 守卫。\n4. 在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。\n5. 在路由配置里调用 beforeEnter。\n6. 解析异步路由组件。\n7. 在被激活的组件里调用 beforeRouteEnter。\n8. 调用全局的 beforeResolve 守卫 (2.5+)。\n9. 导航被确认。confirmed\n10. 调用全局的 afterEach 钩子。\n11. 触发 DOM 更新。\n12. 调用 beforeRouteEnter 守卫中传给 next 的回调函数，创建好的组件实例会作为回调函数的参数传入。","source":"_posts/vue/vue-router.md","raw":"---\ntitle: vue-router 总结\ncategories: vue\ntags: [vue, vue-router]\ndate: 2018-8-20\n---\n\n## 路由钩子（导航守卫）\n\n### 全局钩子\n\n#### beforeEach\n\n```js\nrouter.beforeEach((to, from, next) => {\n  // ...\n})\n```\n\n异步回调，按照钩子挂载的顺序执行。有点类似于tapable的waterfall任务队列。所有的回调必须执行next才能进行下一步。\n\nnext可以做以下事情：\n* 中断路由跳转\n* 跳转到一个不同的地址\n* 中断跳转并抛出错误\n\n#### beforeResolve\n和 router.beforeEach 类似，在 beforeEach 和 组件内beforeRouteEnter 之后，afterEach之前调用。\n\n#### afterEach\n```js\nrouter.afterEach((to, from) => {\n  // ...\n})\n```\n\n路由切换后的回调。无法修改路由。\n\n### 路由内钩子\n\n#### beforeEnter\n\n和beforeEach一样。区别是，这个钩子是挂在特定路由下的，表示只有跳转到当前路由前才执行的钩子。\n\n```js\nconst router = new VueRouter({\n  routes: [\n    {\n      path: '/foo',\n      component: Foo,\n      beforeEnter: (to, from, next) => {\n        // ...\n      }\n    }\n  ]\n})\n```\n\n### 组件内钩子\n\n#### beforeRouteEnter\n```js\nbeforeRouteEnter(to, from, next) {\n  // 在渲染该组件的对应路由被 confirm 前调用\n  // 不！能！直接获取组件实例 `this`\n  // 但是可以在next回调获取`this`\n  // 因为当守卫执行前，组件实例还没被创建\n  // next一定要调用\n}\n```\n\n#### beforeRouteUpdate\n```js\nbeforeRouteUpdate(to, from, next) {\n  // 在当前路由改变，但是该组件被复用时调用\n  // 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，\n  // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。\n  // 可以访问组件实例 `this`\n  // next一定要调用\n  // next无需传参\n}\n```\n#### beforeRouteLeave\n```js\nbeforeRouteLeave(to, from, next) {\n  // 导航离开该组件的对应路由时调用\n  // 可以访问组件实例 `this`\n  // next一定要调用\n  // next无需传参\n  // next(false)可以阻止跳转\n}\n```\n\n## 完整的导航流程\n\n1. 导航被触发。\n2. 在失活的组件里调用 beforeRouteLeave 守卫。\n3. 调用全局的 beforeEach 守卫。\n4. 在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。\n5. 在路由配置里调用 beforeEnter。\n6. 解析异步路由组件。\n7. 在被激活的组件里调用 beforeRouteEnter。\n8. 调用全局的 beforeResolve 守卫 (2.5+)。\n9. 导航被确认。confirmed\n10. 调用全局的 afterEach 钩子。\n11. 触发 DOM 更新。\n12. 调用 beforeRouteEnter 守卫中传给 next 的回调函数，创建好的组件实例会作为回调函数的参数传入。","slug":"vue/vue-router","published":1,"updated":"2021-06-14T02:14:57.200Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc76001necq8d11968qq","content":"<h2 id=\"路由钩子（导航守卫）\"><a href=\"#路由钩子（导航守卫）\" class=\"headerlink\" title=\"路由钩子（导航守卫）\"></a>路由钩子（导航守卫）</h2><h3 id=\"全局钩子\"><a href=\"#全局钩子\" class=\"headerlink\" title=\"全局钩子\"></a>全局钩子</h3><h4 id=\"beforeEach\"><a href=\"#beforeEach\" class=\"headerlink\" title=\"beforeEach\"></a>beforeEach</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>异步回调，按照钩子挂载的顺序执行。有点类似于tapable的waterfall任务队列。所有的回调必须执行next才能进行下一步。</p>\n<p>next可以做以下事情：</p>\n<ul>\n<li>中断路由跳转</li>\n<li>跳转到一个不同的地址</li>\n<li>中断跳转并抛出错误</li>\n</ul>\n<h4 id=\"beforeResolve\"><a href=\"#beforeResolve\" class=\"headerlink\" title=\"beforeResolve\"></a>beforeResolve</h4><p>和 router.beforeEach 类似，在 beforeEach 和 组件内beforeRouteEnter 之后，afterEach之前调用。</p>\n<h4 id=\"afterEach\"><a href=\"#afterEach\" class=\"headerlink\" title=\"afterEach\"></a>afterEach</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.afterEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>路由切换后的回调。无法修改路由。</p>\n<h3 id=\"路由内钩子\"><a href=\"#路由内钩子\" class=\"headerlink\" title=\"路由内钩子\"></a>路由内钩子</h3><h4 id=\"beforeEnter\"><a href=\"#beforeEnter\" class=\"headerlink\" title=\"beforeEnter\"></a>beforeEnter</h4><p>和beforeEach一样。区别是，这个钩子是挂在特定路由下的，表示只有跳转到当前路由前才执行的钩子。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">  <span class=\"attr\">routes</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/foo&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">component</span>: Foo,</span><br><span class=\"line\">      <span class=\"attr\">beforeEnter</span>: <span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"组件内钩子\"><a href=\"#组件内钩子\" class=\"headerlink\" title=\"组件内钩子\"></a>组件内钩子</h3><h4 id=\"beforeRouteEnter\"><a href=\"#beforeRouteEnter\" class=\"headerlink\" title=\"beforeRouteEnter\"></a>beforeRouteEnter</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">beforeRouteEnter</span>(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 在渲染该组件的对应路由被 confirm 前调用</span></span><br><span class=\"line\">  <span class=\"comment\">// 不！能！直接获取组件实例 `this`</span></span><br><span class=\"line\">  <span class=\"comment\">// 但是可以在next回调获取`this`</span></span><br><span class=\"line\">  <span class=\"comment\">// 因为当守卫执行前，组件实例还没被创建</span></span><br><span class=\"line\">  <span class=\"comment\">// next一定要调用</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"beforeRouteUpdate\"><a href=\"#beforeRouteUpdate\" class=\"headerlink\" title=\"beforeRouteUpdate\"></a>beforeRouteUpdate</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">beforeRouteUpdate</span>(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 在当前路由改变，但是该组件被复用时调用</span></span><br><span class=\"line\">  <span class=\"comment\">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span></span><br><span class=\"line\">  <span class=\"comment\">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class=\"line\">  <span class=\"comment\">// 可以访问组件实例 `this`</span></span><br><span class=\"line\">  <span class=\"comment\">// next一定要调用</span></span><br><span class=\"line\">  <span class=\"comment\">// next无需传参</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"beforeRouteLeave\"><a href=\"#beforeRouteLeave\" class=\"headerlink\" title=\"beforeRouteLeave\"></a>beforeRouteLeave</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">beforeRouteLeave</span>(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 导航离开该组件的对应路由时调用</span></span><br><span class=\"line\">  <span class=\"comment\">// 可以访问组件实例 `this`</span></span><br><span class=\"line\">  <span class=\"comment\">// next一定要调用</span></span><br><span class=\"line\">  <span class=\"comment\">// next无需传参</span></span><br><span class=\"line\">  <span class=\"comment\">// next(false)可以阻止跳转</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"完整的导航流程\"><a href=\"#完整的导航流程\" class=\"headerlink\" title=\"完整的导航流程\"></a>完整的导航流程</h2><ol>\n<li>导航被触发。</li>\n<li>在失活的组件里调用 beforeRouteLeave 守卫。</li>\n<li>调用全局的 beforeEach 守卫。</li>\n<li>在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。</li>\n<li>在路由配置里调用 beforeEnter。</li>\n<li>解析异步路由组件。</li>\n<li>在被激活的组件里调用 beforeRouteEnter。</li>\n<li>调用全局的 beforeResolve 守卫 (2.5+)。</li>\n<li>导航被确认。confirmed</li>\n<li>调用全局的 afterEach 钩子。</li>\n<li>触发 DOM 更新。</li>\n<li>调用 beforeRouteEnter 守卫中传给 next 的回调函数，创建好的组件实例会作为回调函数的参数传入。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"路由钩子（导航守卫）\"><a href=\"#路由钩子（导航守卫）\" class=\"headerlink\" title=\"路由钩子（导航守卫）\"></a>路由钩子（导航守卫）</h2><h3 id=\"全局钩子\"><a href=\"#全局钩子\" class=\"headerlink\" title=\"全局钩子\"></a>全局钩子</h3><h4 id=\"beforeEach\"><a href=\"#beforeEach\" class=\"headerlink\" title=\"beforeEach\"></a>beforeEach</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>异步回调，按照钩子挂载的顺序执行。有点类似于tapable的waterfall任务队列。所有的回调必须执行next才能进行下一步。</p>\n<p>next可以做以下事情：</p>\n<ul>\n<li>中断路由跳转</li>\n<li>跳转到一个不同的地址</li>\n<li>中断跳转并抛出错误</li>\n</ul>\n<h4 id=\"beforeResolve\"><a href=\"#beforeResolve\" class=\"headerlink\" title=\"beforeResolve\"></a>beforeResolve</h4><p>和 router.beforeEach 类似，在 beforeEach 和 组件内beforeRouteEnter 之后，afterEach之前调用。</p>\n<h4 id=\"afterEach\"><a href=\"#afterEach\" class=\"headerlink\" title=\"afterEach\"></a>afterEach</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.afterEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>路由切换后的回调。无法修改路由。</p>\n<h3 id=\"路由内钩子\"><a href=\"#路由内钩子\" class=\"headerlink\" title=\"路由内钩子\"></a>路由内钩子</h3><h4 id=\"beforeEnter\"><a href=\"#beforeEnter\" class=\"headerlink\" title=\"beforeEnter\"></a>beforeEnter</h4><p>和beforeEach一样。区别是，这个钩子是挂在特定路由下的，表示只有跳转到当前路由前才执行的钩子。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">  <span class=\"attr\">routes</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/foo&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">component</span>: Foo,</span><br><span class=\"line\">      <span class=\"attr\">beforeEnter</span>: <span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"组件内钩子\"><a href=\"#组件内钩子\" class=\"headerlink\" title=\"组件内钩子\"></a>组件内钩子</h3><h4 id=\"beforeRouteEnter\"><a href=\"#beforeRouteEnter\" class=\"headerlink\" title=\"beforeRouteEnter\"></a>beforeRouteEnter</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">beforeRouteEnter</span>(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 在渲染该组件的对应路由被 confirm 前调用</span></span><br><span class=\"line\">  <span class=\"comment\">// 不！能！直接获取组件实例 `this`</span></span><br><span class=\"line\">  <span class=\"comment\">// 但是可以在next回调获取`this`</span></span><br><span class=\"line\">  <span class=\"comment\">// 因为当守卫执行前，组件实例还没被创建</span></span><br><span class=\"line\">  <span class=\"comment\">// next一定要调用</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"beforeRouteUpdate\"><a href=\"#beforeRouteUpdate\" class=\"headerlink\" title=\"beforeRouteUpdate\"></a>beforeRouteUpdate</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">beforeRouteUpdate</span>(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 在当前路由改变，但是该组件被复用时调用</span></span><br><span class=\"line\">  <span class=\"comment\">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span></span><br><span class=\"line\">  <span class=\"comment\">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class=\"line\">  <span class=\"comment\">// 可以访问组件实例 `this`</span></span><br><span class=\"line\">  <span class=\"comment\">// next一定要调用</span></span><br><span class=\"line\">  <span class=\"comment\">// next无需传参</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"beforeRouteLeave\"><a href=\"#beforeRouteLeave\" class=\"headerlink\" title=\"beforeRouteLeave\"></a>beforeRouteLeave</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">beforeRouteLeave</span>(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 导航离开该组件的对应路由时调用</span></span><br><span class=\"line\">  <span class=\"comment\">// 可以访问组件实例 `this`</span></span><br><span class=\"line\">  <span class=\"comment\">// next一定要调用</span></span><br><span class=\"line\">  <span class=\"comment\">// next无需传参</span></span><br><span class=\"line\">  <span class=\"comment\">// next(false)可以阻止跳转</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"完整的导航流程\"><a href=\"#完整的导航流程\" class=\"headerlink\" title=\"完整的导航流程\"></a>完整的导航流程</h2><ol>\n<li>导航被触发。</li>\n<li>在失活的组件里调用 beforeRouteLeave 守卫。</li>\n<li>调用全局的 beforeEach 守卫。</li>\n<li>在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。</li>\n<li>在路由配置里调用 beforeEnter。</li>\n<li>解析异步路由组件。</li>\n<li>在被激活的组件里调用 beforeRouteEnter。</li>\n<li>调用全局的 beforeResolve 守卫 (2.5+)。</li>\n<li>导航被确认。confirmed</li>\n<li>调用全局的 afterEach 钩子。</li>\n<li>触发 DOM 更新。</li>\n<li>调用 beforeRouteEnter 守卫中传给 next 的回调函数，创建好的组件实例会作为回调函数的参数传入。</li>\n</ol>\n"},{"title":"vue runtime 和 esm","date":"2020-07-31T16:00:00.000Z","_content":"## 一. esm是vue 的“运行时”和“编译器”的集合\n\n### 运行时\n\n运行时是用来创建 Vue 实例、渲染并处理虚拟 DOM 等的代码。基本上就是除去编译器的其它一切。\n\n\n### 编译器\n\n用来将模板字符串编译成为 JavaScript 渲染函数的代码。\n\n在客户端编译模板包含以下情况：\n\n1. el属性指定模版挂载的DOM，和该DOM包含的html，也就是说，既没有指定template，又没有render函数\n\n2. 用template属性指定模板渲染的字符串\n\n### 如何选择\n\nvue的package.json文件中的module属性指定了模块的入口文件为vue.runtime.esm.js，为什么呢，因为这个只包含了运行时，不包含编译器。相比全部包含的vue.esm.js文件而言，vue.runtime.esm.js体积小了将近三分之一，初始化运行速度相对来说会高一些。\n\n我发现，在开发单页应用的时候，绝大多数情况下可以避免出现使用编译器的情况，所以，我只说下我遇到的情况。\n\n通常，我们的单页应用的入口html，入口文件和顶级组件分别是index.html, main.js和App.js。代码如下：\n\n```html\n<!-- index.html -->\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\n    <title></title>\n  </head>\n  <body>\n    <div id=\"app\">\n    </div>\n    <!-- built files will be auto injected -->\n  </body>\n</html>\n\n<!-- main.js -->\nimport Vue from 'vue'\nimport App from './App'\n\nVue.config.productionTip = false\n\nnew Vue({\n  el: '#app',\n  template: '<App/>',\n  components: {App}\n})\n\n<!-- App.vue -->\n<template>\n  <div>\n    HelloWorld\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'App'\n}\n</script>\n```\n\n就像上面这种情况，初始化根实例的时候，用template指定了挂载元素，这就意味着，一定要用编译器。如果你的webpack.config.js里面没有设置vue的alias，并且，在main.js文件中，直接使用import Vue from 'vue'，你会发现，浏览器会报错:\n\n\n```\n[Vue warn]: You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.\n```\n\n但是，如果你把\n\n```\nimport Vue from 'vue'\n```\n改成\n\n```\nimport Vue from 'vue/dist/vue.esm.js'\n```\n就会运行正常。\n不知道有多少项目都只是因为这个根实例导致不得不引入vue.esm.js。\n\n那么，针对这个情况怎么解决呢？想必很多人都知道答案了。代码如下：\n\n\n```html\n<!-- index.html -->\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\n    <title></title>\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <!-- built files will be auto injected -->\n  </body>\n</html>\n\n<!-- main.js -->\nimport Vue from 'vue'\nimport App from './App'\n\nVue.config.productionTip = false\n\nnew Vue({\n  el: '#app',\n  render(h) {\n    return h(App)\n  }\n})\n\n<!-- App.vue -->\n<template>\n  <div>\n    HelloWorld\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'App'\n}\n</script>\n```\n其实只改了一行代码，就是把main.js中的template替换成render函数。之前发现有的项目用render有的直接template，现在才知道是这么回事。\n\n## 二. esm和common什么关系，为什么除了runtime.esm和esm之外，还有vue.common.js和vue.js呢？\n\n### 1. esm全称是ESModule，意思是遵循es6的import export模块化规则。\n\n### 2. common的意思是遵循common.js的exports模块化规则。\n\n### 3. 如何选择?\n\n我们知道common.js的模块化是输出一个exports对象，没法做到按需引入，一旦引入，就是用 require引入整个exports对象。但是ES6的import 可以选择引入哪些属性。\n\n前者是运行时引入，后者是编译时引入（NodeJS打包）。由于编译时即可知道哪些是没有用到的，这样就可以达到tree shaking的目的（通过webpack配合达到）。\n\nesm.js文件里面是符合ES6模块规则的es5的语法，是经过babel编译过的。为什么要是es5的语法呢？一般情况下业务代码在使用babel-loader的时候会exclude掉node_module目录，这是因为，node_module目录里面有大量的源代码，处理起来很浪费时间，所以干脆模块开发者帮你编译好，别人直接用你编译好的，而且能tree shaking的代码版本即可。\n","source":"_posts/vue/vue-runtime-compile.md","raw":"---\ntitle: vue runtime 和 esm\ncategories: vue\ntags: [vue]\ndate: 2020-8-1\n---\n## 一. esm是vue 的“运行时”和“编译器”的集合\n\n### 运行时\n\n运行时是用来创建 Vue 实例、渲染并处理虚拟 DOM 等的代码。基本上就是除去编译器的其它一切。\n\n\n### 编译器\n\n用来将模板字符串编译成为 JavaScript 渲染函数的代码。\n\n在客户端编译模板包含以下情况：\n\n1. el属性指定模版挂载的DOM，和该DOM包含的html，也就是说，既没有指定template，又没有render函数\n\n2. 用template属性指定模板渲染的字符串\n\n### 如何选择\n\nvue的package.json文件中的module属性指定了模块的入口文件为vue.runtime.esm.js，为什么呢，因为这个只包含了运行时，不包含编译器。相比全部包含的vue.esm.js文件而言，vue.runtime.esm.js体积小了将近三分之一，初始化运行速度相对来说会高一些。\n\n我发现，在开发单页应用的时候，绝大多数情况下可以避免出现使用编译器的情况，所以，我只说下我遇到的情况。\n\n通常，我们的单页应用的入口html，入口文件和顶级组件分别是index.html, main.js和App.js。代码如下：\n\n```html\n<!-- index.html -->\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\n    <title></title>\n  </head>\n  <body>\n    <div id=\"app\">\n    </div>\n    <!-- built files will be auto injected -->\n  </body>\n</html>\n\n<!-- main.js -->\nimport Vue from 'vue'\nimport App from './App'\n\nVue.config.productionTip = false\n\nnew Vue({\n  el: '#app',\n  template: '<App/>',\n  components: {App}\n})\n\n<!-- App.vue -->\n<template>\n  <div>\n    HelloWorld\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'App'\n}\n</script>\n```\n\n就像上面这种情况，初始化根实例的时候，用template指定了挂载元素，这就意味着，一定要用编译器。如果你的webpack.config.js里面没有设置vue的alias，并且，在main.js文件中，直接使用import Vue from 'vue'，你会发现，浏览器会报错:\n\n\n```\n[Vue warn]: You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.\n```\n\n但是，如果你把\n\n```\nimport Vue from 'vue'\n```\n改成\n\n```\nimport Vue from 'vue/dist/vue.esm.js'\n```\n就会运行正常。\n不知道有多少项目都只是因为这个根实例导致不得不引入vue.esm.js。\n\n那么，针对这个情况怎么解决呢？想必很多人都知道答案了。代码如下：\n\n\n```html\n<!-- index.html -->\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\n    <title></title>\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <!-- built files will be auto injected -->\n  </body>\n</html>\n\n<!-- main.js -->\nimport Vue from 'vue'\nimport App from './App'\n\nVue.config.productionTip = false\n\nnew Vue({\n  el: '#app',\n  render(h) {\n    return h(App)\n  }\n})\n\n<!-- App.vue -->\n<template>\n  <div>\n    HelloWorld\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'App'\n}\n</script>\n```\n其实只改了一行代码，就是把main.js中的template替换成render函数。之前发现有的项目用render有的直接template，现在才知道是这么回事。\n\n## 二. esm和common什么关系，为什么除了runtime.esm和esm之外，还有vue.common.js和vue.js呢？\n\n### 1. esm全称是ESModule，意思是遵循es6的import export模块化规则。\n\n### 2. common的意思是遵循common.js的exports模块化规则。\n\n### 3. 如何选择?\n\n我们知道common.js的模块化是输出一个exports对象，没法做到按需引入，一旦引入，就是用 require引入整个exports对象。但是ES6的import 可以选择引入哪些属性。\n\n前者是运行时引入，后者是编译时引入（NodeJS打包）。由于编译时即可知道哪些是没有用到的，这样就可以达到tree shaking的目的（通过webpack配合达到）。\n\nesm.js文件里面是符合ES6模块规则的es5的语法，是经过babel编译过的。为什么要是es5的语法呢？一般情况下业务代码在使用babel-loader的时候会exclude掉node_module目录，这是因为，node_module目录里面有大量的源代码，处理起来很浪费时间，所以干脆模块开发者帮你编译好，别人直接用你编译好的，而且能tree shaking的代码版本即可。\n","slug":"vue/vue-runtime-compile","published":1,"updated":"2021-06-14T02:15:05.036Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc76001oecq8fv1kd0z4","content":"<h2 id=\"一-esm是vue-的“运行时”和“编译器”的集合\"><a href=\"#一-esm是vue-的“运行时”和“编译器”的集合\" class=\"headerlink\" title=\"一. esm是vue 的“运行时”和“编译器”的集合\"></a>一. esm是vue 的“运行时”和“编译器”的集合</h2><h3 id=\"运行时\"><a href=\"#运行时\" class=\"headerlink\" title=\"运行时\"></a>运行时</h3><p>运行时是用来创建 Vue 实例、渲染并处理虚拟 DOM 等的代码。基本上就是除去编译器的其它一切。</p>\n<h3 id=\"编译器\"><a href=\"#编译器\" class=\"headerlink\" title=\"编译器\"></a>编译器</h3><p>用来将模板字符串编译成为 JavaScript 渲染函数的代码。</p>\n<p>在客户端编译模板包含以下情况：</p>\n<ol>\n<li><p>el属性指定模版挂载的DOM，和该DOM包含的html，也就是说，既没有指定template，又没有render函数</p>\n</li>\n<li><p>用template属性指定模板渲染的字符串</p>\n</li>\n</ol>\n<h3 id=\"如何选择\"><a href=\"#如何选择\" class=\"headerlink\" title=\"如何选择\"></a>如何选择</h3><p>vue的package.json文件中的module属性指定了模块的入口文件为vue.runtime.esm.js，为什么呢，因为这个只包含了运行时，不包含编译器。相比全部包含的vue.esm.js文件而言，vue.runtime.esm.js体积小了将近三分之一，初始化运行速度相对来说会高一些。</p>\n<p>我发现，在开发单页应用的时候，绝大多数情况下可以避免出现使用编译器的情况，所以，我只说下我遇到的情况。</p>\n<p>通常，我们的单页应用的入口html，入口文件和顶级组件分别是index.html, main.js和App.js。代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- index.html --&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- main.js --&gt;</span></span><br><span class=\"line\">import Vue from &#x27;vue&#x27;</span><br><span class=\"line\">import App from &#x27;./App&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.productionTip = false</span><br><span class=\"line\"></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: &#x27;#app&#x27;,</span><br><span class=\"line\">  template: &#x27;<span class=\"tag\">&lt;<span class=\"name\">App</span>/&gt;</span>&#x27;,</span><br><span class=\"line\">  components: &#123;App&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- App.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    HelloWorld</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;App&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>就像上面这种情况，初始化根实例的时候，用template指定了挂载元素，这就意味着，一定要用编译器。如果你的webpack.config.js里面没有设置vue的alias，并且，在main.js文件中，直接使用import Vue from ‘vue’，你会发现，浏览器会报错:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Vue warn]: You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.</span><br></pre></td></tr></table></figure>\n\n<p>但是，如果你把</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vue from &#x27;vue&#x27;</span><br></pre></td></tr></table></figure>\n<p>改成</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vue from &#x27;vue/dist/vue.esm.js&#x27;</span><br></pre></td></tr></table></figure>\n<p>就会运行正常。<br>不知道有多少项目都只是因为这个根实例导致不得不引入vue.esm.js。</p>\n<p>那么，针对这个情况怎么解决呢？想必很多人都知道答案了。代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- index.html --&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- main.js --&gt;</span></span><br><span class=\"line\">import Vue from &#x27;vue&#x27;</span><br><span class=\"line\">import App from &#x27;./App&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.productionTip = false</span><br><span class=\"line\"></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: &#x27;#app&#x27;,</span><br><span class=\"line\">  render(h) &#123;</span><br><span class=\"line\">    return h(App)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- App.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    HelloWorld</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;App&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其实只改了一行代码，就是把main.js中的template替换成render函数。之前发现有的项目用render有的直接template，现在才知道是这么回事。</p>\n<h2 id=\"二-esm和common什么关系，为什么除了runtime-esm和esm之外，还有vue-common-js和vue-js呢？\"><a href=\"#二-esm和common什么关系，为什么除了runtime-esm和esm之外，还有vue-common-js和vue-js呢？\" class=\"headerlink\" title=\"二. esm和common什么关系，为什么除了runtime.esm和esm之外，还有vue.common.js和vue.js呢？\"></a>二. esm和common什么关系，为什么除了runtime.esm和esm之外，还有vue.common.js和vue.js呢？</h2><h3 id=\"1-esm全称是ESModule，意思是遵循es6的import-export模块化规则。\"><a href=\"#1-esm全称是ESModule，意思是遵循es6的import-export模块化规则。\" class=\"headerlink\" title=\"1. esm全称是ESModule，意思是遵循es6的import export模块化规则。\"></a>1. esm全称是ESModule，意思是遵循es6的import export模块化规则。</h3><h3 id=\"2-common的意思是遵循common-js的exports模块化规则。\"><a href=\"#2-common的意思是遵循common-js的exports模块化规则。\" class=\"headerlink\" title=\"2. common的意思是遵循common.js的exports模块化规则。\"></a>2. common的意思是遵循common.js的exports模块化规则。</h3><h3 id=\"3-如何选择\"><a href=\"#3-如何选择\" class=\"headerlink\" title=\"3. 如何选择?\"></a>3. 如何选择?</h3><p>我们知道common.js的模块化是输出一个exports对象，没法做到按需引入，一旦引入，就是用 require引入整个exports对象。但是ES6的import 可以选择引入哪些属性。</p>\n<p>前者是运行时引入，后者是编译时引入（NodeJS打包）。由于编译时即可知道哪些是没有用到的，这样就可以达到tree shaking的目的（通过webpack配合达到）。</p>\n<p>esm.js文件里面是符合ES6模块规则的es5的语法，是经过babel编译过的。为什么要是es5的语法呢？一般情况下业务代码在使用babel-loader的时候会exclude掉node_module目录，这是因为，node_module目录里面有大量的源代码，处理起来很浪费时间，所以干脆模块开发者帮你编译好，别人直接用你编译好的，而且能tree shaking的代码版本即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一-esm是vue-的“运行时”和“编译器”的集合\"><a href=\"#一-esm是vue-的“运行时”和“编译器”的集合\" class=\"headerlink\" title=\"一. esm是vue 的“运行时”和“编译器”的集合\"></a>一. esm是vue 的“运行时”和“编译器”的集合</h2><h3 id=\"运行时\"><a href=\"#运行时\" class=\"headerlink\" title=\"运行时\"></a>运行时</h3><p>运行时是用来创建 Vue 实例、渲染并处理虚拟 DOM 等的代码。基本上就是除去编译器的其它一切。</p>\n<h3 id=\"编译器\"><a href=\"#编译器\" class=\"headerlink\" title=\"编译器\"></a>编译器</h3><p>用来将模板字符串编译成为 JavaScript 渲染函数的代码。</p>\n<p>在客户端编译模板包含以下情况：</p>\n<ol>\n<li><p>el属性指定模版挂载的DOM，和该DOM包含的html，也就是说，既没有指定template，又没有render函数</p>\n</li>\n<li><p>用template属性指定模板渲染的字符串</p>\n</li>\n</ol>\n<h3 id=\"如何选择\"><a href=\"#如何选择\" class=\"headerlink\" title=\"如何选择\"></a>如何选择</h3><p>vue的package.json文件中的module属性指定了模块的入口文件为vue.runtime.esm.js，为什么呢，因为这个只包含了运行时，不包含编译器。相比全部包含的vue.esm.js文件而言，vue.runtime.esm.js体积小了将近三分之一，初始化运行速度相对来说会高一些。</p>\n<p>我发现，在开发单页应用的时候，绝大多数情况下可以避免出现使用编译器的情况，所以，我只说下我遇到的情况。</p>\n<p>通常，我们的单页应用的入口html，入口文件和顶级组件分别是index.html, main.js和App.js。代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- index.html --&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- main.js --&gt;</span></span><br><span class=\"line\">import Vue from &#x27;vue&#x27;</span><br><span class=\"line\">import App from &#x27;./App&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.productionTip = false</span><br><span class=\"line\"></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: &#x27;#app&#x27;,</span><br><span class=\"line\">  template: &#x27;<span class=\"tag\">&lt;<span class=\"name\">App</span>/&gt;</span>&#x27;,</span><br><span class=\"line\">  components: &#123;App&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- App.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    HelloWorld</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;App&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>就像上面这种情况，初始化根实例的时候，用template指定了挂载元素，这就意味着，一定要用编译器。如果你的webpack.config.js里面没有设置vue的alias，并且，在main.js文件中，直接使用import Vue from ‘vue’，你会发现，浏览器会报错:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Vue warn]: You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.</span><br></pre></td></tr></table></figure>\n\n<p>但是，如果你把</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vue from &#x27;vue&#x27;</span><br></pre></td></tr></table></figure>\n<p>改成</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vue from &#x27;vue/dist/vue.esm.js&#x27;</span><br></pre></td></tr></table></figure>\n<p>就会运行正常。<br>不知道有多少项目都只是因为这个根实例导致不得不引入vue.esm.js。</p>\n<p>那么，针对这个情况怎么解决呢？想必很多人都知道答案了。代码如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- index.html --&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- main.js --&gt;</span></span><br><span class=\"line\">import Vue from &#x27;vue&#x27;</span><br><span class=\"line\">import App from &#x27;./App&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.productionTip = false</span><br><span class=\"line\"></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">  el: &#x27;#app&#x27;,</span><br><span class=\"line\">  render(h) &#123;</span><br><span class=\"line\">    return h(App)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- App.vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    HelloWorld</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;App&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其实只改了一行代码，就是把main.js中的template替换成render函数。之前发现有的项目用render有的直接template，现在才知道是这么回事。</p>\n<h2 id=\"二-esm和common什么关系，为什么除了runtime-esm和esm之外，还有vue-common-js和vue-js呢？\"><a href=\"#二-esm和common什么关系，为什么除了runtime-esm和esm之外，还有vue-common-js和vue-js呢？\" class=\"headerlink\" title=\"二. esm和common什么关系，为什么除了runtime.esm和esm之外，还有vue.common.js和vue.js呢？\"></a>二. esm和common什么关系，为什么除了runtime.esm和esm之外，还有vue.common.js和vue.js呢？</h2><h3 id=\"1-esm全称是ESModule，意思是遵循es6的import-export模块化规则。\"><a href=\"#1-esm全称是ESModule，意思是遵循es6的import-export模块化规则。\" class=\"headerlink\" title=\"1. esm全称是ESModule，意思是遵循es6的import export模块化规则。\"></a>1. esm全称是ESModule，意思是遵循es6的import export模块化规则。</h3><h3 id=\"2-common的意思是遵循common-js的exports模块化规则。\"><a href=\"#2-common的意思是遵循common-js的exports模块化规则。\" class=\"headerlink\" title=\"2. common的意思是遵循common.js的exports模块化规则。\"></a>2. common的意思是遵循common.js的exports模块化规则。</h3><h3 id=\"3-如何选择\"><a href=\"#3-如何选择\" class=\"headerlink\" title=\"3. 如何选择?\"></a>3. 如何选择?</h3><p>我们知道common.js的模块化是输出一个exports对象，没法做到按需引入，一旦引入，就是用 require引入整个exports对象。但是ES6的import 可以选择引入哪些属性。</p>\n<p>前者是运行时引入，后者是编译时引入（NodeJS打包）。由于编译时即可知道哪些是没有用到的，这样就可以达到tree shaking的目的（通过webpack配合达到）。</p>\n<p>esm.js文件里面是符合ES6模块规则的es5的语法，是经过babel编译过的。为什么要是es5的语法呢？一般情况下业务代码在使用babel-loader的时候会exclude掉node_module目录，这是因为，node_module目录里面有大量的源代码，处理起来很浪费时间，所以干脆模块开发者帮你编译好，别人直接用你编译好的，而且能tree shaking的代码版本即可。</p>\n"},{"title":"常见的vue 报错信息","date":"2020-07-08T16:00:00.000Z","_content":"\n\n### 模板渲染初始化问题\n\n```ruby\nProxy.render Cannot read property '0' of undefined\n```\n上面这个报错是指在构建DOM的时候，有个变量是undefined，但是这个变量被当成Array类型并访问了下标值。\n\n这种情况通常出现在数据初始化的时候，某些属性不存在，但是访问了这个不存在的属性的子属性\n\n### 计算属性绑定v-model\n```ruby\nComputed property \"\" was assigned to but it has no setter.\n```\n\n通常这个报错的原因是，用一个计算属性绑定到v-model上面。\n\n```ruby\n//  template部分\n<el-rate\n v-model=\"rate\"\n disabled></el-rate>\n// js部分\ncomputed: {\n    rate() {\n      if (this.detail) {\n        return parseFloat(this.detail.starRating) || 0\n      } else {\n        return 0\n      }\n    }\n  }\n```\n\n解决办法\n\n1. 尽量避免计算属性用在v-model上，因为计算属性一般是通过现有的值计算出来的。如果可以通过其它方式修改计算属性的话，数据状态会比较混乱。\n2. 计算属性默认是只有getter的，就是说只能取值，不能设值。computed支持手动添加set函数。具体参考[vue 计算属性](https://cn.vuejs.org/v2/api/#computed)\n","source":"_posts/vue/vue-error.md","raw":"---\ntitle: 常见的vue 报错信息\ncategories: vue\ntags: vue\ndate: 2020-7-9\n---\n\n\n### 模板渲染初始化问题\n\n```ruby\nProxy.render Cannot read property '0' of undefined\n```\n上面这个报错是指在构建DOM的时候，有个变量是undefined，但是这个变量被当成Array类型并访问了下标值。\n\n这种情况通常出现在数据初始化的时候，某些属性不存在，但是访问了这个不存在的属性的子属性\n\n### 计算属性绑定v-model\n```ruby\nComputed property \"\" was assigned to but it has no setter.\n```\n\n通常这个报错的原因是，用一个计算属性绑定到v-model上面。\n\n```ruby\n//  template部分\n<el-rate\n v-model=\"rate\"\n disabled></el-rate>\n// js部分\ncomputed: {\n    rate() {\n      if (this.detail) {\n        return parseFloat(this.detail.starRating) || 0\n      } else {\n        return 0\n      }\n    }\n  }\n```\n\n解决办法\n\n1. 尽量避免计算属性用在v-model上，因为计算属性一般是通过现有的值计算出来的。如果可以通过其它方式修改计算属性的话，数据状态会比较混乱。\n2. 计算属性默认是只有getter的，就是说只能取值，不能设值。computed支持手动添加set函数。具体参考[vue 计算属性](https://cn.vuejs.org/v2/api/#computed)\n","slug":"vue/vue-error","published":1,"updated":"2021-06-14T02:14:46.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc76001pecq865mg1g88","content":"<h3 id=\"模板渲染初始化问题\"><a href=\"#模板渲染初始化问题\" class=\"headerlink\" title=\"模板渲染初始化问题\"></a>模板渲染初始化问题</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Proxy.render Cannot read property <span class=\"string\">&#x27;0&#x27;</span> of undefined</span><br></pre></td></tr></table></figure>\n<p>上面这个报错是指在构建DOM的时候，有个变量是undefined，但是这个变量被当成Array类型并访问了下标值。</p>\n<p>这种情况通常出现在数据初始化的时候，某些属性不存在，但是访问了这个不存在的属性的子属性</p>\n<h3 id=\"计算属性绑定v-model\"><a href=\"#计算属性绑定v-model\" class=\"headerlink\" title=\"计算属性绑定v-model\"></a>计算属性绑定v-model</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Computed property <span class=\"string\">&quot;&quot;</span> was assigned to but it has no setter.</span><br></pre></td></tr></table></figure>\n\n<p>通常这个报错的原因是，用一个计算属性绑定到v-model上面。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/<span class=\"regexp\">/  template部分</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;el-rate</span></span><br><span class=\"line\"><span class=\"regexp\"> v-model=&quot;rate&quot;</span></span><br><span class=\"line\"><span class=\"regexp\"> disabled&gt;&lt;/el</span>-rate&gt;</span><br><span class=\"line\"><span class=\"regexp\">//</span> js部分</span><br><span class=\"line\"><span class=\"symbol\">computed:</span> &#123;</span><br><span class=\"line\">    rate() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (this.detail) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parseFloat(this.detail.starRating) <span class=\"params\">||</span> <span class=\"number\">0</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>解决办法</p>\n<ol>\n<li>尽量避免计算属性用在v-model上，因为计算属性一般是通过现有的值计算出来的。如果可以通过其它方式修改计算属性的话，数据状态会比较混乱。</li>\n<li>计算属性默认是只有getter的，就是说只能取值，不能设值。computed支持手动添加set函数。具体参考<a href=\"https://cn.vuejs.org/v2/api/#computed\">vue 计算属性</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"模板渲染初始化问题\"><a href=\"#模板渲染初始化问题\" class=\"headerlink\" title=\"模板渲染初始化问题\"></a>模板渲染初始化问题</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Proxy.render Cannot read property <span class=\"string\">&#x27;0&#x27;</span> of undefined</span><br></pre></td></tr></table></figure>\n<p>上面这个报错是指在构建DOM的时候，有个变量是undefined，但是这个变量被当成Array类型并访问了下标值。</p>\n<p>这种情况通常出现在数据初始化的时候，某些属性不存在，但是访问了这个不存在的属性的子属性</p>\n<h3 id=\"计算属性绑定v-model\"><a href=\"#计算属性绑定v-model\" class=\"headerlink\" title=\"计算属性绑定v-model\"></a>计算属性绑定v-model</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Computed property <span class=\"string\">&quot;&quot;</span> was assigned to but it has no setter.</span><br></pre></td></tr></table></figure>\n\n<p>通常这个报错的原因是，用一个计算属性绑定到v-model上面。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/<span class=\"regexp\">/  template部分</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;el-rate</span></span><br><span class=\"line\"><span class=\"regexp\"> v-model=&quot;rate&quot;</span></span><br><span class=\"line\"><span class=\"regexp\"> disabled&gt;&lt;/el</span>-rate&gt;</span><br><span class=\"line\"><span class=\"regexp\">//</span> js部分</span><br><span class=\"line\"><span class=\"symbol\">computed:</span> &#123;</span><br><span class=\"line\">    rate() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (this.detail) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parseFloat(this.detail.starRating) <span class=\"params\">||</span> <span class=\"number\">0</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>解决办法</p>\n<ol>\n<li>尽量避免计算属性用在v-model上，因为计算属性一般是通过现有的值计算出来的。如果可以通过其它方式修改计算属性的话，数据状态会比较混乱。</li>\n<li>计算属性默认是只有getter的，就是说只能取值，不能设值。computed支持手动添加set函数。具体参考<a href=\"https://cn.vuejs.org/v2/api/#computed\">vue 计算属性</a></li>\n</ol>\n"},{"title":"项目静态资源CDN服务无响应情况的回源","date":"2021-05-26T16:00:00.000Z","_content":"\n## 背景\n某日，华为云上部署的cdn服务故障导致部分区域静态资源（js和css）响应超时。这种情况是我们没有预料到的，幸亏用户不多，否则需要紧急发版将静态资源指向源服务器。\n\n我们的项目采用uni-app框架开发，内部基于vue-cli。生产模式会使用publicPath配置将静态资源指向cdn服务器，即，代码经过webpack编译后资源引用地址就已经固定了。\n\n## 任务拆解\n为了应对以上情况，我们需要实现一种机制，能够识别cdn异常，并切换资源为源服务器。\n\n我们的任务分为以下：\n1. publicPath运行时全局变更\n2. cdn资源请求异常识别方法\n3. 资源开关切换机制\n\n## 方案分析与实施\n### publicPath运行时全局变更\n经过分析打包后的模块代码：\n```\n/******/  function jsonpScriptSrc(chunkId) {\n/******/    return __webpack_require__.p + \"static/js/\" + ({\"project-qlymain-pages-404\":\"project-qlymain-pages-404\"}[chunkId]||chunkId) + \".\" + {\"chunk-0826ee9b\":\"964d9183\",\"chunk-69a5a22c\":\"9e1c8209\",\"project-qlymain-pages-404\":\"330de720\"}[chunkId] + \".js\"\n/******/  }\n/******/  ....此处省略一些中间代码\n/******/  // __webpack_public_path__\n/******/  __webpack_require__.p = \"/\";\n```\n以及webpack源码：\n```\nthis.hooks.requireExtensions.tap(\"MainTemplate\", (source, chunk, hash) => {\n  const buf = [];\n  const chunkMaps = chunk.getChunkMaps();\n  // ...\n  // ...\n  buf.push(\"// __webpack_public_path__\");\n  buf.push(`${this.requireFn}.p = ${JSON.stringify(publicPath)};`);\n  return Template.asString(buf);\n});\n```\n可以发现，publicPath被写入模块属性`__webpack_require__.p`上，我只需要修改这个属性值就可以了。\n\n一开始我写了个插件，通过拦截compiler钩子修改这个模块属性：\n```\nfunction pushBuff(valName, defaultVal, source) {\n  var buf = [];\n  buf.push(source);\n  buf.push('');\n  buf.push('// Dynamic assets path override (/build/plugins/runtime-publicpath-plugin)');\n  buf.push(`__webpack_require__.p = ${valName} || '${defaultVal}'`);\n  return buf.join('\\n');\n}\n// ...\nif (compiler.hooks && compiler.hooks.thisCompilation) {\n    compiler.hooks.thisCompilation.tap('RuntimePublicpathPlugin', function (compilation) {\n        compilation.mainTemplate.hooks.requireExtensions.tap('RuntimePublicpathPlugin', function (source, chunk, hash) {\n            return pushBuff(globalVariable, defaultPublicPath, source)\n        })\n    });\n}\n```\n\n但是，这个插件的目的是覆盖`__webpack_require__.p`的值为runtime的运行时全局变量（window[globalVariable]），但是我们的开关状态可能要存储到localstorage中（因为要实现状态缓存），而且存进去的字段名由业务代码决定，这样就导致插件和业务过渡耦合。\n\n后来发现业务代码中可以使用webpack提供的变量[__webpack_public_path__](https://webpack.js.org/api/module-variables/#__webpack_public_path__-webpack-specific)，webpack会在编译时将这些变量替换成__webpack_require__.p。\n\n至此，我们找到了publicPath运行时的覆盖方法：\n```\n__webpack_public_path__ = localstorage.getItem('__webpack_public_path__')\n```\n#### 异步资源加载\n打包后按需加载的代码：\n```\n// script path function\nfunction jsonpScriptSrc(chunkId) {\n    return __webpack_require__.p + \"\" + ({\n    \"project-qlymall-views-order-logisticsDetail\":\"project-qlymall-views-order-logisticsDetail\",\n    \"project-qlymall-views-order-refundDetail\":\"project-qlymall-views-order-refundDetail\"\n    // ......\n    }[chunkId]||chunkId)+'.js'\n}\n// ......\n// 创建script标签\n/******/        var script = document.createElement('script');\n/******/        // ......\n/******/        script.src = jsonpScriptSrc(chunkId);\n/******/\n```\n为了使我们的开关机制生效，需要保证jsonpScriptSrc方法在publicPath变更后执行。实施发现只要将以下语句放在入口文件最顶部执行即可。\n```\n__webpack_public_path__ = localstorage.getItem('__webpack_public_path__')\n```\n\n\n#### 插入index.html的cdn标签需要重写\n处理完异步加载的资源，我们还要处理入口index.html的资源。vue-cli内部使用了html-webpack-plugin将所有的assets插入了index.html中，包括pulicPath：\n```\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n    <head>\n        <meta charset=\"utf-8\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n        <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, viewport-fit=cover\">\n        <link rel=\"stylesheet\" href=\"https://mycdn.mycompany.com/static/index.css\" />\n    </head>\n    <body>\n        <div id=\"app\"></div>\n        <script src=https://mycdn.mycompany.com/static/js/index.bd9cfc6f.js></script>\n    </body>\n</html>\n```\n如何处理这种情况呢？有2个思路。\n1. 本着解决问题不如绕开问题的原则，考虑入口文件代码直接内联\n2. 入口文件也使用异步加载的方法\n\n针对方案1，看起来很简单粗暴，但是会产生一个问题：index.html使用的是源站资源，而非cdn。index.js一般代码比较大，如果内联是不是本身就违背了cdn的初衷呢？所以最终我们采用了方案2。\n\n##### 入口文件异步加载\n让入口文件异步加载的方法，一开始想到的方案是，写插件，覆盖vue-cli使用html-webpack-plugin的默认行为，替代为动态插入script标签的逻辑，这段代码由于不经过babel，所以语法需要谨慎。想想这样做有点大费周章了。\n\n后来发现可以直接覆盖掉入口文件，我们称之为main2.js，该文件关键代码：\n```\n/* 加载主入口文件 */\nimport('@/main.js').catch(err => {\n  handleError(err)\n})\n```\n这样就巧妙实现了入口文件异步加载。那么问题来了，main2.js又会被html-webpack-plugin插入index.html。由于main2.js的代码量较少，我选择内联，使用HtmlWebpackInlineSourcePlugin将main.js内联到index.html中。\n#### index.css的处理\n在调试HtmlWebpackInlineSourcePlugin的过程中发现，index.css并不在assets列表中。我们看看index.css的生成代码：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622347411128-image.png)\n\n这段代码做了2件事：\n1. 通过检查html中有没有VUE_APP_INDEX_CSS_HASH来判断生辰的index.css文件名要不要带上hash\n2. 将@dcloudio/uni-h5/dist/index.css文件中的内容取出来再加工，用copyWebpackPlugin插件将文件粘贴到dist目录中。\n\n鉴于该文件不大，可以选择内联或者在main2.js中动态插入link标签。我选择了后者。\n\n既然选择了动态插入link标签，就要知道，index.[hash].css的文件名，如何在运行时知晓呢？很简单，使用definePlugin将VUE_APP_INDEX_CSS_HASH注入运行时即可。\n\n### cdn加载异常识别\n\n一开始想到的是使用window.addEventListener('error')，但是尝试后发现无法捕获promise中的异常，所以改用window.addEventListener('unhandledrejection')。\n\n在回调中，需要做判断区分是否是资源加载超时。通过分析webpack模块源码可以发现它有做超时异常处理：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622347667614-image.png)\n\n且超时时间可以通过output.chunkLoadTimeout配置修改，默认值是120s，觉得太长的可以考虑覆盖。对于现在的用户来说，12s都算很长了，所以我选择缩短到12s。此外，超时异常格式可以通过上图的type和message匹配。\n\n## cdn开关切换\n针对开关切换，一开始想到的方案是通过接口变更开关状态，但是这样存在以下问题：\n1. 简单的开关可以通过人为控制apollo字段实现，但是无法感知客户端异常。开发者需要实现一个客户端告警机制触发开关变更，实现成本较高。\n2. 开关属于全局性的，一旦切换到源服务器，将会对源服务器造成较大压力。\n\n后来选择客户端自行切换开关的方案：\n\n**识别到cdn加载超时之后，我们业务的处理逻辑是：切换开关，将开关缓存5min，缓存的原因是，我们的业务属于APP内嵌h5，每个窗口都会重新初始化，所以需要窗口之间开关状态共享。**\n\n\n## 难点清单\n* 找到动态资源拼接的代码，找到__webpack_require__.p，如何重写它，使得运行时可修改\nindex.css处理\n* 内联？还是动态插入的选择\n* index.css文件名有hash怎么办\n\n\n","source":"_posts/webpack/cdn-switch.md","raw":"---\ntitle: 项目静态资源CDN服务无响应情况的回源\ncategories: 工程化\ntags: [webpack, cdn]\ndate: 2021-5-27\n---\n\n## 背景\n某日，华为云上部署的cdn服务故障导致部分区域静态资源（js和css）响应超时。这种情况是我们没有预料到的，幸亏用户不多，否则需要紧急发版将静态资源指向源服务器。\n\n我们的项目采用uni-app框架开发，内部基于vue-cli。生产模式会使用publicPath配置将静态资源指向cdn服务器，即，代码经过webpack编译后资源引用地址就已经固定了。\n\n## 任务拆解\n为了应对以上情况，我们需要实现一种机制，能够识别cdn异常，并切换资源为源服务器。\n\n我们的任务分为以下：\n1. publicPath运行时全局变更\n2. cdn资源请求异常识别方法\n3. 资源开关切换机制\n\n## 方案分析与实施\n### publicPath运行时全局变更\n经过分析打包后的模块代码：\n```\n/******/  function jsonpScriptSrc(chunkId) {\n/******/    return __webpack_require__.p + \"static/js/\" + ({\"project-qlymain-pages-404\":\"project-qlymain-pages-404\"}[chunkId]||chunkId) + \".\" + {\"chunk-0826ee9b\":\"964d9183\",\"chunk-69a5a22c\":\"9e1c8209\",\"project-qlymain-pages-404\":\"330de720\"}[chunkId] + \".js\"\n/******/  }\n/******/  ....此处省略一些中间代码\n/******/  // __webpack_public_path__\n/******/  __webpack_require__.p = \"/\";\n```\n以及webpack源码：\n```\nthis.hooks.requireExtensions.tap(\"MainTemplate\", (source, chunk, hash) => {\n  const buf = [];\n  const chunkMaps = chunk.getChunkMaps();\n  // ...\n  // ...\n  buf.push(\"// __webpack_public_path__\");\n  buf.push(`${this.requireFn}.p = ${JSON.stringify(publicPath)};`);\n  return Template.asString(buf);\n});\n```\n可以发现，publicPath被写入模块属性`__webpack_require__.p`上，我只需要修改这个属性值就可以了。\n\n一开始我写了个插件，通过拦截compiler钩子修改这个模块属性：\n```\nfunction pushBuff(valName, defaultVal, source) {\n  var buf = [];\n  buf.push(source);\n  buf.push('');\n  buf.push('// Dynamic assets path override (/build/plugins/runtime-publicpath-plugin)');\n  buf.push(`__webpack_require__.p = ${valName} || '${defaultVal}'`);\n  return buf.join('\\n');\n}\n// ...\nif (compiler.hooks && compiler.hooks.thisCompilation) {\n    compiler.hooks.thisCompilation.tap('RuntimePublicpathPlugin', function (compilation) {\n        compilation.mainTemplate.hooks.requireExtensions.tap('RuntimePublicpathPlugin', function (source, chunk, hash) {\n            return pushBuff(globalVariable, defaultPublicPath, source)\n        })\n    });\n}\n```\n\n但是，这个插件的目的是覆盖`__webpack_require__.p`的值为runtime的运行时全局变量（window[globalVariable]），但是我们的开关状态可能要存储到localstorage中（因为要实现状态缓存），而且存进去的字段名由业务代码决定，这样就导致插件和业务过渡耦合。\n\n后来发现业务代码中可以使用webpack提供的变量[__webpack_public_path__](https://webpack.js.org/api/module-variables/#__webpack_public_path__-webpack-specific)，webpack会在编译时将这些变量替换成__webpack_require__.p。\n\n至此，我们找到了publicPath运行时的覆盖方法：\n```\n__webpack_public_path__ = localstorage.getItem('__webpack_public_path__')\n```\n#### 异步资源加载\n打包后按需加载的代码：\n```\n// script path function\nfunction jsonpScriptSrc(chunkId) {\n    return __webpack_require__.p + \"\" + ({\n    \"project-qlymall-views-order-logisticsDetail\":\"project-qlymall-views-order-logisticsDetail\",\n    \"project-qlymall-views-order-refundDetail\":\"project-qlymall-views-order-refundDetail\"\n    // ......\n    }[chunkId]||chunkId)+'.js'\n}\n// ......\n// 创建script标签\n/******/        var script = document.createElement('script');\n/******/        // ......\n/******/        script.src = jsonpScriptSrc(chunkId);\n/******/\n```\n为了使我们的开关机制生效，需要保证jsonpScriptSrc方法在publicPath变更后执行。实施发现只要将以下语句放在入口文件最顶部执行即可。\n```\n__webpack_public_path__ = localstorage.getItem('__webpack_public_path__')\n```\n\n\n#### 插入index.html的cdn标签需要重写\n处理完异步加载的资源，我们还要处理入口index.html的资源。vue-cli内部使用了html-webpack-plugin将所有的assets插入了index.html中，包括pulicPath：\n```\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n    <head>\n        <meta charset=\"utf-8\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n        <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, viewport-fit=cover\">\n        <link rel=\"stylesheet\" href=\"https://mycdn.mycompany.com/static/index.css\" />\n    </head>\n    <body>\n        <div id=\"app\"></div>\n        <script src=https://mycdn.mycompany.com/static/js/index.bd9cfc6f.js></script>\n    </body>\n</html>\n```\n如何处理这种情况呢？有2个思路。\n1. 本着解决问题不如绕开问题的原则，考虑入口文件代码直接内联\n2. 入口文件也使用异步加载的方法\n\n针对方案1，看起来很简单粗暴，但是会产生一个问题：index.html使用的是源站资源，而非cdn。index.js一般代码比较大，如果内联是不是本身就违背了cdn的初衷呢？所以最终我们采用了方案2。\n\n##### 入口文件异步加载\n让入口文件异步加载的方法，一开始想到的方案是，写插件，覆盖vue-cli使用html-webpack-plugin的默认行为，替代为动态插入script标签的逻辑，这段代码由于不经过babel，所以语法需要谨慎。想想这样做有点大费周章了。\n\n后来发现可以直接覆盖掉入口文件，我们称之为main2.js，该文件关键代码：\n```\n/* 加载主入口文件 */\nimport('@/main.js').catch(err => {\n  handleError(err)\n})\n```\n这样就巧妙实现了入口文件异步加载。那么问题来了，main2.js又会被html-webpack-plugin插入index.html。由于main2.js的代码量较少，我选择内联，使用HtmlWebpackInlineSourcePlugin将main.js内联到index.html中。\n#### index.css的处理\n在调试HtmlWebpackInlineSourcePlugin的过程中发现，index.css并不在assets列表中。我们看看index.css的生成代码：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622347411128-image.png)\n\n这段代码做了2件事：\n1. 通过检查html中有没有VUE_APP_INDEX_CSS_HASH来判断生辰的index.css文件名要不要带上hash\n2. 将@dcloudio/uni-h5/dist/index.css文件中的内容取出来再加工，用copyWebpackPlugin插件将文件粘贴到dist目录中。\n\n鉴于该文件不大，可以选择内联或者在main2.js中动态插入link标签。我选择了后者。\n\n既然选择了动态插入link标签，就要知道，index.[hash].css的文件名，如何在运行时知晓呢？很简单，使用definePlugin将VUE_APP_INDEX_CSS_HASH注入运行时即可。\n\n### cdn加载异常识别\n\n一开始想到的是使用window.addEventListener('error')，但是尝试后发现无法捕获promise中的异常，所以改用window.addEventListener('unhandledrejection')。\n\n在回调中，需要做判断区分是否是资源加载超时。通过分析webpack模块源码可以发现它有做超时异常处理：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622347667614-image.png)\n\n且超时时间可以通过output.chunkLoadTimeout配置修改，默认值是120s，觉得太长的可以考虑覆盖。对于现在的用户来说，12s都算很长了，所以我选择缩短到12s。此外，超时异常格式可以通过上图的type和message匹配。\n\n## cdn开关切换\n针对开关切换，一开始想到的方案是通过接口变更开关状态，但是这样存在以下问题：\n1. 简单的开关可以通过人为控制apollo字段实现，但是无法感知客户端异常。开发者需要实现一个客户端告警机制触发开关变更，实现成本较高。\n2. 开关属于全局性的，一旦切换到源服务器，将会对源服务器造成较大压力。\n\n后来选择客户端自行切换开关的方案：\n\n**识别到cdn加载超时之后，我们业务的处理逻辑是：切换开关，将开关缓存5min，缓存的原因是，我们的业务属于APP内嵌h5，每个窗口都会重新初始化，所以需要窗口之间开关状态共享。**\n\n\n## 难点清单\n* 找到动态资源拼接的代码，找到__webpack_require__.p，如何重写它，使得运行时可修改\nindex.css处理\n* 内联？还是动态插入的选择\n* index.css文件名有hash怎么办\n\n\n","slug":"webpack/cdn-switch","published":1,"updated":"2021-06-14T02:17:23.853Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc77001qecq81z336u1y","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>某日，华为云上部署的cdn服务故障导致部分区域静态资源（js和css）响应超时。这种情况是我们没有预料到的，幸亏用户不多，否则需要紧急发版将静态资源指向源服务器。</p>\n<p>我们的项目采用uni-app框架开发，内部基于vue-cli。生产模式会使用publicPath配置将静态资源指向cdn服务器，即，代码经过webpack编译后资源引用地址就已经固定了。</p>\n<h2 id=\"任务拆解\"><a href=\"#任务拆解\" class=\"headerlink\" title=\"任务拆解\"></a>任务拆解</h2><p>为了应对以上情况，我们需要实现一种机制，能够识别cdn异常，并切换资源为源服务器。</p>\n<p>我们的任务分为以下：</p>\n<ol>\n<li>publicPath运行时全局变更</li>\n<li>cdn资源请求异常识别方法</li>\n<li>资源开关切换机制</li>\n</ol>\n<h2 id=\"方案分析与实施\"><a href=\"#方案分析与实施\" class=\"headerlink\" title=\"方案分析与实施\"></a>方案分析与实施</h2><h3 id=\"publicPath运行时全局变更\"><a href=\"#publicPath运行时全局变更\" class=\"headerlink\" title=\"publicPath运行时全局变更\"></a>publicPath运行时全局变更</h3><p>经过分析打包后的模块代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/******/  function jsonpScriptSrc(chunkId) &#123;</span><br><span class=\"line\">/******/    return __webpack_require__.p + &quot;static/js/&quot; + (&#123;&quot;project-qlymain-pages-404&quot;:&quot;project-qlymain-pages-404&quot;&#125;[chunkId]||chunkId) + &quot;.&quot; + &#123;&quot;chunk-0826ee9b&quot;:&quot;964d9183&quot;,&quot;chunk-69a5a22c&quot;:&quot;9e1c8209&quot;,&quot;project-qlymain-pages-404&quot;:&quot;330de720&quot;&#125;[chunkId] + &quot;.js&quot;</span><br><span class=\"line\">/******/  &#125;</span><br><span class=\"line\">/******/  ....此处省略一些中间代码</span><br><span class=\"line\">/******/  // __webpack_public_path__</span><br><span class=\"line\">/******/  __webpack_require__.p = &quot;/&quot;;</span><br></pre></td></tr></table></figure>\n<p>以及webpack源码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.hooks.requireExtensions.tap(&quot;MainTemplate&quot;, (source, chunk, hash) =&gt; &#123;</span><br><span class=\"line\">  const buf = [];</span><br><span class=\"line\">  const chunkMaps = chunk.getChunkMaps();</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">  buf.push(&quot;// __webpack_public_path__&quot;);</span><br><span class=\"line\">  buf.push(`$&#123;this.requireFn&#125;.p = $&#123;JSON.stringify(publicPath)&#125;;`);</span><br><span class=\"line\">  return Template.asString(buf);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>可以发现，publicPath被写入模块属性<code>__webpack_require__.p</code>上，我只需要修改这个属性值就可以了。</p>\n<p>一开始我写了个插件，通过拦截compiler钩子修改这个模块属性：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function pushBuff(valName, defaultVal, source) &#123;</span><br><span class=\"line\">  var buf = [];</span><br><span class=\"line\">  buf.push(source);</span><br><span class=\"line\">  buf.push(&#x27;&#x27;);</span><br><span class=\"line\">  buf.push(&#x27;// Dynamic assets path override (/build/plugins/runtime-publicpath-plugin)&#x27;);</span><br><span class=\"line\">  buf.push(`__webpack_require__.p = $&#123;valName&#125; || &#x27;$&#123;defaultVal&#125;&#x27;`);</span><br><span class=\"line\">  return buf.join(&#x27;\\n&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// ...</span><br><span class=\"line\">if (compiler.hooks &amp;&amp; compiler.hooks.thisCompilation) &#123;</span><br><span class=\"line\">    compiler.hooks.thisCompilation.tap(&#x27;RuntimePublicpathPlugin&#x27;, function (compilation) &#123;</span><br><span class=\"line\">        compilation.mainTemplate.hooks.requireExtensions.tap(&#x27;RuntimePublicpathPlugin&#x27;, function (source, chunk, hash) &#123;</span><br><span class=\"line\">            return pushBuff(globalVariable, defaultPublicPath, source)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是，这个插件的目的是覆盖<code>__webpack_require__.p</code>的值为runtime的运行时全局变量（window[globalVariable]），但是我们的开关状态可能要存储到localstorage中（因为要实现状态缓存），而且存进去的字段名由业务代码决定，这样就导致插件和业务过渡耦合。</p>\n<p>后来发现业务代码中可以使用webpack提供的变量<a href=\"https://webpack.js.org/api/module-variables/#__webpack_public_path__-webpack-specific\"><strong>webpack_public_path</strong></a>，webpack会在编译时将这些变量替换成__webpack_require__.p。</p>\n<p>至此，我们找到了publicPath运行时的覆盖方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__webpack_public_path__ = localstorage.getItem(&#x27;__webpack_public_path__&#x27;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"异步资源加载\"><a href=\"#异步资源加载\" class=\"headerlink\" title=\"异步资源加载\"></a>异步资源加载</h4><p>打包后按需加载的代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// script path function</span><br><span class=\"line\">function jsonpScriptSrc(chunkId) &#123;</span><br><span class=\"line\">    return __webpack_require__.p + &quot;&quot; + (&#123;</span><br><span class=\"line\">    &quot;project-qlymall-views-order-logisticsDetail&quot;:&quot;project-qlymall-views-order-logisticsDetail&quot;,</span><br><span class=\"line\">    &quot;project-qlymall-views-order-refundDetail&quot;:&quot;project-qlymall-views-order-refundDetail&quot;</span><br><span class=\"line\">    // ......</span><br><span class=\"line\">    &#125;[chunkId]||chunkId)+&#x27;.js&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// ......</span><br><span class=\"line\">// 创建script标签</span><br><span class=\"line\">/******/        var script = document.createElement(&#x27;script&#x27;);</span><br><span class=\"line\">/******/        // ......</span><br><span class=\"line\">/******/        script.src = jsonpScriptSrc(chunkId);</span><br><span class=\"line\">/******/</span><br></pre></td></tr></table></figure>\n<p>为了使我们的开关机制生效，需要保证jsonpScriptSrc方法在publicPath变更后执行。实施发现只要将以下语句放在入口文件最顶部执行即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__webpack_public_path__ = localstorage.getItem(&#x27;__webpack_public_path__&#x27;)</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"插入index-html的cdn标签需要重写\"><a href=\"#插入index-html的cdn标签需要重写\" class=\"headerlink\" title=\"插入index.html的cdn标签需要重写\"></a>插入index.html的cdn标签需要重写</h4><p>处理完异步加载的资源，我们还要处理入口index.html的资源。vue-cli内部使用了html-webpack-plugin将所有的assets插入了index.html中，包括pulicPath：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class=\"line\">        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, viewport-fit=cover&quot;&gt;</span><br><span class=\"line\">        &lt;link rel=&quot;stylesheet&quot; href=&quot;https://mycdn.mycompany.com/static/index.css&quot; /&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;script src=https://mycdn.mycompany.com/static/js/index.bd9cfc6f.js&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>如何处理这种情况呢？有2个思路。</p>\n<ol>\n<li>本着解决问题不如绕开问题的原则，考虑入口文件代码直接内联</li>\n<li>入口文件也使用异步加载的方法</li>\n</ol>\n<p>针对方案1，看起来很简单粗暴，但是会产生一个问题：index.html使用的是源站资源，而非cdn。index.js一般代码比较大，如果内联是不是本身就违背了cdn的初衷呢？所以最终我们采用了方案2。</p>\n<h5 id=\"入口文件异步加载\"><a href=\"#入口文件异步加载\" class=\"headerlink\" title=\"入口文件异步加载\"></a>入口文件异步加载</h5><p>让入口文件异步加载的方法，一开始想到的方案是，写插件，覆盖vue-cli使用html-webpack-plugin的默认行为，替代为动态插入script标签的逻辑，这段代码由于不经过babel，所以语法需要谨慎。想想这样做有点大费周章了。</p>\n<p>后来发现可以直接覆盖掉入口文件，我们称之为main2.js，该文件关键代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 加载主入口文件 */</span><br><span class=\"line\">import(&#x27;@/main.js&#x27;).catch(err =&gt; &#123;</span><br><span class=\"line\">  handleError(err)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这样就巧妙实现了入口文件异步加载。那么问题来了，main2.js又会被html-webpack-plugin插入index.html。由于main2.js的代码量较少，我选择内联，使用HtmlWebpackInlineSourcePlugin将main.js内联到index.html中。</p>\n<h4 id=\"index-css的处理\"><a href=\"#index-css的处理\" class=\"headerlink\" title=\"index.css的处理\"></a>index.css的处理</h4><p>在调试HtmlWebpackInlineSourcePlugin的过程中发现，index.css并不在assets列表中。我们看看index.css的生成代码：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622347411128-image.png\"></p>\n<p>这段代码做了2件事：</p>\n<ol>\n<li>通过检查html中有没有VUE_APP_INDEX_CSS_HASH来判断生辰的index.css文件名要不要带上hash</li>\n<li>将@dcloudio/uni-h5/dist/index.css文件中的内容取出来再加工，用copyWebpackPlugin插件将文件粘贴到dist目录中。</li>\n</ol>\n<p>鉴于该文件不大，可以选择内联或者在main2.js中动态插入link标签。我选择了后者。</p>\n<p>既然选择了动态插入link标签，就要知道，index.[hash].css的文件名，如何在运行时知晓呢？很简单，使用definePlugin将VUE_APP_INDEX_CSS_HASH注入运行时即可。</p>\n<h3 id=\"cdn加载异常识别\"><a href=\"#cdn加载异常识别\" class=\"headerlink\" title=\"cdn加载异常识别\"></a>cdn加载异常识别</h3><p>一开始想到的是使用window.addEventListener(‘error’)，但是尝试后发现无法捕获promise中的异常，所以改用window.addEventListener(‘unhandledrejection’)。</p>\n<p>在回调中，需要做判断区分是否是资源加载超时。通过分析webpack模块源码可以发现它有做超时异常处理：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622347667614-image.png\"></p>\n<p>且超时时间可以通过output.chunkLoadTimeout配置修改，默认值是120s，觉得太长的可以考虑覆盖。对于现在的用户来说，12s都算很长了，所以我选择缩短到12s。此外，超时异常格式可以通过上图的type和message匹配。</p>\n<h2 id=\"cdn开关切换\"><a href=\"#cdn开关切换\" class=\"headerlink\" title=\"cdn开关切换\"></a>cdn开关切换</h2><p>针对开关切换，一开始想到的方案是通过接口变更开关状态，但是这样存在以下问题：</p>\n<ol>\n<li>简单的开关可以通过人为控制apollo字段实现，但是无法感知客户端异常。开发者需要实现一个客户端告警机制触发开关变更，实现成本较高。</li>\n<li>开关属于全局性的，一旦切换到源服务器，将会对源服务器造成较大压力。</li>\n</ol>\n<p>后来选择客户端自行切换开关的方案：</p>\n<p><strong>识别到cdn加载超时之后，我们业务的处理逻辑是：切换开关，将开关缓存5min，缓存的原因是，我们的业务属于APP内嵌h5，每个窗口都会重新初始化，所以需要窗口之间开关状态共享。</strong></p>\n<h2 id=\"难点清单\"><a href=\"#难点清单\" class=\"headerlink\" title=\"难点清单\"></a>难点清单</h2><ul>\n<li>找到动态资源拼接的代码，找到__webpack_require__.p，如何重写它，使得运行时可修改<br>index.css处理</li>\n<li>内联？还是动态插入的选择</li>\n<li>index.css文件名有hash怎么办</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>某日，华为云上部署的cdn服务故障导致部分区域静态资源（js和css）响应超时。这种情况是我们没有预料到的，幸亏用户不多，否则需要紧急发版将静态资源指向源服务器。</p>\n<p>我们的项目采用uni-app框架开发，内部基于vue-cli。生产模式会使用publicPath配置将静态资源指向cdn服务器，即，代码经过webpack编译后资源引用地址就已经固定了。</p>\n<h2 id=\"任务拆解\"><a href=\"#任务拆解\" class=\"headerlink\" title=\"任务拆解\"></a>任务拆解</h2><p>为了应对以上情况，我们需要实现一种机制，能够识别cdn异常，并切换资源为源服务器。</p>\n<p>我们的任务分为以下：</p>\n<ol>\n<li>publicPath运行时全局变更</li>\n<li>cdn资源请求异常识别方法</li>\n<li>资源开关切换机制</li>\n</ol>\n<h2 id=\"方案分析与实施\"><a href=\"#方案分析与实施\" class=\"headerlink\" title=\"方案分析与实施\"></a>方案分析与实施</h2><h3 id=\"publicPath运行时全局变更\"><a href=\"#publicPath运行时全局变更\" class=\"headerlink\" title=\"publicPath运行时全局变更\"></a>publicPath运行时全局变更</h3><p>经过分析打包后的模块代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/******/  function jsonpScriptSrc(chunkId) &#123;</span><br><span class=\"line\">/******/    return __webpack_require__.p + &quot;static/js/&quot; + (&#123;&quot;project-qlymain-pages-404&quot;:&quot;project-qlymain-pages-404&quot;&#125;[chunkId]||chunkId) + &quot;.&quot; + &#123;&quot;chunk-0826ee9b&quot;:&quot;964d9183&quot;,&quot;chunk-69a5a22c&quot;:&quot;9e1c8209&quot;,&quot;project-qlymain-pages-404&quot;:&quot;330de720&quot;&#125;[chunkId] + &quot;.js&quot;</span><br><span class=\"line\">/******/  &#125;</span><br><span class=\"line\">/******/  ....此处省略一些中间代码</span><br><span class=\"line\">/******/  // __webpack_public_path__</span><br><span class=\"line\">/******/  __webpack_require__.p = &quot;/&quot;;</span><br></pre></td></tr></table></figure>\n<p>以及webpack源码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.hooks.requireExtensions.tap(&quot;MainTemplate&quot;, (source, chunk, hash) =&gt; &#123;</span><br><span class=\"line\">  const buf = [];</span><br><span class=\"line\">  const chunkMaps = chunk.getChunkMaps();</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">  buf.push(&quot;// __webpack_public_path__&quot;);</span><br><span class=\"line\">  buf.push(`$&#123;this.requireFn&#125;.p = $&#123;JSON.stringify(publicPath)&#125;;`);</span><br><span class=\"line\">  return Template.asString(buf);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>可以发现，publicPath被写入模块属性<code>__webpack_require__.p</code>上，我只需要修改这个属性值就可以了。</p>\n<p>一开始我写了个插件，通过拦截compiler钩子修改这个模块属性：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function pushBuff(valName, defaultVal, source) &#123;</span><br><span class=\"line\">  var buf = [];</span><br><span class=\"line\">  buf.push(source);</span><br><span class=\"line\">  buf.push(&#x27;&#x27;);</span><br><span class=\"line\">  buf.push(&#x27;// Dynamic assets path override (/build/plugins/runtime-publicpath-plugin)&#x27;);</span><br><span class=\"line\">  buf.push(`__webpack_require__.p = $&#123;valName&#125; || &#x27;$&#123;defaultVal&#125;&#x27;`);</span><br><span class=\"line\">  return buf.join(&#x27;\\n&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// ...</span><br><span class=\"line\">if (compiler.hooks &amp;&amp; compiler.hooks.thisCompilation) &#123;</span><br><span class=\"line\">    compiler.hooks.thisCompilation.tap(&#x27;RuntimePublicpathPlugin&#x27;, function (compilation) &#123;</span><br><span class=\"line\">        compilation.mainTemplate.hooks.requireExtensions.tap(&#x27;RuntimePublicpathPlugin&#x27;, function (source, chunk, hash) &#123;</span><br><span class=\"line\">            return pushBuff(globalVariable, defaultPublicPath, source)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是，这个插件的目的是覆盖<code>__webpack_require__.p</code>的值为runtime的运行时全局变量（window[globalVariable]），但是我们的开关状态可能要存储到localstorage中（因为要实现状态缓存），而且存进去的字段名由业务代码决定，这样就导致插件和业务过渡耦合。</p>\n<p>后来发现业务代码中可以使用webpack提供的变量<a href=\"https://webpack.js.org/api/module-variables/#__webpack_public_path__-webpack-specific\"><strong>webpack_public_path</strong></a>，webpack会在编译时将这些变量替换成__webpack_require__.p。</p>\n<p>至此，我们找到了publicPath运行时的覆盖方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__webpack_public_path__ = localstorage.getItem(&#x27;__webpack_public_path__&#x27;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"异步资源加载\"><a href=\"#异步资源加载\" class=\"headerlink\" title=\"异步资源加载\"></a>异步资源加载</h4><p>打包后按需加载的代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// script path function</span><br><span class=\"line\">function jsonpScriptSrc(chunkId) &#123;</span><br><span class=\"line\">    return __webpack_require__.p + &quot;&quot; + (&#123;</span><br><span class=\"line\">    &quot;project-qlymall-views-order-logisticsDetail&quot;:&quot;project-qlymall-views-order-logisticsDetail&quot;,</span><br><span class=\"line\">    &quot;project-qlymall-views-order-refundDetail&quot;:&quot;project-qlymall-views-order-refundDetail&quot;</span><br><span class=\"line\">    // ......</span><br><span class=\"line\">    &#125;[chunkId]||chunkId)+&#x27;.js&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// ......</span><br><span class=\"line\">// 创建script标签</span><br><span class=\"line\">/******/        var script = document.createElement(&#x27;script&#x27;);</span><br><span class=\"line\">/******/        // ......</span><br><span class=\"line\">/******/        script.src = jsonpScriptSrc(chunkId);</span><br><span class=\"line\">/******/</span><br></pre></td></tr></table></figure>\n<p>为了使我们的开关机制生效，需要保证jsonpScriptSrc方法在publicPath变更后执行。实施发现只要将以下语句放在入口文件最顶部执行即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__webpack_public_path__ = localstorage.getItem(&#x27;__webpack_public_path__&#x27;)</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"插入index-html的cdn标签需要重写\"><a href=\"#插入index-html的cdn标签需要重写\" class=\"headerlink\" title=\"插入index.html的cdn标签需要重写\"></a>插入index.html的cdn标签需要重写</h4><p>处理完异步加载的资源，我们还要处理入口index.html的资源。vue-cli内部使用了html-webpack-plugin将所有的assets插入了index.html中，包括pulicPath：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class=\"line\">        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, viewport-fit=cover&quot;&gt;</span><br><span class=\"line\">        &lt;link rel=&quot;stylesheet&quot; href=&quot;https://mycdn.mycompany.com/static/index.css&quot; /&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">        &lt;script src=https://mycdn.mycompany.com/static/js/index.bd9cfc6f.js&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>如何处理这种情况呢？有2个思路。</p>\n<ol>\n<li>本着解决问题不如绕开问题的原则，考虑入口文件代码直接内联</li>\n<li>入口文件也使用异步加载的方法</li>\n</ol>\n<p>针对方案1，看起来很简单粗暴，但是会产生一个问题：index.html使用的是源站资源，而非cdn。index.js一般代码比较大，如果内联是不是本身就违背了cdn的初衷呢？所以最终我们采用了方案2。</p>\n<h5 id=\"入口文件异步加载\"><a href=\"#入口文件异步加载\" class=\"headerlink\" title=\"入口文件异步加载\"></a>入口文件异步加载</h5><p>让入口文件异步加载的方法，一开始想到的方案是，写插件，覆盖vue-cli使用html-webpack-plugin的默认行为，替代为动态插入script标签的逻辑，这段代码由于不经过babel，所以语法需要谨慎。想想这样做有点大费周章了。</p>\n<p>后来发现可以直接覆盖掉入口文件，我们称之为main2.js，该文件关键代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 加载主入口文件 */</span><br><span class=\"line\">import(&#x27;@/main.js&#x27;).catch(err =&gt; &#123;</span><br><span class=\"line\">  handleError(err)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这样就巧妙实现了入口文件异步加载。那么问题来了，main2.js又会被html-webpack-plugin插入index.html。由于main2.js的代码量较少，我选择内联，使用HtmlWebpackInlineSourcePlugin将main.js内联到index.html中。</p>\n<h4 id=\"index-css的处理\"><a href=\"#index-css的处理\" class=\"headerlink\" title=\"index.css的处理\"></a>index.css的处理</h4><p>在调试HtmlWebpackInlineSourcePlugin的过程中发现，index.css并不在assets列表中。我们看看index.css的生成代码：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622347411128-image.png\"></p>\n<p>这段代码做了2件事：</p>\n<ol>\n<li>通过检查html中有没有VUE_APP_INDEX_CSS_HASH来判断生辰的index.css文件名要不要带上hash</li>\n<li>将@dcloudio/uni-h5/dist/index.css文件中的内容取出来再加工，用copyWebpackPlugin插件将文件粘贴到dist目录中。</li>\n</ol>\n<p>鉴于该文件不大，可以选择内联或者在main2.js中动态插入link标签。我选择了后者。</p>\n<p>既然选择了动态插入link标签，就要知道，index.[hash].css的文件名，如何在运行时知晓呢？很简单，使用definePlugin将VUE_APP_INDEX_CSS_HASH注入运行时即可。</p>\n<h3 id=\"cdn加载异常识别\"><a href=\"#cdn加载异常识别\" class=\"headerlink\" title=\"cdn加载异常识别\"></a>cdn加载异常识别</h3><p>一开始想到的是使用window.addEventListener(‘error’)，但是尝试后发现无法捕获promise中的异常，所以改用window.addEventListener(‘unhandledrejection’)。</p>\n<p>在回调中，需要做判断区分是否是资源加载超时。通过分析webpack模块源码可以发现它有做超时异常处理：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-5-30/1622347667614-image.png\"></p>\n<p>且超时时间可以通过output.chunkLoadTimeout配置修改，默认值是120s，觉得太长的可以考虑覆盖。对于现在的用户来说，12s都算很长了，所以我选择缩短到12s。此外，超时异常格式可以通过上图的type和message匹配。</p>\n<h2 id=\"cdn开关切换\"><a href=\"#cdn开关切换\" class=\"headerlink\" title=\"cdn开关切换\"></a>cdn开关切换</h2><p>针对开关切换，一开始想到的方案是通过接口变更开关状态，但是这样存在以下问题：</p>\n<ol>\n<li>简单的开关可以通过人为控制apollo字段实现，但是无法感知客户端异常。开发者需要实现一个客户端告警机制触发开关变更，实现成本较高。</li>\n<li>开关属于全局性的，一旦切换到源服务器，将会对源服务器造成较大压力。</li>\n</ol>\n<p>后来选择客户端自行切换开关的方案：</p>\n<p><strong>识别到cdn加载超时之后，我们业务的处理逻辑是：切换开关，将开关缓存5min，缓存的原因是，我们的业务属于APP内嵌h5，每个窗口都会重新初始化，所以需要窗口之间开关状态共享。</strong></p>\n<h2 id=\"难点清单\"><a href=\"#难点清单\" class=\"headerlink\" title=\"难点清单\"></a>难点清单</h2><ul>\n<li>找到动态资源拼接的代码，找到__webpack_require__.p，如何重写它，使得运行时可修改<br>index.css处理</li>\n<li>内联？还是动态插入的选择</li>\n<li>index.css文件名有hash怎么办</li>\n</ul>\n"},{"title":"webpack中的chunk和bundle","date":"2021-06-01T16:00:00.000Z","_content":"\nchunk是webpack运行时的概念，bundle是webpack的执行结果，即生成了多少个文件。\n\n## chunk和entry\n\n一个entry对应一个chunk。chunk属于一个webpack构建过程中的概念。一个entry对应一个依赖树，这个依赖树所有依赖的集合就是一个chunk。\n\n原始条件下，每个chunk对应生成一个bundle。\n\n如果多个entry之间存在包含关系，则可能一个bundle打包多个chunk。\n```\nentry: {\n    index: './src/index.js',\n    add: './src/add.js'\n},\n```\n index引用了add.js。最终的打包结果，index.js中包含了chunk 0，即出现了重复打包。\n```\nHash: 8471c9024ea2740e855f\nVersion: webpack 4.46.0\nTime: 3338ms\nBuilt at: 2021-06-02 11:59:15 AM\n   Asset       Size  Chunks             Chunk Names\n  add.js  987 bytes       0  [emitted]  add\nindex.js   72.5 KiB    1, 0  [emitted]  index\nEntrypoint index = index.js\nEntrypoint add = add.js\n[0] ./src/add.js 49 bytes {0} {1} [built]\n[1] ./node_modules/lodash/lodash.js 531 KiB {1} [built]\n[2] ./src/index.js 89 bytes {1} [built]\n[3] (webpack)/buildin/global.js 472 bytes {1} [built]\n[4] (webpack)/buildin/module.js 497 bytes {1} [built]\n```\n\n## sourcemap和chunk\n\nsoucemap选项如果不含inline，则会针对每个bundle生成生成一个map文件。\n\n同名js文件和map文件同属于一个chunk。\n\n## runtimechunk\n它的作用是将包含chunks 映射关系的 list单独从 app.js里提取出来，因为每一个 chunk 的 id 基本都是基于内容 hash 出来的。\n\n想一下这个场景，app.js->about.js。about因为某种原因（如按需加载）被打包为单独的bundle。每次about变化，就意味着about的hash变化，app.js中存在对about.js的引用路径，进而导致app.js也变化。\n\n单独抽离 runtimeChunk 之后，每次打包都会生成一个runtimeChunk.xxx.js，其实这个文件非常的小，gzip 之后一般只有几 kb，但这个文件又经常会改变，我们每次都需要重新请求它，它的 http 耗时远大于它的执行时间了，所以建议不要将它单独拆包，而是将它内联到我们的 index.html 之中(index.html 本来每次打包都会变)。可以使用 inline-manifest-webpack-plugin或者 assets-webpack-plugin等来实现内联的效果。\n\nruntimeChunk值为true或者'multiple'时会为每个entry生成1个文件。值为false时，所有的entry bundle共用一个chunk。\n\n生成的runtime chunk需要插入index.html。\n\n参考：[webpack中的runtimeChunk](https://daihaoxin.github.io/post/97178d24.html)\n\n## spiltChunks\n\n该选项可以配置chunk之间的公共模块独立生成chunk，或者满足某些正则的模块独立出一个chunk。因此，该选项影响最终的bundle和chunk数目。\n```\nconst path = require('path')\nmodule.exports = {\n  mode: 'production',\n  devtool: 'none',\n  entry: {\n    index: './src/index.js',\n    add: './src/add.js'\n  },\n  output: {\n    filename: '[name].[contenthash:8].js',\n    path: path.resolve(__dirname, 'dist')\n  },\n  optimization: {\n    runtimeChunk: true,\n    minimize: false,\n    splitChunks: {\n      cacheGroups: {\n        common: {\n          chunks: 'initial',\n          minChunks: 2,\n          minSize: 0,\n          name: 'common'\n        },\n        vendor: {\n          test: /node_modules/,\n          chunks: 'initial',\n          name: 'vendor',\n          enforce: true\n        }\n      }\n    }\n  }\n}\n```\n\n以上配置生成结果如下：\n```\n                    Asset       Size  Chunks                                Chunk Names\n          add.559b3164.js   81 bytes       1  [emitted] [immutable]         add\n       common.a3657c09.js  326 bytes       0  [emitted] [immutable]         common\n        index.56507b59.js  739 bytes       2  [emitted] [immutable]         index\n  runtime~add.a5423113.js   6.11 KiB       3  [emitted] [immutable]         runtime~add\nruntime~index.626b59fe.js   6.11 KiB       4  [emitted] [immutable]         runtime~index\n       vendor.4939a6bb.js    533 KiB       5  [emitted] [immutable]  [big]  vendor\nEntrypoint index [big] = runtime~index.626b59fe.js common.a3657c09.js vendor.4939a6bb.js index.56507b59.js\nEntrypoint add = runtime~add.a5423113.js common.a3657c09.js add.559b3164.js\n[0] ./node_modules/lodash/lodash.js 531 KiB {5} [built]\n[1] ./src/add.js 49 bytes {0} [built]\n[2] ./src/index.js 147 bytes {2} [built]\n[3] (webpack)/buildin/global.js 472 bytes {5} [built]\n[4] (webpack)/buildin/module.js 497 bytes {5} [built]\n```\n\n* add.559b3164.js和index.56507b59.js是由于entry生成的。\n* common.a3657c09.js和vendor.4939a6bb.js是由于splitChunks生成的。\n* runtime~add.a5423113.js和runtime~index.626b59fe.js是由于runtimeChunk: true生成的。\n","source":"_posts/webpack/chunk-bundle.md","raw":"---\ntitle: webpack中的chunk和bundle\ncategories: 工程化\ntags: [webpack, chunk]\ndate: 2021-6-2\n---\n\nchunk是webpack运行时的概念，bundle是webpack的执行结果，即生成了多少个文件。\n\n## chunk和entry\n\n一个entry对应一个chunk。chunk属于一个webpack构建过程中的概念。一个entry对应一个依赖树，这个依赖树所有依赖的集合就是一个chunk。\n\n原始条件下，每个chunk对应生成一个bundle。\n\n如果多个entry之间存在包含关系，则可能一个bundle打包多个chunk。\n```\nentry: {\n    index: './src/index.js',\n    add: './src/add.js'\n},\n```\n index引用了add.js。最终的打包结果，index.js中包含了chunk 0，即出现了重复打包。\n```\nHash: 8471c9024ea2740e855f\nVersion: webpack 4.46.0\nTime: 3338ms\nBuilt at: 2021-06-02 11:59:15 AM\n   Asset       Size  Chunks             Chunk Names\n  add.js  987 bytes       0  [emitted]  add\nindex.js   72.5 KiB    1, 0  [emitted]  index\nEntrypoint index = index.js\nEntrypoint add = add.js\n[0] ./src/add.js 49 bytes {0} {1} [built]\n[1] ./node_modules/lodash/lodash.js 531 KiB {1} [built]\n[2] ./src/index.js 89 bytes {1} [built]\n[3] (webpack)/buildin/global.js 472 bytes {1} [built]\n[4] (webpack)/buildin/module.js 497 bytes {1} [built]\n```\n\n## sourcemap和chunk\n\nsoucemap选项如果不含inline，则会针对每个bundle生成生成一个map文件。\n\n同名js文件和map文件同属于一个chunk。\n\n## runtimechunk\n它的作用是将包含chunks 映射关系的 list单独从 app.js里提取出来，因为每一个 chunk 的 id 基本都是基于内容 hash 出来的。\n\n想一下这个场景，app.js->about.js。about因为某种原因（如按需加载）被打包为单独的bundle。每次about变化，就意味着about的hash变化，app.js中存在对about.js的引用路径，进而导致app.js也变化。\n\n单独抽离 runtimeChunk 之后，每次打包都会生成一个runtimeChunk.xxx.js，其实这个文件非常的小，gzip 之后一般只有几 kb，但这个文件又经常会改变，我们每次都需要重新请求它，它的 http 耗时远大于它的执行时间了，所以建议不要将它单独拆包，而是将它内联到我们的 index.html 之中(index.html 本来每次打包都会变)。可以使用 inline-manifest-webpack-plugin或者 assets-webpack-plugin等来实现内联的效果。\n\nruntimeChunk值为true或者'multiple'时会为每个entry生成1个文件。值为false时，所有的entry bundle共用一个chunk。\n\n生成的runtime chunk需要插入index.html。\n\n参考：[webpack中的runtimeChunk](https://daihaoxin.github.io/post/97178d24.html)\n\n## spiltChunks\n\n该选项可以配置chunk之间的公共模块独立生成chunk，或者满足某些正则的模块独立出一个chunk。因此，该选项影响最终的bundle和chunk数目。\n```\nconst path = require('path')\nmodule.exports = {\n  mode: 'production',\n  devtool: 'none',\n  entry: {\n    index: './src/index.js',\n    add: './src/add.js'\n  },\n  output: {\n    filename: '[name].[contenthash:8].js',\n    path: path.resolve(__dirname, 'dist')\n  },\n  optimization: {\n    runtimeChunk: true,\n    minimize: false,\n    splitChunks: {\n      cacheGroups: {\n        common: {\n          chunks: 'initial',\n          minChunks: 2,\n          minSize: 0,\n          name: 'common'\n        },\n        vendor: {\n          test: /node_modules/,\n          chunks: 'initial',\n          name: 'vendor',\n          enforce: true\n        }\n      }\n    }\n  }\n}\n```\n\n以上配置生成结果如下：\n```\n                    Asset       Size  Chunks                                Chunk Names\n          add.559b3164.js   81 bytes       1  [emitted] [immutable]         add\n       common.a3657c09.js  326 bytes       0  [emitted] [immutable]         common\n        index.56507b59.js  739 bytes       2  [emitted] [immutable]         index\n  runtime~add.a5423113.js   6.11 KiB       3  [emitted] [immutable]         runtime~add\nruntime~index.626b59fe.js   6.11 KiB       4  [emitted] [immutable]         runtime~index\n       vendor.4939a6bb.js    533 KiB       5  [emitted] [immutable]  [big]  vendor\nEntrypoint index [big] = runtime~index.626b59fe.js common.a3657c09.js vendor.4939a6bb.js index.56507b59.js\nEntrypoint add = runtime~add.a5423113.js common.a3657c09.js add.559b3164.js\n[0] ./node_modules/lodash/lodash.js 531 KiB {5} [built]\n[1] ./src/add.js 49 bytes {0} [built]\n[2] ./src/index.js 147 bytes {2} [built]\n[3] (webpack)/buildin/global.js 472 bytes {5} [built]\n[4] (webpack)/buildin/module.js 497 bytes {5} [built]\n```\n\n* add.559b3164.js和index.56507b59.js是由于entry生成的。\n* common.a3657c09.js和vendor.4939a6bb.js是由于splitChunks生成的。\n* runtime~add.a5423113.js和runtime~index.626b59fe.js是由于runtimeChunk: true生成的。\n","slug":"webpack/chunk-bundle","published":1,"updated":"2021-06-14T02:15:31.868Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc77001recq8gpxv9k0t","content":"<p>chunk是webpack运行时的概念，bundle是webpack的执行结果，即生成了多少个文件。</p>\n<h2 id=\"chunk和entry\"><a href=\"#chunk和entry\" class=\"headerlink\" title=\"chunk和entry\"></a>chunk和entry</h2><p>一个entry对应一个chunk。chunk属于一个webpack构建过程中的概念。一个entry对应一个依赖树，这个依赖树所有依赖的集合就是一个chunk。</p>\n<p>原始条件下，每个chunk对应生成一个bundle。</p>\n<p>如果多个entry之间存在包含关系，则可能一个bundle打包多个chunk。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: &#123;</span><br><span class=\"line\">    index: &#x27;./src/index.js&#x27;,</span><br><span class=\"line\">    add: &#x27;./src/add.js&#x27;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p> index引用了add.js。最终的打包结果，index.js中包含了chunk 0，即出现了重复打包。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hash: 8471c9024ea2740e855f</span><br><span class=\"line\">Version: webpack 4.46.0</span><br><span class=\"line\">Time: 3338ms</span><br><span class=\"line\">Built at: 2021-06-02 11:59:15 AM</span><br><span class=\"line\">   Asset       Size  Chunks             Chunk Names</span><br><span class=\"line\">  add.js  987 bytes       0  [emitted]  add</span><br><span class=\"line\">index.js   72.5 KiB    1, 0  [emitted]  index</span><br><span class=\"line\">Entrypoint index = index.js</span><br><span class=\"line\">Entrypoint add = add.js</span><br><span class=\"line\">[0] ./src/add.js 49 bytes &#123;0&#125; &#123;1&#125; [built]</span><br><span class=\"line\">[1] ./node_modules/lodash/lodash.js 531 KiB &#123;1&#125; [built]</span><br><span class=\"line\">[2] ./src/index.js 89 bytes &#123;1&#125; [built]</span><br><span class=\"line\">[3] (webpack)/buildin/global.js 472 bytes &#123;1&#125; [built]</span><br><span class=\"line\">[4] (webpack)/buildin/module.js 497 bytes &#123;1&#125; [built]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"sourcemap和chunk\"><a href=\"#sourcemap和chunk\" class=\"headerlink\" title=\"sourcemap和chunk\"></a>sourcemap和chunk</h2><p>soucemap选项如果不含inline，则会针对每个bundle生成生成一个map文件。</p>\n<p>同名js文件和map文件同属于一个chunk。</p>\n<h2 id=\"runtimechunk\"><a href=\"#runtimechunk\" class=\"headerlink\" title=\"runtimechunk\"></a>runtimechunk</h2><p>它的作用是将包含chunks 映射关系的 list单独从 app.js里提取出来，因为每一个 chunk 的 id 基本都是基于内容 hash 出来的。</p>\n<p>想一下这个场景，app.js-&gt;about.js。about因为某种原因（如按需加载）被打包为单独的bundle。每次about变化，就意味着about的hash变化，app.js中存在对about.js的引用路径，进而导致app.js也变化。</p>\n<p>单独抽离 runtimeChunk 之后，每次打包都会生成一个runtimeChunk.xxx.js，其实这个文件非常的小，gzip 之后一般只有几 kb，但这个文件又经常会改变，我们每次都需要重新请求它，它的 http 耗时远大于它的执行时间了，所以建议不要将它单独拆包，而是将它内联到我们的 index.html 之中(index.html 本来每次打包都会变)。可以使用 inline-manifest-webpack-plugin或者 assets-webpack-plugin等来实现内联的效果。</p>\n<p>runtimeChunk值为true或者’multiple’时会为每个entry生成1个文件。值为false时，所有的entry bundle共用一个chunk。</p>\n<p>生成的runtime chunk需要插入index.html。</p>\n<p>参考：<a href=\"https://daihaoxin.github.io/post/97178d24.html\">webpack中的runtimeChunk</a></p>\n<h2 id=\"spiltChunks\"><a href=\"#spiltChunks\" class=\"headerlink\" title=\"spiltChunks\"></a>spiltChunks</h2><p>该选项可以配置chunk之间的公共模块独立生成chunk，或者满足某些正则的模块独立出一个chunk。因此，该选项影响最终的bundle和chunk数目。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const path = require(&#x27;path&#x27;)</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  mode: &#x27;production&#x27;,</span><br><span class=\"line\">  devtool: &#x27;none&#x27;,</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    index: &#x27;./src/index.js&#x27;,</span><br><span class=\"line\">    add: &#x27;./src/add.js&#x27;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: &#x27;[name].[contenthash:8].js&#x27;,</span><br><span class=\"line\">    path: path.resolve(__dirname, &#x27;dist&#x27;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    runtimeChunk: true,</span><br><span class=\"line\">    minimize: false,</span><br><span class=\"line\">    splitChunks: &#123;</span><br><span class=\"line\">      cacheGroups: &#123;</span><br><span class=\"line\">        common: &#123;</span><br><span class=\"line\">          chunks: &#x27;initial&#x27;,</span><br><span class=\"line\">          minChunks: 2,</span><br><span class=\"line\">          minSize: 0,</span><br><span class=\"line\">          name: &#x27;common&#x27;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        vendor: &#123;</span><br><span class=\"line\">          test: /node_modules/,</span><br><span class=\"line\">          chunks: &#x27;initial&#x27;,</span><br><span class=\"line\">          name: &#x27;vendor&#x27;,</span><br><span class=\"line\">          enforce: true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上配置生成结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                    Asset       Size  Chunks                                Chunk Names</span><br><span class=\"line\">          add.559b3164.js   81 bytes       1  [emitted] [immutable]         add</span><br><span class=\"line\">       common.a3657c09.js  326 bytes       0  [emitted] [immutable]         common</span><br><span class=\"line\">        index.56507b59.js  739 bytes       2  [emitted] [immutable]         index</span><br><span class=\"line\">  runtime~add.a5423113.js   6.11 KiB       3  [emitted] [immutable]         runtime~add</span><br><span class=\"line\">runtime~index.626b59fe.js   6.11 KiB       4  [emitted] [immutable]         runtime~index</span><br><span class=\"line\">       vendor.4939a6bb.js    533 KiB       5  [emitted] [immutable]  [big]  vendor</span><br><span class=\"line\">Entrypoint index [big] = runtime~index.626b59fe.js common.a3657c09.js vendor.4939a6bb.js index.56507b59.js</span><br><span class=\"line\">Entrypoint add = runtime~add.a5423113.js common.a3657c09.js add.559b3164.js</span><br><span class=\"line\">[0] ./node_modules/lodash/lodash.js 531 KiB &#123;5&#125; [built]</span><br><span class=\"line\">[1] ./src/add.js 49 bytes &#123;0&#125; [built]</span><br><span class=\"line\">[2] ./src/index.js 147 bytes &#123;2&#125; [built]</span><br><span class=\"line\">[3] (webpack)/buildin/global.js 472 bytes &#123;5&#125; [built]</span><br><span class=\"line\">[4] (webpack)/buildin/module.js 497 bytes &#123;5&#125; [built]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>add.559b3164.js和index.56507b59.js是由于entry生成的。</li>\n<li>common.a3657c09.js和vendor.4939a6bb.js是由于splitChunks生成的。</li>\n<li>runtime<del>add.a5423113.js和runtime</del>index.626b59fe.js是由于runtimeChunk: true生成的。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>chunk是webpack运行时的概念，bundle是webpack的执行结果，即生成了多少个文件。</p>\n<h2 id=\"chunk和entry\"><a href=\"#chunk和entry\" class=\"headerlink\" title=\"chunk和entry\"></a>chunk和entry</h2><p>一个entry对应一个chunk。chunk属于一个webpack构建过程中的概念。一个entry对应一个依赖树，这个依赖树所有依赖的集合就是一个chunk。</p>\n<p>原始条件下，每个chunk对应生成一个bundle。</p>\n<p>如果多个entry之间存在包含关系，则可能一个bundle打包多个chunk。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry: &#123;</span><br><span class=\"line\">    index: &#x27;./src/index.js&#x27;,</span><br><span class=\"line\">    add: &#x27;./src/add.js&#x27;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p> index引用了add.js。最终的打包结果，index.js中包含了chunk 0，即出现了重复打包。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hash: 8471c9024ea2740e855f</span><br><span class=\"line\">Version: webpack 4.46.0</span><br><span class=\"line\">Time: 3338ms</span><br><span class=\"line\">Built at: 2021-06-02 11:59:15 AM</span><br><span class=\"line\">   Asset       Size  Chunks             Chunk Names</span><br><span class=\"line\">  add.js  987 bytes       0  [emitted]  add</span><br><span class=\"line\">index.js   72.5 KiB    1, 0  [emitted]  index</span><br><span class=\"line\">Entrypoint index = index.js</span><br><span class=\"line\">Entrypoint add = add.js</span><br><span class=\"line\">[0] ./src/add.js 49 bytes &#123;0&#125; &#123;1&#125; [built]</span><br><span class=\"line\">[1] ./node_modules/lodash/lodash.js 531 KiB &#123;1&#125; [built]</span><br><span class=\"line\">[2] ./src/index.js 89 bytes &#123;1&#125; [built]</span><br><span class=\"line\">[3] (webpack)/buildin/global.js 472 bytes &#123;1&#125; [built]</span><br><span class=\"line\">[4] (webpack)/buildin/module.js 497 bytes &#123;1&#125; [built]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"sourcemap和chunk\"><a href=\"#sourcemap和chunk\" class=\"headerlink\" title=\"sourcemap和chunk\"></a>sourcemap和chunk</h2><p>soucemap选项如果不含inline，则会针对每个bundle生成生成一个map文件。</p>\n<p>同名js文件和map文件同属于一个chunk。</p>\n<h2 id=\"runtimechunk\"><a href=\"#runtimechunk\" class=\"headerlink\" title=\"runtimechunk\"></a>runtimechunk</h2><p>它的作用是将包含chunks 映射关系的 list单独从 app.js里提取出来，因为每一个 chunk 的 id 基本都是基于内容 hash 出来的。</p>\n<p>想一下这个场景，app.js-&gt;about.js。about因为某种原因（如按需加载）被打包为单独的bundle。每次about变化，就意味着about的hash变化，app.js中存在对about.js的引用路径，进而导致app.js也变化。</p>\n<p>单独抽离 runtimeChunk 之后，每次打包都会生成一个runtimeChunk.xxx.js，其实这个文件非常的小，gzip 之后一般只有几 kb，但这个文件又经常会改变，我们每次都需要重新请求它，它的 http 耗时远大于它的执行时间了，所以建议不要将它单独拆包，而是将它内联到我们的 index.html 之中(index.html 本来每次打包都会变)。可以使用 inline-manifest-webpack-plugin或者 assets-webpack-plugin等来实现内联的效果。</p>\n<p>runtimeChunk值为true或者’multiple’时会为每个entry生成1个文件。值为false时，所有的entry bundle共用一个chunk。</p>\n<p>生成的runtime chunk需要插入index.html。</p>\n<p>参考：<a href=\"https://daihaoxin.github.io/post/97178d24.html\">webpack中的runtimeChunk</a></p>\n<h2 id=\"spiltChunks\"><a href=\"#spiltChunks\" class=\"headerlink\" title=\"spiltChunks\"></a>spiltChunks</h2><p>该选项可以配置chunk之间的公共模块独立生成chunk，或者满足某些正则的模块独立出一个chunk。因此，该选项影响最终的bundle和chunk数目。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const path = require(&#x27;path&#x27;)</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  mode: &#x27;production&#x27;,</span><br><span class=\"line\">  devtool: &#x27;none&#x27;,</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    index: &#x27;./src/index.js&#x27;,</span><br><span class=\"line\">    add: &#x27;./src/add.js&#x27;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: &#x27;[name].[contenthash:8].js&#x27;,</span><br><span class=\"line\">    path: path.resolve(__dirname, &#x27;dist&#x27;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    runtimeChunk: true,</span><br><span class=\"line\">    minimize: false,</span><br><span class=\"line\">    splitChunks: &#123;</span><br><span class=\"line\">      cacheGroups: &#123;</span><br><span class=\"line\">        common: &#123;</span><br><span class=\"line\">          chunks: &#x27;initial&#x27;,</span><br><span class=\"line\">          minChunks: 2,</span><br><span class=\"line\">          minSize: 0,</span><br><span class=\"line\">          name: &#x27;common&#x27;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        vendor: &#123;</span><br><span class=\"line\">          test: /node_modules/,</span><br><span class=\"line\">          chunks: &#x27;initial&#x27;,</span><br><span class=\"line\">          name: &#x27;vendor&#x27;,</span><br><span class=\"line\">          enforce: true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上配置生成结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">                    Asset       Size  Chunks                                Chunk Names</span><br><span class=\"line\">          add.559b3164.js   81 bytes       1  [emitted] [immutable]         add</span><br><span class=\"line\">       common.a3657c09.js  326 bytes       0  [emitted] [immutable]         common</span><br><span class=\"line\">        index.56507b59.js  739 bytes       2  [emitted] [immutable]         index</span><br><span class=\"line\">  runtime~add.a5423113.js   6.11 KiB       3  [emitted] [immutable]         runtime~add</span><br><span class=\"line\">runtime~index.626b59fe.js   6.11 KiB       4  [emitted] [immutable]         runtime~index</span><br><span class=\"line\">       vendor.4939a6bb.js    533 KiB       5  [emitted] [immutable]  [big]  vendor</span><br><span class=\"line\">Entrypoint index [big] = runtime~index.626b59fe.js common.a3657c09.js vendor.4939a6bb.js index.56507b59.js</span><br><span class=\"line\">Entrypoint add = runtime~add.a5423113.js common.a3657c09.js add.559b3164.js</span><br><span class=\"line\">[0] ./node_modules/lodash/lodash.js 531 KiB &#123;5&#125; [built]</span><br><span class=\"line\">[1] ./src/add.js 49 bytes &#123;0&#125; [built]</span><br><span class=\"line\">[2] ./src/index.js 147 bytes &#123;2&#125; [built]</span><br><span class=\"line\">[3] (webpack)/buildin/global.js 472 bytes &#123;5&#125; [built]</span><br><span class=\"line\">[4] (webpack)/buildin/module.js 497 bytes &#123;5&#125; [built]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>add.559b3164.js和index.56507b59.js是由于entry生成的。</li>\n<li>common.a3657c09.js和vendor.4939a6bb.js是由于splitChunks生成的。</li>\n<li>runtime<del>add.a5423113.js和runtime</del>index.626b59fe.js是由于runtimeChunk: true生成的。</li>\n</ul>\n"},{"title":"从tapable学习Function构造函数的用法","date":"2021-08-01T16:00:00.000Z","_content":"\n> tapable是webpack实现插件机制的核心。插件通过tapable注册到webpack的执行过程中的各个事件节点。当执行过程到达对应节点时，tapable上注册的插件就会以该事件节点要求的方式执行。\n\ntapable执行插件队列的实现，是通过在运行时根据调用方法，使用Function构造函数动态构造新的函数并执行。\n\n如：\n```\n// 初始化钩子列表\nconst hook = new AsyncSeriesHook()\n// 挂载钩子\nhook.tapAsync('tap1', (callback) => {\n  setTimeout(() => {\n    callback('tap1')\n  }, 0)\n})\nhook.tapPromise('tap2', () => {\n  return Promise.resolve('tap2')\n})\n// 执行钩子\nhook.callAsync((res) => {\n  console.log(res)\n})\n```\ncallAsync方法执行过程中，使用new Function拼接新函数，生成结果如下：\n```\nfunction(_callback) {\n  \"use strict\";\n  var _context;\n  var _x = this._x;\n  function _next0() {\n    var _fn1 = _x[1];\n    var _hasResult1 = false;\n    var _promise1 = _fn1();\n    if (!_promise1 || !_promise1.then)\n      throw new Error('Tap function (tapPromise) did not return promise (returned ' + _promise1 + ')');\n    _promise1.then((function (_result1) {\n      _hasResult1 = true;\n      _callback();\n    }), function (_err1) {\n      if (_hasResult1) throw _err1;\n      _callback(_err1);\n    });\n  }\n  var _fn0 = _x[0];\n  _fn0((function (_err0) {\n    if (_err0) {\n      _callback(_err0);\n    } else {\n      _next0();\n    }\n  }));\n}\n```\n\n### 使用方法\n\n\n```\nnew Function ([arg1[, arg2[, ...argN]],] functionBody)\n```\n\n**functionBody**\n   \n    一个字符串，表示函数体的内容。\n\n\n以下代码：\n\n```\nconst adder = new Function(\"a\", \"b\", `\n  if (isNaN(a) || isNaN(b)) return\n  \n  return a + b\n`);\n```\n生成的函数就如下：\n```\n(function anonymous(a,b\n) {\n\n  if (isNaN(a) || isNaN(b)) return\n  \n  return a + b\n\n})\n```\n### 作用域\n\nMDN表示，Function动态生成的函数，作用域为全局作用域，而不是创建函数时所在的作用域。\n\ntapabel就想到一个办法，将动态的生成的函数，动态绑定到类实例方法上，在动态函数中直接访问'this'上的属性，即实例属性。\n\n### 安全问题\n**new Function**由于是动态生成代码，因此会存在安全问题。在配置了CSP安全策略的浏览器页面中执行会有以下报错：\n\n```\nUncaught EvalError: Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of script in the following Content Security Policy directive: \"script-src 'report-sample' 'self' *.speedcurve.com 'sha256-q7cJjDqNO2e1L5UltvJ1LhvnYN7yJXgGO7b6h9xkL1o=' www.google-analytics.com/analytics.js 'sha256-JEt9Nmc3BP88wxuTZm9aKNu87vEgGmKW1zzy/vb1KPs=' polyfill.io/v3/polyfill.min.js assets.codepen.io production-assets.codepen.io\".\n\n    at new Function (<anonymous>)\n    at <anonymous>:1:15\n(anonymous) @ VM54:1\n```\n\n因此，Function构造函数一般不适用于在浏览器端使用。","source":"_posts/webpack/function-constructor.md","raw":"---\ntitle: 从tapable学习Function构造函数的用法\ncategories: 工程化\ntags: [tapable, webpack]\ndate: 2021-8-2\n---\n\n> tapable是webpack实现插件机制的核心。插件通过tapable注册到webpack的执行过程中的各个事件节点。当执行过程到达对应节点时，tapable上注册的插件就会以该事件节点要求的方式执行。\n\ntapable执行插件队列的实现，是通过在运行时根据调用方法，使用Function构造函数动态构造新的函数并执行。\n\n如：\n```\n// 初始化钩子列表\nconst hook = new AsyncSeriesHook()\n// 挂载钩子\nhook.tapAsync('tap1', (callback) => {\n  setTimeout(() => {\n    callback('tap1')\n  }, 0)\n})\nhook.tapPromise('tap2', () => {\n  return Promise.resolve('tap2')\n})\n// 执行钩子\nhook.callAsync((res) => {\n  console.log(res)\n})\n```\ncallAsync方法执行过程中，使用new Function拼接新函数，生成结果如下：\n```\nfunction(_callback) {\n  \"use strict\";\n  var _context;\n  var _x = this._x;\n  function _next0() {\n    var _fn1 = _x[1];\n    var _hasResult1 = false;\n    var _promise1 = _fn1();\n    if (!_promise1 || !_promise1.then)\n      throw new Error('Tap function (tapPromise) did not return promise (returned ' + _promise1 + ')');\n    _promise1.then((function (_result1) {\n      _hasResult1 = true;\n      _callback();\n    }), function (_err1) {\n      if (_hasResult1) throw _err1;\n      _callback(_err1);\n    });\n  }\n  var _fn0 = _x[0];\n  _fn0((function (_err0) {\n    if (_err0) {\n      _callback(_err0);\n    } else {\n      _next0();\n    }\n  }));\n}\n```\n\n### 使用方法\n\n\n```\nnew Function ([arg1[, arg2[, ...argN]],] functionBody)\n```\n\n**functionBody**\n   \n    一个字符串，表示函数体的内容。\n\n\n以下代码：\n\n```\nconst adder = new Function(\"a\", \"b\", `\n  if (isNaN(a) || isNaN(b)) return\n  \n  return a + b\n`);\n```\n生成的函数就如下：\n```\n(function anonymous(a,b\n) {\n\n  if (isNaN(a) || isNaN(b)) return\n  \n  return a + b\n\n})\n```\n### 作用域\n\nMDN表示，Function动态生成的函数，作用域为全局作用域，而不是创建函数时所在的作用域。\n\ntapabel就想到一个办法，将动态的生成的函数，动态绑定到类实例方法上，在动态函数中直接访问'this'上的属性，即实例属性。\n\n### 安全问题\n**new Function**由于是动态生成代码，因此会存在安全问题。在配置了CSP安全策略的浏览器页面中执行会有以下报错：\n\n```\nUncaught EvalError: Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of script in the following Content Security Policy directive: \"script-src 'report-sample' 'self' *.speedcurve.com 'sha256-q7cJjDqNO2e1L5UltvJ1LhvnYN7yJXgGO7b6h9xkL1o=' www.google-analytics.com/analytics.js 'sha256-JEt9Nmc3BP88wxuTZm9aKNu87vEgGmKW1zzy/vb1KPs=' polyfill.io/v3/polyfill.min.js assets.codepen.io production-assets.codepen.io\".\n\n    at new Function (<anonymous>)\n    at <anonymous>:1:15\n(anonymous) @ VM54:1\n```\n\n因此，Function构造函数一般不适用于在浏览器端使用。","slug":"webpack/function-constructor","published":1,"updated":"2021-08-07T02:45:49.779Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc78001secq85hsh00ws","content":"<blockquote>\n<p>tapable是webpack实现插件机制的核心。插件通过tapable注册到webpack的执行过程中的各个事件节点。当执行过程到达对应节点时，tapable上注册的插件就会以该事件节点要求的方式执行。</p>\n</blockquote>\n<p>tapable执行插件队列的实现，是通过在运行时根据调用方法，使用Function构造函数动态构造新的函数并执行。</p>\n<p>如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 初始化钩子列表</span><br><span class=\"line\">const hook = new AsyncSeriesHook()</span><br><span class=\"line\">// 挂载钩子</span><br><span class=\"line\">hook.tapAsync(&#x27;tap1&#x27;, (callback) =&gt; &#123;</span><br><span class=\"line\">  setTimeout(() =&gt; &#123;</span><br><span class=\"line\">    callback(&#x27;tap1&#x27;)</span><br><span class=\"line\">  &#125;, 0)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">hook.tapPromise(&#x27;tap2&#x27;, () =&gt; &#123;</span><br><span class=\"line\">  return Promise.resolve(&#x27;tap2&#x27;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// 执行钩子</span><br><span class=\"line\">hook.callAsync((res) =&gt; &#123;</span><br><span class=\"line\">  console.log(res)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>callAsync方法执行过程中，使用new Function拼接新函数，生成结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function(_callback) &#123;</span><br><span class=\"line\">  &quot;use strict&quot;;</span><br><span class=\"line\">  var _context;</span><br><span class=\"line\">  var _x = this._x;</span><br><span class=\"line\">  function _next0() &#123;</span><br><span class=\"line\">    var _fn1 = _x[1];</span><br><span class=\"line\">    var _hasResult1 = false;</span><br><span class=\"line\">    var _promise1 = _fn1();</span><br><span class=\"line\">    if (!_promise1 || !_promise1.then)</span><br><span class=\"line\">      throw new Error(&#x27;Tap function (tapPromise) did not return promise (returned &#x27; + _promise1 + &#x27;)&#x27;);</span><br><span class=\"line\">    _promise1.then((function (_result1) &#123;</span><br><span class=\"line\">      _hasResult1 = true;</span><br><span class=\"line\">      _callback();</span><br><span class=\"line\">    &#125;), function (_err1) &#123;</span><br><span class=\"line\">      if (_hasResult1) throw _err1;</span><br><span class=\"line\">      _callback(_err1);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  var _fn0 = _x[0];</span><br><span class=\"line\">  _fn0((function (_err0) &#123;</span><br><span class=\"line\">    if (_err0) &#123;</span><br><span class=\"line\">      _callback(_err0);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      _next0();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Function ([arg1[, arg2[, ...argN]],] functionBody)</span><br></pre></td></tr></table></figure>\n\n<p><strong>functionBody</strong></p>\n<pre><code>一个字符串，表示函数体的内容。\n</code></pre>\n<p>以下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const adder = new Function(&quot;a&quot;, &quot;b&quot;, `</span><br><span class=\"line\">  if (isNaN(a) || isNaN(b)) return</span><br><span class=\"line\">  </span><br><span class=\"line\">  return a + b</span><br><span class=\"line\">`);</span><br></pre></td></tr></table></figure>\n<p>生成的函数就如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function anonymous(a,b</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  if (isNaN(a) || isNaN(b)) return</span><br><span class=\"line\">  </span><br><span class=\"line\">  return a + b</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h3><p>MDN表示，Function动态生成的函数，作用域为全局作用域，而不是创建函数时所在的作用域。</p>\n<p>tapabel就想到一个办法，将动态的生成的函数，动态绑定到类实例方法上，在动态函数中直接访问’this’上的属性，即实例属性。</p>\n<h3 id=\"安全问题\"><a href=\"#安全问题\" class=\"headerlink\" title=\"安全问题\"></a>安全问题</h3><p><strong>new Function</strong>由于是动态生成代码，因此会存在安全问题。在配置了CSP安全策略的浏览器页面中执行会有以下报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Uncaught EvalError: Refused to evaluate a string as JavaScript because &#x27;unsafe-eval&#x27; is not an allowed source of script in the following Content Security Policy directive: &quot;script-src &#x27;report-sample&#x27; &#x27;self&#x27; *.speedcurve.com &#x27;sha256-q7cJjDqNO2e1L5UltvJ1LhvnYN7yJXgGO7b6h9xkL1o=&#x27; www.google-analytics.com/analytics.js &#x27;sha256-JEt9Nmc3BP88wxuTZm9aKNu87vEgGmKW1zzy/vb1KPs=&#x27; polyfill.io/v3/polyfill.min.js assets.codepen.io production-assets.codepen.io&quot;.</span><br><span class=\"line\"></span><br><span class=\"line\">    at new Function (&lt;anonymous&gt;)</span><br><span class=\"line\">    at &lt;anonymous&gt;:1:15</span><br><span class=\"line\">(anonymous) @ VM54:1</span><br></pre></td></tr></table></figure>\n\n<p>因此，Function构造函数一般不适用于在浏览器端使用。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>tapable是webpack实现插件机制的核心。插件通过tapable注册到webpack的执行过程中的各个事件节点。当执行过程到达对应节点时，tapable上注册的插件就会以该事件节点要求的方式执行。</p>\n</blockquote>\n<p>tapable执行插件队列的实现，是通过在运行时根据调用方法，使用Function构造函数动态构造新的函数并执行。</p>\n<p>如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 初始化钩子列表</span><br><span class=\"line\">const hook = new AsyncSeriesHook()</span><br><span class=\"line\">// 挂载钩子</span><br><span class=\"line\">hook.tapAsync(&#x27;tap1&#x27;, (callback) =&gt; &#123;</span><br><span class=\"line\">  setTimeout(() =&gt; &#123;</span><br><span class=\"line\">    callback(&#x27;tap1&#x27;)</span><br><span class=\"line\">  &#125;, 0)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">hook.tapPromise(&#x27;tap2&#x27;, () =&gt; &#123;</span><br><span class=\"line\">  return Promise.resolve(&#x27;tap2&#x27;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// 执行钩子</span><br><span class=\"line\">hook.callAsync((res) =&gt; &#123;</span><br><span class=\"line\">  console.log(res)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>callAsync方法执行过程中，使用new Function拼接新函数，生成结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function(_callback) &#123;</span><br><span class=\"line\">  &quot;use strict&quot;;</span><br><span class=\"line\">  var _context;</span><br><span class=\"line\">  var _x = this._x;</span><br><span class=\"line\">  function _next0() &#123;</span><br><span class=\"line\">    var _fn1 = _x[1];</span><br><span class=\"line\">    var _hasResult1 = false;</span><br><span class=\"line\">    var _promise1 = _fn1();</span><br><span class=\"line\">    if (!_promise1 || !_promise1.then)</span><br><span class=\"line\">      throw new Error(&#x27;Tap function (tapPromise) did not return promise (returned &#x27; + _promise1 + &#x27;)&#x27;);</span><br><span class=\"line\">    _promise1.then((function (_result1) &#123;</span><br><span class=\"line\">      _hasResult1 = true;</span><br><span class=\"line\">      _callback();</span><br><span class=\"line\">    &#125;), function (_err1) &#123;</span><br><span class=\"line\">      if (_hasResult1) throw _err1;</span><br><span class=\"line\">      _callback(_err1);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  var _fn0 = _x[0];</span><br><span class=\"line\">  _fn0((function (_err0) &#123;</span><br><span class=\"line\">    if (_err0) &#123;</span><br><span class=\"line\">      _callback(_err0);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      _next0();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Function ([arg1[, arg2[, ...argN]],] functionBody)</span><br></pre></td></tr></table></figure>\n\n<p><strong>functionBody</strong></p>\n<pre><code>一个字符串，表示函数体的内容。\n</code></pre>\n<p>以下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const adder = new Function(&quot;a&quot;, &quot;b&quot;, `</span><br><span class=\"line\">  if (isNaN(a) || isNaN(b)) return</span><br><span class=\"line\">  </span><br><span class=\"line\">  return a + b</span><br><span class=\"line\">`);</span><br></pre></td></tr></table></figure>\n<p>生成的函数就如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function anonymous(a,b</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  if (isNaN(a) || isNaN(b)) return</span><br><span class=\"line\">  </span><br><span class=\"line\">  return a + b</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h3><p>MDN表示，Function动态生成的函数，作用域为全局作用域，而不是创建函数时所在的作用域。</p>\n<p>tapabel就想到一个办法，将动态的生成的函数，动态绑定到类实例方法上，在动态函数中直接访问’this’上的属性，即实例属性。</p>\n<h3 id=\"安全问题\"><a href=\"#安全问题\" class=\"headerlink\" title=\"安全问题\"></a>安全问题</h3><p><strong>new Function</strong>由于是动态生成代码，因此会存在安全问题。在配置了CSP安全策略的浏览器页面中执行会有以下报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Uncaught EvalError: Refused to evaluate a string as JavaScript because &#x27;unsafe-eval&#x27; is not an allowed source of script in the following Content Security Policy directive: &quot;script-src &#x27;report-sample&#x27; &#x27;self&#x27; *.speedcurve.com &#x27;sha256-q7cJjDqNO2e1L5UltvJ1LhvnYN7yJXgGO7b6h9xkL1o=&#x27; www.google-analytics.com/analytics.js &#x27;sha256-JEt9Nmc3BP88wxuTZm9aKNu87vEgGmKW1zzy/vb1KPs=&#x27; polyfill.io/v3/polyfill.min.js assets.codepen.io production-assets.codepen.io&quot;.</span><br><span class=\"line\"></span><br><span class=\"line\">    at new Function (&lt;anonymous&gt;)</span><br><span class=\"line\">    at &lt;anonymous&gt;:1:15</span><br><span class=\"line\">(anonymous) @ VM54:1</span><br></pre></td></tr></table></figure>\n\n<p>因此，Function构造函数一般不适用于在浏览器端使用。</p>\n"},{"title":"webpack学习笔记","date":"2021-06-19T16:00:00.000Z","_content":"\n有这样一个模块：\n\n```\n// src/base/b.js\nfunction foo() {\n  console.log('function foo')\n}\nmodule.exports = foo\n```\n\n## development 'eval-source-map'\nb模块的编译结果为：\n\n```\n/***/ \"./src/base/b.js\":\n/*!***********************!*\\\n  !*** ./src/base/b.js ***!\n  \\***********************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\neval(\"function foo() {\\n  console.log('function foo');\\n}\\n\\nmodule.exports = foo;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYmFzZS9iLmpzP2Q5YjYiXSwibmFtZXMiOlsiZm9vIiwiY29uc29sZSIsImxvZyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLEdBQVQsR0FBZTtBQUNiQyxTQUFPLENBQUNDLEdBQVIsQ0FBWSxjQUFaO0FBQ0Q7O0FBQ0RDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkosR0FBakIiLCJmaWxlIjoiLi9zcmMvYmFzZS9iLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gZm9vKCkge1xuICBjb25zb2xlLmxvZygnZnVuY3Rpb24gZm9vJylcbn1cbm1vZHVsZS5leHBvcnRzID0gZm9vIl0sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./src/base/b.js\\n\");\n\n/***/ })\n```\n\n`eval`方法的注释部分便是sourcemap。包含\n1. sourceURL。\n\n2. sourceMappingURL\n该部分是base64编码。解码后如下：\n\n```\n{\n  // sourcemap版本号是3\n  \"version\": 3,\n  // 源码地址，可能由多个模块合并，因此为数组格式。后面的hash用来刷新浏览器缓存。\n  \"sources\": [\n    \"webpack:///./src/base/b.js?d9b6\"\n  ],\n  // 转换前的所有变量名、属性名、方法名\n  \"names\": [\n    \"foo\",\n    \"console\",\n    \"log\",\n    \"module\",\n    \"exports\"\n  ],\n  // 记录位置信息的字符串\n  \"mappings\": \"AAAA,SAASA,GAAT,GAAe;AACbC,SAAO,CAACC,GAAR,CAAY,cAAZ;AACD;;AACDC,MAAM,CAACC,OAAP,GAAiBJ,GAAjB\",\n  // 转换后的文件名，这里不清楚为什么后缀名重复\n  \"file\": \"./src/base/b.js.js\",\n  // 转换后的代码，目测分行存储在数组中\n  \"sourcesContent\": [\n    \"function foo() {\\n  console.log('function foo')\\n}\\nmodule.exports = foo\"\n  ],\n  // 转换前的文件所在的目录。如果与转换前的文件在同一目录，该项为空\n  \"sourceRoot\": \"\"\n}\n```\n\n## mappings\n\n- 每个分号对应转换后源码的一行；\n- 每个逗号对应转换后源码的一个位置；\n- 每个位置通常是5位；\n\n5位的位置说明：\n\n- 第一位，表示这个位置在【转换后代码】的第几列。\n- 第二位，表示这个位置属于【sources属性】中的哪一个文件。\n- 第三位，表示这个位置属于【转换前代码】的第几行。\n- 第四位，表示这个位置属于【转换前代码】的第几列。\n- 第五位，表示这个位置属于【names属性】的哪一个变量。该位置非必须。如果不是属性或变量则为空。\n- 不需要保存转换后的行号，因为mappings中的分号就是行分割符。\n- 每一行的位置数据，第一、三、四位都属于相对位置，相对mappings中前一个元素的位置，第三、四位的相对位置要看转换前的代码。\n\n参考资料：[source-map 的原理](https://mp.weixin.qq.com/s/cuAiTfri0Ju0CD6a6MPRUg)\n\n```\n// 转换前\nfunction foo() {\n  console.log('function foo')\n}\nmodule.exports = foo\n// 转换后\nfunction foo() {\\n  console.log('function foo');\\n}\\n\\nmodule.exports = foo;\n```\n使用[base64-vlq库](https://www.npmjs.com/package/@lib/base64-vlq)或者[站长工具](https://www.murzwin.com/base64vlq.html)将mappings解码：\n\n```\n// 源码\n\"mappings\": \"AAAA,SAASA,GAAT,GAAe;AACbC,SAAO,CAACC,GAAR,CAAY,cAAZ;AACD;;AACDC,MAAM,CAACC,OAAP,GAAiBJ,GAAjB\"\n// 解码后：\n0) [0,0,0,0], [9,0,0,9,0], [3,0,0,-9], [3,0,0,15]\n1) [0,0,1,-13,1], [9,0,0,7], [1,0,0,1,1], [3,0,0,-8], [1,0,0,12], [14,0,0,-12]\n2) [0,0,1,-1]\n4) [0,0,1,-1,1], [6,0,0,6], [1,0,0,1,1], [7,0,0,-7], [3,0,0,17,-4], [3,0,0,-17]\n// 绝对位置\n(([from_position](source_index)=>[to_position]))\n\n([0,0](#0)=>[0,0]) | ([0,9](#0)=>[0,9]) | ([0,0](#0)=>[0,12]) | ([0,15](#0)=>[0,15])\n([1,-13](#0)=>[1,0]) | ([1,-6](#0)=>[1,9]) | ([1,-5](#0)=>[1,10]) | ([1,-13](#0)=>[1,13]) | ([1,-1](#0)=>[1,14]) | ([1,-13](#0)=>[1,28])\n([2,-1](#0)=>[2,0])\n([3,-1](#0)=>[4,0]) | ([3,5](#0)=>[4,6]) | ([3,6](#0)=>[4,7]) | ([3,-1](#0)=>[4,14]) | ([3,16](#0)=>[4,17]) | ([3,-1](#0)=>[4,20])\n```\n解码是确实解码了，位置看起来有点对不上，估计是算法没理解对，先不管了。\n\n\n参考资料：\n- [An Introduction to Source Maps](https://blog.teamtreehouse.com/introduction-source-maps)\n- \n\n## 浏览器加载sourcemap\n\n以chrome为例，preferences面板可以开启sourcemap支持：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-29/1624937369621-image.png)\n\n浏览器自动识别代码中的sourceURL字段并加载对应的代码。\n\n有了sourcemap，浏览器自动会解析源代码的位置。\n\n这里有一点细节。\n* sourceMappingURL中的sources字段，路径格式为`webpack:///`。sourceURL的路径格式为`webpack-internal:///`。\n* sourceURL是用来给eval方法内的代码字符串命名的。webpack-dev-server编译后的代码是通过eval执行的。浏览器直接以该文件名建立新文件，调试时可以直接打开这个新文件，而不用在定位到eval方法中。\n* sourceMappingURL中的sources内的文件为转化前的代码路径，用来调试时报错定位。\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-29/1624971697729-image.png)","source":"_posts/webpack/sourcemap.md","raw":"---\ntitle: webpack学习笔记\ncategories: 其它\ntags: [sourcemap, webpack]\ndate: 2021-6-20\n---\n\n有这样一个模块：\n\n```\n// src/base/b.js\nfunction foo() {\n  console.log('function foo')\n}\nmodule.exports = foo\n```\n\n## development 'eval-source-map'\nb模块的编译结果为：\n\n```\n/***/ \"./src/base/b.js\":\n/*!***********************!*\\\n  !*** ./src/base/b.js ***!\n  \\***********************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\neval(\"function foo() {\\n  console.log('function foo');\\n}\\n\\nmodule.exports = foo;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYmFzZS9iLmpzP2Q5YjYiXSwibmFtZXMiOlsiZm9vIiwiY29uc29sZSIsImxvZyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLEdBQVQsR0FBZTtBQUNiQyxTQUFPLENBQUNDLEdBQVIsQ0FBWSxjQUFaO0FBQ0Q7O0FBQ0RDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkosR0FBakIiLCJmaWxlIjoiLi9zcmMvYmFzZS9iLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gZm9vKCkge1xuICBjb25zb2xlLmxvZygnZnVuY3Rpb24gZm9vJylcbn1cbm1vZHVsZS5leHBvcnRzID0gZm9vIl0sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./src/base/b.js\\n\");\n\n/***/ })\n```\n\n`eval`方法的注释部分便是sourcemap。包含\n1. sourceURL。\n\n2. sourceMappingURL\n该部分是base64编码。解码后如下：\n\n```\n{\n  // sourcemap版本号是3\n  \"version\": 3,\n  // 源码地址，可能由多个模块合并，因此为数组格式。后面的hash用来刷新浏览器缓存。\n  \"sources\": [\n    \"webpack:///./src/base/b.js?d9b6\"\n  ],\n  // 转换前的所有变量名、属性名、方法名\n  \"names\": [\n    \"foo\",\n    \"console\",\n    \"log\",\n    \"module\",\n    \"exports\"\n  ],\n  // 记录位置信息的字符串\n  \"mappings\": \"AAAA,SAASA,GAAT,GAAe;AACbC,SAAO,CAACC,GAAR,CAAY,cAAZ;AACD;;AACDC,MAAM,CAACC,OAAP,GAAiBJ,GAAjB\",\n  // 转换后的文件名，这里不清楚为什么后缀名重复\n  \"file\": \"./src/base/b.js.js\",\n  // 转换后的代码，目测分行存储在数组中\n  \"sourcesContent\": [\n    \"function foo() {\\n  console.log('function foo')\\n}\\nmodule.exports = foo\"\n  ],\n  // 转换前的文件所在的目录。如果与转换前的文件在同一目录，该项为空\n  \"sourceRoot\": \"\"\n}\n```\n\n## mappings\n\n- 每个分号对应转换后源码的一行；\n- 每个逗号对应转换后源码的一个位置；\n- 每个位置通常是5位；\n\n5位的位置说明：\n\n- 第一位，表示这个位置在【转换后代码】的第几列。\n- 第二位，表示这个位置属于【sources属性】中的哪一个文件。\n- 第三位，表示这个位置属于【转换前代码】的第几行。\n- 第四位，表示这个位置属于【转换前代码】的第几列。\n- 第五位，表示这个位置属于【names属性】的哪一个变量。该位置非必须。如果不是属性或变量则为空。\n- 不需要保存转换后的行号，因为mappings中的分号就是行分割符。\n- 每一行的位置数据，第一、三、四位都属于相对位置，相对mappings中前一个元素的位置，第三、四位的相对位置要看转换前的代码。\n\n参考资料：[source-map 的原理](https://mp.weixin.qq.com/s/cuAiTfri0Ju0CD6a6MPRUg)\n\n```\n// 转换前\nfunction foo() {\n  console.log('function foo')\n}\nmodule.exports = foo\n// 转换后\nfunction foo() {\\n  console.log('function foo');\\n}\\n\\nmodule.exports = foo;\n```\n使用[base64-vlq库](https://www.npmjs.com/package/@lib/base64-vlq)或者[站长工具](https://www.murzwin.com/base64vlq.html)将mappings解码：\n\n```\n// 源码\n\"mappings\": \"AAAA,SAASA,GAAT,GAAe;AACbC,SAAO,CAACC,GAAR,CAAY,cAAZ;AACD;;AACDC,MAAM,CAACC,OAAP,GAAiBJ,GAAjB\"\n// 解码后：\n0) [0,0,0,0], [9,0,0,9,0], [3,0,0,-9], [3,0,0,15]\n1) [0,0,1,-13,1], [9,0,0,7], [1,0,0,1,1], [3,0,0,-8], [1,0,0,12], [14,0,0,-12]\n2) [0,0,1,-1]\n4) [0,0,1,-1,1], [6,0,0,6], [1,0,0,1,1], [7,0,0,-7], [3,0,0,17,-4], [3,0,0,-17]\n// 绝对位置\n(([from_position](source_index)=>[to_position]))\n\n([0,0](#0)=>[0,0]) | ([0,9](#0)=>[0,9]) | ([0,0](#0)=>[0,12]) | ([0,15](#0)=>[0,15])\n([1,-13](#0)=>[1,0]) | ([1,-6](#0)=>[1,9]) | ([1,-5](#0)=>[1,10]) | ([1,-13](#0)=>[1,13]) | ([1,-1](#0)=>[1,14]) | ([1,-13](#0)=>[1,28])\n([2,-1](#0)=>[2,0])\n([3,-1](#0)=>[4,0]) | ([3,5](#0)=>[4,6]) | ([3,6](#0)=>[4,7]) | ([3,-1](#0)=>[4,14]) | ([3,16](#0)=>[4,17]) | ([3,-1](#0)=>[4,20])\n```\n解码是确实解码了，位置看起来有点对不上，估计是算法没理解对，先不管了。\n\n\n参考资料：\n- [An Introduction to Source Maps](https://blog.teamtreehouse.com/introduction-source-maps)\n- \n\n## 浏览器加载sourcemap\n\n以chrome为例，preferences面板可以开启sourcemap支持：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-29/1624937369621-image.png)\n\n浏览器自动识别代码中的sourceURL字段并加载对应的代码。\n\n有了sourcemap，浏览器自动会解析源代码的位置。\n\n这里有一点细节。\n* sourceMappingURL中的sources字段，路径格式为`webpack:///`。sourceURL的路径格式为`webpack-internal:///`。\n* sourceURL是用来给eval方法内的代码字符串命名的。webpack-dev-server编译后的代码是通过eval执行的。浏览器直接以该文件名建立新文件，调试时可以直接打开这个新文件，而不用在定位到eval方法中。\n* sourceMappingURL中的sources内的文件为转化前的代码路径，用来调试时报错定位。\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-29/1624971697729-image.png)","slug":"webpack/sourcemap","published":1,"updated":"2021-08-07T03:14:03.576Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc78001tecq8gnq13i3s","content":"<p>有这样一个模块：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// src/base/b.js</span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">  console.log(&#x27;function foo&#x27;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports = foo</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"development-‘eval-source-map’\"><a href=\"#development-‘eval-source-map’\" class=\"headerlink\" title=\"development ‘eval-source-map’\"></a>development ‘eval-source-map’</h2><p>b模块的编译结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/***/ &quot;./src/base/b.js&quot;:</span><br><span class=\"line\">/*!***********************!*\\</span><br><span class=\"line\">  !*** ./src/base/b.js ***!</span><br><span class=\"line\">  \\***********************/</span><br><span class=\"line\">/*! no static exports found */</span><br><span class=\"line\">/***/ (function(module, exports) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">eval(&quot;function foo() &#123;\\n  console.log(&#x27;function foo&#x27;);\\n&#125;\\n\\nmodule.exports = foo;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYmFzZS9iLmpzP2Q5YjYiXSwibmFtZXMiOlsiZm9vIiwiY29uc29sZSIsImxvZyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLEdBQVQsR0FBZTtBQUNiQyxTQUFPLENBQUNDLEdBQVIsQ0FBWSxjQUFaO0FBQ0Q7O0FBQ0RDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkosR0FBakIiLCJmaWxlIjoiLi9zcmMvYmFzZS9iLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gZm9vKCkge1xuICBjb25zb2xlLmxvZygnZnVuY3Rpb24gZm9vJylcbn1cbm1vZHVsZS5leHBvcnRzID0gZm9vIl0sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./src/base/b.js\\n&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">/***/ &#125;)</span><br></pre></td></tr></table></figure>\n\n<p><code>eval</code>方法的注释部分便是sourcemap。包含</p>\n<ol>\n<li><p>sourceURL。</p>\n</li>\n<li><p>sourceMappingURL<br>该部分是base64编码。解码后如下：</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  // sourcemap版本号是3</span><br><span class=\"line\">  &quot;version&quot;: 3,</span><br><span class=\"line\">  // 源码地址，可能由多个模块合并，因此为数组格式。后面的hash用来刷新浏览器缓存。</span><br><span class=\"line\">  &quot;sources&quot;: [</span><br><span class=\"line\">    &quot;webpack:///./src/base/b.js?d9b6&quot;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  // 转换前的所有变量名、属性名、方法名</span><br><span class=\"line\">  &quot;names&quot;: [</span><br><span class=\"line\">    &quot;foo&quot;,</span><br><span class=\"line\">    &quot;console&quot;,</span><br><span class=\"line\">    &quot;log&quot;,</span><br><span class=\"line\">    &quot;module&quot;,</span><br><span class=\"line\">    &quot;exports&quot;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  // 记录位置信息的字符串</span><br><span class=\"line\">  &quot;mappings&quot;: &quot;AAAA,SAASA,GAAT,GAAe;AACbC,SAAO,CAACC,GAAR,CAAY,cAAZ;AACD;;AACDC,MAAM,CAACC,OAAP,GAAiBJ,GAAjB&quot;,</span><br><span class=\"line\">  // 转换后的文件名，这里不清楚为什么后缀名重复</span><br><span class=\"line\">  &quot;file&quot;: &quot;./src/base/b.js.js&quot;,</span><br><span class=\"line\">  // 转换后的代码，目测分行存储在数组中</span><br><span class=\"line\">  &quot;sourcesContent&quot;: [</span><br><span class=\"line\">    &quot;function foo() &#123;\\n  console.log(&#x27;function foo&#x27;)\\n&#125;\\nmodule.exports = foo&quot;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  // 转换前的文件所在的目录。如果与转换前的文件在同一目录，该项为空</span><br><span class=\"line\">  &quot;sourceRoot&quot;: &quot;&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"mappings\"><a href=\"#mappings\" class=\"headerlink\" title=\"mappings\"></a>mappings</h2><ul>\n<li>每个分号对应转换后源码的一行；</li>\n<li>每个逗号对应转换后源码的一个位置；</li>\n<li>每个位置通常是5位；</li>\n</ul>\n<p>5位的位置说明：</p>\n<ul>\n<li>第一位，表示这个位置在【转换后代码】的第几列。</li>\n<li>第二位，表示这个位置属于【sources属性】中的哪一个文件。</li>\n<li>第三位，表示这个位置属于【转换前代码】的第几行。</li>\n<li>第四位，表示这个位置属于【转换前代码】的第几列。</li>\n<li>第五位，表示这个位置属于【names属性】的哪一个变量。该位置非必须。如果不是属性或变量则为空。</li>\n<li>不需要保存转换后的行号，因为mappings中的分号就是行分割符。</li>\n<li>每一行的位置数据，第一、三、四位都属于相对位置，相对mappings中前一个元素的位置，第三、四位的相对位置要看转换前的代码。</li>\n</ul>\n<p>参考资料：<a href=\"https://mp.weixin.qq.com/s/cuAiTfri0Ju0CD6a6MPRUg\">source-map 的原理</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 转换前</span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">  console.log(&#x27;function foo&#x27;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports = foo</span><br><span class=\"line\">// 转换后</span><br><span class=\"line\">function foo() &#123;\\n  console.log(&#x27;function foo&#x27;);\\n&#125;\\n\\nmodule.exports = foo;</span><br></pre></td></tr></table></figure>\n<p>使用<a href=\"https://www.npmjs.com/package/@lib/base64-vlq\">base64-vlq库</a>或者<a href=\"https://www.murzwin.com/base64vlq.html\">站长工具</a>将mappings解码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 源码</span><br><span class=\"line\">&quot;mappings&quot;: &quot;AAAA,SAASA,GAAT,GAAe;AACbC,SAAO,CAACC,GAAR,CAAY,cAAZ;AACD;;AACDC,MAAM,CAACC,OAAP,GAAiBJ,GAAjB&quot;</span><br><span class=\"line\">// 解码后：</span><br><span class=\"line\">0) [0,0,0,0], [9,0,0,9,0], [3,0,0,-9], [3,0,0,15]</span><br><span class=\"line\">1) [0,0,1,-13,1], [9,0,0,7], [1,0,0,1,1], [3,0,0,-8], [1,0,0,12], [14,0,0,-12]</span><br><span class=\"line\">2) [0,0,1,-1]</span><br><span class=\"line\">4) [0,0,1,-1,1], [6,0,0,6], [1,0,0,1,1], [7,0,0,-7], [3,0,0,17,-4], [3,0,0,-17]</span><br><span class=\"line\">// 绝对位置</span><br><span class=\"line\">(([from_position](source_index)=&gt;[to_position]))</span><br><span class=\"line\"></span><br><span class=\"line\">([0,0](#0)=&gt;[0,0]) | ([0,9](#0)=&gt;[0,9]) | ([0,0](#0)=&gt;[0,12]) | ([0,15](#0)=&gt;[0,15])</span><br><span class=\"line\">([1,-13](#0)=&gt;[1,0]) | ([1,-6](#0)=&gt;[1,9]) | ([1,-5](#0)=&gt;[1,10]) | ([1,-13](#0)=&gt;[1,13]) | ([1,-1](#0)=&gt;[1,14]) | ([1,-13](#0)=&gt;[1,28])</span><br><span class=\"line\">([2,-1](#0)=&gt;[2,0])</span><br><span class=\"line\">([3,-1](#0)=&gt;[4,0]) | ([3,5](#0)=&gt;[4,6]) | ([3,6](#0)=&gt;[4,7]) | ([3,-1](#0)=&gt;[4,14]) | ([3,16](#0)=&gt;[4,17]) | ([3,-1](#0)=&gt;[4,20])</span><br></pre></td></tr></table></figure>\n<p>解码是确实解码了，位置看起来有点对不上，估计是算法没理解对，先不管了。</p>\n<p>参考资料：</p>\n<ul>\n<li><a href=\"https://blog.teamtreehouse.com/introduction-source-maps\">An Introduction to Source Maps</a></li>\n<li></li>\n</ul>\n<h2 id=\"浏览器加载sourcemap\"><a href=\"#浏览器加载sourcemap\" class=\"headerlink\" title=\"浏览器加载sourcemap\"></a>浏览器加载sourcemap</h2><p>以chrome为例，preferences面板可以开启sourcemap支持：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-29/1624937369621-image.png\"></p>\n<p>浏览器自动识别代码中的sourceURL字段并加载对应的代码。</p>\n<p>有了sourcemap，浏览器自动会解析源代码的位置。</p>\n<p>这里有一点细节。</p>\n<ul>\n<li>sourceMappingURL中的sources字段，路径格式为<code>webpack:///</code>。sourceURL的路径格式为<code>webpack-internal:///</code>。</li>\n<li>sourceURL是用来给eval方法内的代码字符串命名的。webpack-dev-server编译后的代码是通过eval执行的。浏览器直接以该文件名建立新文件，调试时可以直接打开这个新文件，而不用在定位到eval方法中。</li>\n<li>sourceMappingURL中的sources内的文件为转化前的代码路径，用来调试时报错定位。</li>\n</ul>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-29/1624971697729-image.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>有这样一个模块：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// src/base/b.js</span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">  console.log(&#x27;function foo&#x27;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports = foo</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"development-‘eval-source-map’\"><a href=\"#development-‘eval-source-map’\" class=\"headerlink\" title=\"development ‘eval-source-map’\"></a>development ‘eval-source-map’</h2><p>b模块的编译结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/***/ &quot;./src/base/b.js&quot;:</span><br><span class=\"line\">/*!***********************!*\\</span><br><span class=\"line\">  !*** ./src/base/b.js ***!</span><br><span class=\"line\">  \\***********************/</span><br><span class=\"line\">/*! no static exports found */</span><br><span class=\"line\">/***/ (function(module, exports) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">eval(&quot;function foo() &#123;\\n  console.log(&#x27;function foo&#x27;);\\n&#125;\\n\\nmodule.exports = foo;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYmFzZS9iLmpzP2Q5YjYiXSwibmFtZXMiOlsiZm9vIiwiY29uc29sZSIsImxvZyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLEdBQVQsR0FBZTtBQUNiQyxTQUFPLENBQUNDLEdBQVIsQ0FBWSxjQUFaO0FBQ0Q7O0FBQ0RDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkosR0FBakIiLCJmaWxlIjoiLi9zcmMvYmFzZS9iLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gZm9vKCkge1xuICBjb25zb2xlLmxvZygnZnVuY3Rpb24gZm9vJylcbn1cbm1vZHVsZS5leHBvcnRzID0gZm9vIl0sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./src/base/b.js\\n&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">/***/ &#125;)</span><br></pre></td></tr></table></figure>\n\n<p><code>eval</code>方法的注释部分便是sourcemap。包含</p>\n<ol>\n<li><p>sourceURL。</p>\n</li>\n<li><p>sourceMappingURL<br>该部分是base64编码。解码后如下：</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  // sourcemap版本号是3</span><br><span class=\"line\">  &quot;version&quot;: 3,</span><br><span class=\"line\">  // 源码地址，可能由多个模块合并，因此为数组格式。后面的hash用来刷新浏览器缓存。</span><br><span class=\"line\">  &quot;sources&quot;: [</span><br><span class=\"line\">    &quot;webpack:///./src/base/b.js?d9b6&quot;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  // 转换前的所有变量名、属性名、方法名</span><br><span class=\"line\">  &quot;names&quot;: [</span><br><span class=\"line\">    &quot;foo&quot;,</span><br><span class=\"line\">    &quot;console&quot;,</span><br><span class=\"line\">    &quot;log&quot;,</span><br><span class=\"line\">    &quot;module&quot;,</span><br><span class=\"line\">    &quot;exports&quot;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  // 记录位置信息的字符串</span><br><span class=\"line\">  &quot;mappings&quot;: &quot;AAAA,SAASA,GAAT,GAAe;AACbC,SAAO,CAACC,GAAR,CAAY,cAAZ;AACD;;AACDC,MAAM,CAACC,OAAP,GAAiBJ,GAAjB&quot;,</span><br><span class=\"line\">  // 转换后的文件名，这里不清楚为什么后缀名重复</span><br><span class=\"line\">  &quot;file&quot;: &quot;./src/base/b.js.js&quot;,</span><br><span class=\"line\">  // 转换后的代码，目测分行存储在数组中</span><br><span class=\"line\">  &quot;sourcesContent&quot;: [</span><br><span class=\"line\">    &quot;function foo() &#123;\\n  console.log(&#x27;function foo&#x27;)\\n&#125;\\nmodule.exports = foo&quot;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  // 转换前的文件所在的目录。如果与转换前的文件在同一目录，该项为空</span><br><span class=\"line\">  &quot;sourceRoot&quot;: &quot;&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"mappings\"><a href=\"#mappings\" class=\"headerlink\" title=\"mappings\"></a>mappings</h2><ul>\n<li>每个分号对应转换后源码的一行；</li>\n<li>每个逗号对应转换后源码的一个位置；</li>\n<li>每个位置通常是5位；</li>\n</ul>\n<p>5位的位置说明：</p>\n<ul>\n<li>第一位，表示这个位置在【转换后代码】的第几列。</li>\n<li>第二位，表示这个位置属于【sources属性】中的哪一个文件。</li>\n<li>第三位，表示这个位置属于【转换前代码】的第几行。</li>\n<li>第四位，表示这个位置属于【转换前代码】的第几列。</li>\n<li>第五位，表示这个位置属于【names属性】的哪一个变量。该位置非必须。如果不是属性或变量则为空。</li>\n<li>不需要保存转换后的行号，因为mappings中的分号就是行分割符。</li>\n<li>每一行的位置数据，第一、三、四位都属于相对位置，相对mappings中前一个元素的位置，第三、四位的相对位置要看转换前的代码。</li>\n</ul>\n<p>参考资料：<a href=\"https://mp.weixin.qq.com/s/cuAiTfri0Ju0CD6a6MPRUg\">source-map 的原理</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 转换前</span><br><span class=\"line\">function foo() &#123;</span><br><span class=\"line\">  console.log(&#x27;function foo&#x27;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports = foo</span><br><span class=\"line\">// 转换后</span><br><span class=\"line\">function foo() &#123;\\n  console.log(&#x27;function foo&#x27;);\\n&#125;\\n\\nmodule.exports = foo;</span><br></pre></td></tr></table></figure>\n<p>使用<a href=\"https://www.npmjs.com/package/@lib/base64-vlq\">base64-vlq库</a>或者<a href=\"https://www.murzwin.com/base64vlq.html\">站长工具</a>将mappings解码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 源码</span><br><span class=\"line\">&quot;mappings&quot;: &quot;AAAA,SAASA,GAAT,GAAe;AACbC,SAAO,CAACC,GAAR,CAAY,cAAZ;AACD;;AACDC,MAAM,CAACC,OAAP,GAAiBJ,GAAjB&quot;</span><br><span class=\"line\">// 解码后：</span><br><span class=\"line\">0) [0,0,0,0], [9,0,0,9,0], [3,0,0,-9], [3,0,0,15]</span><br><span class=\"line\">1) [0,0,1,-13,1], [9,0,0,7], [1,0,0,1,1], [3,0,0,-8], [1,0,0,12], [14,0,0,-12]</span><br><span class=\"line\">2) [0,0,1,-1]</span><br><span class=\"line\">4) [0,0,1,-1,1], [6,0,0,6], [1,0,0,1,1], [7,0,0,-7], [3,0,0,17,-4], [3,0,0,-17]</span><br><span class=\"line\">// 绝对位置</span><br><span class=\"line\">(([from_position](source_index)=&gt;[to_position]))</span><br><span class=\"line\"></span><br><span class=\"line\">([0,0](#0)=&gt;[0,0]) | ([0,9](#0)=&gt;[0,9]) | ([0,0](#0)=&gt;[0,12]) | ([0,15](#0)=&gt;[0,15])</span><br><span class=\"line\">([1,-13](#0)=&gt;[1,0]) | ([1,-6](#0)=&gt;[1,9]) | ([1,-5](#0)=&gt;[1,10]) | ([1,-13](#0)=&gt;[1,13]) | ([1,-1](#0)=&gt;[1,14]) | ([1,-13](#0)=&gt;[1,28])</span><br><span class=\"line\">([2,-1](#0)=&gt;[2,0])</span><br><span class=\"line\">([3,-1](#0)=&gt;[4,0]) | ([3,5](#0)=&gt;[4,6]) | ([3,6](#0)=&gt;[4,7]) | ([3,-1](#0)=&gt;[4,14]) | ([3,16](#0)=&gt;[4,17]) | ([3,-1](#0)=&gt;[4,20])</span><br></pre></td></tr></table></figure>\n<p>解码是确实解码了，位置看起来有点对不上，估计是算法没理解对，先不管了。</p>\n<p>参考资料：</p>\n<ul>\n<li><a href=\"https://blog.teamtreehouse.com/introduction-source-maps\">An Introduction to Source Maps</a></li>\n<li></li>\n</ul>\n<h2 id=\"浏览器加载sourcemap\"><a href=\"#浏览器加载sourcemap\" class=\"headerlink\" title=\"浏览器加载sourcemap\"></a>浏览器加载sourcemap</h2><p>以chrome为例，preferences面板可以开启sourcemap支持：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-29/1624937369621-image.png\"></p>\n<p>浏览器自动识别代码中的sourceURL字段并加载对应的代码。</p>\n<p>有了sourcemap，浏览器自动会解析源代码的位置。</p>\n<p>这里有一点细节。</p>\n<ul>\n<li>sourceMappingURL中的sources字段，路径格式为<code>webpack:///</code>。sourceURL的路径格式为<code>webpack-internal:///</code>。</li>\n<li>sourceURL是用来给eval方法内的代码字符串命名的。webpack-dev-server编译后的代码是通过eval执行的。浏览器直接以该文件名建立新文件，调试时可以直接打开这个新文件，而不用在定位到eval方法中。</li>\n<li>sourceMappingURL中的sources内的文件为转化前的代码路径，用来调试时报错定位。</li>\n</ul>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-6-29/1624971697729-image.png\"></p>\n"},{"title":"tapable学习笔记","date":"2021-07-23T16:00:00.000Z","_content":"  \n\n## tapable内部关系结构图\ntapable官方文档写的过于简洁，如果想要搞清楚tap类型、钩子类型、call类型之间的关系，还是得看源码才行。以下是我整理出来的关系结构图：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-7-24/1627102887500-tapable%E5%85%B3%E7%B3%BB%E7%BB%93%E6%9E%84%E5%9B%BE.png)\n\n## 简单示例\n以AsyncSeriesHook的callAsync为例，分别插入一个promise和async类型的插件：\n```\n// 初始化钩子列表\nconst hook = new AsyncSeriesHook()\n// 挂载钩子\nhook.tapAsync('tap1', (callback) => {\n  setTimeout(() => {\n    callback('tap1')\n  }, 0)\n})\nhook.tapPromise('tap2', () => {\n  return Promise.resolve('tap2')\n})\n// 执行钩子\nhook.callAsync((res) => {\n  console.log(res)\n})\n```\n\n#### 插件挂载\ntapAsync和tapPromise方法会将插件插入tap数组中。\n#### 插件执行\nAsyncSeriesHook为异步串行执行插件队列：执行完每个插件后都会接着执行下一个插件。\n\n插件执行的代码是经过包裹封装的。以上代码封装后的结构如下：\n```\nfunction(_callback) {\n  \"use strict\";\n  var _context;\n  var _x = this._x;\n  function _next0() {\n    var _fn1 = _x[1];\n    var _hasResult1 = false;\n    var _promise1 = _fn1();\n    if (!_promise1 || !_promise1.then)\n      throw new Error('Tap function (tapPromise) did not return promise (returned ' + _promise1 + ')');\n    _promise1.then((function (_result1) {\n      _hasResult1 = true;\n      _callback();\n    }), function (_err1) {\n      if (_hasResult1) throw _err1;\n      _callback(_err1);\n    });\n  }\n  var _fn0 = _x[0];\n  _fn0((function (_err0) {\n    if (_err0) {\n      _callback(_err0);\n    } else {\n      _next0();\n    }\n  }));\n}\n```\n以上是callAsync最终执行的函数。\n- _callback就是callAsync传入的回调\n- this._x指的是tap数组\n- _next0内部封装了插件tap2的执行语句\n- 当tap1插件，即_fn0方法的callback调用时无传参，则表示插件正常结束，可以执行_next0。否则不继续执行剩余的插件，直接结束队列并调用_callback\n\n## 总结\n1. tap方法类型决定了**插件类型**\n2. 钩子类型其实是**插件的执行顺序**和**插件传参/终止条件**的组合，和插件类型无关\n3. 钩子执行方式中，同步钩子只能用同步方法调用。异步钩子只能用异步方法调用。\n4. 插件类型取决于插件本身的需求，无需迁就钩子类型。只不过，异步插件就不要挂载到同步钩子类型上。\n5.promise和callAsync方法的不同体现在，插件队列结束时通过何种方式执行钩子回调。call方法无需回调。\n\n","source":"_posts/webpack/tapable.md","raw":"---\ntitle: tapable学习笔记\ncategories: 工程化\ntags: [tapable]\ndate: 2021-7-24\n---  \n\n## tapable内部关系结构图\ntapable官方文档写的过于简洁，如果想要搞清楚tap类型、钩子类型、call类型之间的关系，还是得看源码才行。以下是我整理出来的关系结构图：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-7-24/1627102887500-tapable%E5%85%B3%E7%B3%BB%E7%BB%93%E6%9E%84%E5%9B%BE.png)\n\n## 简单示例\n以AsyncSeriesHook的callAsync为例，分别插入一个promise和async类型的插件：\n```\n// 初始化钩子列表\nconst hook = new AsyncSeriesHook()\n// 挂载钩子\nhook.tapAsync('tap1', (callback) => {\n  setTimeout(() => {\n    callback('tap1')\n  }, 0)\n})\nhook.tapPromise('tap2', () => {\n  return Promise.resolve('tap2')\n})\n// 执行钩子\nhook.callAsync((res) => {\n  console.log(res)\n})\n```\n\n#### 插件挂载\ntapAsync和tapPromise方法会将插件插入tap数组中。\n#### 插件执行\nAsyncSeriesHook为异步串行执行插件队列：执行完每个插件后都会接着执行下一个插件。\n\n插件执行的代码是经过包裹封装的。以上代码封装后的结构如下：\n```\nfunction(_callback) {\n  \"use strict\";\n  var _context;\n  var _x = this._x;\n  function _next0() {\n    var _fn1 = _x[1];\n    var _hasResult1 = false;\n    var _promise1 = _fn1();\n    if (!_promise1 || !_promise1.then)\n      throw new Error('Tap function (tapPromise) did not return promise (returned ' + _promise1 + ')');\n    _promise1.then((function (_result1) {\n      _hasResult1 = true;\n      _callback();\n    }), function (_err1) {\n      if (_hasResult1) throw _err1;\n      _callback(_err1);\n    });\n  }\n  var _fn0 = _x[0];\n  _fn0((function (_err0) {\n    if (_err0) {\n      _callback(_err0);\n    } else {\n      _next0();\n    }\n  }));\n}\n```\n以上是callAsync最终执行的函数。\n- _callback就是callAsync传入的回调\n- this._x指的是tap数组\n- _next0内部封装了插件tap2的执行语句\n- 当tap1插件，即_fn0方法的callback调用时无传参，则表示插件正常结束，可以执行_next0。否则不继续执行剩余的插件，直接结束队列并调用_callback\n\n## 总结\n1. tap方法类型决定了**插件类型**\n2. 钩子类型其实是**插件的执行顺序**和**插件传参/终止条件**的组合，和插件类型无关\n3. 钩子执行方式中，同步钩子只能用同步方法调用。异步钩子只能用异步方法调用。\n4. 插件类型取决于插件本身的需求，无需迁就钩子类型。只不过，异步插件就不要挂载到同步钩子类型上。\n5.promise和callAsync方法的不同体现在，插件队列结束时通过何种方式执行钩子回调。call方法无需回调。\n\n","slug":"webpack/tapable","published":1,"updated":"2021-08-07T02:52:03.838Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc79001uecq80mhgdd4h","content":"<h2 id=\"tapable内部关系结构图\"><a href=\"#tapable内部关系结构图\" class=\"headerlink\" title=\"tapable内部关系结构图\"></a>tapable内部关系结构图</h2><p>tapable官方文档写的过于简洁，如果想要搞清楚tap类型、钩子类型、call类型之间的关系，还是得看源码才行。以下是我整理出来的关系结构图：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-7-24/1627102887500-tapable%E5%85%B3%E7%B3%BB%E7%BB%93%E6%9E%84%E5%9B%BE.png\"></p>\n<h2 id=\"简单示例\"><a href=\"#简单示例\" class=\"headerlink\" title=\"简单示例\"></a>简单示例</h2><p>以AsyncSeriesHook的callAsync为例，分别插入一个promise和async类型的插件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 初始化钩子列表</span><br><span class=\"line\">const hook = new AsyncSeriesHook()</span><br><span class=\"line\">// 挂载钩子</span><br><span class=\"line\">hook.tapAsync(&#x27;tap1&#x27;, (callback) =&gt; &#123;</span><br><span class=\"line\">  setTimeout(() =&gt; &#123;</span><br><span class=\"line\">    callback(&#x27;tap1&#x27;)</span><br><span class=\"line\">  &#125;, 0)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">hook.tapPromise(&#x27;tap2&#x27;, () =&gt; &#123;</span><br><span class=\"line\">  return Promise.resolve(&#x27;tap2&#x27;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// 执行钩子</span><br><span class=\"line\">hook.callAsync((res) =&gt; &#123;</span><br><span class=\"line\">  console.log(res)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"插件挂载\"><a href=\"#插件挂载\" class=\"headerlink\" title=\"插件挂载\"></a>插件挂载</h4><p>tapAsync和tapPromise方法会将插件插入tap数组中。</p>\n<h4 id=\"插件执行\"><a href=\"#插件执行\" class=\"headerlink\" title=\"插件执行\"></a>插件执行</h4><p>AsyncSeriesHook为异步串行执行插件队列：执行完每个插件后都会接着执行下一个插件。</p>\n<p>插件执行的代码是经过包裹封装的。以上代码封装后的结构如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function(_callback) &#123;</span><br><span class=\"line\">  &quot;use strict&quot;;</span><br><span class=\"line\">  var _context;</span><br><span class=\"line\">  var _x = this._x;</span><br><span class=\"line\">  function _next0() &#123;</span><br><span class=\"line\">    var _fn1 = _x[1];</span><br><span class=\"line\">    var _hasResult1 = false;</span><br><span class=\"line\">    var _promise1 = _fn1();</span><br><span class=\"line\">    if (!_promise1 || !_promise1.then)</span><br><span class=\"line\">      throw new Error(&#x27;Tap function (tapPromise) did not return promise (returned &#x27; + _promise1 + &#x27;)&#x27;);</span><br><span class=\"line\">    _promise1.then((function (_result1) &#123;</span><br><span class=\"line\">      _hasResult1 = true;</span><br><span class=\"line\">      _callback();</span><br><span class=\"line\">    &#125;), function (_err1) &#123;</span><br><span class=\"line\">      if (_hasResult1) throw _err1;</span><br><span class=\"line\">      _callback(_err1);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  var _fn0 = _x[0];</span><br><span class=\"line\">  _fn0((function (_err0) &#123;</span><br><span class=\"line\">    if (_err0) &#123;</span><br><span class=\"line\">      _callback(_err0);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      _next0();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上是callAsync最终执行的函数。</p>\n<ul>\n<li>_callback就是callAsync传入的回调</li>\n<li>this._x指的是tap数组</li>\n<li>_next0内部封装了插件tap2的执行语句</li>\n<li>当tap1插件，即_fn0方法的callback调用时无传参，则表示插件正常结束，可以执行_next0。否则不继续执行剩余的插件，直接结束队列并调用_callback</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li>tap方法类型决定了<strong>插件类型</strong></li>\n<li>钩子类型其实是<strong>插件的执行顺序</strong>和<strong>插件传参/终止条件</strong>的组合，和插件类型无关</li>\n<li>钩子执行方式中，同步钩子只能用同步方法调用。异步钩子只能用异步方法调用。</li>\n<li>插件类型取决于插件本身的需求，无需迁就钩子类型。只不过，异步插件就不要挂载到同步钩子类型上。</li>\n<li>promise和callAsync方法的不同体现在，插件队列结束时通过何种方式执行钩子回调。call方法无需回调。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"tapable内部关系结构图\"><a href=\"#tapable内部关系结构图\" class=\"headerlink\" title=\"tapable内部关系结构图\"></a>tapable内部关系结构图</h2><p>tapable官方文档写的过于简洁，如果想要搞清楚tap类型、钩子类型、call类型之间的关系，还是得看源码才行。以下是我整理出来的关系结构图：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-7-24/1627102887500-tapable%E5%85%B3%E7%B3%BB%E7%BB%93%E6%9E%84%E5%9B%BE.png\"></p>\n<h2 id=\"简单示例\"><a href=\"#简单示例\" class=\"headerlink\" title=\"简单示例\"></a>简单示例</h2><p>以AsyncSeriesHook的callAsync为例，分别插入一个promise和async类型的插件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 初始化钩子列表</span><br><span class=\"line\">const hook = new AsyncSeriesHook()</span><br><span class=\"line\">// 挂载钩子</span><br><span class=\"line\">hook.tapAsync(&#x27;tap1&#x27;, (callback) =&gt; &#123;</span><br><span class=\"line\">  setTimeout(() =&gt; &#123;</span><br><span class=\"line\">    callback(&#x27;tap1&#x27;)</span><br><span class=\"line\">  &#125;, 0)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">hook.tapPromise(&#x27;tap2&#x27;, () =&gt; &#123;</span><br><span class=\"line\">  return Promise.resolve(&#x27;tap2&#x27;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">// 执行钩子</span><br><span class=\"line\">hook.callAsync((res) =&gt; &#123;</span><br><span class=\"line\">  console.log(res)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"插件挂载\"><a href=\"#插件挂载\" class=\"headerlink\" title=\"插件挂载\"></a>插件挂载</h4><p>tapAsync和tapPromise方法会将插件插入tap数组中。</p>\n<h4 id=\"插件执行\"><a href=\"#插件执行\" class=\"headerlink\" title=\"插件执行\"></a>插件执行</h4><p>AsyncSeriesHook为异步串行执行插件队列：执行完每个插件后都会接着执行下一个插件。</p>\n<p>插件执行的代码是经过包裹封装的。以上代码封装后的结构如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function(_callback) &#123;</span><br><span class=\"line\">  &quot;use strict&quot;;</span><br><span class=\"line\">  var _context;</span><br><span class=\"line\">  var _x = this._x;</span><br><span class=\"line\">  function _next0() &#123;</span><br><span class=\"line\">    var _fn1 = _x[1];</span><br><span class=\"line\">    var _hasResult1 = false;</span><br><span class=\"line\">    var _promise1 = _fn1();</span><br><span class=\"line\">    if (!_promise1 || !_promise1.then)</span><br><span class=\"line\">      throw new Error(&#x27;Tap function (tapPromise) did not return promise (returned &#x27; + _promise1 + &#x27;)&#x27;);</span><br><span class=\"line\">    _promise1.then((function (_result1) &#123;</span><br><span class=\"line\">      _hasResult1 = true;</span><br><span class=\"line\">      _callback();</span><br><span class=\"line\">    &#125;), function (_err1) &#123;</span><br><span class=\"line\">      if (_hasResult1) throw _err1;</span><br><span class=\"line\">      _callback(_err1);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  var _fn0 = _x[0];</span><br><span class=\"line\">  _fn0((function (_err0) &#123;</span><br><span class=\"line\">    if (_err0) &#123;</span><br><span class=\"line\">      _callback(_err0);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      _next0();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上是callAsync最终执行的函数。</p>\n<ul>\n<li>_callback就是callAsync传入的回调</li>\n<li>this._x指的是tap数组</li>\n<li>_next0内部封装了插件tap2的执行语句</li>\n<li>当tap1插件，即_fn0方法的callback调用时无传参，则表示插件正常结束，可以执行_next0。否则不继续执行剩余的插件，直接结束队列并调用_callback</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li>tap方法类型决定了<strong>插件类型</strong></li>\n<li>钩子类型其实是<strong>插件的执行顺序</strong>和<strong>插件传参/终止条件</strong>的组合，和插件类型无关</li>\n<li>钩子执行方式中，同步钩子只能用同步方法调用。异步钩子只能用异步方法调用。</li>\n<li>插件类型取决于插件本身的需求，无需迁就钩子类型。只不过，异步插件就不要挂载到同步钩子类型上。</li>\n<li>promise和callAsync方法的不同体现在，插件队列结束时通过何种方式执行钩子回调。call方法无需回调。</li>\n</ol>\n"},{"title":"webpack 工作流程","date":"2021-07-11T16:00:00.000Z","_content":" \n\n之前一直对webpack的工作流程搞不清楚，compiler和compilation傻傻分不清。带着以下目的，粗略看了下源码，整理了它的工作流程。\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628305184802-webpack%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png)\n\n","source":"_posts/webpack/work-flow.md","raw":"---\ntitle: \"webpack 工作流程\"\ncategories: 工程化\ntags: [webpack]\ndate: 2021-7-12\n--- \n\n之前一直对webpack的工作流程搞不清楚，compiler和compilation傻傻分不清。带着以下目的，粗略看了下源码，整理了它的工作流程。\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628305184802-webpack%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png)\n\n","slug":"webpack/work-flow","published":1,"updated":"2021-08-07T03:08:43.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc79001vecq8h3xy8s7y","content":"<p>之前一直对webpack的工作流程搞不清楚，compiler和compilation傻傻分不清。带着以下目的，粗略看了下源码，整理了它的工作流程。</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628305184802-webpack%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>之前一直对webpack的工作流程搞不清楚，compiler和compilation傻傻分不清。带着以下目的，粗略看了下源码，整理了它的工作流程。</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628305184802-webpack%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png\"></p>\n"},{"title":"微信开发者工具的小tips","date":"2021-06-11T16:00:00.000Z","_content":" \n\n## 默认选项开关\nproject.config.json可以配置开发者工具的一些选项开关，不用每次不厌其烦的等模拟器渲染完再去一个个的关闭了。\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628309327902-image.png)\n[project.config.json](https://developers.weixin.qq.com/miniprogram/dev/devtools/projectconfig.html)\n\n其中，packOptions可以配置代码上传时的忽略目录。\n\n## open-data组件\n用户个人信息展示可以使用<open-data>组件，无需再去调用各种api了。\n\n指定对应的type即可显示对应的信息。\n支持的类型有：\n```\ngroupName\nuserNickName\nuserAvatarUrl\nuserGender\nuserCity\nuserProvince\nuserCountry\nuserLanguage\n```\n\n还可以在open-data上绑定class,style设置样式。\n","source":"_posts/weixin-mp/devtool-tips.md","raw":"---\ntitle: 微信开发者工具的小tips\ncategories: 小程序\ntags: [微信开发者工具, mp-weixin]\ndate: 2021-6-12\n--- \n\n## 默认选项开关\nproject.config.json可以配置开发者工具的一些选项开关，不用每次不厌其烦的等模拟器渲染完再去一个个的关闭了。\n\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628309327902-image.png)\n[project.config.json](https://developers.weixin.qq.com/miniprogram/dev/devtools/projectconfig.html)\n\n其中，packOptions可以配置代码上传时的忽略目录。\n\n## open-data组件\n用户个人信息展示可以使用<open-data>组件，无需再去调用各种api了。\n\n指定对应的type即可显示对应的信息。\n支持的类型有：\n```\ngroupName\nuserNickName\nuserAvatarUrl\nuserGender\nuserCity\nuserProvince\nuserCountry\nuserLanguage\n```\n\n还可以在open-data上绑定class,style设置样式。\n","slug":"weixin-mp/devtool-tips","published":1,"updated":"2021-08-07T04:09:34.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc7a001wecq8e4fqcn4x","content":"<h2 id=\"默认选项开关\"><a href=\"#默认选项开关\" class=\"headerlink\" title=\"默认选项开关\"></a>默认选项开关</h2><p>project.config.json可以配置开发者工具的一些选项开关，不用每次不厌其烦的等模拟器渲染完再去一个个的关闭了。</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628309327902-image.png\"><br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/devtools/projectconfig.html\">project.config.json</a></p>\n<p>其中，packOptions可以配置代码上传时的忽略目录。</p>\n<h2 id=\"open-data组件\"><a href=\"#open-data组件\" class=\"headerlink\" title=\"open-data组件\"></a>open-data组件</h2><p>用户个人信息展示可以使用<open-data>组件，无需再去调用各种api了。</p>\n<p>指定对应的type即可显示对应的信息。<br>支持的类型有：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupName</span><br><span class=\"line\">userNickName</span><br><span class=\"line\">userAvatarUrl</span><br><span class=\"line\">userGender</span><br><span class=\"line\">userCity</span><br><span class=\"line\">userProvince</span><br><span class=\"line\">userCountry</span><br><span class=\"line\">userLanguage</span><br></pre></td></tr></table></figure>\n\n<p>还可以在open-data上绑定class,style设置样式。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"默认选项开关\"><a href=\"#默认选项开关\" class=\"headerlink\" title=\"默认选项开关\"></a>默认选项开关</h2><p>project.config.json可以配置开发者工具的一些选项开关，不用每次不厌其烦的等模拟器渲染完再去一个个的关闭了。</p>\n<p><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628309327902-image.png\"><br><a href=\"https://developers.weixin.qq.com/miniprogram/dev/devtools/projectconfig.html\">project.config.json</a></p>\n<p>其中，packOptions可以配置代码上传时的忽略目录。</p>\n<h2 id=\"open-data组件\"><a href=\"#open-data组件\" class=\"headerlink\" title=\"open-data组件\"></a>open-data组件</h2><p>用户个人信息展示可以使用<open-data>组件，无需再去调用各种api了。</p>\n<p>指定对应的type即可显示对应的信息。<br>支持的类型有：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupName</span><br><span class=\"line\">userNickName</span><br><span class=\"line\">userAvatarUrl</span><br><span class=\"line\">userGender</span><br><span class=\"line\">userCity</span><br><span class=\"line\">userProvince</span><br><span class=\"line\">userCountry</span><br><span class=\"line\">userLanguage</span><br></pre></td></tr></table></figure>\n\n<p>还可以在open-data上绑定class,style设置样式。</p>\n"},{"title":"小程序图片长按识别码兼容性整理","date":"2021-06-29T16:00:00.000Z","_content":"\n\n码类型 | 公众号文章 | 小程序image标签 + show long press menu  | 小程序wx.previewImage  | 小程序webview内  | 小程序客服消息\n---|---\n视频号二维码 | Yes 8.0.2- NO（1）  8.0.2- NO Yes\n个人赞赏码  | Yes  | 8.0.2- NO |   |  8.0.2- NO |  Yes\n微信名片/群二维码 |  Yes  | 8.0.2- NO  | ios 8.0.6+android 8.0.3+（3） |  ios 8.0.6+android 8.0.3+（3）  | Yes\n个人收款二维码 |  Yes |  8.0.2- NO  |   | 8.0.2- NO |  Yes\n公众号（订阅号） | 二维码 |  Yes |  8.0.2- NO |   公众号文章：Yes | 其它：NO |  Yes\n小程序码  | Yes  | Yes |  Yes |  Yes |  Yes\n小程序二维码 |  Yes |  8.0.2- NO  | 8.0.2- NO  | 8.0.6- NO  | Yes\n小商店码  | Yes  | Yes  |  Yes  | Yes\n企业微信二维码  | Yes |  android  | 8.0.3- NO（亲测） | ios 8.0.7 |  Yes（亲测） |   ios 8.0.6+（亲测） | android 8.0.3+（亲测）  | Yes\n普通网址二维码 |  Yes |  8.0.2- NO |   |  8.0.2- NO |  Yes\n\n小程序内图片长按功能（非previewImage）：\n版本 |  小程序内image组件show-menu-by-longpress属性  | 小程序webview内img标签长按出现菜单\n7.0.x+  | 安卓/ios |  支持小程序码识别 \n8.0.3 |  安卓：支持识别微信个人码、企业微信个人码、普通群码与互通群码（企业微信活码不支持） | （3） \n8.0.6  | 苹果：支持识别微信个人码、企业微信个人码、普通群码与互通群码（企业微信活码不支持），但点击弹窗菜单没有反应（bug） \n8.0.7  | 苹果：点击长按弹窗菜单没有反应的bug修复 \n\n\n参考链接：\n（1） https://developers.weixin.qq.com/community/develop/doc/0008ea7edb8f4845c39be413456c00?highLine=%25E8%25B5%259E%25E8%25B5%258F%25E7%25A0%2581%25E8%25AF%2586%25E5%2588%25AB\n（2）https://developers.weixin.qq.com/community/develop/article/doc/00008e4f3bc538998bfb344ec56413\n（3）https://developers.weixin.qq.com/community/develop/article/doc/000ae09dcfc8887e4b4c287e75b813\n（4）https://mp.weixin.qq.com/s/QyJ4XKgaYH-517PEElhwrg\n","source":"_posts/weixin-mp/scan-code.md","raw":"---\ntitle: 小程序图片长按识别码兼容性整理\ncategories: 小程序\ntags: [微信, 小程序]\ndate: 2021-6-30\n---\n\n\n码类型 | 公众号文章 | 小程序image标签 + show long press menu  | 小程序wx.previewImage  | 小程序webview内  | 小程序客服消息\n---|---\n视频号二维码 | Yes 8.0.2- NO（1）  8.0.2- NO Yes\n个人赞赏码  | Yes  | 8.0.2- NO |   |  8.0.2- NO |  Yes\n微信名片/群二维码 |  Yes  | 8.0.2- NO  | ios 8.0.6+android 8.0.3+（3） |  ios 8.0.6+android 8.0.3+（3）  | Yes\n个人收款二维码 |  Yes |  8.0.2- NO  |   | 8.0.2- NO |  Yes\n公众号（订阅号） | 二维码 |  Yes |  8.0.2- NO |   公众号文章：Yes | 其它：NO |  Yes\n小程序码  | Yes  | Yes |  Yes |  Yes |  Yes\n小程序二维码 |  Yes |  8.0.2- NO  | 8.0.2- NO  | 8.0.6- NO  | Yes\n小商店码  | Yes  | Yes  |  Yes  | Yes\n企业微信二维码  | Yes |  android  | 8.0.3- NO（亲测） | ios 8.0.7 |  Yes（亲测） |   ios 8.0.6+（亲测） | android 8.0.3+（亲测）  | Yes\n普通网址二维码 |  Yes |  8.0.2- NO |   |  8.0.2- NO |  Yes\n\n小程序内图片长按功能（非previewImage）：\n版本 |  小程序内image组件show-menu-by-longpress属性  | 小程序webview内img标签长按出现菜单\n7.0.x+  | 安卓/ios |  支持小程序码识别 \n8.0.3 |  安卓：支持识别微信个人码、企业微信个人码、普通群码与互通群码（企业微信活码不支持） | （3） \n8.0.6  | 苹果：支持识别微信个人码、企业微信个人码、普通群码与互通群码（企业微信活码不支持），但点击弹窗菜单没有反应（bug） \n8.0.7  | 苹果：点击长按弹窗菜单没有反应的bug修复 \n\n\n参考链接：\n（1） https://developers.weixin.qq.com/community/develop/doc/0008ea7edb8f4845c39be413456c00?highLine=%25E8%25B5%259E%25E8%25B5%258F%25E7%25A0%2581%25E8%25AF%2586%25E5%2588%25AB\n（2）https://developers.weixin.qq.com/community/develop/article/doc/00008e4f3bc538998bfb344ec56413\n（3）https://developers.weixin.qq.com/community/develop/article/doc/000ae09dcfc8887e4b4c287e75b813\n（4）https://mp.weixin.qq.com/s/QyJ4XKgaYH-517PEElhwrg\n","slug":"weixin-mp/scan-code","published":1,"updated":"2021-08-07T03:29:09.235Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc7a001xecq86emk5jh9","content":"<p>码类型 | 公众号文章 | 小程序image标签 + show long press menu  | 小程序wx.previewImage  | 小程序webview内  | 小程序客服消息<br>—|—<br>视频号二维码 | Yes 8.0.2- NO（1）  8.0.2- NO Yes<br>个人赞赏码  | Yes  | 8.0.2- NO |   |  8.0.2- NO |  Yes<br>微信名片/群二维码 |  Yes  | 8.0.2- NO  | ios 8.0.6+android 8.0.3+（3） |  ios 8.0.6+android 8.0.3+（3）  | Yes<br>个人收款二维码 |  Yes |  8.0.2- NO  |   | 8.0.2- NO |  Yes<br>公众号（订阅号） | 二维码 |  Yes |  8.0.2- NO |   公众号文章：Yes | 其它：NO |  Yes<br>小程序码  | Yes  | Yes |  Yes |  Yes |  Yes<br>小程序二维码 |  Yes |  8.0.2- NO  | 8.0.2- NO  | 8.0.6- NO  | Yes<br>小商店码  | Yes  | Yes  |  Yes  | Yes<br>企业微信二维码  | Yes |  android  | 8.0.3- NO（亲测） | ios 8.0.7 |  Yes（亲测） |   ios 8.0.6+（亲测） | android 8.0.3+（亲测）  | Yes<br>普通网址二维码 |  Yes |  8.0.2- NO |   |  8.0.2- NO |  Yes</p>\n<p>小程序内图片长按功能（非previewImage）：<br>版本 |  小程序内image组件show-menu-by-longpress属性  | 小程序webview内img标签长按出现菜单<br>7.0.x+  | 安卓/ios |  支持小程序码识别<br>8.0.3 |  安卓：支持识别微信个人码、企业微信个人码、普通群码与互通群码（企业微信活码不支持） | （3）<br>8.0.6  | 苹果：支持识别微信个人码、企业微信个人码、普通群码与互通群码（企业微信活码不支持），但点击弹窗菜单没有反应（bug）<br>8.0.7  | 苹果：点击长按弹窗菜单没有反应的bug修复 </p>\n<p>参考链接：<br>（1） <a href=\"https://developers.weixin.qq.com/community/develop/doc/0008ea7edb8f4845c39be413456c00?highLine=%25E8%25B5%259E%25E8%25B5%258F%25E7%25A0%2581%25E8%25AF%2586%25E5%2588%25AB\">https://developers.weixin.qq.com/community/develop/doc/0008ea7edb8f4845c39be413456c00?highLine=%25E8%25B5%259E%25E8%25B5%258F%25E7%25A0%2581%25E8%25AF%2586%25E5%2588%25AB</a><br>（2）<a href=\"https://developers.weixin.qq.com/community/develop/article/doc/00008e4f3bc538998bfb344ec56413\">https://developers.weixin.qq.com/community/develop/article/doc/00008e4f3bc538998bfb344ec56413</a><br>（3）<a href=\"https://developers.weixin.qq.com/community/develop/article/doc/000ae09dcfc8887e4b4c287e75b813\">https://developers.weixin.qq.com/community/develop/article/doc/000ae09dcfc8887e4b4c287e75b813</a><br>（4）<a href=\"https://mp.weixin.qq.com/s/QyJ4XKgaYH-517PEElhwrg\">https://mp.weixin.qq.com/s/QyJ4XKgaYH-517PEElhwrg</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>码类型 | 公众号文章 | 小程序image标签 + show long press menu  | 小程序wx.previewImage  | 小程序webview内  | 小程序客服消息<br>—|—<br>视频号二维码 | Yes 8.0.2- NO（1）  8.0.2- NO Yes<br>个人赞赏码  | Yes  | 8.0.2- NO |   |  8.0.2- NO |  Yes<br>微信名片/群二维码 |  Yes  | 8.0.2- NO  | ios 8.0.6+android 8.0.3+（3） |  ios 8.0.6+android 8.0.3+（3）  | Yes<br>个人收款二维码 |  Yes |  8.0.2- NO  |   | 8.0.2- NO |  Yes<br>公众号（订阅号） | 二维码 |  Yes |  8.0.2- NO |   公众号文章：Yes | 其它：NO |  Yes<br>小程序码  | Yes  | Yes |  Yes |  Yes |  Yes<br>小程序二维码 |  Yes |  8.0.2- NO  | 8.0.2- NO  | 8.0.6- NO  | Yes<br>小商店码  | Yes  | Yes  |  Yes  | Yes<br>企业微信二维码  | Yes |  android  | 8.0.3- NO（亲测） | ios 8.0.7 |  Yes（亲测） |   ios 8.0.6+（亲测） | android 8.0.3+（亲测）  | Yes<br>普通网址二维码 |  Yes |  8.0.2- NO |   |  8.0.2- NO |  Yes</p>\n<p>小程序内图片长按功能（非previewImage）：<br>版本 |  小程序内image组件show-menu-by-longpress属性  | 小程序webview内img标签长按出现菜单<br>7.0.x+  | 安卓/ios |  支持小程序码识别<br>8.0.3 |  安卓：支持识别微信个人码、企业微信个人码、普通群码与互通群码（企业微信活码不支持） | （3）<br>8.0.6  | 苹果：支持识别微信个人码、企业微信个人码、普通群码与互通群码（企业微信活码不支持），但点击弹窗菜单没有反应（bug）<br>8.0.7  | 苹果：点击长按弹窗菜单没有反应的bug修复 </p>\n<p>参考链接：<br>（1） <a href=\"https://developers.weixin.qq.com/community/develop/doc/0008ea7edb8f4845c39be413456c00?highLine=%25E8%25B5%259E%25E8%25B5%258F%25E7%25A0%2581%25E8%25AF%2586%25E5%2588%25AB\">https://developers.weixin.qq.com/community/develop/doc/0008ea7edb8f4845c39be413456c00?highLine=%25E8%25B5%259E%25E8%25B5%258F%25E7%25A0%2581%25E8%25AF%2586%25E5%2588%25AB</a><br>（2）<a href=\"https://developers.weixin.qq.com/community/develop/article/doc/00008e4f3bc538998bfb344ec56413\">https://developers.weixin.qq.com/community/develop/article/doc/00008e4f3bc538998bfb344ec56413</a><br>（3）<a href=\"https://developers.weixin.qq.com/community/develop/article/doc/000ae09dcfc8887e4b4c287e75b813\">https://developers.weixin.qq.com/community/develop/article/doc/000ae09dcfc8887e4b4c287e75b813</a><br>（4）<a href=\"https://mp.weixin.qq.com/s/QyJ4XKgaYH-517PEElhwrg\">https://mp.weixin.qq.com/s/QyJ4XKgaYH-517PEElhwrg</a></p>\n"},{"title":"微信小程序中scroll-view问题总结","date":"2021-06-16T16:00:00.000Z","_content":"\n\n## ios设备中fix定位元素\n\n### 在scroll-view中会被遮挡\nscroll-view内部如果有fix定位元素，由于ios设备有弹动功能，一旦scroll-view被拉到不包含fix定位的元素之外，fix定位元素会被遮挡\n\n### scroll-view中无法置于顶层\nscroll-view内部的fix定位元素，无论z-index设置为多少，都无法置于scroll-view外部fix定位元素的上层。\n\n### 解决办法\n这个问题在h5和小程序中都存在。原因是：\nscroll-view元素在ios下的样式包含以下属性：\n```\n -webkit-overflow-scrolling: touch\n```\n\n该属性的作用是让touch滚定行为更加流畅：\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-overflow-scrolling\n\n但是，该属性值为touch时会影响容器内的fixed元素层级，改为auto就不会影响了，但是touch属性值目前是有必要存在的。\nhttps://developers.weixin.qq.com/community/develop/doc/0000667484c96844b83ac9c7651809?_at=1617789574414\nhttps://developers.weixin.qq.com/community/develop/doc/0004aeafeccb789ac219e474756000\n解决方式是将fixed定位元素移到scroll-view外面。\n\n### safari 13.0以上的版本解决办法\n\nsafari 13.0以上的版本就不需要该属性了\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628308610008-image.png)\n(https://developer.apple.com/documentation/safari-release-notes/safari-13-release-notes)\n\n了解了原因之后，我们分析下ios系统版本占比：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628308669260-image.png)\n\n(数据来源：腾讯大数据->腾讯移动分析 MTA)\n\n可见97%的用户版本号>13，可以放心的移除了。拿个ios 13真机试下，果然没问题。\n\n\n## 内部垂直方向margin在安卓设备出现双滚动条\n```\n<template>\n<scroll-view\n    class=\"product-wrap\"\n    scroll-y\n    enable-back-to-top\n        >\n        <view class=\"product-item\"></view>\n </scroll-view>\n </template>\n \n <style>\n .product-wrap {\n     height: 100%;\n }\n .product-item {\n     margin-top: 20rpx;\n }\n </style>\n```\n\n\n以上代码会导致**安卓设备**页面滚动出现双滚动条。需要为内部元素加一层包裹，称为BFC，防止margin塌陷:\n```\n<template>\n<scroll-view\n    class=\"product-wrap\"\n    scroll-y\n    enable-back-to-top\n        >\n        <view class=\"product-container\"><view class=\"product-item\"></view></view>\n </scroll-view>\n </template>\n \n <style>\n .product-wrap {\n     height: 100%;\n }\n .product-container {\n     overflow: hidden;\n }\n .product-item {\n     margin-top: 20rpx;\n }\n </style>\n```","source":"_posts/weixin-mp/scroll-view.md","raw":"---\ntitle: 微信小程序中scroll-view问题总结\ncategories: 小程序\ntags: [小程序, css]\ndate: 2021-6-17\n---\n\n\n## ios设备中fix定位元素\n\n### 在scroll-view中会被遮挡\nscroll-view内部如果有fix定位元素，由于ios设备有弹动功能，一旦scroll-view被拉到不包含fix定位的元素之外，fix定位元素会被遮挡\n\n### scroll-view中无法置于顶层\nscroll-view内部的fix定位元素，无论z-index设置为多少，都无法置于scroll-view外部fix定位元素的上层。\n\n### 解决办法\n这个问题在h5和小程序中都存在。原因是：\nscroll-view元素在ios下的样式包含以下属性：\n```\n -webkit-overflow-scrolling: touch\n```\n\n该属性的作用是让touch滚定行为更加流畅：\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-overflow-scrolling\n\n但是，该属性值为touch时会影响容器内的fixed元素层级，改为auto就不会影响了，但是touch属性值目前是有必要存在的。\nhttps://developers.weixin.qq.com/community/develop/doc/0000667484c96844b83ac9c7651809?_at=1617789574414\nhttps://developers.weixin.qq.com/community/develop/doc/0004aeafeccb789ac219e474756000\n解决方式是将fixed定位元素移到scroll-view外面。\n\n### safari 13.0以上的版本解决办法\n\nsafari 13.0以上的版本就不需要该属性了\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628308610008-image.png)\n(https://developer.apple.com/documentation/safari-release-notes/safari-13-release-notes)\n\n了解了原因之后，我们分析下ios系统版本占比：\n![](https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628308669260-image.png)\n\n(数据来源：腾讯大数据->腾讯移动分析 MTA)\n\n可见97%的用户版本号>13，可以放心的移除了。拿个ios 13真机试下，果然没问题。\n\n\n## 内部垂直方向margin在安卓设备出现双滚动条\n```\n<template>\n<scroll-view\n    class=\"product-wrap\"\n    scroll-y\n    enable-back-to-top\n        >\n        <view class=\"product-item\"></view>\n </scroll-view>\n </template>\n \n <style>\n .product-wrap {\n     height: 100%;\n }\n .product-item {\n     margin-top: 20rpx;\n }\n </style>\n```\n\n\n以上代码会导致**安卓设备**页面滚动出现双滚动条。需要为内部元素加一层包裹，称为BFC，防止margin塌陷:\n```\n<template>\n<scroll-view\n    class=\"product-wrap\"\n    scroll-y\n    enable-back-to-top\n        >\n        <view class=\"product-container\"><view class=\"product-item\"></view></view>\n </scroll-view>\n </template>\n \n <style>\n .product-wrap {\n     height: 100%;\n }\n .product-container {\n     overflow: hidden;\n }\n .product-item {\n     margin-top: 20rpx;\n }\n </style>\n```","slug":"weixin-mp/scroll-view","published":1,"updated":"2021-08-07T03:58:43.449Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc7a001yecq85bg7h9f0","content":"<h2 id=\"ios设备中fix定位元素\"><a href=\"#ios设备中fix定位元素\" class=\"headerlink\" title=\"ios设备中fix定位元素\"></a>ios设备中fix定位元素</h2><h3 id=\"在scroll-view中会被遮挡\"><a href=\"#在scroll-view中会被遮挡\" class=\"headerlink\" title=\"在scroll-view中会被遮挡\"></a>在scroll-view中会被遮挡</h3><p>scroll-view内部如果有fix定位元素，由于ios设备有弹动功能，一旦scroll-view被拉到不包含fix定位的元素之外，fix定位元素会被遮挡</p>\n<h3 id=\"scroll-view中无法置于顶层\"><a href=\"#scroll-view中无法置于顶层\" class=\"headerlink\" title=\"scroll-view中无法置于顶层\"></a>scroll-view中无法置于顶层</h3><p>scroll-view内部的fix定位元素，无论z-index设置为多少，都无法置于scroll-view外部fix定位元素的上层。</p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>这个问题在h5和小程序中都存在。原因是：<br>scroll-view元素在ios下的样式包含以下属性：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-webkit-overflow-scrolling: touch</span><br></pre></td></tr></table></figure>\n\n<p>该属性的作用是让touch滚定行为更加流畅：<br><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-overflow-scrolling\">https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-overflow-scrolling</a></p>\n<p>但是，该属性值为touch时会影响容器内的fixed元素层级，改为auto就不会影响了，但是touch属性值目前是有必要存在的。<br><a href=\"https://developers.weixin.qq.com/community/develop/doc/0000667484c96844b83ac9c7651809?_at=1617789574414\">https://developers.weixin.qq.com/community/develop/doc/0000667484c96844b83ac9c7651809?_at=1617789574414</a><br><a href=\"https://developers.weixin.qq.com/community/develop/doc/0004aeafeccb789ac219e474756000\">https://developers.weixin.qq.com/community/develop/doc/0004aeafeccb789ac219e474756000</a><br>解决方式是将fixed定位元素移到scroll-view外面。</p>\n<h3 id=\"safari-13-0以上的版本解决办法\"><a href=\"#safari-13-0以上的版本解决办法\" class=\"headerlink\" title=\"safari 13.0以上的版本解决办法\"></a>safari 13.0以上的版本解决办法</h3><p>safari 13.0以上的版本就不需要该属性了<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628308610008-image.png\"><br>(<a href=\"https://developer.apple.com/documentation/safari-release-notes/safari-13-release-notes\">https://developer.apple.com/documentation/safari-release-notes/safari-13-release-notes</a>)</p>\n<p>了解了原因之后，我们分析下ios系统版本占比：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628308669260-image.png\"></p>\n<p>(数据来源：腾讯大数据-&gt;腾讯移动分析 MTA)</p>\n<p>可见97%的用户版本号&gt;13，可以放心的移除了。拿个ios 13真机试下，果然没问题。</p>\n<h2 id=\"内部垂直方向margin在安卓设备出现双滚动条\"><a href=\"#内部垂直方向margin在安卓设备出现双滚动条\" class=\"headerlink\" title=\"内部垂直方向margin在安卓设备出现双滚动条\"></a>内部垂直方向margin在安卓设备出现双滚动条</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">&lt;scroll-view</span><br><span class=\"line\">    class=&quot;product-wrap&quot;</span><br><span class=\"line\">    scroll-y</span><br><span class=\"line\">    enable-back-to-top</span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">        &lt;view class=&quot;product-item&quot;&gt;&lt;/view&gt;</span><br><span class=\"line\"> &lt;/scroll-view&gt;</span><br><span class=\"line\"> &lt;/template&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\"> &lt;style&gt;</span><br><span class=\"line\"> .product-wrap &#123;</span><br><span class=\"line\">     height: 100%;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> .product-item &#123;</span><br><span class=\"line\">     margin-top: 20rpx;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> &lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n\n<p>以上代码会导致<strong>安卓设备</strong>页面滚动出现双滚动条。需要为内部元素加一层包裹，称为BFC，防止margin塌陷:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">&lt;scroll-view</span><br><span class=\"line\">    class=&quot;product-wrap&quot;</span><br><span class=\"line\">    scroll-y</span><br><span class=\"line\">    enable-back-to-top</span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">        &lt;view class=&quot;product-container&quot;&gt;&lt;view class=&quot;product-item&quot;&gt;&lt;/view&gt;&lt;/view&gt;</span><br><span class=\"line\"> &lt;/scroll-view&gt;</span><br><span class=\"line\"> &lt;/template&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\"> &lt;style&gt;</span><br><span class=\"line\"> .product-wrap &#123;</span><br><span class=\"line\">     height: 100%;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> .product-container &#123;</span><br><span class=\"line\">     overflow: hidden;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> .product-item &#123;</span><br><span class=\"line\">     margin-top: 20rpx;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> &lt;/style&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"ios设备中fix定位元素\"><a href=\"#ios设备中fix定位元素\" class=\"headerlink\" title=\"ios设备中fix定位元素\"></a>ios设备中fix定位元素</h2><h3 id=\"在scroll-view中会被遮挡\"><a href=\"#在scroll-view中会被遮挡\" class=\"headerlink\" title=\"在scroll-view中会被遮挡\"></a>在scroll-view中会被遮挡</h3><p>scroll-view内部如果有fix定位元素，由于ios设备有弹动功能，一旦scroll-view被拉到不包含fix定位的元素之外，fix定位元素会被遮挡</p>\n<h3 id=\"scroll-view中无法置于顶层\"><a href=\"#scroll-view中无法置于顶层\" class=\"headerlink\" title=\"scroll-view中无法置于顶层\"></a>scroll-view中无法置于顶层</h3><p>scroll-view内部的fix定位元素，无论z-index设置为多少，都无法置于scroll-view外部fix定位元素的上层。</p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>这个问题在h5和小程序中都存在。原因是：<br>scroll-view元素在ios下的样式包含以下属性：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-webkit-overflow-scrolling: touch</span><br></pre></td></tr></table></figure>\n\n<p>该属性的作用是让touch滚定行为更加流畅：<br><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-overflow-scrolling\">https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-overflow-scrolling</a></p>\n<p>但是，该属性值为touch时会影响容器内的fixed元素层级，改为auto就不会影响了，但是touch属性值目前是有必要存在的。<br><a href=\"https://developers.weixin.qq.com/community/develop/doc/0000667484c96844b83ac9c7651809?_at=1617789574414\">https://developers.weixin.qq.com/community/develop/doc/0000667484c96844b83ac9c7651809?_at=1617789574414</a><br><a href=\"https://developers.weixin.qq.com/community/develop/doc/0004aeafeccb789ac219e474756000\">https://developers.weixin.qq.com/community/develop/doc/0004aeafeccb789ac219e474756000</a><br>解决方式是将fixed定位元素移到scroll-view外面。</p>\n<h3 id=\"safari-13-0以上的版本解决办法\"><a href=\"#safari-13-0以上的版本解决办法\" class=\"headerlink\" title=\"safari 13.0以上的版本解决办法\"></a>safari 13.0以上的版本解决办法</h3><p>safari 13.0以上的版本就不需要该属性了<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628308610008-image.png\"><br>(<a href=\"https://developer.apple.com/documentation/safari-release-notes/safari-13-release-notes\">https://developer.apple.com/documentation/safari-release-notes/safari-13-release-notes</a>)</p>\n<p>了解了原因之后，我们分析下ios系统版本占比：<br><img src=\"https://gitee.com/ndrkjvmkl/picture/raw/master/2021-8-7/1628308669260-image.png\"></p>\n<p>(数据来源：腾讯大数据-&gt;腾讯移动分析 MTA)</p>\n<p>可见97%的用户版本号&gt;13，可以放心的移除了。拿个ios 13真机试下，果然没问题。</p>\n<h2 id=\"内部垂直方向margin在安卓设备出现双滚动条\"><a href=\"#内部垂直方向margin在安卓设备出现双滚动条\" class=\"headerlink\" title=\"内部垂直方向margin在安卓设备出现双滚动条\"></a>内部垂直方向margin在安卓设备出现双滚动条</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">&lt;scroll-view</span><br><span class=\"line\">    class=&quot;product-wrap&quot;</span><br><span class=\"line\">    scroll-y</span><br><span class=\"line\">    enable-back-to-top</span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">        &lt;view class=&quot;product-item&quot;&gt;&lt;/view&gt;</span><br><span class=\"line\"> &lt;/scroll-view&gt;</span><br><span class=\"line\"> &lt;/template&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\"> &lt;style&gt;</span><br><span class=\"line\"> .product-wrap &#123;</span><br><span class=\"line\">     height: 100%;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> .product-item &#123;</span><br><span class=\"line\">     margin-top: 20rpx;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> &lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n\n<p>以上代码会导致<strong>安卓设备</strong>页面滚动出现双滚动条。需要为内部元素加一层包裹，称为BFC，防止margin塌陷:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">&lt;scroll-view</span><br><span class=\"line\">    class=&quot;product-wrap&quot;</span><br><span class=\"line\">    scroll-y</span><br><span class=\"line\">    enable-back-to-top</span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">        &lt;view class=&quot;product-container&quot;&gt;&lt;view class=&quot;product-item&quot;&gt;&lt;/view&gt;&lt;/view&gt;</span><br><span class=\"line\"> &lt;/scroll-view&gt;</span><br><span class=\"line\"> &lt;/template&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\"> &lt;style&gt;</span><br><span class=\"line\"> .product-wrap &#123;</span><br><span class=\"line\">     height: 100%;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> .product-container &#123;</span><br><span class=\"line\">     overflow: hidden;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> .product-item &#123;</span><br><span class=\"line\">     margin-top: 20rpx;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> &lt;/style&gt;</span><br></pre></td></tr></table></figure>"},{"title":"微信小程序分享能力整理","date":"2021-07-18T16:00:00.000Z","_content":"  \n\n\n## 小程序分享到朋友圈的方式整理\n\n分享方式 | 分享文案格式 |朋友圈点击交互方式 |支持度 | 额度限制\n----|----|----|----|----\nAPP内分享到微信朋友圈| 和公众号H5一致| 1. 点击朋友圈图文链接先打开一个H5页面<br>2. 用户手动点击页面内的按钮打开小程序 | 无限制，都支持| 1. 短期链接+长期链接每日上限50万<br>2. 长期链接总数不超过10万<br>3. 时长超过30天或者永久类型都称为长期链接\n小程序直接分享到微信朋友圈（从小程序内自动打开朋友圈）| 和公众号H5一致 | 1. 点击朋友圈图文链接先打开对应的详情页面（H5页面，代码需要做适配）<br>2. 点击页面底部的“前往小程序”按钮打开小程序  | 目前仅安卓端支持 | 无额度限制\n小程序生成海报分享到微信朋友圈（和app内生成海报交互一致，用户手动保存海报，手动打开朋友圈分享）  | 海报  | 长按海报图片识别  | 无限制，都支持  | 无额度限制\n\n## 参考资料：\n- https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/share-timeline.html#%E8%AE%BE%E7%BD%AE%E5%88%86%E4%BA%AB%E7%8A%B6%E6%80%81\n- https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/url-scheme.html\n- https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/short-link/shortlink.generate.html#HTTPS-%E8%B0%83%E7%94%A8\n","source":"_posts/weixin-mp/share.md","raw":"---\ntitle: 微信小程序分享能力整理\ncategories: 小程序\ntags: [mp-weixin]\ndate: 2021-7-19\n---  \n\n\n## 小程序分享到朋友圈的方式整理\n\n分享方式 | 分享文案格式 |朋友圈点击交互方式 |支持度 | 额度限制\n----|----|----|----|----\nAPP内分享到微信朋友圈| 和公众号H5一致| 1. 点击朋友圈图文链接先打开一个H5页面<br>2. 用户手动点击页面内的按钮打开小程序 | 无限制，都支持| 1. 短期链接+长期链接每日上限50万<br>2. 长期链接总数不超过10万<br>3. 时长超过30天或者永久类型都称为长期链接\n小程序直接分享到微信朋友圈（从小程序内自动打开朋友圈）| 和公众号H5一致 | 1. 点击朋友圈图文链接先打开对应的详情页面（H5页面，代码需要做适配）<br>2. 点击页面底部的“前往小程序”按钮打开小程序  | 目前仅安卓端支持 | 无额度限制\n小程序生成海报分享到微信朋友圈（和app内生成海报交互一致，用户手动保存海报，手动打开朋友圈分享）  | 海报  | 长按海报图片识别  | 无限制，都支持  | 无额度限制\n\n## 参考资料：\n- https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/share-timeline.html#%E8%AE%BE%E7%BD%AE%E5%88%86%E4%BA%AB%E7%8A%B6%E6%80%81\n- https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/url-scheme.html\n- https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/short-link/shortlink.generate.html#HTTPS-%E8%B0%83%E7%94%A8\n","slug":"weixin-mp/share","published":1,"updated":"2021-08-07T04:29:52.414Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc7b001zecq84uf9blfr","content":"<h2 id=\"小程序分享到朋友圈的方式整理\"><a href=\"#小程序分享到朋友圈的方式整理\" class=\"headerlink\" title=\"小程序分享到朋友圈的方式整理\"></a>小程序分享到朋友圈的方式整理</h2><table>\n<thead>\n<tr>\n<th>分享方式</th>\n<th>分享文案格式</th>\n<th>朋友圈点击交互方式</th>\n<th>支持度</th>\n<th>额度限制</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>APP内分享到微信朋友圈</td>\n<td>和公众号H5一致</td>\n<td>1. 点击朋友圈图文链接先打开一个H5页面<br>2. 用户手动点击页面内的按钮打开小程序</td>\n<td>无限制，都支持</td>\n<td>1. 短期链接+长期链接每日上限50万<br>2. 长期链接总数不超过10万<br>3. 时长超过30天或者永久类型都称为长期链接</td>\n</tr>\n<tr>\n<td>小程序直接分享到微信朋友圈（从小程序内自动打开朋友圈）</td>\n<td>和公众号H5一致</td>\n<td>1. 点击朋友圈图文链接先打开对应的详情页面（H5页面，代码需要做适配）<br>2. 点击页面底部的“前往小程序”按钮打开小程序</td>\n<td>目前仅安卓端支持</td>\n<td>无额度限制</td>\n</tr>\n<tr>\n<td>小程序生成海报分享到微信朋友圈（和app内生成海报交互一致，用户手动保存海报，手动打开朋友圈分享）</td>\n<td>海报</td>\n<td>长按海报图片识别</td>\n<td>无限制，都支持</td>\n<td>无额度限制</td>\n</tr>\n</tbody></table>\n<h2 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h2><ul>\n<li><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/share-timeline.html#%E8%AE%BE%E7%BD%AE%E5%88%86%E4%BA%AB%E7%8A%B6%E6%80%81\">https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/share-timeline.html#%E8%AE%BE%E7%BD%AE%E5%88%86%E4%BA%AB%E7%8A%B6%E6%80%81</a></li>\n<li><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/url-scheme.html\">https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/url-scheme.html</a></li>\n<li><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/short-link/shortlink.generate.html#HTTPS-%E8%B0%83%E7%94%A8\">https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/short-link/shortlink.generate.html#HTTPS-%E8%B0%83%E7%94%A8</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"小程序分享到朋友圈的方式整理\"><a href=\"#小程序分享到朋友圈的方式整理\" class=\"headerlink\" title=\"小程序分享到朋友圈的方式整理\"></a>小程序分享到朋友圈的方式整理</h2><table>\n<thead>\n<tr>\n<th>分享方式</th>\n<th>分享文案格式</th>\n<th>朋友圈点击交互方式</th>\n<th>支持度</th>\n<th>额度限制</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>APP内分享到微信朋友圈</td>\n<td>和公众号H5一致</td>\n<td>1. 点击朋友圈图文链接先打开一个H5页面<br>2. 用户手动点击页面内的按钮打开小程序</td>\n<td>无限制，都支持</td>\n<td>1. 短期链接+长期链接每日上限50万<br>2. 长期链接总数不超过10万<br>3. 时长超过30天或者永久类型都称为长期链接</td>\n</tr>\n<tr>\n<td>小程序直接分享到微信朋友圈（从小程序内自动打开朋友圈）</td>\n<td>和公众号H5一致</td>\n<td>1. 点击朋友圈图文链接先打开对应的详情页面（H5页面，代码需要做适配）<br>2. 点击页面底部的“前往小程序”按钮打开小程序</td>\n<td>目前仅安卓端支持</td>\n<td>无额度限制</td>\n</tr>\n<tr>\n<td>小程序生成海报分享到微信朋友圈（和app内生成海报交互一致，用户手动保存海报，手动打开朋友圈分享）</td>\n<td>海报</td>\n<td>长按海报图片识别</td>\n<td>无限制，都支持</td>\n<td>无额度限制</td>\n</tr>\n</tbody></table>\n<h2 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h2><ul>\n<li><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/share-timeline.html#%E8%AE%BE%E7%BD%AE%E5%88%86%E4%BA%AB%E7%8A%B6%E6%80%81\">https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/share-timeline.html#%E8%AE%BE%E7%BD%AE%E5%88%86%E4%BA%AB%E7%8A%B6%E6%80%81</a></li>\n<li><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/url-scheme.html\">https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/url-scheme.html</a></li>\n<li><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/short-link/shortlink.generate.html#HTTPS-%E8%B0%83%E7%94%A8\">https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/short-link/shortlink.generate.html#HTTPS-%E8%B0%83%E7%94%A8</a></li>\n</ul>\n"},{"title":"小程序web-view内嵌h5的能力整理","date":"2021-06-06T16:00:00.000Z","_content":"  \n\n## 个性化布局能力\nweb-view自动铺满整屏，无法自定义web-view窗口大小。且小程序页面没有任何组件能够高于webview的层级。\n\n## 通信能力\n小程序向webview通信：url传参\n\nwebview通信向小程序通信：jssdk.postmessage。非实时触发，触发条件：小程序后退、组件销毁（移除webview组件）、分享\n\n关于小程序后退、组件销毁、分享的时机，需要实际测试方知晓具体的限制。\n\n实时通信：暂时未提供\n\n## 支付能力\n不支持H5内支付功能\n\n\n## 参考资料\n- [小程序webview内嵌H5支付页面，H5能正常支付吗](https://developers.weixin.qq.com/community/develop/doc/000ca683120980b88c98c12395b000)\n\n- [webview内的jssdk支持的api列表说明](https://developers.weixin.qq.com/miniprogram/dev/component/web-view.html)\n","source":"_posts/weixin-mp/webview.md","raw":"---\ntitle: 小程序web-view内嵌h5的能力整理\ncategories: 小程序\ntags: [mp-weixin]\ndate: 2021-6-7\n---  \n\n## 个性化布局能力\nweb-view自动铺满整屏，无法自定义web-view窗口大小。且小程序页面没有任何组件能够高于webview的层级。\n\n## 通信能力\n小程序向webview通信：url传参\n\nwebview通信向小程序通信：jssdk.postmessage。非实时触发，触发条件：小程序后退、组件销毁（移除webview组件）、分享\n\n关于小程序后退、组件销毁、分享的时机，需要实际测试方知晓具体的限制。\n\n实时通信：暂时未提供\n\n## 支付能力\n不支持H5内支付功能\n\n\n## 参考资料\n- [小程序webview内嵌H5支付页面，H5能正常支付吗](https://developers.weixin.qq.com/community/develop/doc/000ca683120980b88c98c12395b000)\n\n- [webview内的jssdk支持的api列表说明](https://developers.weixin.qq.com/miniprogram/dev/component/web-view.html)\n","slug":"weixin-mp/webview","published":1,"updated":"2021-08-07T04:07:21.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks1amc7b0020ecq8gdqvc19j","content":"<h2 id=\"个性化布局能力\"><a href=\"#个性化布局能力\" class=\"headerlink\" title=\"个性化布局能力\"></a>个性化布局能力</h2><p>web-view自动铺满整屏，无法自定义web-view窗口大小。且小程序页面没有任何组件能够高于webview的层级。</p>\n<h2 id=\"通信能力\"><a href=\"#通信能力\" class=\"headerlink\" title=\"通信能力\"></a>通信能力</h2><p>小程序向webview通信：url传参</p>\n<p>webview通信向小程序通信：jssdk.postmessage。非实时触发，触发条件：小程序后退、组件销毁（移除webview组件）、分享</p>\n<p>关于小程序后退、组件销毁、分享的时机，需要实际测试方知晓具体的限制。</p>\n<p>实时通信：暂时未提供</p>\n<h2 id=\"支付能力\"><a href=\"#支付能力\" class=\"headerlink\" title=\"支付能力\"></a>支付能力</h2><p>不支持H5内支付功能</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><p><a href=\"https://developers.weixin.qq.com/community/develop/doc/000ca683120980b88c98c12395b000\">小程序webview内嵌H5支付页面，H5能正常支付吗</a></p>\n</li>\n<li><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/web-view.html\">webview内的jssdk支持的api列表说明</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"个性化布局能力\"><a href=\"#个性化布局能力\" class=\"headerlink\" title=\"个性化布局能力\"></a>个性化布局能力</h2><p>web-view自动铺满整屏，无法自定义web-view窗口大小。且小程序页面没有任何组件能够高于webview的层级。</p>\n<h2 id=\"通信能力\"><a href=\"#通信能力\" class=\"headerlink\" title=\"通信能力\"></a>通信能力</h2><p>小程序向webview通信：url传参</p>\n<p>webview通信向小程序通信：jssdk.postmessage。非实时触发，触发条件：小程序后退、组件销毁（移除webview组件）、分享</p>\n<p>关于小程序后退、组件销毁、分享的时机，需要实际测试方知晓具体的限制。</p>\n<p>实时通信：暂时未提供</p>\n<h2 id=\"支付能力\"><a href=\"#支付能力\" class=\"headerlink\" title=\"支付能力\"></a>支付能力</h2><p>不支持H5内支付功能</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><p><a href=\"https://developers.weixin.qq.com/community/develop/doc/000ca683120980b88c98c12395b000\">小程序webview内嵌H5支付页面，H5能正常支付吗</a></p>\n</li>\n<li><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/component/web-view.html\">webview内的jssdk支持的api列表说明</a></p>\n</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cks1amc690001ecq84p474ck2","category_id":"cks1amc7j0021ecq8cxkj9wkw","_id":"cks1amca3006uecq873rv5jkh"},{"post_id":"cks1amc6c0002ecq88pd39qyx","category_id":"cks1amc7w0023ecq8avpe9ydo","_id":"cks1amca3006wecq8aiwv66jn"},{"post_id":"cks1amc6c0003ecq84xit3eno","category_id":"cks1amc7w0023ecq8avpe9ydo","_id":"cks1amca3006yecq8h3ct3jzr"},{"post_id":"cks1amc6d0004ecq88oxr0cq5","category_id":"cks1amc7w0023ecq8avpe9ydo","_id":"cks1amca40070ecq81a1rdcz8"},{"post_id":"cks1amc6e0005ecq86jp299vz","category_id":"cks1amc820029ecq8bq4v7sh4","_id":"cks1amca40072ecq89pxa99c4"},{"post_id":"cks1amc6e0006ecq8842vg0rx","category_id":"cks1amc82002becq8h7om9e2c","_id":"cks1amca40074ecq81q913t6o"},{"post_id":"cks1amc6f0007ecq8c21i9jwi","category_id":"cks1amc83002decq88hadh55a","_id":"cks1amca40076ecq8c0b1bch1"},{"post_id":"cks1amc6f0008ecq84ej0b8a2","category_id":"cks1amc84002fecq8e26acebs","_id":"cks1amca40078ecq8dt3160na"},{"post_id":"cks1amc6g0009ecq8c4049ghs","category_id":"cks1amc84002hecq8d5gq3nmr","_id":"cks1amca4007aecq899z3bunm"},{"post_id":"cks1amc6h000aecq868xg4gmm","category_id":"cks1amc85002jecq88mni010q","_id":"cks1amca4007cecq8a8ar6oif"},{"post_id":"cks1amc6h000becq8cs4410rt","category_id":"cks1amc84002hecq8d5gq3nmr","_id":"cks1amca4007eecq89emnhqpl"},{"post_id":"cks1amc6i000cecq84w9ahtln","category_id":"cks1amc87002necq8d6xb2fe9","_id":"cks1amca4007gecq892dccr9d"},{"post_id":"cks1amc6i000decq81njsc73x","category_id":"cks1amc85002jecq88mni010q","_id":"cks1amca4007iecq84dz66sj3"},{"post_id":"cks1amc6j000eecq857qua4jb","category_id":"cks1amc88002recq8e5ikbkdn","_id":"cks1amca5007kecq80nom6bh0"},{"post_id":"cks1amc6k000fecq8ao9wbh0k","category_id":"cks1amc82002becq8h7om9e2c","_id":"cks1amca5007mecq846wrbwrx"},{"post_id":"cks1amc6k000gecq8fk4ldaj8","category_id":"cks1amc85002jecq88mni010q","_id":"cks1amca5007oecq8aw77cs22"},{"post_id":"cks1amc6l000hecq82gieghy2","category_id":"cks1amc84002hecq8d5gq3nmr","_id":"cks1amca6007qecq80do013v1"},{"post_id":"cks1amc6l000iecq88b820d25","category_id":"cks1amc85002jecq88mni010q","_id":"cks1amca6007secq81ma0e7np"},{"post_id":"cks1amc6m000jecq86vq16nq9","category_id":"cks1amc7w0023ecq8avpe9ydo","_id":"cks1amca6007uecq85xo7giqu"},{"post_id":"cks1amc6n000kecq8bcp5gtzo","category_id":"cks1amc85002jecq88mni010q","_id":"cks1amca6007wecq8bl7ycf1b"},{"post_id":"cks1amc6n000lecq8abctb1me","category_id":"cks1amc85002jecq88mni010q","_id":"cks1amca6007yecq8brahgg0t"},{"post_id":"cks1amc6n000mecq838wghjle","category_id":"cks1amc83002decq88hadh55a","_id":"cks1amca60080ecq84ql6d7gh"},{"post_id":"cks1amc6o000necq81zw03ng1","category_id":"cks1amc83002decq88hadh55a","_id":"cks1amca60082ecq8d3jt3i6k"},{"post_id":"cks1amc6o000oecq8f8n3fcs1","category_id":"cks1amc83002decq88hadh55a","_id":"cks1amca60084ecq83hzrhd80"},{"post_id":"cks1amc6q000pecq87czu93cy","category_id":"cks1amc83002decq88hadh55a","_id":"cks1amca60086ecq87cbn2eq9"},{"post_id":"cks1amc6r000qecq8a5lm9udk","category_id":"cks1amc83002decq88hadh55a","_id":"cks1amca60088ecq87xd02jtn"},{"post_id":"cks1amc6r000recq8dcba1eki","category_id":"cks1amc8m003gecq8ck5l9vyw","_id":"cks1amca7008aecq877t6fvd5"},{"post_id":"cks1amc6s000secq86g2e10do","category_id":"cks1amc84002hecq8d5gq3nmr","_id":"cks1amca7008cecq8fseg8w56"},{"post_id":"cks1amc6s000tecq8dxr4g0q2","category_id":"cks1amc84002hecq8d5gq3nmr","_id":"cks1amca7008eecq8csfqb1ci"},{"post_id":"cks1amc6t000uecq817tteq2c","category_id":"cks1amc84002hecq8d5gq3nmr","_id":"cks1amca7008gecq85fdja4xv"},{"post_id":"cks1amc6t000vecq8ekuj3yxb","category_id":"cks1amc84002hecq8d5gq3nmr","_id":"cks1amca7008iecq81wv5bzp4"},{"post_id":"cks1amc6t000wecq8cq7u17i2","category_id":"cks1amc84002hecq8d5gq3nmr","_id":"cks1amca7008kecq84hqwh1bl"},{"post_id":"cks1amc6u000xecq8enkeb9x1","category_id":"cks1amc84002hecq8d5gq3nmr","_id":"cks1amca7008mecq8eopxh4zb"},{"post_id":"cks1amc6u000yecq8heemhgjs","category_id":"cks1amc84002hecq8d5gq3nmr","_id":"cks1amca7008oecq86hwb4oni"},{"post_id":"cks1amc6v000zecq88gu2ed33","category_id":"cks1amc84002hecq8d5gq3nmr","_id":"cks1amca7008qecq8580thwbd"},{"post_id":"cks1amc6v0010ecq8g4iz38kt","category_id":"cks1amc8u003yecq8grpc7h9h","_id":"cks1amca7008secq8e9n24mua"},{"post_id":"cks1amc6w0011ecq8920ffvrk","category_id":"cks1amc8u003yecq8grpc7h9h","_id":"cks1amca8008uecq8e40wh1s8"},{"post_id":"cks1amc6w0012ecq885di2f5y","category_id":"cks1amc8u003yecq8grpc7h9h","_id":"cks1amca8008wecq83os71nbc"},{"post_id":"cks1amc6w0013ecq81pkr4sha","category_id":"cks1amc8w0044ecq82zejblt1","_id":"cks1amca8008yecq84wp1apb8"},{"post_id":"cks1amc6y0014ecq856kyhfx7","category_id":"cks1amc8w0044ecq82zejblt1","_id":"cks1amca80090ecq85vw1a3y2"},{"post_id":"cks1amc6y0015ecq87xqk197l","category_id":"cks1amc8w0044ecq82zejblt1","_id":"cks1amca80092ecq8agihdwnp"},{"post_id":"cks1amc6z0016ecq8e5ghfp2w","category_id":"cks1amc8w0044ecq82zejblt1","_id":"cks1amca80094ecq8fiva1jos"},{"post_id":"cks1amc700017ecq88yu3e8wf","category_id":"cks1amc8w0044ecq82zejblt1","_id":"cks1amca80096ecq8afptch8c"},{"post_id":"cks1amc700018ecq88b218imb","category_id":"cks1amc8w0044ecq82zejblt1","_id":"cks1amca80098ecq8hrd204f5"},{"post_id":"cks1amc700019ecq8h2177uil","category_id":"cks1amc8w0044ecq82zejblt1","_id":"cks1amca8009aecq87eh9h2fo"},{"post_id":"cks1amc71001aecq88e4rcsb8","category_id":"cks1amc8w0044ecq82zejblt1","_id":"cks1amca8009cecq86haagngb"},{"post_id":"cks1amc71001becq8ao4fh23g","category_id":"cks1amc8w0044ecq82zejblt1","_id":"cks1amca9009eecq80p4qb3nm"},{"post_id":"cks1amc71001cecq813goebjd","category_id":"cks1amc8w0044ecq82zejblt1","_id":"cks1amca9009gecq8c5kbddy2"},{"post_id":"cks1amc72001decq83v1452y1","category_id":"cks1amc8w0044ecq82zejblt1","_id":"cks1amca9009iecq8arz37f50"},{"post_id":"cks1amc72001eecq813f58r0t","category_id":"cks1amc8w0044ecq82zejblt1","_id":"cks1amca9009kecq88pip1gal"},{"post_id":"cks1amc73001fecq806n2gtyy","category_id":"cks1amc8w0044ecq82zejblt1","_id":"cks1amca9009mecq82dp80f0l"},{"post_id":"cks1amc73001gecq8998s0a83","category_id":"cks1amc8w0044ecq82zejblt1","_id":"cks1amca9009oecq86kk79pph"},{"post_id":"cks1amc73001hecq875xpd7gn","category_id":"cks1amc97004vecq8bkgv658z","_id":"cks1amca9009qecq8gax7bfe9"},{"post_id":"cks1amc74001iecq8h7u53pnd","category_id":"cks1amc97004vecq8bkgv658z","_id":"cks1amca9009secq8a2s0fsa6"},{"post_id":"cks1amc74001jecq8dfb4gal4","category_id":"cks1amc97004vecq8bkgv658z","_id":"cks1amca9009uecq8apzp2pl2"},{"post_id":"cks1amc75001kecq8eo3dh8wb","category_id":"cks1amc7j0021ecq8cxkj9wkw","_id":"cks1amcaa009wecq854gdeywd"},{"post_id":"cks1amc75001lecq83om0dqpo","category_id":"cks1amc97004vecq8bkgv658z","_id":"cks1amcaa009yecq8curl6q42"},{"post_id":"cks1amc75001mecq8a6025hbv","category_id":"cks1amc97004vecq8bkgv658z","_id":"cks1amcaa00a0ecq8bnlngypf"},{"post_id":"cks1amc76001necq8d11968qq","category_id":"cks1amc97004vecq8bkgv658z","_id":"cks1amcaa00a2ecq83swd1wtx"},{"post_id":"cks1amc76001oecq8fv1kd0z4","category_id":"cks1amc97004vecq8bkgv658z","_id":"cks1amcaa00a4ecq88ilg69dh"},{"post_id":"cks1amc76001pecq865mg1g88","category_id":"cks1amc97004vecq8bkgv658z","_id":"cks1amcaa00a6ecq830rmb9rd"},{"post_id":"cks1amc77001qecq81z336u1y","category_id":"cks1amc7j0021ecq8cxkj9wkw","_id":"cks1amcaa00a8ecq87m8xepyz"},{"post_id":"cks1amc77001recq8gpxv9k0t","category_id":"cks1amc7j0021ecq8cxkj9wkw","_id":"cks1amcaa00aaecq8deva3twb"},{"post_id":"cks1amc78001secq85hsh00ws","category_id":"cks1amc7j0021ecq8cxkj9wkw","_id":"cks1amcaa00acecq8231x1s1i"},{"post_id":"cks1amc78001tecq8gnq13i3s","category_id":"cks1amc7w0023ecq8avpe9ydo","_id":"cks1amcaa00aeecq8htoh96qw"},{"post_id":"cks1amc79001uecq80mhgdd4h","category_id":"cks1amc7j0021ecq8cxkj9wkw","_id":"cks1amcaa00agecq839bjcg37"},{"post_id":"cks1amc79001vecq8h3xy8s7y","category_id":"cks1amc7j0021ecq8cxkj9wkw","_id":"cks1amcaa00aiecq8fmqlelgh"},{"post_id":"cks1amc7a001wecq8e4fqcn4x","category_id":"cks1amc9j005pecq80giecy4l","_id":"cks1amcab00akecq8gbh71bxo"},{"post_id":"cks1amc7a001xecq86emk5jh9","category_id":"cks1amc9j005pecq80giecy4l","_id":"cks1amcab00amecq8eqdc7vgf"},{"post_id":"cks1amc7a001yecq85bg7h9f0","category_id":"cks1amc9j005pecq80giecy4l","_id":"cks1amcab00aoecq80uj9hwia"},{"post_id":"cks1amc7b001zecq84uf9blfr","category_id":"cks1amc9j005pecq80giecy4l","_id":"cks1amcab00aqecq87nk2gt50"},{"post_id":"cks1amc7b0020ecq8gdqvc19j","category_id":"cks1amc9j005pecq80giecy4l","_id":"cks1amcac00asecq82smn6lfm"}],"PostTag":[{"post_id":"cks1amc690001ecq84p474ck2","tag_id":"cks1amc7v0022ecq80x9idejy","_id":"cks1amca3006tecq80yqkegrp"},{"post_id":"cks1amc690001ecq84p474ck2","tag_id":"cks1amc7w0024ecq8drwc068m","_id":"cks1amca3006vecq8a9s28n5q"},{"post_id":"cks1amc6c0002ecq88pd39qyx","tag_id":"cks1amc7x0026ecq86zxo6jp6","_id":"cks1amca3006xecq839agfut9"},{"post_id":"cks1amc6c0003ecq84xit3eno","tag_id":"cks1amc810028ecq81gg867pe","_id":"cks1amca4006zecq853d76v5m"},{"post_id":"cks1amc6e0005ecq86jp299vz","tag_id":"cks1amc82002aecq8b73xeewl","_id":"cks1amca40071ecq89v147rjj"},{"post_id":"cks1amc6e0006ecq8842vg0rx","tag_id":"cks1amc83002cecq84ctn2fb3","_id":"cks1amca40073ecq826ds3mb2"},{"post_id":"cks1amc6f0007ecq8c21i9jwi","tag_id":"cks1amc83002eecq828a05vqt","_id":"cks1amca40075ecq83rdt8pm4"},{"post_id":"cks1amc6f0008ecq84ej0b8a2","tag_id":"cks1amc84002gecq87nie2cnx","_id":"cks1amca40077ecq80fwb0bdu"},{"post_id":"cks1amc6g0009ecq8c4049ghs","tag_id":"cks1amc84002iecq8etmq6hcm","_id":"cks1amca40079ecq8gxch6ss9"},{"post_id":"cks1amc6h000aecq868xg4gmm","tag_id":"cks1amc84002iecq8etmq6hcm","_id":"cks1amca4007becq86vbsbyr7"},{"post_id":"cks1amc6h000becq8cs4410rt","tag_id":"cks1amc86002mecq8eguk1wsk","_id":"cks1amca4007decq8ddy62gxq"},{"post_id":"cks1amc6i000cecq84w9ahtln","tag_id":"cks1amc87002oecq87ltzcs8m","_id":"cks1amca4007fecq8h0cd9022"},{"post_id":"cks1amc6i000decq81njsc73x","tag_id":"cks1amc84002iecq8etmq6hcm","_id":"cks1amca4007hecq8cfx6dsb6"},{"post_id":"cks1amc6j000eecq857qua4jb","tag_id":"cks1amc89002secq8auli9lc8","_id":"cks1amca5007jecq8bojwhjxd"},{"post_id":"cks1amc6k000fecq8ao9wbh0k","tag_id":"cks1amc83002cecq84ctn2fb3","_id":"cks1amca5007lecq8hg5ofvvs"},{"post_id":"cks1amc6k000fecq8ao9wbh0k","tag_id":"cks1amc8b002wecq8a9n603ac","_id":"cks1amca5007necq80ebi5l78"},{"post_id":"cks1amc6k000gecq8fk4ldaj8","tag_id":"cks1amc84002iecq8etmq6hcm","_id":"cks1amca6007pecq882e00l0y"},{"post_id":"cks1amc6l000hecq82gieghy2","tag_id":"cks1amc8c0030ecq8ewrx98bn","_id":"cks1amca6007recq87qbk568e"},{"post_id":"cks1amc6l000iecq88b820d25","tag_id":"cks1amc8d0032ecq81cvgcqpy","_id":"cks1amca6007tecq82cdgef1x"},{"post_id":"cks1amc6m000jecq86vq16nq9","tag_id":"cks1amc8e0034ecq80sl8fluw","_id":"cks1amca6007vecq8dwye7ydc"},{"post_id":"cks1amc6m000jecq86vq16nq9","tag_id":"cks1amc8f0036ecq89arc595l","_id":"cks1amca6007xecq8d4p51a7v"},{"post_id":"cks1amc6n000kecq8bcp5gtzo","tag_id":"cks1amc810028ecq81gg867pe","_id":"cks1amca6007zecq8fqz89fgq"},{"post_id":"cks1amc6n000lecq8abctb1me","tag_id":"cks1amc8i003aecq876jcehw2","_id":"cks1amca60081ecq8aze4bb5c"},{"post_id":"cks1amc6n000mecq838wghjle","tag_id":"cks1amc8j003decq8ejue2wvx","_id":"cks1amca60083ecq8aiek7twj"},{"post_id":"cks1amc6o000necq81zw03ng1","tag_id":"cks1amc8j003decq8ejue2wvx","_id":"cks1amca60085ecq88thy1x2s"},{"post_id":"cks1amc6o000oecq8f8n3fcs1","tag_id":"cks1amc8j003decq8ejue2wvx","_id":"cks1amca60087ecq829hkhhco"},{"post_id":"cks1amc6q000pecq87czu93cy","tag_id":"cks1amc8j003decq8ejue2wvx","_id":"cks1amca60089ecq8d9ebeu8q"},{"post_id":"cks1amc6r000qecq8a5lm9udk","tag_id":"cks1amc8j003decq8ejue2wvx","_id":"cks1amca7008becq8dm76chw6"},{"post_id":"cks1amc6r000recq8dcba1eki","tag_id":"cks1amc8p003necq86uou1a21","_id":"cks1amca7008decq885mv9pss"},{"post_id":"cks1amc6s000secq86g2e10do","tag_id":"cks1amc8q003pecq8al0q1gld","_id":"cks1amca7008fecq80tqa6v3t"},{"post_id":"cks1amc6s000secq86g2e10do","tag_id":"cks1amc8r003recq8bnqt1p6v","_id":"cks1amca7008hecq898p7h19i"},{"post_id":"cks1amc6s000tecq8dxr4g0q2","tag_id":"cks1amc8r003tecq80srt4c8a","_id":"cks1amca7008jecq853pr057b"},{"post_id":"cks1amc6t000uecq817tteq2c","tag_id":"cks1amc8s003vecq80s4r9zqd","_id":"cks1amca7008lecq85ndq6xdm"},{"post_id":"cks1amc6t000uecq817tteq2c","tag_id":"cks1amc8r003recq8bnqt1p6v","_id":"cks1amca7008necq84wh55u6d"},{"post_id":"cks1amc6t000vecq8ekuj3yxb","tag_id":"cks1amc8r003tecq80srt4c8a","_id":"cks1amca7008pecq89en1elvc"},{"post_id":"cks1amc6t000wecq8cq7u17i2","tag_id":"cks1amc8s003vecq80s4r9zqd","_id":"cks1amca7008recq8hcfp1trq"},{"post_id":"cks1amc6u000xecq8enkeb9x1","tag_id":"cks1amc8w0043ecq8h5d3fgtx","_id":"cks1amca8008tecq80eks2bbc"},{"post_id":"cks1amc6u000yecq8heemhgjs","tag_id":"cks1amc8x0045ecq80vef15py","_id":"cks1amca8008vecq842j7616r"},{"post_id":"cks1amc6v000zecq88gu2ed33","tag_id":"cks1amc8y0047ecq8bqc01bku","_id":"cks1amca8008xecq87zkfd427"},{"post_id":"cks1amc6v0010ecq8g4iz38kt","tag_id":"cks1amc8y0049ecq80awybqvl","_id":"cks1amca8008zecq85l15a6g5"},{"post_id":"cks1amc6v0010ecq8g4iz38kt","tag_id":"cks1amc8r003recq8bnqt1p6v","_id":"cks1amca80091ecq8bv41cw4h"},{"post_id":"cks1amc6w0011ecq8920ffvrk","tag_id":"cks1amc8y0049ecq80awybqvl","_id":"cks1amca80093ecq8aaut38dd"},{"post_id":"cks1amc6w0012ecq885di2f5y","tag_id":"cks1amc8y0049ecq80awybqvl","_id":"cks1amca80095ecq84o30cuwb"},{"post_id":"cks1amc6w0013ecq81pkr4sha","tag_id":"cks1amc91004hecq8b9pb00y4","_id":"cks1amca80097ecq8bv1mfot2"},{"post_id":"cks1amc6y0014ecq856kyhfx7","tag_id":"cks1amc92004kecq8dab3d5gm","_id":"cks1amca80099ecq823gsda6h"},{"post_id":"cks1amc6y0014ecq856kyhfx7","tag_id":"cks1amc91004hecq8b9pb00y4","_id":"cks1amca8009becq8accrg3rh"},{"post_id":"cks1amc6y0015ecq87xqk197l","tag_id":"cks1amc94004oecq84unse628","_id":"cks1amca9009decq828u8c4dl"},{"post_id":"cks1amc6y0015ecq87xqk197l","tag_id":"cks1amc91004hecq8b9pb00y4","_id":"cks1amca9009fecq8dbqphfhk"},{"post_id":"cks1amc6z0016ecq8e5ghfp2w","tag_id":"cks1amc94004oecq84unse628","_id":"cks1amca9009hecq8edn90o1z"},{"post_id":"cks1amc6z0016ecq8e5ghfp2w","tag_id":"cks1amc91004hecq8b9pb00y4","_id":"cks1amca9009jecq81b329hth"},{"post_id":"cks1amc700017ecq88yu3e8wf","tag_id":"cks1amc94004oecq84unse628","_id":"cks1amca9009lecq88hqad8fi"},{"post_id":"cks1amc700017ecq88yu3e8wf","tag_id":"cks1amc91004hecq8b9pb00y4","_id":"cks1amca9009necq80o4w4ufy"},{"post_id":"cks1amc700018ecq88b218imb","tag_id":"cks1amc990050ecq8h69l1ana","_id":"cks1amca9009pecq86hzdhnup"},{"post_id":"cks1amc700018ecq88b218imb","tag_id":"cks1amc91004hecq8b9pb00y4","_id":"cks1amca9009recq855kx12j9"},{"post_id":"cks1amc700019ecq8h2177uil","tag_id":"cks1amc9b0054ecq84fewen7b","_id":"cks1amca9009tecq8av3e7puy"},{"post_id":"cks1amc700019ecq8h2177uil","tag_id":"cks1amc91004hecq8b9pb00y4","_id":"cks1amca9009vecq813fgai2i"},{"post_id":"cks1amc71001aecq88e4rcsb8","tag_id":"cks1amc9d0058ecq8dku6ck6o","_id":"cks1amcaa009xecq85riiexew"},{"post_id":"cks1amc71001aecq88e4rcsb8","tag_id":"cks1amc91004hecq8b9pb00y4","_id":"cks1amcaa009zecq8cvtvdwo5"},{"post_id":"cks1amc71001becq8ao4fh23g","tag_id":"cks1amc9e005cecq81rx8gl6o","_id":"cks1amcaa00a1ecq88d2fejak"},{"post_id":"cks1amc71001becq8ao4fh23g","tag_id":"cks1amc91004hecq8b9pb00y4","_id":"cks1amcaa00a3ecq8dsdudk4t"},{"post_id":"cks1amc71001cecq813goebjd","tag_id":"cks1amc9g005gecq840j0eu16","_id":"cks1amcaa00a5ecq88c20h7dq"},{"post_id":"cks1amc71001cecq813goebjd","tag_id":"cks1amc91004hecq8b9pb00y4","_id":"cks1amcaa00a7ecq8cgxj2nys"},{"post_id":"cks1amc72001decq83v1452y1","tag_id":"cks1amc9h005kecq8ewt11qp9","_id":"cks1amcaa00a9ecq85g76gonl"},{"post_id":"cks1amc72001decq83v1452y1","tag_id":"cks1amc91004hecq8b9pb00y4","_id":"cks1amcaa00abecq8ew5x1rbw"},{"post_id":"cks1amc72001eecq813f58r0t","tag_id":"cks1amc9e005cecq81rx8gl6o","_id":"cks1amcaa00adecq8e9uehhqb"},{"post_id":"cks1amc72001eecq813f58r0t","tag_id":"cks1amc91004hecq8b9pb00y4","_id":"cks1amcaa00afecq8h3n97x87"},{"post_id":"cks1amc73001fecq806n2gtyy","tag_id":"cks1amc9k005secq8596m87kh","_id":"cks1amcaa00ahecq8fwaq7qzj"},{"post_id":"cks1amc73001fecq806n2gtyy","tag_id":"cks1amc91004hecq8b9pb00y4","_id":"cks1amcab00ajecq891rzbcxd"},{"post_id":"cks1amc73001gecq8998s0a83","tag_id":"cks1amc9m005wecq8cnzfhzg8","_id":"cks1amcab00alecq80am379az"},{"post_id":"cks1amc73001gecq8998s0a83","tag_id":"cks1amc91004hecq8b9pb00y4","_id":"cks1amcab00anecq81br1084t"},{"post_id":"cks1amc73001hecq875xpd7gn","tag_id":"cks1amc9n005zecq8g15m2rgb","_id":"cks1amcab00apecq873nmg5o3"},{"post_id":"cks1amc74001iecq8h7u53pnd","tag_id":"cks1amc9n005zecq8g15m2rgb","_id":"cks1amcab00arecq8e3f2hqf3"},{"post_id":"cks1amc74001jecq8dfb4gal4","tag_id":"cks1amc9n005zecq8g15m2rgb","_id":"cks1amcac00atecq8ay1l7pgu"},{"post_id":"cks1amc75001kecq8eo3dh8wb","tag_id":"cks1amc9o0062ecq86vtx03xa","_id":"cks1amcac00auecq826xp83k6"},{"post_id":"cks1amc75001kecq8eo3dh8wb","tag_id":"cks1amc9p0063ecq828p0dehl","_id":"cks1amcac00avecq80zcx05oh"},{"post_id":"cks1amc75001lecq83om0dqpo","tag_id":"cks1amc9n005zecq8g15m2rgb","_id":"cks1amcac00awecq87whsff55"},{"post_id":"cks1amc75001lecq83om0dqpo","tag_id":"cks1amc9p0065ecq8cy743kzk","_id":"cks1amcac00axecq8bfn2dlf6"},{"post_id":"cks1amc75001mecq8a6025hbv","tag_id":"cks1amc9n005zecq8g15m2rgb","_id":"cks1amcac00ayecq8hn209fq7"},{"post_id":"cks1amc76001necq8d11968qq","tag_id":"cks1amc9n005zecq8g15m2rgb","_id":"cks1amcac00azecq8ejhi3vlx"},{"post_id":"cks1amc76001necq8d11968qq","tag_id":"cks1amc9q0068ecq86ntlbnig","_id":"cks1amcac00b0ecq82cgffppm"},{"post_id":"cks1amc76001oecq8fv1kd0z4","tag_id":"cks1amc9n005zecq8g15m2rgb","_id":"cks1amcac00b1ecq87zl37z1n"},{"post_id":"cks1amc76001pecq865mg1g88","tag_id":"cks1amc9n005zecq8g15m2rgb","_id":"cks1amcac00b2ecq8gwtqcelu"},{"post_id":"cks1amc77001qecq81z336u1y","tag_id":"cks1amc9s006becq8f2y4hh37","_id":"cks1amcac00b3ecq80mzeg7d3"},{"post_id":"cks1amc77001qecq81z336u1y","tag_id":"cks1amc9s006cecq84aq91kfc","_id":"cks1amcac00b4ecq81ccv4mww"},{"post_id":"cks1amc77001recq8gpxv9k0t","tag_id":"cks1amc9s006becq8f2y4hh37","_id":"cks1amcac00b5ecq8a5pnapkk"},{"post_id":"cks1amc77001recq8gpxv9k0t","tag_id":"cks1amc9t006eecq820423yrn","_id":"cks1amcac00b6ecq8abp96m24"},{"post_id":"cks1amc78001secq85hsh00ws","tag_id":"cks1amc9t006fecq86o4709bf","_id":"cks1amcad00b7ecq8b3oq6rpo"},{"post_id":"cks1amc78001secq85hsh00ws","tag_id":"cks1amc9s006becq8f2y4hh37","_id":"cks1amcad00b8ecq8h9z06y39"},{"post_id":"cks1amc78001tecq8gnq13i3s","tag_id":"cks1amc9u006hecq82cca5tlp","_id":"cks1amcad00b9ecq8ejm9fqu7"},{"post_id":"cks1amc78001tecq8gnq13i3s","tag_id":"cks1amc9s006becq8f2y4hh37","_id":"cks1amcad00baecq814zw471b"},{"post_id":"cks1amc79001uecq80mhgdd4h","tag_id":"cks1amc9t006fecq86o4709bf","_id":"cks1amcad00bbecq8cxdtbga4"},{"post_id":"cks1amc79001vecq8h3xy8s7y","tag_id":"cks1amc9s006becq8f2y4hh37","_id":"cks1amcad00bcecq8conce9u2"},{"post_id":"cks1amc7a001wecq8e4fqcn4x","tag_id":"cks1amc9w006lecq88y34170g","_id":"cks1amcad00bdecq8fsmi7pk2"},{"post_id":"cks1amc7a001wecq8e4fqcn4x","tag_id":"cks1amc9w006mecq8hi5sbd9c","_id":"cks1amcad00beecq8bw2g95px"},{"post_id":"cks1amc7a001xecq86emk5jh9","tag_id":"cks1amc9w006necq88rs086tc","_id":"cks1amcad00bfecq8e0rle20e"},{"post_id":"cks1amc7a001xecq86emk5jh9","tag_id":"cks1amc9w006oecq8678vbxi5","_id":"cks1amcad00bgecq8h6ui39k3"},{"post_id":"cks1amc7a001yecq85bg7h9f0","tag_id":"cks1amc9w006oecq8678vbxi5","_id":"cks1amcad00bhecq87a7b0vqu"},{"post_id":"cks1amc7a001yecq85bg7h9f0","tag_id":"cks1amc8j003decq8ejue2wvx","_id":"cks1amcad00biecq8grc8esd6"},{"post_id":"cks1amc7b001zecq84uf9blfr","tag_id":"cks1amc9w006mecq8hi5sbd9c","_id":"cks1amcad00bjecq8bkbyc97e"},{"post_id":"cks1amc7b0020ecq8gdqvc19j","tag_id":"cks1amc9w006mecq8hi5sbd9c","_id":"cks1amcad00bkecq89jm19akb"}],"Tag":[{"name":"微前端","_id":"cks1amc7v0022ecq80x9idejy"},{"name":"qiankun","_id":"cks1amc7w0024ecq8drwc068m"},{"name":"百度地图sdk","_id":"cks1amc7x0026ecq86zxo6jp6"},{"name":"base64","_id":"cks1amc810028ecq81gg867pe"},{"name":"CSP","_id":"cks1amc82002aecq8b73xeewl"},{"name":"js","_id":"cks1amc83002cecq84ctn2fb3"},{"name":"布局","_id":"cks1amc83002eecq828a05vqt"},{"name":"https","_id":"cks1amc84002gecq87nie2cnx"},{"name":"javascript","_id":"cks1amc84002iecq8etmq6hcm"},{"name":"linux","_id":"cks1amc86002mecq8eguk1wsk"},{"name":"H5","_id":"cks1amc87002oecq87ltzcs8m"},{"name":"html","_id":"cks1amc89002secq8auli9lc8"},{"name":"原型链","_id":"cks1amc8b002wecq8a9n603ac"},{"name":"代理","_id":"cks1amc8c0030ecq8ewrx98bn"},{"name":"正则","_id":"cks1amc8d0032ecq81cvgcqpy"},{"name":"权限","_id":"cks1amc8e0034ecq80sl8fluw"},{"name":"运营后台","_id":"cks1amc8f0036ecq89arc595l"},{"name":"防抖节流","_id":"cks1amc8i003aecq876jcehw2"},{"name":"css","_id":"cks1amc8j003decq8ejue2wvx"},{"name":"nuxt","_id":"cks1amc8p003necq86uou1a21"},{"name":"charles","_id":"cks1amc8q003pecq8al0q1gld"},{"name":"debug","_id":"cks1amc8r003recq8bnqt1p6v"},{"name":"git","_id":"cks1amc8r003tecq80srt4c8a"},{"name":"fiddler","_id":"cks1amc8s003vecq80s4r9zqd"},{"name":"npm","_id":"cks1amc8w0043ecq8h5d3fgtx"},{"name":"Jenkins","_id":"cks1amc8x0045ecq80vef15py"},{"name":"vscode","_id":"cks1amc8y0047ecq8bqc01bku"},{"name":"学习","_id":"cks1amc8y0049ecq80awybqvl"},{"name":"uni-app","_id":"cks1amc91004hecq8b9pb00y4"},{"name":"打包路径","_id":"cks1amc92004kecq8dab3d5gm"},{"name":"组件","_id":"cks1amc94004oecq84unse628"},{"name":"条件编译","_id":"cks1amc990050ecq8h69l1ana"},{"name":"环境变量","_id":"cks1amc9b0054ecq84fewen7b"},{"name":"错误捕获","_id":"cks1amc9d0058ecq8dku6ck6o"},{"name":"rpx","_id":"cks1amc9e005cecq81rx8gl6o"},{"name":"treeShaking","_id":"cks1amc9g005gecq840j0eu16"},{"name":"长按复制","_id":"cks1amc9h005kecq8ewt11qp9"},{"name":"分包优化","_id":"cks1amc9k005secq8596m87kh"},{"name":"thread-loader","_id":"cks1amc9m005wecq8cnzfhzg8"},{"name":"vue","_id":"cks1amc9n005zecq8g15m2rgb"},{"name":"全局样式","_id":"cks1amc9o0062ecq86vtx03xa"},{"name":"vue-cli","_id":"cks1amc9p0063ecq828p0dehl"},{"name":"node-reuse","_id":"cks1amc9p0065ecq8cy743kzk"},{"name":"vue-router","_id":"cks1amc9q0068ecq86ntlbnig"},{"name":"webpack","_id":"cks1amc9s006becq8f2y4hh37"},{"name":"cdn","_id":"cks1amc9s006cecq84aq91kfc"},{"name":"chunk","_id":"cks1amc9t006eecq820423yrn"},{"name":"tapable","_id":"cks1amc9t006fecq86o4709bf"},{"name":"sourcemap","_id":"cks1amc9u006hecq82cca5tlp"},{"name":"微信开发者工具","_id":"cks1amc9w006lecq88y34170g"},{"name":"mp-weixin","_id":"cks1amc9w006mecq8hi5sbd9c"},{"name":"微信","_id":"cks1amc9w006necq88rs086tc"},{"name":"小程序","_id":"cks1amc9w006oecq8678vbxi5"}]}}